# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _snap.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_snap', [dirname(__file__)])
        except ImportError:
            import _snap
            return _snap
        if fp is not None:
            try:
                _mod = imp.load_module('_snap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _snap = swig_import_helper()
    del swig_import_helper
else:
    import _snap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SNAP_ALL = _snap.SNAP_ALL
Version = "2.0.5-mag"


def print_array(*args):
  """
    print_array(int x, int length)
    Parameters:
       x: int * value
       length: int value

       x: int * value
       length: int value

    """
  return _snap.print_array(*args)

def PyTFltV(*args):
  """
    PyTFltV(double x) -> TFltV
    Parameters:
       x: double [10] value

       x: double [10] value

    """
  return _snap.PyTFltV(*args)

def PyToTIntV(*args):
  """
    PyToTIntV(int array) -> TIntV
    Parameters:
       array: int * value

       array: int * value

    """
  return _snap.PyToTIntV(*args)

def count(*args):
  """
    count(char str, char c) -> int
    Parameters:
       str: char * value
       c: char value

       str: char * value
       c: char value

    """
  return _snap.count(*args)

def TIntVToPy(*args):
  """
    TIntVToPy(TIntV originalList)
    Parameters:
       originalList: TIntV value

       originalList: TIntV value

    """
  return _snap.TIntVToPy(*args)
lUndef = _snap.lUndef
lUs = _snap.lUs
lSi = _snap.lSi

def WrNotify(*args):
  """
    WrNotify(char CaptionCStr, char NotifyCStr)
    Parameters:
       CaptionCStr: char const * value
       NotifyCStr: char const * value

       CaptionCStr: char const * value
       NotifyCStr: char const * value

    """
  return _snap.WrNotify(*args)

def SaveToErrLog(*args):
  """
    SaveToErrLog(char MsgCStr)
    Parameters:
       MsgCStr: char const * value

       MsgCStr: char const * value

    """
  return _snap.SaveToErrLog(*args)

def ExeStop(*args):
  """
    ExeStop(char MsgStr, char ReasonStr, char CondStr, char FNm, 
        int LnN)
    Parameters:
       MsgStr: char const * value
       ReasonStr: char const * value
       CondStr: char const * value
       FNm: char const * value
       LnN: int const & value

       MsgStr: char const * value
       ReasonStr: char const * value
       CondStr: char const * value
       FNm: char const * value
       LnN: int const & value

    """
  return _snap.ExeStop(*args)
loUndef = _snap.loUndef
loNot = _snap.loNot
loAnd = _snap.loAnd
loOr = _snap.loOr
roUndef = _snap.roUndef
roLs = _snap.roLs
roLEq = _snap.roLEq
roEq = _snap.roEq
roNEq = _snap.roNEq
roGEq = _snap.roGEq
roGt = _snap.roGt
class TCRef(object):
    """Proxy of C++ TCRef class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TCRef"""
        _snap.TCRef_swiginit(self,_snap.new_TCRef())
    __swig_destroy__ = _snap.delete_TCRef
    def MkRef(self):
        """
        MkRef(self)
        Parameters:
           self: TCRef * value




        """
        return _snap.TCRef_MkRef(self)

    def UnRef(self):
        """
        UnRef(self)
        Parameters:
           self: TCRef * value




        """
        return _snap.TCRef_UnRef(self)

    def NoRef(self):
        """
        NoRef(self) -> bool
        Parameters:
           self: TCRef const * value




        """
        return _snap.TCRef_NoRef(self)

    def GetRefs(self):
        """
        GetRefs(self) -> int
        Parameters:
           self: TCRef const * value




        """
        return _snap.TCRef_GetRefs(self)

TCRef.MkRef = new_instancemethod(_snap.TCRef_MkRef,None,TCRef)
TCRef.UnRef = new_instancemethod(_snap.TCRef_UnRef,None,TCRef)
TCRef.NoRef = new_instancemethod(_snap.TCRef_NoRef,None,TCRef)
TCRef.GetRefs = new_instancemethod(_snap.TCRef_GetRefs,None,TCRef)
TCRef_swigregister = _snap.TCRef_swigregister
TCRef_swigregister(TCRef)

class TSStr(object):
    """Proxy of C++ TSStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TSStr
        __init__(self, TSStr SStr) -> TSStr
        Parameters:
           SStr: TSStr const & value

           SStr: TSStr const & value

        __init__(self, char _Bf) -> TSStr
        Parameters:
           _Bf: char const * value

           _Bf: char const * value

        """
        _snap.TSStr_swiginit(self,_snap.new_TSStr(*args))
    __swig_destroy__ = _snap.delete_TSStr
    def CStr(self, *args):
        """
        CStr(self) -> char
        CStr(self) -> char
        Parameters:
           self: TSStr const * value


        """
        return _snap.TSStr_CStr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TSStr const * value




        """
        return _snap.TSStr_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TSStr const * value




        """
        return _snap.TSStr_Len(self)

TSStr.CStr = new_instancemethod(_snap.TSStr_CStr,None,TSStr)
TSStr.Empty = new_instancemethod(_snap.TSStr_Empty,None,TSStr)
TSStr.Len = new_instancemethod(_snap.TSStr_Len,None,TSStr)
TSStr_swigregister = _snap.TSStr_swigregister
TSStr_swigregister(TSStr)

class TConv_Pt64Ints32(object):
    """Proxy of C++ TConv_Pt64Ints32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TConv_Pt64Ints32
        __init__(self, void Pt) -> TConv_Pt64Ints32
        Parameters:
           Pt: void * value

           Pt: void * value

        __init__(self, uint Ms, uint Ls) -> TConv_Pt64Ints32
        Parameters:
           Ms: uint const & value
           Ls: uint const & value

           Ms: uint const & value
           Ls: uint const & value

        """
        _snap.TConv_Pt64Ints32_swiginit(self,_snap.new_TConv_Pt64Ints32(*args))
    def PutPt(self, *args):
        """
        PutPt(self, void Pt)
        Parameters:
           self: TConv_Pt64Ints32 * value
           Pt: void * value

           Pt: void * value

        """
        return _snap.TConv_Pt64Ints32_PutPt(self, *args)

    def GetPt(self):
        """
        GetPt(self) -> void
        Parameters:
           self: TConv_Pt64Ints32 const * value




        """
        return _snap.TConv_Pt64Ints32_GetPt(self)

    def PutUInt64(self, *args):
        """
        PutUInt64(self, uint64 _UInt64)
        Parameters:
           self: TConv_Pt64Ints32 * value
           _UInt64: uint64 const & value

           _UInt64: uint64 const & value

        """
        return _snap.TConv_Pt64Ints32_PutUInt64(self, *args)

    def GetUInt64(self):
        """
        GetUInt64(self) -> uint64
        Parameters:
           self: TConv_Pt64Ints32 const * value




        """
        return _snap.TConv_Pt64Ints32_GetUInt64(self)

    def PutMsUInt32(self, *args):
        """
        PutMsUInt32(self, uint Ms)
        Parameters:
           self: TConv_Pt64Ints32 * value
           Ms: uint const & value

           Ms: uint const & value

        """
        return _snap.TConv_Pt64Ints32_PutMsUInt32(self, *args)

    def GetMsUInt32(self):
        """
        GetMsUInt32(self) -> uint
        Parameters:
           self: TConv_Pt64Ints32 const * value




        """
        return _snap.TConv_Pt64Ints32_GetMsUInt32(self)

    def PutLsUInt32(self, *args):
        """
        PutLsUInt32(self, uint Ls)
        Parameters:
           self: TConv_Pt64Ints32 * value
           Ls: uint const & value

           Ls: uint const & value

        """
        return _snap.TConv_Pt64Ints32_PutLsUInt32(self, *args)

    def GetLsUInt32(self):
        """
        GetLsUInt32(self) -> uint
        Parameters:
           self: TConv_Pt64Ints32 const * value




        """
        return _snap.TConv_Pt64Ints32_GetLsUInt32(self)

    __swig_destroy__ = _snap.delete_TConv_Pt64Ints32
TConv_Pt64Ints32.PutPt = new_instancemethod(_snap.TConv_Pt64Ints32_PutPt,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetPt = new_instancemethod(_snap.TConv_Pt64Ints32_GetPt,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.PutUInt64 = new_instancemethod(_snap.TConv_Pt64Ints32_PutUInt64,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetUInt64 = new_instancemethod(_snap.TConv_Pt64Ints32_GetUInt64,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.PutMsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_PutMsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetMsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_GetMsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.PutLsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_PutLsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32.GetLsUInt32 = new_instancemethod(_snap.TConv_Pt64Ints32_GetLsUInt32,None,TConv_Pt64Ints32)
TConv_Pt64Ints32_swigregister = _snap.TConv_Pt64Ints32_swigregister
TConv_Pt64Ints32_swigregister(TConv_Pt64Ints32)

class TPairHashImpl1(object):
    """Proxy of C++ TPairHashImpl1 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetHashCd(*args):
        """
        GetHashCd(int hc1, int hc2) -> int
        Parameters:
           hc1: int const value
           hc2: int const value

           hc1: int const value
           hc2: int const value

           hc1: int const value
           hc2: int const value

        """
        return _snap.TPairHashImpl1_GetHashCd(*args)

    GetHashCd = staticmethod(GetHashCd)
    def __init__(self): 
        """__init__(self) -> TPairHashImpl1"""
        _snap.TPairHashImpl1_swiginit(self,_snap.new_TPairHashImpl1())
    __swig_destroy__ = _snap.delete_TPairHashImpl1
TPairHashImpl1_swigregister = _snap.TPairHashImpl1_swigregister
TPairHashImpl1_swigregister(TPairHashImpl1)

def TPairHashImpl1_GetHashCd(*args):
  """
    TPairHashImpl1_GetHashCd(int hc1, int hc2) -> int
    Parameters:
       hc1: int const value
       hc2: int const value

       hc1: int const value
       hc2: int const value

    """
  return _snap.TPairHashImpl1_GetHashCd(*args)

class TPairHashImpl2(object):
    """Proxy of C++ TPairHashImpl2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetHashCd(*args):
        """
        GetHashCd(int hc1, int hc2) -> int
        Parameters:
           hc1: int const value
           hc2: int const value

           hc1: int const value
           hc2: int const value

           hc1: int const value
           hc2: int const value

        """
        return _snap.TPairHashImpl2_GetHashCd(*args)

    GetHashCd = staticmethod(GetHashCd)
    def __init__(self): 
        """__init__(self) -> TPairHashImpl2"""
        _snap.TPairHashImpl2_swiginit(self,_snap.new_TPairHashImpl2())
    __swig_destroy__ = _snap.delete_TPairHashImpl2
TPairHashImpl2_swigregister = _snap.TPairHashImpl2_swigregister
TPairHashImpl2_swigregister(TPairHashImpl2)

def TPairHashImpl2_GetHashCd(*args):
  """
    TPairHashImpl2_GetHashCd(int hc1, int hc2) -> int
    Parameters:
       hc1: int const value
       hc2: int const value

       hc1: int const value
       hc2: int const value

    """
  return _snap.TPairHashImpl2_GetHashCd(*args)

class TRnd(object):
    """Proxy of C++ TRnd class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, int _Seed = 1, int Steps = 0) -> TRnd
        Parameters:
           _Seed: int const & value
           Steps: int const & value

           _Seed: int const & value
           Steps: int const & value

        __init__(self, int _Seed = 1) -> TRnd
        Parameters:
           _Seed: int const & value

           _Seed: int const & value

        __init__(self) -> TRnd
        __init__(self, TSIn SIn) -> TRnd
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TRnd_swiginit(self,_snap.new_TRnd(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TRnd const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TRnd_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TRnd arg0) -> bool
        Parameters:
           self: TRnd const * value
           arg2: TRnd const & value

           : TRnd const & value

        """
        return _snap.TRnd___eq__(self, *args)

    def GetUniDev(self):
        """
        GetUniDev(self) -> double
        Parameters:
           self: TRnd * value




        """
        return _snap.TRnd_GetUniDev(self)

    def GetUniDevInt(self, *args):
        """
        GetUniDevInt(self, int Range = 0) -> int
        Parameters:
           Range: int const & value

           Range: int const & value

        GetUniDevInt(self) -> int
        GetUniDevInt(self, int MnVal, int MxVal) -> int
        Parameters:
           self: TRnd * value
           MnVal: int const & value
           MxVal: int const & value

           MnVal: int const & value
           MxVal: int const & value

        """
        return _snap.TRnd_GetUniDevInt(self, *args)

    def GetUniDevUInt(self, Range = 0):
        """
        GetUniDevUInt(self, uint Range = 0) -> uint
        Parameters:
           Range: uint const & value

           Range: uint const & value

           Range: uint const & value

           Range: uint const & value

        GetUniDevUInt(self) -> uint
        Parameters:
           self: TRnd * value


        """
        return _snap.TRnd_GetUniDevUInt(self, Range)

    def GetUniDevInt64(self, Range = 0):
        """
        GetUniDevInt64(self, int64 Range = 0) -> int64
        Parameters:
           Range: int64 const & value

           Range: int64 const & value

           Range: int64 const & value

           Range: int64 const & value

        GetUniDevInt64(self) -> int64
        Parameters:
           self: TRnd * value


        """
        return _snap.TRnd_GetUniDevInt64(self, Range)

    def GetUniDevUInt64(self, Range = 0):
        """
        GetUniDevUInt64(self, uint64 Range = 0) -> uint64
        Parameters:
           Range: uint64 const & value

           Range: uint64 const & value

           Range: uint64 const & value

           Range: uint64 const & value

        GetUniDevUInt64(self) -> uint64
        Parameters:
           self: TRnd * value


        """
        return _snap.TRnd_GetUniDevUInt64(self, Range)

    def GetNrmDev(self, *args):
        """
        GetNrmDev(self) -> double
        GetNrmDev(self, double Mean, double SDev, double Mn, double Mx) -> double
        Parameters:
           self: TRnd * value
           Mean: double const & value
           SDev: double const & value
           Mn: double const & value
           Mx: double const & value

           Mean: double const & value
           SDev: double const & value
           Mn: double const & value
           Mx: double const & value

        """
        return _snap.TRnd_GetNrmDev(self, *args)

    def GetExpDev(self, *args):
        """
        GetExpDev(self) -> double
        GetExpDev(self, double Lambda) -> double
        Parameters:
           self: TRnd * value
           Lambda: double const & value

           Lambda: double const & value

        """
        return _snap.TRnd_GetExpDev(self, *args)

    def GetGammaDev(self, *args):
        """
        GetGammaDev(self, int Order) -> double
        Parameters:
           self: TRnd * value
           Order: int const & value

           Order: int const & value

        """
        return _snap.TRnd_GetGammaDev(self, *args)

    def GetPoissonDev(self, *args):
        """
        GetPoissonDev(self, double Mean) -> double
        Parameters:
           self: TRnd * value
           Mean: double const & value

           Mean: double const & value

        """
        return _snap.TRnd_GetPoissonDev(self, *args)

    def GetBinomialDev(self, *args):
        """
        GetBinomialDev(self, double Prb, int Trials) -> double
        Parameters:
           self: TRnd * value
           Prb: double const & value
           Trials: int const & value

           Prb: double const & value
           Trials: int const & value

        """
        return _snap.TRnd_GetBinomialDev(self, *args)

    def GetGeoDev(self, *args):
        """
        GetGeoDev(self, double Prb) -> int
        Parameters:
           self: TRnd * value
           Prb: double const & value

           Prb: double const & value

        """
        return _snap.TRnd_GetGeoDev(self, *args)

    def GetPowerDev(self, *args):
        """
        GetPowerDev(self, double AlphaSlope) -> double
        Parameters:
           self: TRnd * value
           AlphaSlope: double const & value

           AlphaSlope: double const & value

        """
        return _snap.TRnd_GetPowerDev(self, *args)

    def GetRayleigh(self, *args):
        """
        GetRayleigh(self, double Sigma) -> double
        Parameters:
           self: TRnd * value
           Sigma: double const & value

           Sigma: double const & value

        """
        return _snap.TRnd_GetRayleigh(self, *args)

    def GetWeibull(self, *args):
        """
        GetWeibull(self, double K, double Lambda) -> double
        Parameters:
           self: TRnd * value
           K: double const & value
           Lambda: double const & value

           K: double const & value
           Lambda: double const & value

        """
        return _snap.TRnd_GetWeibull(self, *args)

    def PutSeed(self, *args):
        """
        PutSeed(self, int _Seed)
        Parameters:
           self: TRnd * value
           _Seed: int const & value

           _Seed: int const & value

        """
        return _snap.TRnd_PutSeed(self, *args)

    def GetSeed(self):
        """
        GetSeed(self) -> int
        Parameters:
           self: TRnd const * value




        """
        return _snap.TRnd_GetSeed(self)

    def Randomize(self):
        """
        Randomize(self)
        Parameters:
           self: TRnd * value




        """
        return _snap.TRnd_Randomize(self)

    def Move(self, *args):
        """
        Move(self, int Steps)
        Parameters:
           self: TRnd * value
           Steps: int const & value

           Steps: int const & value

        """
        return _snap.TRnd_Move(self, *args)

    def Check(self):
        """
        Check(self) -> bool
        Parameters:
           self: TRnd * value




        """
        return _snap.TRnd_Check(self)

    def GetUniDevStep(*args):
        """
        GetUniDevStep(int Seed, int Steps) -> double
        Parameters:
           Seed: int const & value
           Steps: int const & value

           Seed: int const & value
           Steps: int const & value

           Seed: int const & value
           Steps: int const & value

        """
        return _snap.TRnd_GetUniDevStep(*args)

    GetUniDevStep = staticmethod(GetUniDevStep)
    def GetNrmDevStep(*args):
        """
        GetNrmDevStep(int Seed, int Steps) -> double
        Parameters:
           Seed: int const & value
           Steps: int const & value

           Seed: int const & value
           Steps: int const & value

           Seed: int const & value
           Steps: int const & value

        """
        return _snap.TRnd_GetNrmDevStep(*args)

    GetNrmDevStep = staticmethod(GetNrmDevStep)
    def GetExpDevStep(*args):
        """
        GetExpDevStep(int Seed, int Steps) -> double
        Parameters:
           Seed: int const & value
           Steps: int const & value

           Seed: int const & value
           Steps: int const & value

           Seed: int const & value
           Steps: int const & value

        """
        return _snap.TRnd_GetExpDevStep(*args)

    GetExpDevStep = staticmethod(GetExpDevStep)
    def LoadTxt(*args):
        """
        LoadTxt(TILx Lx) -> TRnd
        Parameters:
           Lx: TILx & value

           Lx: TILx & value

           Lx: TILx & value

        """
        return _snap.TRnd_LoadTxt(*args)

    LoadTxt = staticmethod(LoadTxt)
    def SaveTxt(self, *args):
        """
        SaveTxt(self, TOLx Lx)
        Parameters:
           self: TRnd const * value
           Lx: TOLx & value

           Lx: TOLx & value

        """
        return _snap.TRnd_SaveTxt(self, *args)

    __swig_destroy__ = _snap.delete_TRnd
TRnd.Save = new_instancemethod(_snap.TRnd_Save,None,TRnd)
TRnd.__eq__ = new_instancemethod(_snap.TRnd___eq__,None,TRnd)
TRnd.GetUniDev = new_instancemethod(_snap.TRnd_GetUniDev,None,TRnd)
TRnd.GetUniDevInt = new_instancemethod(_snap.TRnd_GetUniDevInt,None,TRnd)
TRnd.GetUniDevUInt = new_instancemethod(_snap.TRnd_GetUniDevUInt,None,TRnd)
TRnd.GetUniDevInt64 = new_instancemethod(_snap.TRnd_GetUniDevInt64,None,TRnd)
TRnd.GetUniDevUInt64 = new_instancemethod(_snap.TRnd_GetUniDevUInt64,None,TRnd)
TRnd.GetNrmDev = new_instancemethod(_snap.TRnd_GetNrmDev,None,TRnd)
TRnd.GetExpDev = new_instancemethod(_snap.TRnd_GetExpDev,None,TRnd)
TRnd.GetGammaDev = new_instancemethod(_snap.TRnd_GetGammaDev,None,TRnd)
TRnd.GetPoissonDev = new_instancemethod(_snap.TRnd_GetPoissonDev,None,TRnd)
TRnd.GetBinomialDev = new_instancemethod(_snap.TRnd_GetBinomialDev,None,TRnd)
TRnd.GetGeoDev = new_instancemethod(_snap.TRnd_GetGeoDev,None,TRnd)
TRnd.GetPowerDev = new_instancemethod(_snap.TRnd_GetPowerDev,None,TRnd)
TRnd.GetRayleigh = new_instancemethod(_snap.TRnd_GetRayleigh,None,TRnd)
TRnd.GetWeibull = new_instancemethod(_snap.TRnd_GetWeibull,None,TRnd)
TRnd.PutSeed = new_instancemethod(_snap.TRnd_PutSeed,None,TRnd)
TRnd.GetSeed = new_instancemethod(_snap.TRnd_GetSeed,None,TRnd)
TRnd.Randomize = new_instancemethod(_snap.TRnd_Randomize,None,TRnd)
TRnd.Move = new_instancemethod(_snap.TRnd_Move,None,TRnd)
TRnd.Check = new_instancemethod(_snap.TRnd_Check,None,TRnd)
TRnd.SaveTxt = new_instancemethod(_snap.TRnd_SaveTxt,None,TRnd)
TRnd_swigregister = _snap.TRnd_swigregister
TRnd_swigregister(TRnd)
cvar = _snap.cvar
TRnd.RndSeed = _snap.cvar.TRnd_RndSeed

def TRnd_GetUniDevStep(*args):
  """
    TRnd_GetUniDevStep(int Seed, int Steps) -> double
    Parameters:
       Seed: int const & value
       Steps: int const & value

       Seed: int const & value
       Steps: int const & value

    """
  return _snap.TRnd_GetUniDevStep(*args)

def TRnd_GetNrmDevStep(*args):
  """
    TRnd_GetNrmDevStep(int Seed, int Steps) -> double
    Parameters:
       Seed: int const & value
       Steps: int const & value

       Seed: int const & value
       Steps: int const & value

    """
  return _snap.TRnd_GetNrmDevStep(*args)

def TRnd_GetExpDevStep(*args):
  """
    TRnd_GetExpDevStep(int Seed, int Steps) -> double
    Parameters:
       Seed: int const & value
       Steps: int const & value

       Seed: int const & value
       Steps: int const & value

    """
  return _snap.TRnd_GetExpDevStep(*args)

def TRnd_LoadTxt(*args):
  """
    TRnd_LoadTxt(TILx Lx) -> TRnd
    Parameters:
       Lx: TILx & value

       Lx: TILx & value

    """
  return _snap.TRnd_LoadTxt(*args)

class TMem(object):
    """Proxy of C++ TMem class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def New(*args):
        """
        New(int MxBfL = 0) -> PMem
        Parameters:
           MxBfL: int const & value

           MxBfL: int const & value

           MxBfL: int const & value

        New() -> PMem
        New(void Bf, int BfL) -> PMem
        Parameters:
           Bf: void const * value
           BfL: int const & value

           Bf: void const * value
           BfL: int const & value

           Bf: void const * value
           BfL: int const & value

        New(TMem Mem) -> PMem
        Parameters:
           Mem: TMem const & value

           Mem: TMem const & value

           Mem: TMem const & value

        New(PMem Mem) -> PMem
        Parameters:
           Mem: PMem const & value

           Mem: PMem const & value

           Mem: PMem const & value

        New(TStr Str) -> PMem
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TMem_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMem
    def __init__(self, *args): 
        """
        __init__(self, int _MxBfL = 0) -> TMem
        Parameters:
           _MxBfL: int const & value

           _MxBfL: int const & value

        __init__(self) -> TMem
        __init__(self, void _Bf, int _BfL) -> TMem
        Parameters:
           _Bf: void const * value
           _BfL: int const & value

           _Bf: void const * value
           _BfL: int const & value

        __init__(self, TMem Mem) -> TMem
        Parameters:
           Mem: TMem const & value

           Mem: TMem const & value

        __init__(self, TStr Str) -> TMem
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        __init__(self, TSIn SIn) -> TMem
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TMem_swiginit(self,_snap.new_TMem(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TMem const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TMem_Save(self, *args)

    def __call__(self):
        """
        __call__(self) -> char
        Parameters:
           self: TMem const * value




        """
        return _snap.TMem___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(self, char Ch) -> TMem
        Parameters:
           Ch: char const & value

           Ch: char const & value

        __iadd__(self, TMem Mem) -> TMem
        Parameters:
           Mem: TMem const & value

           Mem: TMem const & value

        __iadd__(self, TStr Str) -> TMem
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        __iadd__(self, PSIn SIn) -> TMem
        Parameters:
           self: TMem * value
           SIn: PSIn const & value

           SIn: PSIn const & value

        """
        return _snap.TMem___iadd__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TMem const * value




        """
        return _snap.TMem_GetMemUsed(self)

    def Gen(self, *args):
        """
        Gen(self, int _BfL)
        Parameters:
           self: TMem * value
           _BfL: int const & value

           _BfL: int const & value

        """
        return _snap.TMem_Gen(self, *args)

    def GenZeros(self, *args):
        """
        GenZeros(self, int _BfL)
        Parameters:
           self: TMem * value
           _BfL: int const & value

           _BfL: int const & value

        """
        return _snap.TMem_GenZeros(self, *args)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxBfL, bool DoClr = True)
        Parameters:
           _MxBfL: int const & value
           DoClr: bool const & value

           _MxBfL: int const & value
           DoClr: bool const & value

        Reserve(self, int _MxBfL)
        Parameters:
           self: TMem * value
           _MxBfL: int const & value

           _MxBfL: int const & value

        """
        return _snap.TMem_Reserve(self, *args)

    def Del(self, *args):
        """
        Del(self, int BChN, int EChN)
        Parameters:
           self: TMem * value
           BChN: int const & value
           EChN: int const & value

           BChN: int const & value
           EChN: int const & value

        """
        return _snap.TMem_Del(self, *args)

    def Clr(self, DoDel = True):
        """
        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TMem * value


        """
        return _snap.TMem_Clr(self, DoDel)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TMem const * value




        """
        return _snap.TMem_Len(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TMem const * value




        """
        return _snap.TMem_Empty(self)

    def Trunc(self, *args):
        """
        Trunc(self, int _BfL)
        Parameters:
           self: TMem * value
           _BfL: int const & value

           _BfL: int const & value

        """
        return _snap.TMem_Trunc(self, *args)

    def Push(self, *args):
        """
        Push(self, char Ch)
        Parameters:
           self: TMem * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TMem_Push(self, *args)

    def Pop(self):
        """
        Pop(self) -> char
        Parameters:
           self: TMem * value




        """
        return _snap.TMem_Pop(self)

    def DoFitStr(self, *args):
        """
        DoFitStr(self, TStr Str) -> bool
        Parameters:
           self: TMem const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TMem_DoFitStr(self, *args)

    def AddBf(self, *args):
        """
        AddBf(self, void Bf, int BfL)
        Parameters:
           self: TMem * value
           Bf: void const * value
           BfL: int const & value

           Bf: void const * value
           BfL: int const & value

        """
        return _snap.TMem_AddBf(self, *args)

    def GetBf(self):
        """
        GetBf(self) -> char
        Parameters:
           self: TMem const * value




        """
        return _snap.TMem_GetBf(self)

    def GetAsStr(self, NewNullCh = '\0'):
        """
        GetAsStr(self, char NewNullCh = '\0') -> TStr
        Parameters:
           NewNullCh: char const & value

           NewNullCh: char const & value

           NewNullCh: char const & value

           NewNullCh: char const & value

        GetAsStr(self) -> TStr
        Parameters:
           self: TMem const * value


        """
        return _snap.TMem_GetAsStr(self, NewNullCh)

    def GetSIn(self):
        """
        GetSIn(self) -> PSIn
        Parameters:
           self: TMem const * value




        """
        return _snap.TMem_GetSIn(self)

    def LoadMem(*args):
        """
        LoadMem(PSIn SIn, TMem Mem)
        Parameters:
           SIn: PSIn const & value
           Mem: TMem & value

           SIn: PSIn const & value
           Mem: TMem & value

           SIn: PSIn const & value
           Mem: TMem & value

        LoadMem(PSIn SIn, PMem Mem)
        Parameters:
           SIn: PSIn const & value
           Mem: PMem const & value

           SIn: PSIn const & value
           Mem: PMem const & value

           SIn: PSIn const & value
           Mem: PMem const & value

        """
        return _snap.TMem_LoadMem(*args)

    LoadMem = staticmethod(LoadMem)
    def SaveMem(self, *args):
        """
        SaveMem(self, PSOut SOut)
        Parameters:
           self: TMem const * value
           SOut: PSOut const & value

           SOut: PSOut const & value

        """
        return _snap.TMem_SaveMem(self, *args)

TMem.Save = new_instancemethod(_snap.TMem_Save,None,TMem)
TMem.__call__ = new_instancemethod(_snap.TMem___call__,None,TMem)
TMem.__iadd__ = new_instancemethod(_snap.TMem___iadd__,None,TMem)
TMem.GetMemUsed = new_instancemethod(_snap.TMem_GetMemUsed,None,TMem)
TMem.Gen = new_instancemethod(_snap.TMem_Gen,None,TMem)
TMem.GenZeros = new_instancemethod(_snap.TMem_GenZeros,None,TMem)
TMem.Reserve = new_instancemethod(_snap.TMem_Reserve,None,TMem)
TMem.Del = new_instancemethod(_snap.TMem_Del,None,TMem)
TMem.Clr = new_instancemethod(_snap.TMem_Clr,None,TMem)
TMem.Len = new_instancemethod(_snap.TMem_Len,None,TMem)
TMem.Empty = new_instancemethod(_snap.TMem_Empty,None,TMem)
TMem.Trunc = new_instancemethod(_snap.TMem_Trunc,None,TMem)
TMem.Push = new_instancemethod(_snap.TMem_Push,None,TMem)
TMem.Pop = new_instancemethod(_snap.TMem_Pop,None,TMem)
TMem.DoFitStr = new_instancemethod(_snap.TMem_DoFitStr,None,TMem)
TMem.AddBf = new_instancemethod(_snap.TMem_AddBf,None,TMem)
TMem.GetBf = new_instancemethod(_snap.TMem_GetBf,None,TMem)
TMem.GetAsStr = new_instancemethod(_snap.TMem_GetAsStr,None,TMem)
TMem.GetSIn = new_instancemethod(_snap.TMem_GetSIn,None,TMem)
TMem.SaveMem = new_instancemethod(_snap.TMem_SaveMem,None,TMem)
TMem_swigregister = _snap.TMem_swigregister
TMem_swigregister(TMem)

def TMem_New(*args):
  """
    New(int MxBfL = 0) -> PMem
    Parameters:
       MxBfL: int const & value

       MxBfL: int const & value

    New() -> PMem
    New(void Bf, int BfL) -> PMem
    Parameters:
       Bf: void const * value
       BfL: int const & value

       Bf: void const * value
       BfL: int const & value

    New(TMem Mem) -> PMem
    Parameters:
       Mem: TMem const & value

       Mem: TMem const & value

    New(PMem Mem) -> PMem
    Parameters:
       Mem: PMem const & value

       Mem: PMem const & value

    TMem_New(TStr Str) -> PMem
    Parameters:
       Str: TStr const & value

       Str: TStr const & value

    """
  return _snap.TMem_New(*args)

def TMem_LoadMem(*args):
  """
    LoadMem(PSIn SIn, TMem Mem)
    Parameters:
       SIn: PSIn const & value
       Mem: TMem & value

       SIn: PSIn const & value
       Mem: TMem & value

    TMem_LoadMem(PSIn SIn, PMem Mem)
    Parameters:
       SIn: PSIn const & value
       Mem: PMem const & value

       SIn: PSIn const & value
       Mem: PMem const & value

    """
  return _snap.TMem_LoadMem(*args)

class TMemIn(object):
    """Proxy of C++ TMemIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TMem _Mem, int _BfC = 0) -> TMemIn
        Parameters:
           _Mem: TMem const & value
           _BfC: int const & value

           _Mem: TMem const & value
           _BfC: int const & value

        __init__(self, TMem _Mem) -> TMemIn
        Parameters:
           _Mem: TMem const & value

           _Mem: TMem const & value

        """
        _snap.TMemIn_swiginit(self,_snap.new_TMemIn(*args))
    def New(*args):
        """
        New(TMem Mem) -> PSIn
        Parameters:
           Mem: TMem const & value

           Mem: TMem const & value

           Mem: TMem const & value

        New(PMem Mem) -> PSIn
        Parameters:
           Mem: PMem const & value

           Mem: PMem const & value

           Mem: PMem const & value

        """
        return _snap.TMemIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMemIn
    def Eof(self):
        """
        Eof(self) -> bool
        Parameters:
           self: TMemIn * value




        """
        return _snap.TMemIn_Eof(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TMemIn const * value




        """
        return _snap.TMemIn_Len(self)

    def GetCh(self):
        """
        GetCh(self) -> char
        Parameters:
           self: TMemIn * value




        """
        return _snap.TMemIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(self) -> char
        Parameters:
           self: TMemIn * value




        """
        return _snap.TMemIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(self, void LBf, TSize LBfL) -> int
        Parameters:
           self: TMemIn * value
           LBf: void const * value
           LBfL: TSize const & value

           LBf: void const * value
           LBfL: TSize const & value

        """
        return _snap.TMemIn_GetBf(self, *args)

    def Reset(self):
        """
        Reset(self)
        Parameters:
           self: TMemIn * value




        """
        return _snap.TMemIn_Reset(self)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(self, TChA LnChA) -> bool
        Parameters:
           self: TMemIn * value
           LnChA: TChA & value

           LnChA: TChA & value

        """
        return _snap.TMemIn_GetNextLnBf(self, *args)

TMemIn.Eof = new_instancemethod(_snap.TMemIn_Eof,None,TMemIn)
TMemIn.Len = new_instancemethod(_snap.TMemIn_Len,None,TMemIn)
TMemIn.GetCh = new_instancemethod(_snap.TMemIn_GetCh,None,TMemIn)
TMemIn.PeekCh = new_instancemethod(_snap.TMemIn_PeekCh,None,TMemIn)
TMemIn.GetBf = new_instancemethod(_snap.TMemIn_GetBf,None,TMemIn)
TMemIn.Reset = new_instancemethod(_snap.TMemIn_Reset,None,TMemIn)
TMemIn.GetNextLnBf = new_instancemethod(_snap.TMemIn_GetNextLnBf,None,TMemIn)
TMemIn_swigregister = _snap.TMemIn_swigregister
TMemIn_swigregister(TMemIn)

def TMemIn_New(*args):
  """
    New(TMem Mem) -> PSIn
    Parameters:
       Mem: TMem const & value

       Mem: TMem const & value

    TMemIn_New(PMem Mem) -> PSIn
    Parameters:
       Mem: PMem const & value

       Mem: PMem const & value

    """
  return _snap.TMemIn_New(*args)

class TMemOut(object):
    """Proxy of C++ TMemOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PMem _Mem) -> TMemOut
        Parameters:
           _Mem: PMem const & value

           _Mem: PMem const & value

        """
        _snap.TMemOut_swiginit(self,_snap.new_TMemOut(*args))
    def New(*args):
        """
        New(PMem Mem) -> PSOut
        Parameters:
           Mem: PMem const & value

           Mem: PMem const & value

           Mem: PMem const & value

        """
        return _snap.TMemOut_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMemOut
    def PutCh(self, *args):
        """
        PutCh(self, char Ch) -> int
        Parameters:
           self: TMemOut * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TMemOut_PutCh(self, *args)

    def PutBf(self, *args):
        """
        PutBf(self, void LBf, TSize LBfL) -> int
        Parameters:
           self: TMemOut * value
           LBf: void const * value
           LBfL: TSize const & value

           LBf: void const * value
           LBfL: TSize const & value

        """
        return _snap.TMemOut_PutBf(self, *args)

    def Flush(self):
        """
        Flush(self)
        Parameters:
           self: TMemOut * value




        """
        return _snap.TMemOut_Flush(self)

TMemOut.PutCh = new_instancemethod(_snap.TMemOut_PutCh,None,TMemOut)
TMemOut.PutBf = new_instancemethod(_snap.TMemOut_PutBf,None,TMemOut)
TMemOut.Flush = new_instancemethod(_snap.TMemOut_Flush,None,TMemOut)
TMemOut_swigregister = _snap.TMemOut_swigregister
TMemOut_swigregister(TMemOut)

def TMemOut_New(*args):
  """
    TMemOut_New(PMem Mem) -> PSOut
    Parameters:
       Mem: PMem const & value

       Mem: PMem const & value

    """
  return _snap.TMemOut_New(*args)

class TChA(object):
    """Proxy of C++ TChA class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TChA
    def __init__(self, *args): 
        """
        __init__(self, int _MxBfL = 256) -> TChA
        Parameters:
           _MxBfL: int const & value

           _MxBfL: int const & value

        __init__(self) -> TChA
        __init__(self, char CStr) -> TChA
        Parameters:
           CStr: char const * value

           CStr: char const * value

        __init__(self, char CStr, int StrLen) -> TChA
        Parameters:
           CStr: char const * value
           StrLen: int const & value

           CStr: char const * value
           StrLen: int const & value

        __init__(self, TChA ChA) -> TChA
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        __init__(self, TStr Str) -> TChA
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        __init__(self, TMem Mem) -> TChA
        Parameters:
           Mem: TMem const & value

           Mem: TMem const & value

        __init__(self, TSIn SIn) -> TChA
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TChA_swiginit(self,_snap.new_TChA(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TChA * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TChA_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut, bool SaveCompact = True)
        Parameters:
           SOut: TSOut & value
           SaveCompact: bool const & value

           SOut: TSOut & value
           SaveCompact: bool const & value

        Save(self, TSOut SOut)
        Parameters:
           self: TChA const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TChA_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TChA ChA) -> bool
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        __eq__(self, char _CStr) -> bool
        Parameters:
           _CStr: char const * value

           _CStr: char const * value

        __eq__(self, char Ch) -> bool
        Parameters:
           self: TChA const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, TChA ChA) -> bool
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        __ne__(self, char _CStr) -> bool
        Parameters:
           _CStr: char const * value

           _CStr: char const * value

        __ne__(self, char Ch) -> bool
        Parameters:
           self: TChA const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TChA ChA) -> bool
        Parameters:
           self: TChA const * value
           ChA: TChA const & value

           ChA: TChA const & value

        """
        return _snap.TChA___lt__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, TMem Mem) -> TChA
        Parameters:
           Mem: TMem const & value

           Mem: TMem const & value

        __iadd__(self, TChA ChA) -> TChA
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        __iadd__(self, TStr Str) -> TChA
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        __iadd__(self, char CStr) -> TChA
        Parameters:
           CStr: char const * value

           CStr: char const * value

        __iadd__(self, char Ch) -> TChA
        Parameters:
           self: TChA * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA___iadd__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TChA const * value




        """
        return _snap.TChA_GetMemUsed(self)

    def __call__(self, *args):
        """
        __call__(self) -> char
        __call__(self) -> char
        Parameters:
           self: TChA const * value


        """
        return _snap.TChA___call__(self, *args)

    def CStr(self, *args):
        """
        CStr(self) -> char
        CStr(self) -> char
        Parameters:
           self: TChA const * value


        """
        return _snap.TChA_CStr(self, *args)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_Clr(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TChA const * value




        """
        return _snap.TChA_Len(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TChA const * value




        """
        return _snap.TChA_Empty(self)

    def Ins(self, *args):
        """
        Ins(self, int BChN, char CStr)
        Parameters:
           self: TChA * value
           BChN: int const & value
           CStr: char const * value

           BChN: int const & value
           CStr: char const * value

        """
        return _snap.TChA_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ChN)
        Parameters:
           self: TChA * value
           ChN: int const & value

           ChN: int const & value

        """
        return _snap.TChA_Del(self, *args)

    def DelLastCh(self):
        """
        DelLastCh(self)
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_DelLastCh(self)

    def Push(self, *args):
        """
        Push(self, char Ch)
        Parameters:
           self: TChA * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA_Push(self, *args)

    def Pop(self):
        """
        Pop(self) -> char
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_Pop(self)

    def Trunc(self, *args):
        """
        Trunc(self)
        Trunc(self, int _BfL)
        Parameters:
           self: TChA * value
           _BfL: int const & value

           _BfL: int const & value

        """
        return _snap.TChA_Trunc(self, *args)

    def Reverse(self):
        """
        Reverse(self)
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_Reverse(self)

    def AddCh(self, *args):
        """
        AddCh(self, char Ch, int MxLen = -1)
        Parameters:
           Ch: char const & value
           MxLen: int const & value

           Ch: char const & value
           MxLen: int const & value

        AddCh(self, char Ch)
        Parameters:
           self: TChA * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA_AddCh(self, *args)

    def AddChTo(self, *args):
        """
        AddChTo(self, char Ch, int ToChN)
        Parameters:
           self: TChA * value
           Ch: char const & value
           ToChN: int const & value

           Ch: char const & value
           ToChN: int const & value

        """
        return _snap.TChA_AddChTo(self, *args)

    def AddBf(self, *args):
        """
        AddBf(self, char NewBf, int BfS)
        Parameters:
           self: TChA * value
           NewBf: char * value
           BfS: int const & value

           NewBf: char * value
           BfS: int const & value

        """
        return _snap.TChA_AddBf(self, *args)

    def PutCh(self, *args):
        """
        PutCh(self, int ChN, char Ch)
        Parameters:
           self: TChA * value
           ChN: int const & value
           Ch: char const & value

           ChN: int const & value
           Ch: char const & value

        """
        return _snap.TChA_PutCh(self, *args)

    def GetCh(self, *args):
        """
        GetCh(self, int ChN) -> char
        Parameters:
           self: TChA const * value
           ChN: int const & value

           ChN: int const & value

        """
        return _snap.TChA_GetCh(self, *args)

    def LastCh(self):
        """
        LastCh(self) -> char
        Parameters:
           self: TChA const * value




        """
        return _snap.TChA_LastCh(self)

    def LastLastCh(self):
        """
        LastLastCh(self) -> char
        Parameters:
           self: TChA const * value




        """
        return _snap.TChA_LastLastCh(self)

    def GetSubStr(self, *args):
        """
        GetSubStr(self, int BChN, int EChN) -> TChA
        Parameters:
           self: TChA const * value
           BChN: int const & value
           EChN: int const & value

           BChN: int const & value
           EChN: int const & value

        """
        return _snap.TChA_GetSubStr(self, *args)

    def CountCh(self, *args):
        """
        CountCh(self, char Ch, int BChN = 0) -> int
        Parameters:
           Ch: char const & value
           BChN: int const & value

           Ch: char const & value
           BChN: int const & value

        CountCh(self, char Ch) -> int
        Parameters:
           self: TChA const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA_CountCh(self, *args)

    def SearchCh(self, *args):
        """
        SearchCh(self, char Ch, int BChN = 0) -> int
        Parameters:
           Ch: char const & value
           BChN: int const & value

           Ch: char const & value
           BChN: int const & value

        SearchCh(self, char Ch) -> int
        Parameters:
           self: TChA const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA_SearchCh(self, *args)

    def SearchChBack(self, *args):
        """
        SearchChBack(self, char Ch, int BChN = -1) -> int
        Parameters:
           Ch: char const & value
           BChN: int value

           Ch: char const & value
           BChN: int value

        SearchChBack(self, char Ch) -> int
        Parameters:
           self: TChA const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA_SearchChBack(self, *args)

    def SearchStr(self, *args):
        """
        SearchStr(self, TChA Str, int BChN = 0) -> int
        Parameters:
           Str: TChA const & value
           BChN: int const & value

           Str: TChA const & value
           BChN: int const & value

        SearchStr(self, TChA Str) -> int
        Parameters:
           Str: TChA const & value

           Str: TChA const & value

        SearchStr(self, TStr Str, int BChN = 0) -> int
        Parameters:
           Str: TStr const & value
           BChN: int const & value

           Str: TStr const & value
           BChN: int const & value

        SearchStr(self, TStr Str) -> int
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        SearchStr(self, char CStr, int BChN = 0) -> int
        Parameters:
           CStr: char const * value
           BChN: int const & value

           CStr: char const * value
           BChN: int const & value

        SearchStr(self, char CStr) -> int
        Parameters:
           self: TChA const * value
           CStr: char const * value

           CStr: char const * value

        """
        return _snap.TChA_SearchStr(self, *args)

    def IsStrIn(self, *args):
        """
        IsStrIn(self, TStr Str) -> bool
        Parameters:
           self: TChA const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TChA_IsStrIn(self, *args)

    def IsPrefix(self, *args):
        """
        IsPrefix(self, char CStr, int BChN = 0) -> bool
        Parameters:
           CStr: char const * value
           BChN: int const & value

           CStr: char const * value
           BChN: int const & value

        IsPrefix(self, char CStr) -> bool
        Parameters:
           CStr: char const * value

           CStr: char const * value

        IsPrefix(self, TStr Str) -> bool
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        IsPrefix(self, TChA Str) -> bool
        Parameters:
           self: TChA const * value
           Str: TChA const & value

           Str: TChA const & value

        """
        return _snap.TChA_IsPrefix(self, *args)

    def IsSuffix(self, *args):
        """
        IsSuffix(self, char CStr) -> bool
        Parameters:
           CStr: char const * value

           CStr: char const * value

        IsSuffix(self, TStr Str) -> bool
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        IsSuffix(self, TChA Str) -> bool
        Parameters:
           self: TChA const * value
           Str: TChA const & value

           Str: TChA const & value

        """
        return _snap.TChA_IsSuffix(self, *args)

    def IsChIn(self, *args):
        """
        IsChIn(self, char Ch) -> bool
        Parameters:
           self: TChA const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TChA_IsChIn(self, *args)

    def ChangeCh(self, *args):
        """
        ChangeCh(self, char SrcCh, char DstCh)
        Parameters:
           self: TChA * value
           SrcCh: char const & value
           DstCh: char const & value

           SrcCh: char const & value
           DstCh: char const & value

        """
        return _snap.TChA_ChangeCh(self, *args)

    def ToUc(self):
        """
        ToUc(self) -> TChA
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_ToUc(self)

    def ToLc(self):
        """
        ToLc(self) -> TChA
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_ToLc(self)

    def ToTrunc(self):
        """
        ToTrunc(self) -> TChA
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_ToTrunc(self)

    def CompressWs(self):
        """
        CompressWs(self)
        Parameters:
           self: TChA * value




        """
        return _snap.TChA_CompressWs(self)

    def Swap(self, *args):
        """
        Swap(self, int ChN1, int ChN2)
        Parameters:
           ChN1: int const & value
           ChN2: int const & value

           ChN1: int const & value
           ChN2: int const & value

        Swap(self, TChA ChA)
        Parameters:
           self: TChA * value
           ChA: TChA & value

           ChA: TChA & value

        """
        return _snap.TChA_Swap(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TChA const * value




        """
        return _snap.TChA_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TChA const * value




        """
        return _snap.TChA_GetSecHashCd(self)

    def LoadTxt(*args):
        """
        LoadTxt(PSIn SIn, TChA ChA)
        Parameters:
           SIn: PSIn const & value
           ChA: TChA & value

           SIn: PSIn const & value
           ChA: TChA & value

           SIn: PSIn const & value
           ChA: TChA & value

        """
        return _snap.TChA_LoadTxt(*args)

    LoadTxt = staticmethod(LoadTxt)
    def SaveTxt(self, *args):
        """
        SaveTxt(self, PSOut SOut)
        Parameters:
           self: TChA const * value
           SOut: PSOut const & value

           SOut: PSOut const & value

        """
        return _snap.TChA_SaveTxt(self, *args)

TChA.Load = new_instancemethod(_snap.TChA_Load,None,TChA)
TChA.Save = new_instancemethod(_snap.TChA_Save,None,TChA)
TChA.__eq__ = new_instancemethod(_snap.TChA___eq__,None,TChA)
TChA.__ne__ = new_instancemethod(_snap.TChA___ne__,None,TChA)
TChA.__lt__ = new_instancemethod(_snap.TChA___lt__,None,TChA)
TChA.__iadd__ = new_instancemethod(_snap.TChA___iadd__,None,TChA)
TChA.GetMemUsed = new_instancemethod(_snap.TChA_GetMemUsed,None,TChA)
TChA.__call__ = new_instancemethod(_snap.TChA___call__,None,TChA)
TChA.CStr = new_instancemethod(_snap.TChA_CStr,None,TChA)
TChA.Clr = new_instancemethod(_snap.TChA_Clr,None,TChA)
TChA.Len = new_instancemethod(_snap.TChA_Len,None,TChA)
TChA.Empty = new_instancemethod(_snap.TChA_Empty,None,TChA)
TChA.Ins = new_instancemethod(_snap.TChA_Ins,None,TChA)
TChA.Del = new_instancemethod(_snap.TChA_Del,None,TChA)
TChA.DelLastCh = new_instancemethod(_snap.TChA_DelLastCh,None,TChA)
TChA.Push = new_instancemethod(_snap.TChA_Push,None,TChA)
TChA.Pop = new_instancemethod(_snap.TChA_Pop,None,TChA)
TChA.Trunc = new_instancemethod(_snap.TChA_Trunc,None,TChA)
TChA.Reverse = new_instancemethod(_snap.TChA_Reverse,None,TChA)
TChA.AddCh = new_instancemethod(_snap.TChA_AddCh,None,TChA)
TChA.AddChTo = new_instancemethod(_snap.TChA_AddChTo,None,TChA)
TChA.AddBf = new_instancemethod(_snap.TChA_AddBf,None,TChA)
TChA.PutCh = new_instancemethod(_snap.TChA_PutCh,None,TChA)
TChA.GetCh = new_instancemethod(_snap.TChA_GetCh,None,TChA)
TChA.LastCh = new_instancemethod(_snap.TChA_LastCh,None,TChA)
TChA.LastLastCh = new_instancemethod(_snap.TChA_LastLastCh,None,TChA)
TChA.GetSubStr = new_instancemethod(_snap.TChA_GetSubStr,None,TChA)
TChA.CountCh = new_instancemethod(_snap.TChA_CountCh,None,TChA)
TChA.SearchCh = new_instancemethod(_snap.TChA_SearchCh,None,TChA)
TChA.SearchChBack = new_instancemethod(_snap.TChA_SearchChBack,None,TChA)
TChA.SearchStr = new_instancemethod(_snap.TChA_SearchStr,None,TChA)
TChA.IsStrIn = new_instancemethod(_snap.TChA_IsStrIn,None,TChA)
TChA.IsPrefix = new_instancemethod(_snap.TChA_IsPrefix,None,TChA)
TChA.IsSuffix = new_instancemethod(_snap.TChA_IsSuffix,None,TChA)
TChA.IsChIn = new_instancemethod(_snap.TChA_IsChIn,None,TChA)
TChA.ChangeCh = new_instancemethod(_snap.TChA_ChangeCh,None,TChA)
TChA.ToUc = new_instancemethod(_snap.TChA_ToUc,None,TChA)
TChA.ToLc = new_instancemethod(_snap.TChA_ToLc,None,TChA)
TChA.ToTrunc = new_instancemethod(_snap.TChA_ToTrunc,None,TChA)
TChA.CompressWs = new_instancemethod(_snap.TChA_CompressWs,None,TChA)
TChA.Swap = new_instancemethod(_snap.TChA_Swap,None,TChA)
TChA.GetPrimHashCd = new_instancemethod(_snap.TChA_GetPrimHashCd,None,TChA)
TChA.GetSecHashCd = new_instancemethod(_snap.TChA_GetSecHashCd,None,TChA)
TChA.SaveTxt = new_instancemethod(_snap.TChA_SaveTxt,None,TChA)
TChA_swigregister = _snap.TChA_swigregister
TChA_swigregister(TChA)

def TChA_LoadTxt(*args):
  """
    TChA_LoadTxt(PSIn SIn, TChA ChA)
    Parameters:
       SIn: PSIn const & value
       ChA: TChA & value

       SIn: PSIn const & value
       ChA: TChA & value

    """
  return _snap.TChA_LoadTxt(*args)

class TChAIn(object):
    """Proxy of C++ TChAIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TChA ChA, int _BfC = 0) -> TChAIn
        Parameters:
           ChA: TChA const & value
           _BfC: int const & value

           ChA: TChA const & value
           _BfC: int const & value

        __init__(self, TChA ChA) -> TChAIn
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        """
        _snap.TChAIn_swiginit(self,_snap.new_TChAIn(*args))
    def New(*args):
        """
        New(TChA ChA) -> PSIn
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

           ChA: TChA const & value

        """
        return _snap.TChAIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TChAIn
    def Eof(self):
        """
        Eof(self) -> bool
        Parameters:
           self: TChAIn * value




        """
        return _snap.TChAIn_Eof(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TChAIn const * value




        """
        return _snap.TChAIn_Len(self)

    def GetCh(self):
        """
        GetCh(self) -> char
        Parameters:
           self: TChAIn * value




        """
        return _snap.TChAIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(self) -> char
        Parameters:
           self: TChAIn * value




        """
        return _snap.TChAIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(self, void LBf, TSize LBfL) -> int
        Parameters:
           self: TChAIn * value
           LBf: void const * value
           LBfL: TSize const & value

           LBf: void const * value
           LBfL: TSize const & value

        """
        return _snap.TChAIn_GetBf(self, *args)

    def Reset(self):
        """
        Reset(self)
        Parameters:
           self: TChAIn * value




        """
        return _snap.TChAIn_Reset(self)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(self, TChA LnChA) -> bool
        Parameters:
           self: TChAIn * value
           LnChA: TChA & value

           LnChA: TChA & value

        """
        return _snap.TChAIn_GetNextLnBf(self, *args)

TChAIn.Eof = new_instancemethod(_snap.TChAIn_Eof,None,TChAIn)
TChAIn.Len = new_instancemethod(_snap.TChAIn_Len,None,TChAIn)
TChAIn.GetCh = new_instancemethod(_snap.TChAIn_GetCh,None,TChAIn)
TChAIn.PeekCh = new_instancemethod(_snap.TChAIn_PeekCh,None,TChAIn)
TChAIn.GetBf = new_instancemethod(_snap.TChAIn_GetBf,None,TChAIn)
TChAIn.Reset = new_instancemethod(_snap.TChAIn_Reset,None,TChAIn)
TChAIn.GetNextLnBf = new_instancemethod(_snap.TChAIn_GetNextLnBf,None,TChAIn)
TChAIn_swigregister = _snap.TChAIn_swigregister
TChAIn_swigregister(TChAIn)

def TChAIn_New(*args):
  """
    TChAIn_New(TChA ChA) -> PSIn
    Parameters:
       ChA: TChA const & value

       ChA: TChA const & value

    """
  return _snap.TChAIn_New(*args)

class TRStr(object):
    """Proxy of C++ TRStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Bf = _swig_property(_snap.TRStr_Bf_get, _snap.TRStr_Bf_set)
    Refs = _swig_property(_snap.TRStr_Refs_get, _snap.TRStr_Refs_set)
    __swig_destroy__ = _snap.delete_TRStr
    def __init__(self, *args): 
        """
        __init__(self) -> TRStr
        __init__(self, int Len) -> TRStr
        Parameters:
           Len: int const & value

           Len: int const & value

        __init__(self, char CStr) -> TRStr
        Parameters:
           CStr: char const * value

           CStr: char const * value

        __init__(self, char CStr, int MxLen) -> TRStr
        Parameters:
           CStr: char const * value
           MxLen: int const & value

           CStr: char const * value
           MxLen: int const & value

        __init__(self, char CStr1, char CStr2) -> TRStr
        Parameters:
           CStr1: char const * value
           CStr2: char const * value

           CStr1: char const * value
           CStr2: char const * value

        __init__(self, char Ch) -> TRStr
        Parameters:
           Ch: char const & value

           Ch: char const & value

        __init__(self, char Ch1, char Ch2) -> TRStr
        Parameters:
           Ch1: char const & value
           Ch2: char const & value

           Ch1: char const & value
           Ch2: char const & value

        __init__(self, TSIn SIn, bool IsSmall) -> TRStr
        Parameters:
           SIn: TSIn & value
           IsSmall: bool const & value

           SIn: TSIn & value
           IsSmall: bool const & value

        """
        _snap.TRStr_swiginit(self,_snap.new_TRStr(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut, bool IsSmall)
        Parameters:
           self: TRStr const * value
           SOut: TSOut & value
           IsSmall: bool const & value

           SOut: TSOut & value
           IsSmall: bool const & value

        """
        return _snap.TRStr_Save(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TRStr const * value




        """
        return _snap.TRStr_GetMemUsed(self)

    def MkRef(self):
        """
        MkRef(self)
        Parameters:
           self: TRStr * value




        """
        return _snap.TRStr_MkRef(self)

    def UnRef(self):
        """
        UnRef(self)
        Parameters:
           self: TRStr * value




        """
        return _snap.TRStr_UnRef(self)

    def CStr(self, *args):
        """
        CStr(self) -> char
        CStr(self) -> char
        Parameters:
           self: TRStr * value


        """
        return _snap.TRStr_CStr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TRStr const * value




        """
        return _snap.TRStr_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TRStr const * value




        """
        return _snap.TRStr_Len(self)

    def PutCh(self, *args):
        """
        PutCh(self, int ChN, char Ch)
        Parameters:
           self: TRStr * value
           ChN: int const & value
           Ch: char const & value

           ChN: int const & value
           Ch: char const & value

        """
        return _snap.TRStr_PutCh(self, *args)

    def GetCh(self, *args):
        """
        GetCh(self, int ChN) -> char
        Parameters:
           self: TRStr const * value
           ChN: int const & value

           ChN: int const & value

        """
        return _snap.TRStr_GetCh(self, *args)

    def IsUc(self):
        """
        IsUc(self) -> bool
        Parameters:
           self: TRStr const * value




        """
        return _snap.TRStr_IsUc(self)

    def ToUc(self):
        """
        ToUc(self)
        Parameters:
           self: TRStr * value




        """
        return _snap.TRStr_ToUc(self)

    def IsLc(self):
        """
        IsLc(self) -> bool
        Parameters:
           self: TRStr const * value




        """
        return _snap.TRStr_IsLc(self)

    def ToLc(self):
        """
        ToLc(self)
        Parameters:
           self: TRStr * value




        """
        return _snap.TRStr_ToLc(self)

    def ToCap(self):
        """
        ToCap(self)
        Parameters:
           self: TRStr * value




        """
        return _snap.TRStr_ToCap(self)

    def ConvUsFromYuAscii(self):
        """
        ConvUsFromYuAscii(self)
        Parameters:
           self: TRStr * value




        """
        return _snap.TRStr_ConvUsFromYuAscii(self)

    def CmpI(*args):
        """
        CmpI(char CStr1, char CStr2) -> int
        Parameters:
           CStr1: char const * value
           CStr2: char const * value

           CStr1: char const * value
           CStr2: char const * value

           CStr1: char const * value
           CStr2: char const * value

        """
        return _snap.TRStr_CmpI(*args)

    CmpI = staticmethod(CmpI)
    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TRStr const * value




        """
        return _snap.TRStr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TRStr const * value




        """
        return _snap.TRStr_GetSecHashCd(self)

    def GetNullRStr():
        """GetNullRStr() -> TRStr"""
        return _snap.TRStr_GetNullRStr()

    GetNullRStr = staticmethod(GetNullRStr)
TRStr.Save = new_instancemethod(_snap.TRStr_Save,None,TRStr)
TRStr.GetMemUsed = new_instancemethod(_snap.TRStr_GetMemUsed,None,TRStr)
TRStr.MkRef = new_instancemethod(_snap.TRStr_MkRef,None,TRStr)
TRStr.UnRef = new_instancemethod(_snap.TRStr_UnRef,None,TRStr)
TRStr.CStr = new_instancemethod(_snap.TRStr_CStr,None,TRStr)
TRStr.Empty = new_instancemethod(_snap.TRStr_Empty,None,TRStr)
TRStr.Len = new_instancemethod(_snap.TRStr_Len,None,TRStr)
TRStr.PutCh = new_instancemethod(_snap.TRStr_PutCh,None,TRStr)
TRStr.GetCh = new_instancemethod(_snap.TRStr_GetCh,None,TRStr)
TRStr.IsUc = new_instancemethod(_snap.TRStr_IsUc,None,TRStr)
TRStr.ToUc = new_instancemethod(_snap.TRStr_ToUc,None,TRStr)
TRStr.IsLc = new_instancemethod(_snap.TRStr_IsLc,None,TRStr)
TRStr.ToLc = new_instancemethod(_snap.TRStr_ToLc,None,TRStr)
TRStr.ToCap = new_instancemethod(_snap.TRStr_ToCap,None,TRStr)
TRStr.ConvUsFromYuAscii = new_instancemethod(_snap.TRStr_ConvUsFromYuAscii,None,TRStr)
TRStr.GetPrimHashCd = new_instancemethod(_snap.TRStr_GetPrimHashCd,None,TRStr)
TRStr.GetSecHashCd = new_instancemethod(_snap.TRStr_GetSecHashCd,None,TRStr)
TRStr_swigregister = _snap.TRStr_swigregister
TRStr_swigregister(TRStr)

def TRStr_CmpI(*args):
  """
    TRStr_CmpI(char CStr1, char CStr2) -> int
    Parameters:
       CStr1: char const * value
       CStr2: char const * value

       CStr1: char const * value
       CStr2: char const * value

    """
  return _snap.TRStr_CmpI(*args)

def TRStr_GetNullRStr():
  """TRStr_GetNullRStr() -> TRStr"""
  return _snap.TRStr_GetNullRStr()

class TStr(object):
    """Proxy of C++ TStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStr
    def __init__(self, *args): 
        """
        __init__(self) -> TStr
        __init__(self, TStr Str) -> TStr
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        __init__(self, TChA ChA) -> TStr
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        __init__(self, TSStr SStr) -> TStr
        Parameters:
           SStr: TSStr const & value

           SStr: TSStr const & value

        __init__(self, char CStr) -> TStr
        Parameters:
           CStr: char const * value

           CStr: char const * value

        __init__(self, char Ch) -> TStr
        Parameters:
           Ch: char const & value

           Ch: char const & value

        __init__(self, TMem Mem) -> TStr
        Parameters:
           Mem: TMem const & value

           Mem: TMem const & value

        __init__(self, PSIn SIn) -> TStr
        Parameters:
           SIn: PSIn const & value

           SIn: PSIn const & value

        __init__(self, TSIn SIn, bool IsSmall = False) -> TStr
        Parameters:
           SIn: TSIn & value
           IsSmall: bool const & value

           SIn: TSIn & value
           IsSmall: bool const & value

        __init__(self, TSIn SIn) -> TStr
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TStr_swiginit(self,_snap.new_TStr(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn, bool IsSmall = False)
        Parameters:
           SIn: TSIn & value
           IsSmall: bool const & value

           SIn: TSIn & value
           IsSmall: bool const & value

        Load(self, TSIn SIn)
        Parameters:
           self: TStr * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TStr_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut, bool IsSmall = False)
        Parameters:
           SOut: TSOut & value
           IsSmall: bool const & value

           SOut: TSOut & value
           IsSmall: bool const & value

        Save(self, TSOut SOut)
        Parameters:
           self: TStr const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TStr_Save(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, TStr Str) -> TStr
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        __iadd__(self, char CStr) -> TStr
        Parameters:
           self: TStr * value
           CStr: char const * value

           CStr: char const * value

        """
        return _snap.TStr___iadd__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TStr Str) -> bool
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

        __eq__(self, char CStr) -> bool
        Parameters:
           self: TStr const * value
           CStr: char const * value

           CStr: char const * value

        """
        return _snap.TStr___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, char CStr) -> bool
        Parameters:
           self: TStr const * value
           CStr: char const * value

           CStr: char const * value

        """
        return _snap.TStr___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStr Str) -> bool
        Parameters:
           self: TStr const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetMemUsed(self)

    def CStr(self, *args):
        """
        CStr(self) -> char
        CStr(self) -> char
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_CStr(self, *args)

    def PutCh(self, *args):
        """
        PutCh(self, int ChN, char Ch)
        Parameters:
           self: TStr * value
           ChN: int const & value
           Ch: char const & value

           ChN: int const & value
           Ch: char const & value

        """
        return _snap.TStr_PutCh(self, *args)

    def GetCh(self, *args):
        """
        GetCh(self, int ChN) -> char
        Parameters:
           self: TStr const * value
           ChN: int const & value

           ChN: int const & value

        """
        return _snap.TStr_GetCh(self, *args)

    def LastCh(self):
        """
        LastCh(self) -> char
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_LastCh(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_Clr(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_Len(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_Empty(self)

    def IsUc(self):
        """
        IsUc(self) -> bool
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_IsUc(self)

    def ToUc(self):
        """
        ToUc(self) -> TStr
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_ToUc(self)

    def GetUc(self):
        """
        GetUc(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetUc(self)

    def CmpI(self, *args):
        """
        CmpI(self, TStr Str) -> int
        Parameters:
           self: TStr const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_CmpI(self, *args)

    def EqI(self, *args):
        """
        EqI(self, TStr Str) -> bool
        Parameters:
           self: TStr const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_EqI(self, *args)

    def IsLc(self):
        """
        IsLc(self) -> bool
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_IsLc(self)

    def ToLc(self):
        """
        ToLc(self) -> TStr
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_ToLc(self)

    def GetLc(self):
        """
        GetLc(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetLc(self)

    def ToCap(self):
        """
        ToCap(self) -> TStr
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_ToCap(self)

    def GetCap(self):
        """
        GetCap(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetCap(self)

    def ToTrunc(self):
        """
        ToTrunc(self) -> TStr
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_ToTrunc(self)

    def GetTrunc(self):
        """
        GetTrunc(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetTrunc(self)

    def ConvUsFromYuAscii(self):
        """
        ConvUsFromYuAscii(self) -> TStr
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_ConvUsFromYuAscii(self)

    def GetUsFromYuAscii(self):
        """
        GetUsFromYuAscii(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetUsFromYuAscii(self)

    def ToHex(self):
        """
        ToHex(self) -> TStr
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_ToHex(self)

    def GetHex(self):
        """
        GetHex(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetHex(self)

    def FromHex(self):
        """
        FromHex(self) -> TStr
        Parameters:
           self: TStr * value




        """
        return _snap.TStr_FromHex(self)

    def GetFromHex(self):
        """
        GetFromHex(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetFromHex(self)

    def GetSubStr(self, *args):
        """
        GetSubStr(self, int BChN, int EChN) -> TStr
        Parameters:
           BChN: int const & value
           EChN: int const & value

           BChN: int const & value
           EChN: int const & value

        GetSubStr(self, int BChN) -> TStr
        Parameters:
           self: TStr const * value
           BChN: int const & value

           BChN: int const & value

        """
        return _snap.TStr_GetSubStr(self, *args)

    def InsStr(self, *args):
        """
        InsStr(self, int BChN, TStr Str)
        Parameters:
           self: TStr * value
           BChN: int const & value
           Str: TStr const & value

           BChN: int const & value
           Str: TStr const & value

        """
        return _snap.TStr_InsStr(self, *args)

    def DelChAll(self, *args):
        """
        DelChAll(self, char Ch)
        Parameters:
           self: TStr * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TStr_DelChAll(self, *args)

    def DelSubStr(self, *args):
        """
        DelSubStr(self, int BChN, int EChN)
        Parameters:
           self: TStr * value
           BChN: int const & value
           EChN: int const & value

           BChN: int const & value
           EChN: int const & value

        """
        return _snap.TStr_DelSubStr(self, *args)

    def DelStr(self, *args):
        """
        DelStr(self, TStr Str) -> bool
        Parameters:
           self: TStr * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_DelStr(self, *args)

    def LeftOf(self, *args):
        """
        LeftOf(self, char SplitCh) -> TStr
        Parameters:
           self: TStr const * value
           SplitCh: char const & value

           SplitCh: char const & value

        """
        return _snap.TStr_LeftOf(self, *args)

    def LeftOfLast(self, *args):
        """
        LeftOfLast(self, char SplitCh) -> TStr
        Parameters:
           self: TStr const * value
           SplitCh: char const & value

           SplitCh: char const & value

        """
        return _snap.TStr_LeftOfLast(self, *args)

    def RightOf(self, *args):
        """
        RightOf(self, char SplitCh) -> TStr
        Parameters:
           self: TStr const * value
           SplitCh: char const & value

           SplitCh: char const & value

        """
        return _snap.TStr_RightOf(self, *args)

    def RightOfLast(self, *args):
        """
        RightOfLast(self, char SplitCh) -> TStr
        Parameters:
           self: TStr const * value
           SplitCh: char const & value

           SplitCh: char const & value

        """
        return _snap.TStr_RightOfLast(self, *args)

    def SplitOnCh(self, *args):
        """
        SplitOnCh(self, TStr LStr, char SplitCh, TStr RStr)
        Parameters:
           self: TStr const * value
           LStr: TStr & value
           SplitCh: char const & value
           RStr: TStr & value

           LStr: TStr & value
           SplitCh: char const & value
           RStr: TStr & value

        """
        return _snap.TStr_SplitOnCh(self, *args)

    def SplitOnLastCh(self, *args):
        """
        SplitOnLastCh(self, TStr LStr, char SplitCh, TStr RStr)
        Parameters:
           self: TStr const * value
           LStr: TStr & value
           SplitCh: char const & value
           RStr: TStr & value

           LStr: TStr & value
           SplitCh: char const & value
           RStr: TStr & value

        """
        return _snap.TStr_SplitOnLastCh(self, *args)

    def SplitOnAllCh(self, *args):
        """
        SplitOnAllCh(self, char SplitCh, TStrV StrV, bool SkipEmpty = True)
        Parameters:
           SplitCh: char const & value
           StrV: TStrV & value
           SkipEmpty: bool const & value

           SplitCh: char const & value
           StrV: TStrV & value
           SkipEmpty: bool const & value

        SplitOnAllCh(self, char SplitCh, TStrV StrV)
        Parameters:
           self: TStr const * value
           SplitCh: char const & value
           StrV: TStrV & value

           SplitCh: char const & value
           StrV: TStrV & value

        """
        return _snap.TStr_SplitOnAllCh(self, *args)

    def SplitOnAllAnyCh(self, *args):
        """
        SplitOnAllAnyCh(self, TStr SplitChStr, TStrV StrV, bool SkipEmpty = True)
        Parameters:
           SplitChStr: TStr const & value
           StrV: TStrV & value
           SkipEmpty: bool const & value

           SplitChStr: TStr const & value
           StrV: TStrV & value
           SkipEmpty: bool const & value

        SplitOnAllAnyCh(self, TStr SplitChStr, TStrV StrV)
        Parameters:
           self: TStr const * value
           SplitChStr: TStr const & value
           StrV: TStrV & value

           SplitChStr: TStr const & value
           StrV: TStrV & value

        """
        return _snap.TStr_SplitOnAllAnyCh(self, *args)

    def SplitOnWs(self, *args):
        """
        SplitOnWs(self, TStrV StrV)
        Parameters:
           self: TStr const * value
           StrV: TStrV & value

           StrV: TStrV & value

        """
        return _snap.TStr_SplitOnWs(self, *args)

    def SplitOnNonAlNum(self, *args):
        """
        SplitOnNonAlNum(self, TStrV StrV)
        Parameters:
           self: TStr const * value
           StrV: TStrV & value

           StrV: TStrV & value

        """
        return _snap.TStr_SplitOnNonAlNum(self, *args)

    def SplitOnStr(self, *args):
        """
        SplitOnStr(self, TStr SplitStr, TStrV StrV)
        Parameters:
           SplitStr: TStr const & value
           StrV: TStrV & value

           SplitStr: TStr const & value
           StrV: TStrV & value

        SplitOnStr(self, TStr LeftStr, TStr MidStr, TStr RightStr)
        Parameters:
           self: TStr const * value
           LeftStr: TStr & value
           MidStr: TStr const & value
           RightStr: TStr & value

           LeftStr: TStr & value
           MidStr: TStr const & value
           RightStr: TStr & value

        """
        return _snap.TStr_SplitOnStr(self, *args)

    def Mid(self, *args):
        """
        Mid(self, int BChN, int Chs) -> TStr
        Parameters:
           BChN: int const & value
           Chs: int const & value

           BChN: int const & value
           Chs: int const & value

        Mid(self, int BChN) -> TStr
        Parameters:
           self: TStr const * value
           BChN: int const & value

           BChN: int const & value

        """
        return _snap.TStr_Mid(self, *args)

    def Left(self, *args):
        """
        Left(self, int EChN) -> TStr
        Parameters:
           self: TStr const * value
           EChN: int const & value

           EChN: int const & value

        """
        return _snap.TStr_Left(self, *args)

    def Right(self, *args):
        """
        Right(self, int BChN) -> TStr
        Parameters:
           self: TStr const * value
           BChN: int const & value

           BChN: int const & value

        """
        return _snap.TStr_Right(self, *args)

    def Slice(self, *args):
        """
        Slice(self, int BChN, int EChNP1) -> TStr
        Parameters:
           self: TStr const * value
           BChN: int value
           EChNP1: int value

           BChN: int value
           EChNP1: int value

        """
        return _snap.TStr_Slice(self, *args)

    def __call__(self, *args):
        """
        __call__(self) -> char
        __call__(self) -> char
        __call__(self, int BChN, int EChNP1) -> TStr
        Parameters:
           self: TStr const * value
           BChN: int const & value
           EChNP1: int const & value

           BChN: int const & value
           EChNP1: int const & value

        """
        return _snap.TStr___call__(self, *args)

    def CountCh(self, *args):
        """
        CountCh(self, char Ch, int BChN = 0) -> int
        Parameters:
           Ch: char const & value
           BChN: int const & value

           Ch: char const & value
           BChN: int const & value

        CountCh(self, char Ch) -> int
        Parameters:
           self: TStr const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TStr_CountCh(self, *args)

    def SearchCh(self, *args):
        """
        SearchCh(self, char Ch, int BChN = 0) -> int
        Parameters:
           Ch: char const & value
           BChN: int const & value

           Ch: char const & value
           BChN: int const & value

        SearchCh(self, char Ch) -> int
        Parameters:
           self: TStr const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TStr_SearchCh(self, *args)

    def SearchChBack(self, *args):
        """
        SearchChBack(self, char Ch, int BChN = -1) -> int
        Parameters:
           Ch: char const & value
           BChN: int value

           Ch: char const & value
           BChN: int value

        SearchChBack(self, char Ch) -> int
        Parameters:
           self: TStr const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TStr_SearchChBack(self, *args)

    def SearchStr(self, *args):
        """
        SearchStr(self, TStr Str, int BChN = 0) -> int
        Parameters:
           Str: TStr const & value
           BChN: int const & value

           Str: TStr const & value
           BChN: int const & value

        SearchStr(self, TStr Str) -> int
        Parameters:
           self: TStr const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_SearchStr(self, *args)

    def IsChIn(self, *args):
        """
        IsChIn(self, char Ch) -> bool
        Parameters:
           self: TStr const * value
           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TStr_IsChIn(self, *args)

    def IsStrIn(self, *args):
        """
        IsStrIn(self, TStr Str) -> bool
        Parameters:
           self: TStr const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_IsStrIn(self, *args)

    def IsPrefix(self, *args):
        """
        IsPrefix(self, char Str) -> bool
        Parameters:
           Str: char const * value

           Str: char const * value

        IsPrefix(self, TStr Str) -> bool
        Parameters:
           self: TStr const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_IsPrefix(self, *args)

    def IsSuffix(self, *args):
        """
        IsSuffix(self, char Str) -> bool
        Parameters:
           Str: char const * value

           Str: char const * value

        IsSuffix(self, TStr Str) -> bool
        Parameters:
           self: TStr const * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_IsSuffix(self, *args)

    def ChangeCh(self, *args):
        """
        ChangeCh(self, char SrcCh, char DstCh, int BChN = 0) -> int
        Parameters:
           SrcCh: char const & value
           DstCh: char const & value
           BChN: int const & value

           SrcCh: char const & value
           DstCh: char const & value
           BChN: int const & value

        ChangeCh(self, char SrcCh, char DstCh) -> int
        Parameters:
           self: TStr * value
           SrcCh: char const & value
           DstCh: char const & value

           SrcCh: char const & value
           DstCh: char const & value

        """
        return _snap.TStr_ChangeCh(self, *args)

    def ChangeChAll(self, *args):
        """
        ChangeChAll(self, char SrcCh, char DstCh) -> int
        Parameters:
           self: TStr * value
           SrcCh: char const & value
           DstCh: char const & value

           SrcCh: char const & value
           DstCh: char const & value

        """
        return _snap.TStr_ChangeChAll(self, *args)

    def ChangeStr(self, *args):
        """
        ChangeStr(self, TStr SrcStr, TStr DstStr, int BChN = 0) -> int
        Parameters:
           SrcStr: TStr const & value
           DstStr: TStr const & value
           BChN: int const & value

           SrcStr: TStr const & value
           DstStr: TStr const & value
           BChN: int const & value

        ChangeStr(self, TStr SrcStr, TStr DstStr) -> int
        Parameters:
           self: TStr * value
           SrcStr: TStr const & value
           DstStr: TStr const & value

           SrcStr: TStr const & value
           DstStr: TStr const & value

        """
        return _snap.TStr_ChangeStr(self, *args)

    def ChangeStrAll(self, *args):
        """
        ChangeStrAll(self, TStr SrcStr, TStr DstStr, bool FromStartP = False) -> int
        Parameters:
           SrcStr: TStr const & value
           DstStr: TStr const & value
           FromStartP: bool const & value

           SrcStr: TStr const & value
           DstStr: TStr const & value
           FromStartP: bool const & value

        ChangeStrAll(self, TStr SrcStr, TStr DstStr) -> int
        Parameters:
           self: TStr * value
           SrcStr: TStr const & value
           DstStr: TStr const & value

           SrcStr: TStr const & value
           DstStr: TStr const & value

        """
        return _snap.TStr_ChangeStrAll(self, *args)

    def Reverse(self):
        """
        Reverse(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_Reverse(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetSecHashCd(self)

    def IsBool(self, *args):
        """
        IsBool(self, bool Val) -> bool
        Parameters:
           self: TStr const * value
           Val: bool & value

           Val: bool & value

        """
        return _snap.TStr_IsBool(self, *args)

    def IsInt(self, *args):
        """
        IsInt(self, bool Check, int MnVal, int MxVal, int Val) -> bool
        Parameters:
           Check: bool const & value
           MnVal: int const & value
           MxVal: int const & value
           Val: int & value

           Check: bool const & value
           MnVal: int const & value
           MxVal: int const & value
           Val: int & value

        IsInt(self, int Val) -> bool
        Parameters:
           Val: int & value

           Val: int & value

        IsInt(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsInt(self, *args)

    def GetInt(self, *args):
        """
        GetInt(self) -> int
        GetInt(self, int DfVal) -> int
        Parameters:
           self: TStr const * value
           DfVal: int const & value

           DfVal: int const & value

        """
        return _snap.TStr_GetInt(self, *args)

    def IsUInt(self, *args):
        """
        IsUInt(self, bool Check, uint MnVal, uint MxVal, uint Val) -> bool
        Parameters:
           Check: bool const & value
           MnVal: uint const & value
           MxVal: uint const & value
           Val: uint & value

           Check: bool const & value
           MnVal: uint const & value
           MxVal: uint const & value
           Val: uint & value

        IsUInt(self, uint Val) -> bool
        Parameters:
           Val: uint & value

           Val: uint & value

        IsUInt(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsUInt(self, *args)

    def GetUInt(self, *args):
        """
        GetUInt(self) -> uint
        GetUInt(self, uint DfVal) -> uint
        Parameters:
           self: TStr const * value
           DfVal: uint const & value

           DfVal: uint const & value

        """
        return _snap.TStr_GetUInt(self, *args)

    def IsInt64(self, *args):
        """
        IsInt64(self, bool Check, int64 MnVal, int64 MxVal, int64 Val) -> bool
        Parameters:
           Check: bool const & value
           MnVal: int64 const & value
           MxVal: int64 const & value
           Val: int64 & value

           Check: bool const & value
           MnVal: int64 const & value
           MxVal: int64 const & value
           Val: int64 & value

        IsInt64(self, int64 Val) -> bool
        Parameters:
           Val: int64 & value

           Val: int64 & value

        IsInt64(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsInt64(self, *args)

    def GetInt64(self, *args):
        """
        GetInt64(self) -> int64
        GetInt64(self, int64 DfVal) -> int64
        Parameters:
           self: TStr const * value
           DfVal: int64 const & value

           DfVal: int64 const & value

        """
        return _snap.TStr_GetInt64(self, *args)

    def IsUInt64(self, *args):
        """
        IsUInt64(self, bool Check, uint64 MnVal, uint64 MxVal, uint64 Val) -> bool
        Parameters:
           Check: bool const & value
           MnVal: uint64 const & value
           MxVal: uint64 const & value
           Val: uint64 & value

           Check: bool const & value
           MnVal: uint64 const & value
           MxVal: uint64 const & value
           Val: uint64 & value

        IsUInt64(self, uint64 Val) -> bool
        Parameters:
           Val: uint64 & value

           Val: uint64 & value

        IsUInt64(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsUInt64(self, *args)

    def GetUInt64(self, *args):
        """
        GetUInt64(self) -> uint64
        GetUInt64(self, uint64 DfVal) -> uint64
        Parameters:
           self: TStr const * value
           DfVal: uint64 const & value

           DfVal: uint64 const & value

        """
        return _snap.TStr_GetUInt64(self, *args)

    def IsHexInt(self, *args):
        """
        IsHexInt(self, bool Check, int MnVal, int MxVal, int Val) -> bool
        Parameters:
           Check: bool const & value
           MnVal: int const & value
           MxVal: int const & value
           Val: int & value

           Check: bool const & value
           MnVal: int const & value
           MxVal: int const & value
           Val: int & value

        IsHexInt(self, int Val) -> bool
        Parameters:
           Val: int & value

           Val: int & value

        IsHexInt(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsHexInt(self, *args)

    def GetHexInt(self, *args):
        """
        GetHexInt(self) -> int
        GetHexInt(self, int DfVal) -> int
        Parameters:
           self: TStr const * value
           DfVal: int const & value

           DfVal: int const & value

        """
        return _snap.TStr_GetHexInt(self, *args)

    def IsHexInt64(self, *args):
        """
        IsHexInt64(self, bool Check, int64 MnVal, int64 MxVal, int64 Val) -> bool
        Parameters:
           Check: bool const & value
           MnVal: int64 const & value
           MxVal: int64 const & value
           Val: int64 & value

           Check: bool const & value
           MnVal: int64 const & value
           MxVal: int64 const & value
           Val: int64 & value

        IsHexInt64(self, int64 Val) -> bool
        Parameters:
           Val: int64 & value

           Val: int64 & value

        IsHexInt64(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsHexInt64(self, *args)

    def GetHexInt64(self, *args):
        """
        GetHexInt64(self) -> int64
        GetHexInt64(self, int64 DfVal) -> int64
        Parameters:
           self: TStr const * value
           DfVal: int64 const & value

           DfVal: int64 const & value

        """
        return _snap.TStr_GetHexInt64(self, *args)

    def IsFlt(self, *args):
        """
        IsFlt(self, bool Check, double MnVal, double MxVal, double Val, 
            char DecDelimCh = '.') -> bool
        Parameters:
           Check: bool const & value
           MnVal: double const & value
           MxVal: double const & value
           Val: double & value
           DecDelimCh: char const & value

           Check: bool const & value
           MnVal: double const & value
           MxVal: double const & value
           Val: double & value
           DecDelimCh: char const & value

        IsFlt(self, bool Check, double MnVal, double MxVal, double Val) -> bool
        Parameters:
           Check: bool const & value
           MnVal: double const & value
           MxVal: double const & value
           Val: double & value

           Check: bool const & value
           MnVal: double const & value
           MxVal: double const & value
           Val: double & value

        IsFlt(self, double Val) -> bool
        Parameters:
           Val: double & value

           Val: double & value

        IsFlt(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsFlt(self, *args)

    def GetFlt(self, *args):
        """
        GetFlt(self) -> double
        GetFlt(self, double DfVal) -> double
        Parameters:
           self: TStr const * value
           DfVal: double const & value

           DfVal: double const & value

        """
        return _snap.TStr_GetFlt(self, *args)

    def IsWord(self, WsPrefixP = True, FirstUcAllowedP = True):
        """
        IsWord(self, bool WsPrefixP = True, bool FirstUcAllowedP = True) -> bool
        Parameters:
           WsPrefixP: bool const & value
           FirstUcAllowedP: bool const & value

           WsPrefixP: bool const & value
           FirstUcAllowedP: bool const & value

           WsPrefixP: bool const & value
           FirstUcAllowedP: bool const & value

           WsPrefixP: bool const & value
           FirstUcAllowedP: bool const & value

        IsWord(self, bool WsPrefixP = True) -> bool
        Parameters:
           WsPrefixP: bool const & value

           WsPrefixP: bool const & value

        IsWord(self) -> bool
        Parameters:
           self: TStr const * value


        """
        return _snap.TStr_IsWord(self, WsPrefixP, FirstUcAllowedP)

    def IsWs(self):
        """
        IsWs(self) -> bool
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_IsWs(self)

    def IsWcMatch(self, *args):
        """
        IsWcMatch(self, int StrBChN, TStr WcStr, int WcStrBChN, TStrV StarStrV, 
            char StarCh = '*', char QuestCh = '?') -> bool
        Parameters:
           StrBChN: int const & value
           WcStr: TStr const & value
           WcStrBChN: int const & value
           StarStrV: TStrV & value
           StarCh: char const & value
           QuestCh: char const & value

           StrBChN: int const & value
           WcStr: TStr const & value
           WcStrBChN: int const & value
           StarStrV: TStrV & value
           StarCh: char const & value
           QuestCh: char const & value

        IsWcMatch(self, int StrBChN, TStr WcStr, int WcStrBChN, TStrV StarStrV, 
            char StarCh = '*') -> bool
        Parameters:
           StrBChN: int const & value
           WcStr: TStr const & value
           WcStrBChN: int const & value
           StarStrV: TStrV & value
           StarCh: char const & value

           StrBChN: int const & value
           WcStr: TStr const & value
           WcStrBChN: int const & value
           StarStrV: TStrV & value
           StarCh: char const & value

        IsWcMatch(self, int StrBChN, TStr WcStr, int WcStrBChN, TStrV StarStrV) -> bool
        Parameters:
           StrBChN: int const & value
           WcStr: TStr const & value
           WcStrBChN: int const & value
           StarStrV: TStrV & value

           StrBChN: int const & value
           WcStr: TStr const & value
           WcStrBChN: int const & value
           StarStrV: TStrV & value

        IsWcMatch(self, TStr WcStr, TStrV StarStrV, char StarCh = '*', char QuestCh = '?') -> bool
        Parameters:
           WcStr: TStr const & value
           StarStrV: TStrV & value
           StarCh: char const & value
           QuestCh: char const & value

           WcStr: TStr const & value
           StarStrV: TStrV & value
           StarCh: char const & value
           QuestCh: char const & value

        IsWcMatch(self, TStr WcStr, TStrV StarStrV, char StarCh = '*') -> bool
        Parameters:
           WcStr: TStr const & value
           StarStrV: TStrV & value
           StarCh: char const & value

           WcStr: TStr const & value
           StarStrV: TStrV & value
           StarCh: char const & value

        IsWcMatch(self, TStr WcStr, TStrV StarStrV) -> bool
        Parameters:
           WcStr: TStr const & value
           StarStrV: TStrV & value

           WcStr: TStr const & value
           StarStrV: TStrV & value

        IsWcMatch(self, TStr WcStr, char StarCh, char QuestCh) -> bool
        Parameters:
           WcStr: TStr const & value
           StarCh: char const & value
           QuestCh: char const & value

           WcStr: TStr const & value
           StarCh: char const & value
           QuestCh: char const & value

        IsWcMatch(self, TStr WcStr, int StarStrN, TStr StarStr) -> bool
        Parameters:
           WcStr: TStr const & value
           StarStrN: int const & value
           StarStr: TStr & value

           WcStr: TStr const & value
           StarStrN: int const & value
           StarStr: TStr & value

        IsWcMatch(self, TStr WcStr) -> bool
        Parameters:
           self: TStr const * value
           WcStr: TStr const & value

           WcStr: TStr const & value

        """
        return _snap.TStr_IsWcMatch(self, *args)

    def GetWcMatch(self, *args):
        """
        GetWcMatch(self, TStr WcStr, int StarStrN = 0) -> TStr
        Parameters:
           WcStr: TStr const & value
           StarStrN: int const & value

           WcStr: TStr const & value
           StarStrN: int const & value

        GetWcMatch(self, TStr WcStr) -> TStr
        Parameters:
           self: TStr const * value
           WcStr: TStr const & value

           WcStr: TStr const & value

        """
        return _snap.TStr_GetWcMatch(self, *args)

    def GetFPath(self):
        """
        GetFPath(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetFPath(self)

    def GetFBase(self):
        """
        GetFBase(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetFBase(self)

    def GetFMid(self):
        """
        GetFMid(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetFMid(self)

    def GetFExt(self):
        """
        GetFExt(self) -> TStr
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetFExt(self)

    def GetNrFPath(*args):
        """
        GetNrFPath(TStr FPath) -> TStr
        Parameters:
           FPath: TStr const & value

           FPath: TStr const & value

           FPath: TStr const & value

        """
        return _snap.TStr_GetNrFPath(*args)

    GetNrFPath = staticmethod(GetNrFPath)
    def GetNrFMid(*args):
        """
        GetNrFMid(TStr FMid) -> TStr
        Parameters:
           FMid: TStr const & value

           FMid: TStr const & value

           FMid: TStr const & value

        """
        return _snap.TStr_GetNrFMid(*args)

    GetNrFMid = staticmethod(GetNrFMid)
    def GetNrFExt(*args):
        """
        GetNrFExt(TStr FExt) -> TStr
        Parameters:
           FExt: TStr const & value

           FExt: TStr const & value

           FExt: TStr const & value

        """
        return _snap.TStr_GetNrFExt(*args)

    GetNrFExt = staticmethod(GetNrFExt)
    def GetNrNumFExt(*args):
        """
        GetNrNumFExt(int FExtN) -> TStr
        Parameters:
           FExtN: int const & value

           FExtN: int const & value

           FExtN: int const & value

        """
        return _snap.TStr_GetNrNumFExt(*args)

    GetNrNumFExt = staticmethod(GetNrNumFExt)
    def GetNrFNm(*args):
        """
        GetNrFNm(TStr FNm) -> TStr
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

           FNm: TStr const & value

        """
        return _snap.TStr_GetNrFNm(*args)

    GetNrFNm = staticmethod(GetNrFNm)
    def GetNrAbsFPath(*args):
        """
        GetNrAbsFPath(TStr FPath, TStr BaseFPath = TStr()) -> TStr
        Parameters:
           FPath: TStr const & value
           BaseFPath: TStr const & value

           FPath: TStr const & value
           BaseFPath: TStr const & value

           FPath: TStr const & value
           BaseFPath: TStr const & value

        GetNrAbsFPath(TStr FPath) -> TStr
        Parameters:
           FPath: TStr const & value

           FPath: TStr const & value

           FPath: TStr const & value

        """
        return _snap.TStr_GetNrAbsFPath(*args)

    GetNrAbsFPath = staticmethod(GetNrAbsFPath)
    def IsAbsFPath(*args):
        """
        IsAbsFPath(TStr FPath) -> bool
        Parameters:
           FPath: TStr const & value

           FPath: TStr const & value

           FPath: TStr const & value

        """
        return _snap.TStr_IsAbsFPath(*args)

    IsAbsFPath = staticmethod(IsAbsFPath)
    def PutFExt(*args):
        """
        PutFExt(TStr FNm, TStr FExt) -> TStr
        Parameters:
           FNm: TStr const & value
           FExt: TStr const & value

           FNm: TStr const & value
           FExt: TStr const & value

           FNm: TStr const & value
           FExt: TStr const & value

        """
        return _snap.TStr_PutFExt(*args)

    PutFExt = staticmethod(PutFExt)
    def PutFExtIfEmpty(*args):
        """
        PutFExtIfEmpty(TStr FNm, TStr FExt) -> TStr
        Parameters:
           FNm: TStr const & value
           FExt: TStr const & value

           FNm: TStr const & value
           FExt: TStr const & value

           FNm: TStr const & value
           FExt: TStr const & value

        """
        return _snap.TStr_PutFExtIfEmpty(*args)

    PutFExtIfEmpty = staticmethod(PutFExtIfEmpty)
    def PutFBase(*args):
        """
        PutFBase(TStr FNm, TStr FBase) -> TStr
        Parameters:
           FNm: TStr const & value
           FBase: TStr const & value

           FNm: TStr const & value
           FBase: TStr const & value

           FNm: TStr const & value
           FBase: TStr const & value

        """
        return _snap.TStr_PutFBase(*args)

    PutFBase = staticmethod(PutFBase)
    def PutFBaseIfEmpty(*args):
        """
        PutFBaseIfEmpty(TStr FNm, TStr FBase) -> TStr
        Parameters:
           FNm: TStr const & value
           FBase: TStr const & value

           FNm: TStr const & value
           FBase: TStr const & value

           FNm: TStr const & value
           FBase: TStr const & value

        """
        return _snap.TStr_PutFBaseIfEmpty(*args)

    PutFBaseIfEmpty = staticmethod(PutFBaseIfEmpty)
    def AddToFMid(*args):
        """
        AddToFMid(TStr FNm, TStr ExtFMid) -> TStr
        Parameters:
           FNm: TStr const & value
           ExtFMid: TStr const & value

           FNm: TStr const & value
           ExtFMid: TStr const & value

           FNm: TStr const & value
           ExtFMid: TStr const & value

        """
        return _snap.TStr_AddToFMid(*args)

    AddToFMid = staticmethod(AddToFMid)
    def GetNumFNm(*args):
        """
        GetNumFNm(TStr FNm, int Num) -> TStr
        Parameters:
           FNm: TStr const & value
           Num: int const & value

           FNm: TStr const & value
           Num: int const & value

           FNm: TStr const & value
           Num: int const & value

        """
        return _snap.TStr_GetNumFNm(*args)

    GetNumFNm = staticmethod(GetNumFNm)
    def GetFNmStr(*args):
        """
        GetFNmStr(TStr Str, bool AlNumOnlyP = True) -> TStr
        Parameters:
           Str: TStr const & value
           AlNumOnlyP: bool const & value

           Str: TStr const & value
           AlNumOnlyP: bool const & value

           Str: TStr const & value
           AlNumOnlyP: bool const & value

        GetFNmStr(TStr Str) -> TStr
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_GetFNmStr(*args)

    GetFNmStr = staticmethod(GetFNmStr)
    def LoadTxt(*args):
        """
        LoadTxt(PSIn SIn) -> TStr
        Parameters:
           SIn: PSIn const & value

           SIn: PSIn const & value

           SIn: PSIn const & value

        LoadTxt(TStr FNm) -> TStr
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

           FNm: TStr const & value

        """
        return _snap.TStr_LoadTxt(*args)

    LoadTxt = staticmethod(LoadTxt)
    def SaveTxt(self, *args):
        """
        SaveTxt(self, PSOut SOut)
        Parameters:
           SOut: PSOut const & value

           SOut: PSOut const & value

        SaveTxt(self, TStr FNm)
        Parameters:
           self: TStr const * value
           FNm: TStr const & value

           FNm: TStr const & value

        """
        return _snap.TStr_SaveTxt(self, *args)

    def GetChStr(*args):
        """
        GetChStr(char Ch) -> TStr
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TStr_GetChStr(*args)

    GetChStr = staticmethod(GetChStr)
    def GetDChStr(*args):
        """
        GetDChStr(char Ch1, char Ch2) -> TStr
        Parameters:
           Ch1: char const & value
           Ch2: char const & value

           Ch1: char const & value
           Ch2: char const & value

           Ch1: char const & value
           Ch2: char const & value

        """
        return _snap.TStr_GetDChStr(*args)

    GetDChStr = staticmethod(GetDChStr)
    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(TStr Str, char FmtStr) -> TStr
        Parameters:
           Str: TStr const & value
           FmtStr: char const * value

           Str: TStr const & value
           FmtStr: char const * value

           Str: TStr const & value
           FmtStr: char const * value

        GetStr(TStr Str, TStr FmtStr) -> TStr
        Parameters:
           Str: TStr const & value
           FmtStr: TStr const & value

           Str: TStr const & value
           FmtStr: TStr const & value

           Str: TStr const & value
           FmtStr: TStr const & value

        GetStr(TStrV StrV, TStr DelimiterStr) -> TStr
        Parameters:
           StrV: TStrV const & value
           DelimiterStr: TStr const & value

           StrV: TStrV const & value
           DelimiterStr: TStr const & value

           StrV: TStrV const & value
           DelimiterStr: TStr const & value

        """
        return _snap.TStr_GetStr(*args)

    GetStr = staticmethod(GetStr)
    def Fmt(*args):
        """
        Fmt(char FmtStr, v(...) *args) -> TStr
        Parameters:
           FmtStr: char const * value

           FmtStr: char const * value

           FmtStr: char const * value

        """
        return _snap.TStr_Fmt(*args)

    Fmt = staticmethod(Fmt)
    def GetSpaceStr(*args):
        """
        GetSpaceStr(int Spaces) -> TStr
        Parameters:
           Spaces: int const & value

           Spaces: int const & value

           Spaces: int const & value

        """
        return _snap.TStr_GetSpaceStr(*args)

    GetSpaceStr = staticmethod(GetSpaceStr)
    def GetCStr(self):
        """
        GetCStr(self) -> char
        Parameters:
           self: TStr const * value




        """
        return _snap.TStr_GetCStr(self)

    def MkClone(*args):
        """
        MkClone(TStr Str) -> TStr
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStr_MkClone(*args)

    MkClone = staticmethod(MkClone)
    def GetNullStr():
        """GetNullStr() -> TStr"""
        return _snap.TStr_GetNullStr()

    GetNullStr = staticmethod(GetNullStr)
TStr.Load = new_instancemethod(_snap.TStr_Load,None,TStr)
TStr.Save = new_instancemethod(_snap.TStr_Save,None,TStr)
TStr.__iadd__ = new_instancemethod(_snap.TStr___iadd__,None,TStr)
TStr.__eq__ = new_instancemethod(_snap.TStr___eq__,None,TStr)
TStr.__ne__ = new_instancemethod(_snap.TStr___ne__,None,TStr)
TStr.__lt__ = new_instancemethod(_snap.TStr___lt__,None,TStr)
TStr.GetMemUsed = new_instancemethod(_snap.TStr_GetMemUsed,None,TStr)
TStr.CStr = new_instancemethod(_snap.TStr_CStr,None,TStr)
TStr.PutCh = new_instancemethod(_snap.TStr_PutCh,None,TStr)
TStr.GetCh = new_instancemethod(_snap.TStr_GetCh,None,TStr)
TStr.LastCh = new_instancemethod(_snap.TStr_LastCh,None,TStr)
TStr.Clr = new_instancemethod(_snap.TStr_Clr,None,TStr)
TStr.Len = new_instancemethod(_snap.TStr_Len,None,TStr)
TStr.Empty = new_instancemethod(_snap.TStr_Empty,None,TStr)
TStr.IsUc = new_instancemethod(_snap.TStr_IsUc,None,TStr)
TStr.ToUc = new_instancemethod(_snap.TStr_ToUc,None,TStr)
TStr.GetUc = new_instancemethod(_snap.TStr_GetUc,None,TStr)
TStr.CmpI = new_instancemethod(_snap.TStr_CmpI,None,TStr)
TStr.EqI = new_instancemethod(_snap.TStr_EqI,None,TStr)
TStr.IsLc = new_instancemethod(_snap.TStr_IsLc,None,TStr)
TStr.ToLc = new_instancemethod(_snap.TStr_ToLc,None,TStr)
TStr.GetLc = new_instancemethod(_snap.TStr_GetLc,None,TStr)
TStr.ToCap = new_instancemethod(_snap.TStr_ToCap,None,TStr)
TStr.GetCap = new_instancemethod(_snap.TStr_GetCap,None,TStr)
TStr.ToTrunc = new_instancemethod(_snap.TStr_ToTrunc,None,TStr)
TStr.GetTrunc = new_instancemethod(_snap.TStr_GetTrunc,None,TStr)
TStr.ConvUsFromYuAscii = new_instancemethod(_snap.TStr_ConvUsFromYuAscii,None,TStr)
TStr.GetUsFromYuAscii = new_instancemethod(_snap.TStr_GetUsFromYuAscii,None,TStr)
TStr.ToHex = new_instancemethod(_snap.TStr_ToHex,None,TStr)
TStr.GetHex = new_instancemethod(_snap.TStr_GetHex,None,TStr)
TStr.FromHex = new_instancemethod(_snap.TStr_FromHex,None,TStr)
TStr.GetFromHex = new_instancemethod(_snap.TStr_GetFromHex,None,TStr)
TStr.GetSubStr = new_instancemethod(_snap.TStr_GetSubStr,None,TStr)
TStr.InsStr = new_instancemethod(_snap.TStr_InsStr,None,TStr)
TStr.DelChAll = new_instancemethod(_snap.TStr_DelChAll,None,TStr)
TStr.DelSubStr = new_instancemethod(_snap.TStr_DelSubStr,None,TStr)
TStr.DelStr = new_instancemethod(_snap.TStr_DelStr,None,TStr)
TStr.LeftOf = new_instancemethod(_snap.TStr_LeftOf,None,TStr)
TStr.LeftOfLast = new_instancemethod(_snap.TStr_LeftOfLast,None,TStr)
TStr.RightOf = new_instancemethod(_snap.TStr_RightOf,None,TStr)
TStr.RightOfLast = new_instancemethod(_snap.TStr_RightOfLast,None,TStr)
TStr.SplitOnCh = new_instancemethod(_snap.TStr_SplitOnCh,None,TStr)
TStr.SplitOnLastCh = new_instancemethod(_snap.TStr_SplitOnLastCh,None,TStr)
TStr.SplitOnAllCh = new_instancemethod(_snap.TStr_SplitOnAllCh,None,TStr)
TStr.SplitOnAllAnyCh = new_instancemethod(_snap.TStr_SplitOnAllAnyCh,None,TStr)
TStr.SplitOnWs = new_instancemethod(_snap.TStr_SplitOnWs,None,TStr)
TStr.SplitOnNonAlNum = new_instancemethod(_snap.TStr_SplitOnNonAlNum,None,TStr)
TStr.SplitOnStr = new_instancemethod(_snap.TStr_SplitOnStr,None,TStr)
TStr.Mid = new_instancemethod(_snap.TStr_Mid,None,TStr)
TStr.Left = new_instancemethod(_snap.TStr_Left,None,TStr)
TStr.Right = new_instancemethod(_snap.TStr_Right,None,TStr)
TStr.Slice = new_instancemethod(_snap.TStr_Slice,None,TStr)
TStr.__call__ = new_instancemethod(_snap.TStr___call__,None,TStr)
TStr.CountCh = new_instancemethod(_snap.TStr_CountCh,None,TStr)
TStr.SearchCh = new_instancemethod(_snap.TStr_SearchCh,None,TStr)
TStr.SearchChBack = new_instancemethod(_snap.TStr_SearchChBack,None,TStr)
TStr.SearchStr = new_instancemethod(_snap.TStr_SearchStr,None,TStr)
TStr.IsChIn = new_instancemethod(_snap.TStr_IsChIn,None,TStr)
TStr.IsStrIn = new_instancemethod(_snap.TStr_IsStrIn,None,TStr)
TStr.IsPrefix = new_instancemethod(_snap.TStr_IsPrefix,None,TStr)
TStr.IsSuffix = new_instancemethod(_snap.TStr_IsSuffix,None,TStr)
TStr.ChangeCh = new_instancemethod(_snap.TStr_ChangeCh,None,TStr)
TStr.ChangeChAll = new_instancemethod(_snap.TStr_ChangeChAll,None,TStr)
TStr.ChangeStr = new_instancemethod(_snap.TStr_ChangeStr,None,TStr)
TStr.ChangeStrAll = new_instancemethod(_snap.TStr_ChangeStrAll,None,TStr)
TStr.Reverse = new_instancemethod(_snap.TStr_Reverse,None,TStr)
TStr.GetPrimHashCd = new_instancemethod(_snap.TStr_GetPrimHashCd,None,TStr)
TStr.GetSecHashCd = new_instancemethod(_snap.TStr_GetSecHashCd,None,TStr)
TStr.IsBool = new_instancemethod(_snap.TStr_IsBool,None,TStr)
TStr.IsInt = new_instancemethod(_snap.TStr_IsInt,None,TStr)
TStr.GetInt = new_instancemethod(_snap.TStr_GetInt,None,TStr)
TStr.IsUInt = new_instancemethod(_snap.TStr_IsUInt,None,TStr)
TStr.GetUInt = new_instancemethod(_snap.TStr_GetUInt,None,TStr)
TStr.IsInt64 = new_instancemethod(_snap.TStr_IsInt64,None,TStr)
TStr.GetInt64 = new_instancemethod(_snap.TStr_GetInt64,None,TStr)
TStr.IsUInt64 = new_instancemethod(_snap.TStr_IsUInt64,None,TStr)
TStr.GetUInt64 = new_instancemethod(_snap.TStr_GetUInt64,None,TStr)
TStr.IsHexInt = new_instancemethod(_snap.TStr_IsHexInt,None,TStr)
TStr.GetHexInt = new_instancemethod(_snap.TStr_GetHexInt,None,TStr)
TStr.IsHexInt64 = new_instancemethod(_snap.TStr_IsHexInt64,None,TStr)
TStr.GetHexInt64 = new_instancemethod(_snap.TStr_GetHexInt64,None,TStr)
TStr.IsFlt = new_instancemethod(_snap.TStr_IsFlt,None,TStr)
TStr.GetFlt = new_instancemethod(_snap.TStr_GetFlt,None,TStr)
TStr.IsWord = new_instancemethod(_snap.TStr_IsWord,None,TStr)
TStr.IsWs = new_instancemethod(_snap.TStr_IsWs,None,TStr)
TStr.IsWcMatch = new_instancemethod(_snap.TStr_IsWcMatch,None,TStr)
TStr.GetWcMatch = new_instancemethod(_snap.TStr_GetWcMatch,None,TStr)
TStr.GetFPath = new_instancemethod(_snap.TStr_GetFPath,None,TStr)
TStr.GetFBase = new_instancemethod(_snap.TStr_GetFBase,None,TStr)
TStr.GetFMid = new_instancemethod(_snap.TStr_GetFMid,None,TStr)
TStr.GetFExt = new_instancemethod(_snap.TStr_GetFExt,None,TStr)
TStr.SaveTxt = new_instancemethod(_snap.TStr_SaveTxt,None,TStr)
TStr.GetCStr = new_instancemethod(_snap.TStr_GetCStr,None,TStr)
TStr_swigregister = _snap.TStr_swigregister
TStr_swigregister(TStr)

def TStr_GetNrFPath(*args):
  """
    TStr_GetNrFPath(TStr FPath) -> TStr
    Parameters:
       FPath: TStr const & value

       FPath: TStr const & value

    """
  return _snap.TStr_GetNrFPath(*args)

def TStr_GetNrFMid(*args):
  """
    TStr_GetNrFMid(TStr FMid) -> TStr
    Parameters:
       FMid: TStr const & value

       FMid: TStr const & value

    """
  return _snap.TStr_GetNrFMid(*args)

def TStr_GetNrFExt(*args):
  """
    TStr_GetNrFExt(TStr FExt) -> TStr
    Parameters:
       FExt: TStr const & value

       FExt: TStr const & value

    """
  return _snap.TStr_GetNrFExt(*args)

def TStr_GetNrNumFExt(*args):
  """
    TStr_GetNrNumFExt(int FExtN) -> TStr
    Parameters:
       FExtN: int const & value

       FExtN: int const & value

    """
  return _snap.TStr_GetNrNumFExt(*args)

def TStr_GetNrFNm(*args):
  """
    TStr_GetNrFNm(TStr FNm) -> TStr
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    """
  return _snap.TStr_GetNrFNm(*args)

def TStr_GetNrAbsFPath(*args):
  """
    GetNrAbsFPath(TStr FPath, TStr BaseFPath = TStr()) -> TStr
    Parameters:
       FPath: TStr const & value
       BaseFPath: TStr const & value

       FPath: TStr const & value
       BaseFPath: TStr const & value

    TStr_GetNrAbsFPath(TStr FPath) -> TStr
    Parameters:
       FPath: TStr const & value

       FPath: TStr const & value

    """
  return _snap.TStr_GetNrAbsFPath(*args)

def TStr_IsAbsFPath(*args):
  """
    TStr_IsAbsFPath(TStr FPath) -> bool
    Parameters:
       FPath: TStr const & value

       FPath: TStr const & value

    """
  return _snap.TStr_IsAbsFPath(*args)

def TStr_PutFExt(*args):
  """
    TStr_PutFExt(TStr FNm, TStr FExt) -> TStr
    Parameters:
       FNm: TStr const & value
       FExt: TStr const & value

       FNm: TStr const & value
       FExt: TStr const & value

    """
  return _snap.TStr_PutFExt(*args)

def TStr_PutFExtIfEmpty(*args):
  """
    TStr_PutFExtIfEmpty(TStr FNm, TStr FExt) -> TStr
    Parameters:
       FNm: TStr const & value
       FExt: TStr const & value

       FNm: TStr const & value
       FExt: TStr const & value

    """
  return _snap.TStr_PutFExtIfEmpty(*args)

def TStr_PutFBase(*args):
  """
    TStr_PutFBase(TStr FNm, TStr FBase) -> TStr
    Parameters:
       FNm: TStr const & value
       FBase: TStr const & value

       FNm: TStr const & value
       FBase: TStr const & value

    """
  return _snap.TStr_PutFBase(*args)

def TStr_PutFBaseIfEmpty(*args):
  """
    TStr_PutFBaseIfEmpty(TStr FNm, TStr FBase) -> TStr
    Parameters:
       FNm: TStr const & value
       FBase: TStr const & value

       FNm: TStr const & value
       FBase: TStr const & value

    """
  return _snap.TStr_PutFBaseIfEmpty(*args)

def TStr_AddToFMid(*args):
  """
    TStr_AddToFMid(TStr FNm, TStr ExtFMid) -> TStr
    Parameters:
       FNm: TStr const & value
       ExtFMid: TStr const & value

       FNm: TStr const & value
       ExtFMid: TStr const & value

    """
  return _snap.TStr_AddToFMid(*args)

def TStr_GetNumFNm(*args):
  """
    TStr_GetNumFNm(TStr FNm, int Num) -> TStr
    Parameters:
       FNm: TStr const & value
       Num: int const & value

       FNm: TStr const & value
       Num: int const & value

    """
  return _snap.TStr_GetNumFNm(*args)

def TStr_GetFNmStr(*args):
  """
    GetFNmStr(TStr Str, bool AlNumOnlyP = True) -> TStr
    Parameters:
       Str: TStr const & value
       AlNumOnlyP: bool const & value

       Str: TStr const & value
       AlNumOnlyP: bool const & value

    TStr_GetFNmStr(TStr Str) -> TStr
    Parameters:
       Str: TStr const & value

       Str: TStr const & value

    """
  return _snap.TStr_GetFNmStr(*args)

def TStr_LoadTxt(*args):
  """
    LoadTxt(PSIn SIn) -> TStr
    Parameters:
       SIn: PSIn const & value

       SIn: PSIn const & value

    TStr_LoadTxt(TStr FNm) -> TStr
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    """
  return _snap.TStr_LoadTxt(*args)

def TStr_GetChStr(*args):
  """
    TStr_GetChStr(char Ch) -> TStr
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TStr_GetChStr(*args)

def TStr_GetDChStr(*args):
  """
    TStr_GetDChStr(char Ch1, char Ch2) -> TStr
    Parameters:
       Ch1: char const & value
       Ch2: char const & value

       Ch1: char const & value
       Ch2: char const & value

    """
  return _snap.TStr_GetDChStr(*args)

def TStr_GetStr(*args):
  """
    GetStr() -> TStr
    GetStr(TStr Str, char FmtStr) -> TStr
    Parameters:
       Str: TStr const & value
       FmtStr: char const * value

       Str: TStr const & value
       FmtStr: char const * value

    GetStr(TStr Str, TStr FmtStr) -> TStr
    Parameters:
       Str: TStr const & value
       FmtStr: TStr const & value

       Str: TStr const & value
       FmtStr: TStr const & value

    TStr_GetStr(TStrV StrV, TStr DelimiterStr) -> TStr
    Parameters:
       StrV: TStrV const & value
       DelimiterStr: TStr const & value

       StrV: TStrV const & value
       DelimiterStr: TStr const & value

    """
  return _snap.TStr_GetStr(*args)

def TStr_Fmt(*args):
  """
    TStr_Fmt(char FmtStr, v(...) *args) -> TStr
    Parameters:
       FmtStr: char const * value

       FmtStr: char const * value

    """
  return _snap.TStr_Fmt(*args)

def TStr_GetSpaceStr(*args):
  """
    TStr_GetSpaceStr(int Spaces) -> TStr
    Parameters:
       Spaces: int const & value

       Spaces: int const & value

    """
  return _snap.TStr_GetSpaceStr(*args)

def TStr_MkClone(*args):
  """
    TStr_MkClone(TStr Str) -> TStr
    Parameters:
       Str: TStr const & value

       Str: TStr const & value

    """
  return _snap.TStr_MkClone(*args)

def TStr_GetNullStr():
  """TStr_GetNullStr() -> TStr"""
  return _snap.TStr_GetNullStr()

class TStrIn(object):
    """Proxy of C++ TStrIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TStr _Str) -> TStrIn
        Parameters:
           _Str: TStr const & value

           _Str: TStr const & value

        """
        _snap.TStrIn_swiginit(self,_snap.new_TStrIn(*args))
    def New(*args):
        """
        New(TStr Str) -> PSIn
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStrIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStrIn
    def Eof(self):
        """
        Eof(self) -> bool
        Parameters:
           self: TStrIn * value




        """
        return _snap.TStrIn_Eof(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TStrIn const * value




        """
        return _snap.TStrIn_Len(self)

    def GetCh(self):
        """
        GetCh(self) -> char
        Parameters:
           self: TStrIn * value




        """
        return _snap.TStrIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(self) -> char
        Parameters:
           self: TStrIn * value




        """
        return _snap.TStrIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(self, void LBf, TSize LBfL) -> int
        Parameters:
           self: TStrIn * value
           LBf: void const * value
           LBfL: TSize const & value

           LBf: void const * value
           LBfL: TSize const & value

        """
        return _snap.TStrIn_GetBf(self, *args)

    def Reset(self):
        """
        Reset(self)
        Parameters:
           self: TStrIn * value




        """
        return _snap.TStrIn_Reset(self)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(self, TChA LnChA) -> bool
        Parameters:
           self: TStrIn * value
           LnChA: TChA & value

           LnChA: TChA & value

        """
        return _snap.TStrIn_GetNextLnBf(self, *args)

TStrIn.Eof = new_instancemethod(_snap.TStrIn_Eof,None,TStrIn)
TStrIn.Len = new_instancemethod(_snap.TStrIn_Len,None,TStrIn)
TStrIn.GetCh = new_instancemethod(_snap.TStrIn_GetCh,None,TStrIn)
TStrIn.PeekCh = new_instancemethod(_snap.TStrIn_PeekCh,None,TStrIn)
TStrIn.GetBf = new_instancemethod(_snap.TStrIn_GetBf,None,TStrIn)
TStrIn.Reset = new_instancemethod(_snap.TStrIn_Reset,None,TStrIn)
TStrIn.GetNextLnBf = new_instancemethod(_snap.TStrIn_GetNextLnBf,None,TStrIn)
TStrIn_swigregister = _snap.TStrIn_swigregister
TStrIn_swigregister(TStrIn)

def TStrIn_New(*args):
  """
    TStrIn_New(TStr Str) -> PSIn
    Parameters:
       Str: TStr const & value

       Str: TStr const & value

    """
  return _snap.TStrIn_New(*args)

class TDbStr(object):
    """Proxy of C++ TDbStr class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Str1 = _swig_property(_snap.TDbStr_Str1_get, _snap.TDbStr_Str1_set)
    Str2 = _swig_property(_snap.TDbStr_Str2_get, _snap.TDbStr_Str2_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TDbStr
        __init__(self, TDbStr DbStr) -> TDbStr
        Parameters:
           DbStr: TDbStr const & value

           DbStr: TDbStr const & value

        __init__(self, TStr _Str1) -> TDbStr
        Parameters:
           _Str1: TStr const & value

           _Str1: TStr const & value

        __init__(self, TStr _Str1, TStr _Str2) -> TDbStr
        Parameters:
           _Str1: TStr const & value
           _Str2: TStr const & value

           _Str1: TStr const & value
           _Str2: TStr const & value

        __init__(self, TSIn SIn) -> TDbStr
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TDbStr_swiginit(self,_snap.new_TDbStr(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TDbStr const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TDbStr_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TDbStr DbStr) -> bool
        Parameters:
           self: TDbStr const * value
           DbStr: TDbStr const & value

           DbStr: TDbStr const & value

        """
        return _snap.TDbStr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TDbStr DbStr) -> bool
        Parameters:
           self: TDbStr const * value
           DbStr: TDbStr const & value

           DbStr: TDbStr const & value

        """
        return _snap.TDbStr___lt__(self, *args)

    def GetStr(self, *args):
        """
        GetStr(self, TStr MidStr = TStr()) -> TStr
        Parameters:
           MidStr: TStr const & value

           MidStr: TStr const & value

        GetStr(self) -> TStr
        Parameters:
           self: TDbStr const * value


        """
        return _snap.TDbStr_GetStr(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TDbStr const * value




        """
        return _snap.TDbStr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TDbStr const * value




        """
        return _snap.TDbStr_GetSecHashCd(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TDbStr const * value




        """
        return _snap.TDbStr_Empty(self)

    def Filled(self):
        """
        Filled(self) -> bool
        Parameters:
           self: TDbStr const * value




        """
        return _snap.TDbStr_Filled(self)

    __swig_destroy__ = _snap.delete_TDbStr
TDbStr.Save = new_instancemethod(_snap.TDbStr_Save,None,TDbStr)
TDbStr.__eq__ = new_instancemethod(_snap.TDbStr___eq__,None,TDbStr)
TDbStr.__lt__ = new_instancemethod(_snap.TDbStr___lt__,None,TDbStr)
TDbStr.GetStr = new_instancemethod(_snap.TDbStr_GetStr,None,TDbStr)
TDbStr.GetPrimHashCd = new_instancemethod(_snap.TDbStr_GetPrimHashCd,None,TDbStr)
TDbStr.GetSecHashCd = new_instancemethod(_snap.TDbStr_GetSecHashCd,None,TDbStr)
TDbStr.Empty = new_instancemethod(_snap.TDbStr_Empty,None,TDbStr)
TDbStr.Filled = new_instancemethod(_snap.TDbStr_Filled,None,TDbStr)
TDbStr_swigregister = _snap.TDbStr_swigregister
TDbStr_swigregister(TDbStr)

class TStrPool(object):
    """Proxy of C++ TStrPool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, uint MxBfLen = 0, uint _GrowBy = 16*1024*1024) -> TStrPool
        Parameters:
           MxBfLen: uint const & value
           _GrowBy: uint const & value

           MxBfLen: uint const & value
           _GrowBy: uint const & value

        __init__(self, uint MxBfLen = 0) -> TStrPool
        Parameters:
           MxBfLen: uint const & value

           MxBfLen: uint const & value

        __init__(self) -> TStrPool
        __init__(self, TSIn SIn, bool LoadCompact = True) -> TStrPool
        Parameters:
           SIn: TSIn & value
           LoadCompact: bool value

           SIn: TSIn & value
           LoadCompact: bool value

        __init__(self, TSIn SIn) -> TStrPool
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        __init__(self, TStrPool Pool) -> TStrPool
        Parameters:
           Pool: TStrPool const & value

           Pool: TStrPool const & value

        """
        _snap.TStrPool_swiginit(self,_snap.new_TStrPool(*args))
    __swig_destroy__ = _snap.delete_TStrPool
    def New(*args):
        """
        New(uint _MxBfLen = 0, uint _GrowBy = 16*1024*1024) -> PStrPool
        Parameters:
           _MxBfLen: uint const & value
           _GrowBy: uint const & value

           _MxBfLen: uint const & value
           _GrowBy: uint const & value

           _MxBfLen: uint const & value
           _GrowBy: uint const & value

        New(uint _MxBfLen = 0) -> PStrPool
        Parameters:
           _MxBfLen: uint const & value

           _MxBfLen: uint const & value

           _MxBfLen: uint const & value

        New() -> PStrPool
        New(TSIn SIn) -> PStrPool
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        New(TStr fileName) -> PStrPool
        Parameters:
           fileName: TStr const & value

           fileName: TStr const & value

           fileName: TStr const & value

        """
        return _snap.TStrPool_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn, bool LoadCompacted = True) -> PStrPool
        Parameters:
           SIn: TSIn & value
           LoadCompacted: bool value

           SIn: TSIn & value
           LoadCompacted: bool value

           SIn: TSIn & value
           LoadCompacted: bool value

        Load(TSIn SIn) -> PStrPool
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TStrPool_Load(*args)

    Load = staticmethod(Load)
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           SOut: TSOut & value

           SOut: TSOut & value

        Save(self, TStr FNm)
        Parameters:
           self: TStrPool * value
           FNm: TStr const & value

           FNm: TStr const & value

        """
        return _snap.TStrPool_Save(self, *args)

    def Len(self):
        """
        Len(self) -> uint
        Parameters:
           self: TStrPool const * value




        """
        return _snap.TStrPool_Len(self)

    def Size(self):
        """
        Size(self) -> uint
        Parameters:
           self: TStrPool const * value




        """
        return _snap.TStrPool_Size(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TStrPool const * value




        """
        return _snap.TStrPool_Empty(self)

    def __call__(self):
        """
        __call__(self) -> char
        Parameters:
           self: TStrPool const * value




        """
        return _snap.TStrPool___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: TStrPool * value




        """
        return _snap.TStrPool_GetMemUsed(self)

    def AddStr(self, *args):
        """
        AddStr(self, char Str, uint Len) -> uint
        Parameters:
           Str: char const * value
           Len: uint const & value

           Str: char const * value
           Len: uint const & value

        AddStr(self, char Str) -> uint
        Parameters:
           Str: char const * value

           Str: char const * value

        AddStr(self, TStr Str) -> uint
        Parameters:
           self: TStrPool * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStrPool_AddStr(self, *args)

    def GetStr(self, *args):
        """
        GetStr(self, uint Offset) -> TStr
        Parameters:
           self: TStrPool const * value
           Offset: uint const & value

           Offset: uint const & value

        """
        return _snap.TStrPool_GetStr(self, *args)

    def GetCStr(self, *args):
        """
        GetCStr(self, uint Offset) -> char
        Parameters:
           self: TStrPool const * value
           Offset: uint const & value

           Offset: uint const & value

        """
        return _snap.TStrPool_GetCStr(self, *args)

    def Clr(self, DoDel = False):
        """
        Clr(self, bool DoDel = False)
        Parameters:
           DoDel: bool value

           DoDel: bool value

           DoDel: bool value

           DoDel: bool value

        Clr(self)
        Parameters:
           self: TStrPool * value


        """
        return _snap.TStrPool_Clr(self, DoDel)

    def Cmp(self, *args):
        """
        Cmp(self, uint Offset, char Str) -> int
        Parameters:
           self: TStrPool const * value
           Offset: uint const & value
           Str: char const * value

           Offset: uint const & value
           Str: char const * value

        """
        return _snap.TStrPool_Cmp(self, *args)

    def GetPrimHashCd(self, *args):
        """
        GetPrimHashCd(self, char CStr) -> int
        Parameters:
           CStr: char const * value

           CStr: char const * value

        GetPrimHashCd(self, uint Offset) -> int
        Parameters:
           self: TStrPool * value
           Offset: uint const & value

           Offset: uint const & value

        """
        return _snap.TStrPool_GetPrimHashCd(self, *args)

    def GetSecHashCd(self, *args):
        """
        GetSecHashCd(self, char CStr) -> int
        Parameters:
           CStr: char const * value

           CStr: char const * value

        GetSecHashCd(self, uint Offset) -> int
        Parameters:
           self: TStrPool * value
           Offset: uint const & value

           Offset: uint const & value

        """
        return _snap.TStrPool_GetSecHashCd(self, *args)

TStrPool.Save = new_instancemethod(_snap.TStrPool_Save,None,TStrPool)
TStrPool.Len = new_instancemethod(_snap.TStrPool_Len,None,TStrPool)
TStrPool.Size = new_instancemethod(_snap.TStrPool_Size,None,TStrPool)
TStrPool.Empty = new_instancemethod(_snap.TStrPool_Empty,None,TStrPool)
TStrPool.__call__ = new_instancemethod(_snap.TStrPool___call__,None,TStrPool)
TStrPool.GetMemUsed = new_instancemethod(_snap.TStrPool_GetMemUsed,None,TStrPool)
TStrPool.AddStr = new_instancemethod(_snap.TStrPool_AddStr,None,TStrPool)
TStrPool.GetStr = new_instancemethod(_snap.TStrPool_GetStr,None,TStrPool)
TStrPool.GetCStr = new_instancemethod(_snap.TStrPool_GetCStr,None,TStrPool)
TStrPool.Clr = new_instancemethod(_snap.TStrPool_Clr,None,TStrPool)
TStrPool.Cmp = new_instancemethod(_snap.TStrPool_Cmp,None,TStrPool)
TStrPool.GetPrimHashCd = new_instancemethod(_snap.TStrPool_GetPrimHashCd,None,TStrPool)
TStrPool.GetSecHashCd = new_instancemethod(_snap.TStrPool_GetSecHashCd,None,TStrPool)
TStrPool_swigregister = _snap.TStrPool_swigregister
TStrPool_swigregister(TStrPool)

def TStrPool_New(*args):
  """
    New(uint _MxBfLen = 0, uint _GrowBy = 16*1024*1024) -> PStrPool
    Parameters:
       _MxBfLen: uint const & value
       _GrowBy: uint const & value

       _MxBfLen: uint const & value
       _GrowBy: uint const & value

    New(uint _MxBfLen = 0) -> PStrPool
    Parameters:
       _MxBfLen: uint const & value

       _MxBfLen: uint const & value

    New() -> PStrPool
    New(TSIn SIn) -> PStrPool
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    TStrPool_New(TStr fileName) -> PStrPool
    Parameters:
       fileName: TStr const & value

       fileName: TStr const & value

    """
  return _snap.TStrPool_New(*args)

def TStrPool_Load(*args):
  """
    Load(TSIn SIn, bool LoadCompacted = True) -> PStrPool
    Parameters:
       SIn: TSIn & value
       LoadCompacted: bool value

       SIn: TSIn & value
       LoadCompacted: bool value

    TStrPool_Load(TSIn SIn) -> PStrPool
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TStrPool_Load(*args)

class TStrPool64(object):
    """Proxy of C++ TStrPool64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, ::TSize _MxBfL = 0, ::TSize _GrowBy = 16*1024*1024) -> TStrPool64
        Parameters:
           _MxBfL: ::TSize value
           _GrowBy: ::TSize value

           _MxBfL: ::TSize value
           _GrowBy: ::TSize value

        __init__(self, ::TSize _MxBfL = 0) -> TStrPool64
        Parameters:
           _MxBfL: ::TSize value

           _MxBfL: ::TSize value

        __init__(self) -> TStrPool64
        __init__(self, TStrPool64 StrPool) -> TStrPool64
        Parameters:
           StrPool: TStrPool64 const & value

           StrPool: TStrPool64 const & value

        __init__(self, TSIn SIn, bool LoadCompact = True) -> TStrPool64
        Parameters:
           SIn: TSIn & value
           LoadCompact: bool value

           SIn: TSIn & value
           LoadCompact: bool value

        __init__(self, TSIn SIn) -> TStrPool64
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TStrPool64_swiginit(self,_snap.new_TStrPool64(*args))
    __swig_destroy__ = _snap.delete_TStrPool64
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TStrPool64 const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TStrPool64_Save(self, *args)

    def New(MxBfL = 0, GrowBy = 16*1024*1024):
        """
        New(::TSize MxBfL = 0, ::TSize GrowBy = 16*1024*1024) -> PStrPool64
        Parameters:
           MxBfL: ::TSize value
           GrowBy: ::TSize value

           MxBfL: ::TSize value
           GrowBy: ::TSize value

           MxBfL: ::TSize value
           GrowBy: ::TSize value

           MxBfL: ::TSize value
           GrowBy: ::TSize value

           MxBfL: ::TSize value
           GrowBy: ::TSize value

           MxBfL: ::TSize value
           GrowBy: ::TSize value

           MxBfL: ::TSize value
           GrowBy: ::TSize value

        New(::TSize MxBfL = 0) -> PStrPool64
        Parameters:
           MxBfL: ::TSize value

           MxBfL: ::TSize value

           MxBfL: ::TSize value

        New() -> PStrPool64
        """
        return _snap.TStrPool64_New(MxBfL, GrowBy)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn, bool LoadCompact = True) -> PStrPool64
        Parameters:
           SIn: TSIn & value
           LoadCompact: bool value

           SIn: TSIn & value
           LoadCompact: bool value

           SIn: TSIn & value
           LoadCompact: bool value

        Load(TSIn SIn) -> PStrPool64
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TStrPool64_Load(*args)

    Load = staticmethod(Load)
    def GetMemUsed(self):
        """
        GetMemUsed(self) -> uint64
        Parameters:
           self: TStrPool64 const * value




        """
        return _snap.TStrPool64_GetMemUsed(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TStrPool64 const * value




        """
        return _snap.TStrPool64_Empty(self)

    def Len(self):
        """
        Len(self) -> uint64
        Parameters:
           self: TStrPool64 const * value




        """
        return _snap.TStrPool64_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> uint64
        Parameters:
           self: TStrPool64 const * value




        """
        return _snap.TStrPool64_Reserved(self)

    def Clr(self, DoDel = False):
        """
        Clr(self, bool DoDel = False)
        Parameters:
           DoDel: bool value

           DoDel: bool value

           DoDel: bool value

           DoDel: bool value

        Clr(self)
        Parameters:
           self: TStrPool64 * value


        """
        return _snap.TStrPool64_Clr(self, DoDel)

    def Cmp(self, *args):
        """
        Cmp(self, uint64 Offset, char Str) -> int
        Parameters:
           self: TStrPool64 const * value
           Offset: uint64 value
           Str: char const * value

           Offset: uint64 value
           Str: char const * value

        """
        return _snap.TStrPool64_Cmp(self, *args)

    def AddStr(self, *args):
        """
        AddStr(self, TStr Str) -> uint64
        Parameters:
           self: TStrPool64 * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TStrPool64_AddStr(self, *args)

    def GetStr(self, *args):
        """
        GetStr(self, uint64 StrId) -> TStr
        Parameters:
           self: TStrPool64 const * value
           StrId: uint64 const & value

           StrId: uint64 const & value

        """
        return _snap.TStrPool64_GetStr(self, *args)

TStrPool64.Save = new_instancemethod(_snap.TStrPool64_Save,None,TStrPool64)
TStrPool64.GetMemUsed = new_instancemethod(_snap.TStrPool64_GetMemUsed,None,TStrPool64)
TStrPool64.Empty = new_instancemethod(_snap.TStrPool64_Empty,None,TStrPool64)
TStrPool64.Len = new_instancemethod(_snap.TStrPool64_Len,None,TStrPool64)
TStrPool64.Reserved = new_instancemethod(_snap.TStrPool64_Reserved,None,TStrPool64)
TStrPool64.Clr = new_instancemethod(_snap.TStrPool64_Clr,None,TStrPool64)
TStrPool64.Cmp = new_instancemethod(_snap.TStrPool64_Cmp,None,TStrPool64)
TStrPool64.AddStr = new_instancemethod(_snap.TStrPool64_AddStr,None,TStrPool64)
TStrPool64.GetStr = new_instancemethod(_snap.TStrPool64_GetStr,None,TStrPool64)
TStrPool64_swigregister = _snap.TStrPool64_swigregister
TStrPool64_swigregister(TStrPool64)

def TStrPool64_New(MxBfL = 0, GrowBy = 16*1024*1024):
  """
    New(::TSize MxBfL = 0, ::TSize GrowBy = 16*1024*1024) -> PStrPool64
    Parameters:
       MxBfL: ::TSize value
       GrowBy: ::TSize value

       MxBfL: ::TSize value
       GrowBy: ::TSize value

       MxBfL: ::TSize value
       GrowBy: ::TSize value

       MxBfL: ::TSize value
       GrowBy: ::TSize value

    New(::TSize MxBfL = 0) -> PStrPool64
    Parameters:
       MxBfL: ::TSize value

       MxBfL: ::TSize value

    TStrPool64_New() -> PStrPool64
    """
  return _snap.TStrPool64_New(MxBfL, GrowBy)

def TStrPool64_Load(*args):
  """
    Load(TSIn SIn, bool LoadCompact = True) -> PStrPool64
    Parameters:
       SIn: TSIn & value
       LoadCompact: bool value

       SIn: TSIn & value
       LoadCompact: bool value

    TStrPool64_Load(TSIn SIn) -> PStrPool64
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TStrPool64_Load(*args)

class TVoid(object):
    """Proxy of C++ TVoid class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TVoid
        __init__(self, TSIn arg0) -> TVoid
        Parameters:
           arg1: TSIn & value

           : TSIn & value

        """
        _snap.TVoid_swiginit(self,_snap.new_TVoid(*args))
    def Save(self, *args):
        """
        Save(self, TSOut arg0)
        Parameters:
           self: TVoid const * value
           arg2: TSOut & value

           : TSOut & value

        """
        return _snap.TVoid_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TVoid arg0) -> bool
        Parameters:
           self: TVoid const * value
           arg2: TVoid const & value

           : TVoid const & value

        """
        return _snap.TVoid___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TVoid arg0) -> bool
        Parameters:
           self: TVoid const * value
           arg2: TVoid const & value

           : TVoid const & value

        """
        return _snap.TVoid___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVoid const * value




        """
        return _snap.TVoid_GetMemUsed(self)

    __swig_destroy__ = _snap.delete_TVoid
TVoid.Save = new_instancemethod(_snap.TVoid_Save,None,TVoid)
TVoid.__eq__ = new_instancemethod(_snap.TVoid___eq__,None,TVoid)
TVoid.__lt__ = new_instancemethod(_snap.TVoid___lt__,None,TVoid)
TVoid.GetMemUsed = new_instancemethod(_snap.TVoid_GetMemUsed,None,TVoid)
TVoid_swigregister = _snap.TVoid_swigregister
TVoid_swigregister(TVoid)

class TBool(object):
    """Proxy of C++ TBool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TBool_Val_get, _snap.TBool_Val_set)
    Rnd = _swig_property(_snap.TBool_Rnd_get, _snap.TBool_Rnd_set)
    def __nonzero__(self):
        return _snap.TBool___nonzero__(self)
    __bool__ = __nonzero__


    def __init__(self, *args): 
        """
        __init__(self) -> TBool
        __init__(self, bool _Val) -> TBool
        Parameters:
           _Val: bool const & value

           _Val: bool const & value

        __init__(self, TSIn SIn) -> TBool
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TBool_swiginit(self,_snap.new_TBool(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TBool * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TBool_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TBool const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TBool_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TBool Bool) -> bool
        Parameters:
           self: TBool const * value
           Bool: TBool const & value

           Bool: TBool const & value

        """
        return _snap.TBool___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TBool Bool) -> bool
        Parameters:
           self: TBool const * value
           Bool: TBool const & value

           Bool: TBool const & value

        """
        return _snap.TBool___lt__(self, *args)

    def __call__(self):
        """
        __call__(self) -> bool
        Parameters:
           self: TBool const * value




        """
        return _snap.TBool___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TBool const * value




        """
        return _snap.TBool_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TBool const * value




        """
        return _snap.TBool_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TBool const * value




        """
        return _snap.TBool_GetSecHashCd(self)

    def GetRnd():
        """GetRnd() -> bool"""
        return _snap.TBool_GetRnd()

    GetRnd = staticmethod(GetRnd)
    def GetStr(*args):
        """
        GetStr(bool Val) -> TStr
        Parameters:
           Val: bool const & value

           Val: bool const & value

           Val: bool const & value

        GetStr(TBool Bool) -> TStr
        Parameters:
           Bool: TBool const & value

           Bool: TBool const & value

           Bool: TBool const & value

        """
        return _snap.TBool_GetStr(*args)

    GetStr = staticmethod(GetStr)
    def GetYNStr(*args):
        """
        GetYNStr(bool Val) -> TStr
        Parameters:
           Val: bool const & value

           Val: bool const & value

           Val: bool const & value

        """
        return _snap.TBool_GetYNStr(*args)

    GetYNStr = staticmethod(GetYNStr)
    def GetYesNoStr(*args):
        """
        GetYesNoStr(bool Val) -> TStr
        Parameters:
           Val: bool const & value

           Val: bool const & value

           Val: bool const & value

        """
        return _snap.TBool_GetYesNoStr(*args)

    GetYesNoStr = staticmethod(GetYesNoStr)
    def Get01Str(*args):
        """
        Get01Str(bool Val) -> TStr
        Parameters:
           Val: bool const & value

           Val: bool const & value

           Val: bool const & value

        """
        return _snap.TBool_Get01Str(*args)

    Get01Str = staticmethod(Get01Str)
    def IsValStr(*args):
        """
        IsValStr(TStr Str) -> bool
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TBool_IsValStr(*args)

    IsValStr = staticmethod(IsValStr)
    def GetValFromStr(*args):
        """
        GetValFromStr(TStr Str) -> bool
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

           Str: TStr const & value

        GetValFromStr(TStr Str, bool DfVal) -> bool
        Parameters:
           Str: TStr const & value
           DfVal: bool const & value

           Str: TStr const & value
           DfVal: bool const & value

           Str: TStr const & value
           DfVal: bool const & value

        """
        return _snap.TBool_GetValFromStr(*args)

    GetValFromStr = staticmethod(GetValFromStr)
    __swig_destroy__ = _snap.delete_TBool
TBool.Load = new_instancemethod(_snap.TBool_Load,None,TBool)
TBool.Save = new_instancemethod(_snap.TBool_Save,None,TBool)
TBool.__eq__ = new_instancemethod(_snap.TBool___eq__,None,TBool)
TBool.__lt__ = new_instancemethod(_snap.TBool___lt__,None,TBool)
TBool.__call__ = new_instancemethod(_snap.TBool___call__,None,TBool)
TBool.GetMemUsed = new_instancemethod(_snap.TBool_GetMemUsed,None,TBool)
TBool.GetPrimHashCd = new_instancemethod(_snap.TBool_GetPrimHashCd,None,TBool)
TBool.GetSecHashCd = new_instancemethod(_snap.TBool_GetSecHashCd,None,TBool)
TBool_swigregister = _snap.TBool_swigregister
TBool_swigregister(TBool)
TBool.Mn = _snap.cvar.TBool_Mn
TBool.Mx = _snap.cvar.TBool_Mx
TBool.Vals = _snap.cvar.TBool_Vals
TBool.FalseStr = _snap.cvar.TBool_FalseStr
TBool.TrueStr = _snap.cvar.TBool_TrueStr
TBool.NStr = _snap.cvar.TBool_NStr
TBool.YStr = _snap.cvar.TBool_YStr
TBool.NoStr = _snap.cvar.TBool_NoStr
TBool.YesStr = _snap.cvar.TBool_YesStr

def TBool_GetRnd():
  """TBool_GetRnd() -> bool"""
  return _snap.TBool_GetRnd()

def TBool_GetStr(*args):
  """
    GetStr(bool Val) -> TStr
    Parameters:
       Val: bool const & value

       Val: bool const & value

    TBool_GetStr(TBool Bool) -> TStr
    Parameters:
       Bool: TBool const & value

       Bool: TBool const & value

    """
  return _snap.TBool_GetStr(*args)

def TBool_GetYNStr(*args):
  """
    TBool_GetYNStr(bool Val) -> TStr
    Parameters:
       Val: bool const & value

       Val: bool const & value

    """
  return _snap.TBool_GetYNStr(*args)

def TBool_GetYesNoStr(*args):
  """
    TBool_GetYesNoStr(bool Val) -> TStr
    Parameters:
       Val: bool const & value

       Val: bool const & value

    """
  return _snap.TBool_GetYesNoStr(*args)

def TBool_Get01Str(*args):
  """
    TBool_Get01Str(bool Val) -> TStr
    Parameters:
       Val: bool const & value

       Val: bool const & value

    """
  return _snap.TBool_Get01Str(*args)

def TBool_IsValStr(*args):
  """
    TBool_IsValStr(TStr Str) -> bool
    Parameters:
       Str: TStr const & value

       Str: TStr const & value

    """
  return _snap.TBool_IsValStr(*args)

def TBool_GetValFromStr(*args):
  """
    GetValFromStr(TStr Str) -> bool
    Parameters:
       Str: TStr const & value

       Str: TStr const & value

    TBool_GetValFromStr(TStr Str, bool DfVal) -> bool
    Parameters:
       Str: TStr const & value
       DfVal: bool const & value

       Str: TStr const & value
       DfVal: bool const & value

    """
  return _snap.TBool_GetValFromStr(*args)

class TCh(object):
    """Proxy of C++ TCh class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TCh_Val_get, _snap.TCh_Val_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TCh
        __init__(self, char _Val) -> TCh
        Parameters:
           _Val: char const & value

           _Val: char const & value

        __init__(self, TSIn SIn) -> TCh
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TCh_swiginit(self,_snap.new_TCh(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TCh * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TCh_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TCh const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TCh_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TCh Ch) -> bool
        Parameters:
           self: TCh const * value
           Ch: TCh const & value

           Ch: TCh const & value

        """
        return _snap.TCh___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TCh Ch) -> bool
        Parameters:
           self: TCh const * value
           Ch: TCh const & value

           Ch: TCh const & value

        """
        return _snap.TCh___lt__(self, *args)

    def __call__(self):
        """
        __call__(self) -> char
        Parameters:
           self: TCh const * value




        """
        return _snap.TCh___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TCh const * value




        """
        return _snap.TCh_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TCh const * value




        """
        return _snap.TCh_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TCh const * value




        """
        return _snap.TCh_GetSecHashCd(self)

    def IsHashCh(*args):
        """
        IsHashCh(char Ch) -> bool
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_IsHashCh(*args)

    IsHashCh = staticmethod(IsHashCh)
    def IsWs(*args):
        """
        IsWs(char Ch) -> bool
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_IsWs(*args)

    IsWs = staticmethod(IsWs)
    def IsAlpha(*args):
        """
        IsAlpha(char Ch) -> bool
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_IsAlpha(*args)

    IsAlpha = staticmethod(IsAlpha)
    def IsNum(*args):
        """
        IsNum(char Ch) -> bool
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_IsNum(*args)

    IsNum = staticmethod(IsNum)
    def IsAlNum(*args):
        """
        IsAlNum(char Ch) -> bool
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_IsAlNum(*args)

    IsAlNum = staticmethod(IsAlNum)
    def GetNum(*args):
        """
        GetNum(char Ch) -> int
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_GetNum(*args)

    GetNum = staticmethod(GetNum)
    def IsHex(*args):
        """
        IsHex(char Ch) -> bool
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_IsHex(*args)

    IsHex = staticmethod(IsHex)
    def GetHex(*args):
        """
        GetHex(char Ch) -> int
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_GetHex(*args)

    GetHex = staticmethod(GetHex)
    def GetHexCh(*args):
        """
        GetHexCh(int Val) -> char
        Parameters:
           Val: int const & value

           Val: int const & value

           Val: int const & value

        """
        return _snap.TCh_GetHexCh(*args)

    GetHexCh = staticmethod(GetHexCh)
    def IsUc(*args):
        """
        IsUc(char Ch) -> char
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_IsUc(*args)

    IsUc = staticmethod(IsUc)
    def GetUc(*args):
        """
        GetUc(char Ch) -> char
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_GetUc(*args)

    GetUc = staticmethod(GetUc)
    def GetUsFromYuAscii(*args):
        """
        GetUsFromYuAscii(char Ch) -> char
        Parameters:
           Ch: char const & value

           Ch: char const & value

           Ch: char const & value

        """
        return _snap.TCh_GetUsFromYuAscii(*args)

    GetUsFromYuAscii = staticmethod(GetUsFromYuAscii)
    def GetStr(*args):
        """
        GetStr(TCh Ch) -> TStr
        Parameters:
           Ch: TCh const & value

           Ch: TCh const & value

           Ch: TCh const & value

        """
        return _snap.TCh_GetStr(*args)

    GetStr = staticmethod(GetStr)
    __swig_destroy__ = _snap.delete_TCh
TCh.Load = new_instancemethod(_snap.TCh_Load,None,TCh)
TCh.Save = new_instancemethod(_snap.TCh_Save,None,TCh)
TCh.__eq__ = new_instancemethod(_snap.TCh___eq__,None,TCh)
TCh.__lt__ = new_instancemethod(_snap.TCh___lt__,None,TCh)
TCh.__call__ = new_instancemethod(_snap.TCh___call__,None,TCh)
TCh.GetMemUsed = new_instancemethod(_snap.TCh_GetMemUsed,None,TCh)
TCh.GetPrimHashCd = new_instancemethod(_snap.TCh_GetPrimHashCd,None,TCh)
TCh.GetSecHashCd = new_instancemethod(_snap.TCh_GetSecHashCd,None,TCh)
TCh_swigregister = _snap.TCh_swigregister
TCh_swigregister(TCh)
TCh.Mn = _snap.cvar.TCh_Mn
TCh.Mx = _snap.cvar.TCh_Mx
TCh.Vals = _snap.cvar.TCh_Vals
TCh.NullCh = _snap.cvar.TCh_NullCh
TCh.TabCh = _snap.cvar.TCh_TabCh
TCh.LfCh = _snap.cvar.TCh_LfCh
TCh.CrCh = _snap.cvar.TCh_CrCh
TCh.EofCh = _snap.cvar.TCh_EofCh
TCh.HashCh = _snap.cvar.TCh_HashCh

def TCh_IsHashCh(*args):
  """
    TCh_IsHashCh(char Ch) -> bool
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_IsHashCh(*args)

def TCh_IsWs(*args):
  """
    TCh_IsWs(char Ch) -> bool
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_IsWs(*args)

def TCh_IsAlpha(*args):
  """
    TCh_IsAlpha(char Ch) -> bool
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_IsAlpha(*args)

def TCh_IsNum(*args):
  """
    TCh_IsNum(char Ch) -> bool
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_IsNum(*args)

def TCh_IsAlNum(*args):
  """
    TCh_IsAlNum(char Ch) -> bool
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_IsAlNum(*args)

def TCh_GetNum(*args):
  """
    TCh_GetNum(char Ch) -> int
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_GetNum(*args)

def TCh_IsHex(*args):
  """
    TCh_IsHex(char Ch) -> bool
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_IsHex(*args)

def TCh_GetHex(*args):
  """
    TCh_GetHex(char Ch) -> int
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_GetHex(*args)

def TCh_GetHexCh(*args):
  """
    TCh_GetHexCh(int Val) -> char
    Parameters:
       Val: int const & value

       Val: int const & value

    """
  return _snap.TCh_GetHexCh(*args)

def TCh_IsUc(*args):
  """
    TCh_IsUc(char Ch) -> char
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_IsUc(*args)

def TCh_GetUc(*args):
  """
    TCh_GetUc(char Ch) -> char
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_GetUc(*args)

def TCh_GetUsFromYuAscii(*args):
  """
    TCh_GetUsFromYuAscii(char Ch) -> char
    Parameters:
       Ch: char const & value

       Ch: char const & value

    """
  return _snap.TCh_GetUsFromYuAscii(*args)

def TCh_GetStr(*args):
  """
    TCh_GetStr(TCh Ch) -> TStr
    Parameters:
       Ch: TCh const & value

       Ch: TCh const & value

    """
  return _snap.TCh_GetStr(*args)

class TUCh(object):
    """Proxy of C++ TUCh class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TUCh_Val_get, _snap.TUCh_Val_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TUCh
        __init__(self, uchar _Val) -> TUCh
        Parameters:
           _Val: uchar const & value

           _Val: uchar const & value

        __init__(self, TSIn SIn) -> TUCh
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TUCh_swiginit(self,_snap.new_TUCh(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TUCh const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TUCh_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TUCh UCh) -> bool
        Parameters:
           self: TUCh const * value
           UCh: TUCh const & value

           UCh: TUCh const & value

        """
        return _snap.TUCh___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TUCh UCh) -> bool
        Parameters:
           self: TUCh const * value
           UCh: TUCh const & value

           UCh: TUCh const & value

        """
        return _snap.TUCh___lt__(self, *args)

    def __call__(self):
        """
        __call__(self) -> uchar
        Parameters:
           self: TUCh const * value




        """
        return _snap.TUCh___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TUCh const * value




        """
        return _snap.TUCh_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TUCh const * value




        """
        return _snap.TUCh_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TUCh const * value




        """
        return _snap.TUCh_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TUCh
TUCh.Save = new_instancemethod(_snap.TUCh_Save,None,TUCh)
TUCh.__eq__ = new_instancemethod(_snap.TUCh___eq__,None,TUCh)
TUCh.__lt__ = new_instancemethod(_snap.TUCh___lt__,None,TUCh)
TUCh.__call__ = new_instancemethod(_snap.TUCh___call__,None,TUCh)
TUCh.GetMemUsed = new_instancemethod(_snap.TUCh_GetMemUsed,None,TUCh)
TUCh.GetPrimHashCd = new_instancemethod(_snap.TUCh_GetPrimHashCd,None,TUCh)
TUCh.GetSecHashCd = new_instancemethod(_snap.TUCh_GetSecHashCd,None,TUCh)
TUCh_swigregister = _snap.TUCh_swigregister
TUCh_swigregister(TUCh)
TUCh.Mn = _snap.cvar.TUCh_Mn
TUCh.Mx = _snap.cvar.TUCh_Mx
TUCh.Vals = _snap.cvar.TUCh_Vals

class TSInt(object):
    """Proxy of C++ TSInt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TSInt_Val_get, _snap.TSInt_Val_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TSInt
        __init__(self, int16 _Val) -> TSInt
        Parameters:
           _Val: int16 const & value

           _Val: int16 const & value

        __init__(self, TSIn SIn) -> TSInt
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TSInt_swiginit(self,_snap.new_TSInt(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TSInt * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TSInt_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TSInt const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TSInt_Save(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TSInt const * value




        """
        return _snap.TSInt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TSInt const * value




        """
        return _snap.TSInt_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TSInt
TSInt.Load = new_instancemethod(_snap.TSInt_Load,None,TSInt)
TSInt.Save = new_instancemethod(_snap.TSInt_Save,None,TSInt)
TSInt.GetPrimHashCd = new_instancemethod(_snap.TSInt_GetPrimHashCd,None,TSInt)
TSInt.GetSecHashCd = new_instancemethod(_snap.TSInt_GetSecHashCd,None,TSInt)
TSInt_swigregister = _snap.TSInt_swigregister
TSInt_swigregister(TSInt)

class TInt(object):
    """Proxy of C++ TInt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TInt_Val_get, _snap.TInt_Val_set)
    Rnd = _swig_property(_snap.TInt_Rnd_get, _snap.TInt_Rnd_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TInt
        __init__(self, int _Val) -> TInt
        Parameters:
           _Val: int const & value

           _Val: int const & value

        __init__(self, TSIn SIn) -> TInt
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TInt_swiginit(self,_snap.new_TInt(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TInt * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TInt_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TInt const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TInt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TInt Int) -> bool
        Parameters:
           Int: TInt const & value

           Int: TInt const & value

        __eq__(self, int Int) -> bool
        Parameters:
           self: TInt const * value
           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, int Int) -> bool
        Parameters:
           self: TInt const * value
           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TInt Int) -> bool
        Parameters:
           Int: TInt const & value

           Int: TInt const & value

        __lt__(self, int Int) -> bool
        Parameters:
           self: TInt const * value
           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt___lt__(self, *args)

    def __call__(self):
        """
        __call__(self) -> int
        Parameters:
           self: TInt const * value




        """
        return _snap.TInt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(self, int Int) -> TInt
        Parameters:
           self: TInt * value
           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, int Int) -> TInt
        Parameters:
           self: TInt * value
           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt___isub__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TInt const * value




        """
        return _snap.TInt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TInt const * value




        """
        return _snap.TInt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TInt const * value




        """
        return _snap.TInt_GetSecHashCd(self)

    def Abs(*args):
        """
        Abs(int Int) -> int
        Parameters:
           Int: int const & value

           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt_Abs(*args)

    Abs = staticmethod(Abs)
    def Sign(*args):
        """
        Sign(int Int) -> int
        Parameters:
           Int: int const & value

           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt_Sign(*args)

    Sign = staticmethod(Sign)
    def Swap(*args):
        """
        Swap(int Int1, int Int2)
        Parameters:
           Int1: int & value
           Int2: int & value

           Int1: int & value
           Int2: int & value

           Int1: int & value
           Int2: int & value

        """
        return _snap.TInt_Swap(*args)

    Swap = staticmethod(Swap)
    def GetRnd(Range = 0):
        """
        GetRnd(int Range = 0) -> int
        Parameters:
           Range: int const & value

           Range: int const & value

           Range: int const & value

           Range: int const & value

           Range: int const & value

           Range: int const & value

           Range: int const & value

        GetRnd() -> int
        """
        return _snap.TInt_GetRnd(Range)

    GetRnd = staticmethod(GetRnd)
    def IsOdd(*args):
        """
        IsOdd(int Int) -> bool
        Parameters:
           Int: int const & value

           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt_IsOdd(*args)

    IsOdd = staticmethod(IsOdd)
    def IsEven(*args):
        """
        IsEven(int Int) -> bool
        Parameters:
           Int: int const & value

           Int: int const & value

           Int: int const & value

        """
        return _snap.TInt_IsEven(*args)

    IsEven = staticmethod(IsEven)
    def GetMn(*args):
        """
        GetMn(int Int1, int Int2) -> int
        Parameters:
           Int1: int const & value
           Int2: int const & value

           Int1: int const & value
           Int2: int const & value

           Int1: int const & value
           Int2: int const & value

        GetMn(int Int1, int Int2, int Int3) -> int
        Parameters:
           Int1: int const & value
           Int2: int const & value
           Int3: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value

        GetMn(int Int1, int Int2, int Int3, int Int4) -> int
        Parameters:
           Int1: int const & value
           Int2: int const & value
           Int3: int const & value
           Int4: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value
           Int4: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value
           Int4: int const & value

        """
        return _snap.TInt_GetMn(*args)

    GetMn = staticmethod(GetMn)
    def GetMx(*args):
        """
        GetMx(int Int1, int Int2) -> int
        Parameters:
           Int1: int const & value
           Int2: int const & value

           Int1: int const & value
           Int2: int const & value

           Int1: int const & value
           Int2: int const & value

        GetMx(int Int1, int Int2, int Int3) -> int
        Parameters:
           Int1: int const & value
           Int2: int const & value
           Int3: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value

        GetMx(int Int1, int Int2, int Int3, int Int4) -> int
        Parameters:
           Int1: int const & value
           Int2: int const & value
           Int3: int const & value
           Int4: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value
           Int4: int const & value

           Int1: int const & value
           Int2: int const & value
           Int3: int const & value
           Int4: int const & value

        """
        return _snap.TInt_GetMx(*args)

    GetMx = staticmethod(GetMx)
    def GetInRng(*args):
        """
        GetInRng(int Val, int Mn, int Mx) -> int
        Parameters:
           Val: int const & value
           Mn: int const & value
           Mx: int const & value

           Val: int const & value
           Mn: int const & value
           Mx: int const & value

           Val: int const & value
           Mn: int const & value
           Mx: int const & value

        """
        return _snap.TInt_GetInRng(*args)

    GetInRng = staticmethod(GetInRng)
    def GetHexStr(*args):
        """
        GetHexStr(int Val) -> TStr
        Parameters:
           Val: int const & value

           Val: int const & value

           Val: int const & value

        GetHexStr(TInt Int) -> TStr
        Parameters:
           Int: TInt const & value

           Int: TInt const & value

           Int: TInt const & value

        """
        return _snap.TInt_GetHexStr(*args)

    GetHexStr = staticmethod(GetHexStr)
    def GetKiloStr(*args):
        """
        GetKiloStr(int Val) -> TStr
        Parameters:
           Val: int const & value

           Val: int const & value

           Val: int const & value

        """
        return _snap.TInt_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(int Val) -> TStr
        Parameters:
           Val: int const & value

           Val: int const & value

           Val: int const & value

        """
        return _snap.TInt_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    def SaveFrugalInt(*args):
        """
        SaveFrugalInt(char pDest, int i) -> char
        Parameters:
           pDest: char * value
           i: int value

           pDest: char * value
           i: int value

           pDest: char * value
           i: int value

        """
        return _snap.TInt_SaveFrugalInt(*args)

    SaveFrugalInt = staticmethod(SaveFrugalInt)
    def LoadFrugalInt(*args):
        """
        LoadFrugalInt(char pSrc, int i) -> char
        Parameters:
           pSrc: char * value
           i: int & value

           pSrc: char * value
           i: int & value

           pSrc: char * value
           i: int & value

        """
        return _snap.TInt_LoadFrugalInt(*args)

    LoadFrugalInt = staticmethod(LoadFrugalInt)
    def TestFrugalInt():
        """TestFrugalInt()"""
        return _snap.TInt_TestFrugalInt()

    TestFrugalInt = staticmethod(TestFrugalInt)
    def SaveFrugalIntV(*args):
        """
        SaveFrugalIntV(TSOut SOut, TIntV IntV)
        Parameters:
           SOut: TSOut & value
           IntV: TVec< TInt,int > const & value

           SOut: TSOut & value
           IntV: TVec< TInt,int > const & value

           SOut: TSOut & value
           IntV: TVec< TInt,int > const & value

        """
        return _snap.TInt_SaveFrugalIntV(*args)

    SaveFrugalIntV = staticmethod(SaveFrugalIntV)
    def LoadFrugalIntV(*args):
        """
        LoadFrugalIntV(TSIn SIn, TIntV IntV, bool ClrP = True)
        Parameters:
           SIn: TSIn & value
           IntV: TVec< TInt,int > & value
           ClrP: bool value

           SIn: TSIn & value
           IntV: TVec< TInt,int > & value
           ClrP: bool value

           SIn: TSIn & value
           IntV: TVec< TInt,int > & value
           ClrP: bool value

        LoadFrugalIntV(TSIn SIn, TIntV IntV)
        Parameters:
           SIn: TSIn & value
           IntV: TVec< TInt,int > & value

           SIn: TSIn & value
           IntV: TVec< TInt,int > & value

           SIn: TSIn & value
           IntV: TVec< TInt,int > & value

        """
        return _snap.TInt_LoadFrugalIntV(*args)

    LoadFrugalIntV = staticmethod(LoadFrugalIntV)
    __swig_destroy__ = _snap.delete_TInt
TInt.Load = new_instancemethod(_snap.TInt_Load,None,TInt)
TInt.Save = new_instancemethod(_snap.TInt_Save,None,TInt)
TInt.__eq__ = new_instancemethod(_snap.TInt___eq__,None,TInt)
TInt.__ne__ = new_instancemethod(_snap.TInt___ne__,None,TInt)
TInt.__lt__ = new_instancemethod(_snap.TInt___lt__,None,TInt)
TInt.__call__ = new_instancemethod(_snap.TInt___call__,None,TInt)
TInt.__iadd__ = new_instancemethod(_snap.TInt___iadd__,None,TInt)
TInt.__isub__ = new_instancemethod(_snap.TInt___isub__,None,TInt)
TInt.GetMemUsed = new_instancemethod(_snap.TInt_GetMemUsed,None,TInt)
TInt.GetPrimHashCd = new_instancemethod(_snap.TInt_GetPrimHashCd,None,TInt)
TInt.GetSecHashCd = new_instancemethod(_snap.TInt_GetSecHashCd,None,TInt)
TInt_swigregister = _snap.TInt_swigregister
TInt_swigregister(TInt)
TInt.Mn = _snap.cvar.TInt_Mn
TInt.Mx = _snap.cvar.TInt_Mx
TInt.Kilo = _snap.cvar.TInt_Kilo
TInt.Mega = _snap.cvar.TInt_Mega
TInt.Giga = _snap.cvar.TInt_Giga

def TInt_Abs(*args):
  """
    TInt_Abs(int Int) -> int
    Parameters:
       Int: int const & value

       Int: int const & value

    """
  return _snap.TInt_Abs(*args)

def TInt_Sign(*args):
  """
    TInt_Sign(int Int) -> int
    Parameters:
       Int: int const & value

       Int: int const & value

    """
  return _snap.TInt_Sign(*args)

def TInt_Swap(*args):
  """
    TInt_Swap(int Int1, int Int2)
    Parameters:
       Int1: int & value
       Int2: int & value

       Int1: int & value
       Int2: int & value

    """
  return _snap.TInt_Swap(*args)

def TInt_GetRnd(Range = 0):
  """
    GetRnd(int Range = 0) -> int
    Parameters:
       Range: int const & value

       Range: int const & value

       Range: int const & value

       Range: int const & value

    TInt_GetRnd() -> int
    """
  return _snap.TInt_GetRnd(Range)

def TInt_IsOdd(*args):
  """
    TInt_IsOdd(int Int) -> bool
    Parameters:
       Int: int const & value

       Int: int const & value

    """
  return _snap.TInt_IsOdd(*args)

def TInt_IsEven(*args):
  """
    TInt_IsEven(int Int) -> bool
    Parameters:
       Int: int const & value

       Int: int const & value

    """
  return _snap.TInt_IsEven(*args)

def TInt_GetMn(*args):
  """
    GetMn(int Int1, int Int2) -> int
    Parameters:
       Int1: int const & value
       Int2: int const & value

       Int1: int const & value
       Int2: int const & value

    GetMn(int Int1, int Int2, int Int3) -> int
    Parameters:
       Int1: int const & value
       Int2: int const & value
       Int3: int const & value

       Int1: int const & value
       Int2: int const & value
       Int3: int const & value

    TInt_GetMn(int Int1, int Int2, int Int3, int Int4) -> int
    Parameters:
       Int1: int const & value
       Int2: int const & value
       Int3: int const & value
       Int4: int const & value

       Int1: int const & value
       Int2: int const & value
       Int3: int const & value
       Int4: int const & value

    """
  return _snap.TInt_GetMn(*args)

def TInt_GetMx(*args):
  """
    GetMx(int Int1, int Int2) -> int
    Parameters:
       Int1: int const & value
       Int2: int const & value

       Int1: int const & value
       Int2: int const & value

    GetMx(int Int1, int Int2, int Int3) -> int
    Parameters:
       Int1: int const & value
       Int2: int const & value
       Int3: int const & value

       Int1: int const & value
       Int2: int const & value
       Int3: int const & value

    TInt_GetMx(int Int1, int Int2, int Int3, int Int4) -> int
    Parameters:
       Int1: int const & value
       Int2: int const & value
       Int3: int const & value
       Int4: int const & value

       Int1: int const & value
       Int2: int const & value
       Int3: int const & value
       Int4: int const & value

    """
  return _snap.TInt_GetMx(*args)

def TInt_GetInRng(*args):
  """
    TInt_GetInRng(int Val, int Mn, int Mx) -> int
    Parameters:
       Val: int const & value
       Mn: int const & value
       Mx: int const & value

       Val: int const & value
       Mn: int const & value
       Mx: int const & value

    """
  return _snap.TInt_GetInRng(*args)

def TInt_GetHexStr(*args):
  """
    GetHexStr(int Val) -> TStr
    Parameters:
       Val: int const & value

       Val: int const & value

    TInt_GetHexStr(TInt Int) -> TStr
    Parameters:
       Int: TInt const & value

       Int: TInt const & value

    """
  return _snap.TInt_GetHexStr(*args)

def TInt_GetKiloStr(*args):
  """
    TInt_GetKiloStr(int Val) -> TStr
    Parameters:
       Val: int const & value

       Val: int const & value

    """
  return _snap.TInt_GetKiloStr(*args)

def TInt_GetMegaStr(*args):
  """
    TInt_GetMegaStr(int Val) -> TStr
    Parameters:
       Val: int const & value

       Val: int const & value

    """
  return _snap.TInt_GetMegaStr(*args)

def TInt_SaveFrugalInt(*args):
  """
    TInt_SaveFrugalInt(char pDest, int i) -> char
    Parameters:
       pDest: char * value
       i: int value

       pDest: char * value
       i: int value

    """
  return _snap.TInt_SaveFrugalInt(*args)

def TInt_LoadFrugalInt(*args):
  """
    TInt_LoadFrugalInt(char pSrc, int i) -> char
    Parameters:
       pSrc: char * value
       i: int & value

       pSrc: char * value
       i: int & value

    """
  return _snap.TInt_LoadFrugalInt(*args)

def TInt_TestFrugalInt():
  """TInt_TestFrugalInt()"""
  return _snap.TInt_TestFrugalInt()

def TInt_SaveFrugalIntV(*args):
  """
    TInt_SaveFrugalIntV(TSOut SOut, TIntV IntV)
    Parameters:
       SOut: TSOut & value
       IntV: TVec< TInt,int > const & value

       SOut: TSOut & value
       IntV: TVec< TInt,int > const & value

    """
  return _snap.TInt_SaveFrugalIntV(*args)

def TInt_LoadFrugalIntV(*args):
  """
    LoadFrugalIntV(TSIn SIn, TIntV IntV, bool ClrP = True)
    Parameters:
       SIn: TSIn & value
       IntV: TVec< TInt,int > & value
       ClrP: bool value

       SIn: TSIn & value
       IntV: TVec< TInt,int > & value
       ClrP: bool value

    TInt_LoadFrugalIntV(TSIn SIn, TIntV IntV)
    Parameters:
       SIn: TSIn & value
       IntV: TVec< TInt,int > & value

       SIn: TSIn & value
       IntV: TVec< TInt,int > & value

    """
  return _snap.TInt_LoadFrugalIntV(*args)

class TUInt(object):
    """Proxy of C++ TUInt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TUInt_Val_get, _snap.TUInt_Val_set)
    Rnd = _swig_property(_snap.TUInt_Rnd_get, _snap.TUInt_Rnd_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TUInt
        __init__(self, uint _Val) -> TUInt
        Parameters:
           _Val: uint const & value

           _Val: uint const & value

        __init__(self, TSIn SIn) -> TUInt
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TUInt_swiginit(self,_snap.new_TUInt(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TUInt * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TUInt_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TUInt const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TUInt_Save(self, *args)

    def __call__(self, *args):
        """
        __call__(self) -> uint
        __call__(self) -> uint
        Parameters:
           self: TUInt * value


        """
        return _snap.TUInt___call__(self, *args)

    def __invert__(self):
        """
        __invert__(self) -> TUInt
        Parameters:
           self: TUInt * value




        """
        return _snap.TUInt___invert__(self)

    def __iand__(self, *args):
        """
        __iand__(self, TUInt UInt) -> TUInt
        Parameters:
           self: TUInt * value
           UInt: TUInt const & value

           UInt: TUInt const & value

        """
        return _snap.TUInt___iand__(self, *args)

    def __ior__(self, *args):
        """
        __ior__(self, TUInt UInt) -> TUInt
        Parameters:
           self: TUInt * value
           UInt: TUInt const & value

           UInt: TUInt const & value

        """
        return _snap.TUInt___ior__(self, *args)

    def __ixor__(self, *args):
        """
        __ixor__(self, TUInt UInt) -> TUInt
        Parameters:
           self: TUInt * value
           UInt: TUInt const & value

           UInt: TUInt const & value

        """
        return _snap.TUInt___ixor__(self, *args)

    def __irshift__(self, *args):
        """
        __irshift__(self, int ShiftBits) -> TUInt
        Parameters:
           self: TUInt * value
           ShiftBits: int const & value

           ShiftBits: int const & value

        """
        return _snap.TUInt___irshift__(self, *args)

    def __ilshift__(self, *args):
        """
        __ilshift__(self, int ShiftBits) -> TUInt
        Parameters:
           self: TUInt * value
           ShiftBits: int const & value

           ShiftBits: int const & value

        """
        return _snap.TUInt___ilshift__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TUInt const * value




        """
        return _snap.TUInt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TUInt const * value




        """
        return _snap.TUInt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TUInt const * value




        """
        return _snap.TUInt_GetSecHashCd(self)

    def GetRnd(Range = 0):
        """
        GetRnd(uint Range = 0) -> uint
        Parameters:
           Range: uint const & value

           Range: uint const & value

           Range: uint const & value

           Range: uint const & value

           Range: uint const & value

           Range: uint const & value

           Range: uint const & value

        GetRnd() -> uint
        """
        return _snap.TUInt_GetRnd(Range)

    GetRnd = staticmethod(GetRnd)
    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(uint Val) -> TStr
        Parameters:
           Val: uint const & value

           Val: uint const & value

           Val: uint const & value

        GetStr(TUInt UInt) -> TStr
        Parameters:
           UInt: TUInt const & value

           UInt: TUInt const & value

           UInt: TUInt const & value

        GetStr(uint Val, char FmtStr) -> TStr
        Parameters:
           Val: uint const & value
           FmtStr: char const * value

           Val: uint const & value
           FmtStr: char const * value

           Val: uint const & value
           FmtStr: char const * value

        GetStr(uint Val, TStr FmtStr) -> TStr
        Parameters:
           Val: uint const & value
           FmtStr: TStr const & value

           Val: uint const & value
           FmtStr: TStr const & value

           Val: uint const & value
           FmtStr: TStr const & value

        """
        return _snap.TUInt_GetStr(*args)

    GetStr = staticmethod(GetStr)
    def GetKiloStr(*args):
        """
        GetKiloStr(uint Val) -> TStr
        Parameters:
           Val: uint const & value

           Val: uint const & value

           Val: uint const & value

        """
        return _snap.TUInt_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(uint Val) -> TStr
        Parameters:
           Val: uint const & value

           Val: uint const & value

           Val: uint const & value

        """
        return _snap.TUInt_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    def JavaUIntToCppUInt(*args):
        """
        JavaUIntToCppUInt(uint JavaUInt) -> uint
        Parameters:
           JavaUInt: uint const & value

           JavaUInt: uint const & value

           JavaUInt: uint const & value

        """
        return _snap.TUInt_JavaUIntToCppUInt(*args)

    JavaUIntToCppUInt = staticmethod(JavaUIntToCppUInt)
    def IsIpStr(*args):
        """
        IsIpStr(TStr IpStr, uint Ip, char SplitCh = '.') -> bool
        Parameters:
           IpStr: TStr const & value
           Ip: uint & value
           SplitCh: char const & value

           IpStr: TStr const & value
           Ip: uint & value
           SplitCh: char const & value

           IpStr: TStr const & value
           Ip: uint & value
           SplitCh: char const & value

        IsIpStr(TStr IpStr, uint Ip) -> bool
        Parameters:
           IpStr: TStr const & value
           Ip: uint & value

           IpStr: TStr const & value
           Ip: uint & value

           IpStr: TStr const & value
           Ip: uint & value

        IsIpStr(TStr IpStr, char SplitCh = '.') -> bool
        Parameters:
           IpStr: TStr const & value
           SplitCh: char const & value

           IpStr: TStr const & value
           SplitCh: char const & value

           IpStr: TStr const & value
           SplitCh: char const & value

        IsIpStr(TStr IpStr) -> bool
        Parameters:
           IpStr: TStr const & value

           IpStr: TStr const & value

           IpStr: TStr const & value

        """
        return _snap.TUInt_IsIpStr(*args)

    IsIpStr = staticmethod(IsIpStr)
    def GetUIntFromIpStr(*args):
        """
        GetUIntFromIpStr(TStr IpStr, char SplitCh = '.') -> uint
        Parameters:
           IpStr: TStr const & value
           SplitCh: char const & value

           IpStr: TStr const & value
           SplitCh: char const & value

           IpStr: TStr const & value
           SplitCh: char const & value

        GetUIntFromIpStr(TStr IpStr) -> uint
        Parameters:
           IpStr: TStr const & value

           IpStr: TStr const & value

           IpStr: TStr const & value

        """
        return _snap.TUInt_GetUIntFromIpStr(*args)

    GetUIntFromIpStr = staticmethod(GetUIntFromIpStr)
    def GetStrFromIpUInt(*args):
        """
        GetStrFromIpUInt(uint Ip) -> TStr
        Parameters:
           Ip: uint const & value

           Ip: uint const & value

           Ip: uint const & value

        """
        return _snap.TUInt_GetStrFromIpUInt(*args)

    GetStrFromIpUInt = staticmethod(GetStrFromIpUInt)
    def IsIpv6Str(*args):
        """
        IsIpv6Str(TStr IpStr, char SplitCh = ':') -> bool
        Parameters:
           IpStr: TStr const & value
           SplitCh: char const & value

           IpStr: TStr const & value
           SplitCh: char const & value

           IpStr: TStr const & value
           SplitCh: char const & value

        IsIpv6Str(TStr IpStr) -> bool
        Parameters:
           IpStr: TStr const & value

           IpStr: TStr const & value

           IpStr: TStr const & value

        """
        return _snap.TUInt_IsIpv6Str(*args)

    IsIpv6Str = staticmethod(IsIpv6Str)
    __swig_destroy__ = _snap.delete_TUInt
TUInt.Load = new_instancemethod(_snap.TUInt_Load,None,TUInt)
TUInt.Save = new_instancemethod(_snap.TUInt_Save,None,TUInt)
TUInt.__call__ = new_instancemethod(_snap.TUInt___call__,None,TUInt)
TUInt.__invert__ = new_instancemethod(_snap.TUInt___invert__,None,TUInt)
TUInt.__iand__ = new_instancemethod(_snap.TUInt___iand__,None,TUInt)
TUInt.__ior__ = new_instancemethod(_snap.TUInt___ior__,None,TUInt)
TUInt.__ixor__ = new_instancemethod(_snap.TUInt___ixor__,None,TUInt)
TUInt.__irshift__ = new_instancemethod(_snap.TUInt___irshift__,None,TUInt)
TUInt.__ilshift__ = new_instancemethod(_snap.TUInt___ilshift__,None,TUInt)
TUInt.GetMemUsed = new_instancemethod(_snap.TUInt_GetMemUsed,None,TUInt)
TUInt.GetPrimHashCd = new_instancemethod(_snap.TUInt_GetPrimHashCd,None,TUInt)
TUInt.GetSecHashCd = new_instancemethod(_snap.TUInt_GetSecHashCd,None,TUInt)
TUInt_swigregister = _snap.TUInt_swigregister
TUInt_swigregister(TUInt)
TUInt.Mn = _snap.cvar.TUInt_Mn
TUInt.Mx = _snap.cvar.TUInt_Mx

def TUInt_GetRnd(Range = 0):
  """
    GetRnd(uint Range = 0) -> uint
    Parameters:
       Range: uint const & value

       Range: uint const & value

       Range: uint const & value

       Range: uint const & value

    TUInt_GetRnd() -> uint
    """
  return _snap.TUInt_GetRnd(Range)

def TUInt_GetStr(*args):
  """
    GetStr() -> TStr
    GetStr(uint Val) -> TStr
    Parameters:
       Val: uint const & value

       Val: uint const & value

    GetStr(TUInt UInt) -> TStr
    Parameters:
       UInt: TUInt const & value

       UInt: TUInt const & value

    GetStr(uint Val, char FmtStr) -> TStr
    Parameters:
       Val: uint const & value
       FmtStr: char const * value

       Val: uint const & value
       FmtStr: char const * value

    TUInt_GetStr(uint Val, TStr FmtStr) -> TStr
    Parameters:
       Val: uint const & value
       FmtStr: TStr const & value

       Val: uint const & value
       FmtStr: TStr const & value

    """
  return _snap.TUInt_GetStr(*args)

def TUInt_GetKiloStr(*args):
  """
    TUInt_GetKiloStr(uint Val) -> TStr
    Parameters:
       Val: uint const & value

       Val: uint const & value

    """
  return _snap.TUInt_GetKiloStr(*args)

def TUInt_GetMegaStr(*args):
  """
    TUInt_GetMegaStr(uint Val) -> TStr
    Parameters:
       Val: uint const & value

       Val: uint const & value

    """
  return _snap.TUInt_GetMegaStr(*args)

def TUInt_JavaUIntToCppUInt(*args):
  """
    TUInt_JavaUIntToCppUInt(uint JavaUInt) -> uint
    Parameters:
       JavaUInt: uint const & value

       JavaUInt: uint const & value

    """
  return _snap.TUInt_JavaUIntToCppUInt(*args)

def TUInt_IsIpStr(*args):
  """
    IsIpStr(TStr IpStr, uint Ip, char SplitCh = '.') -> bool
    Parameters:
       IpStr: TStr const & value
       Ip: uint & value
       SplitCh: char const & value

       IpStr: TStr const & value
       Ip: uint & value
       SplitCh: char const & value

    IsIpStr(TStr IpStr, uint Ip) -> bool
    Parameters:
       IpStr: TStr const & value
       Ip: uint & value

       IpStr: TStr const & value
       Ip: uint & value

    IsIpStr(TStr IpStr, char SplitCh = '.') -> bool
    Parameters:
       IpStr: TStr const & value
       SplitCh: char const & value

       IpStr: TStr const & value
       SplitCh: char const & value

    TUInt_IsIpStr(TStr IpStr) -> bool
    Parameters:
       IpStr: TStr const & value

       IpStr: TStr const & value

    """
  return _snap.TUInt_IsIpStr(*args)

def TUInt_GetUIntFromIpStr(*args):
  """
    GetUIntFromIpStr(TStr IpStr, char SplitCh = '.') -> uint
    Parameters:
       IpStr: TStr const & value
       SplitCh: char const & value

       IpStr: TStr const & value
       SplitCh: char const & value

    TUInt_GetUIntFromIpStr(TStr IpStr) -> uint
    Parameters:
       IpStr: TStr const & value

       IpStr: TStr const & value

    """
  return _snap.TUInt_GetUIntFromIpStr(*args)

def TUInt_GetStrFromIpUInt(*args):
  """
    TUInt_GetStrFromIpUInt(uint Ip) -> TStr
    Parameters:
       Ip: uint const & value

       Ip: uint const & value

    """
  return _snap.TUInt_GetStrFromIpUInt(*args)

def TUInt_IsIpv6Str(*args):
  """
    IsIpv6Str(TStr IpStr, char SplitCh = ':') -> bool
    Parameters:
       IpStr: TStr const & value
       SplitCh: char const & value

       IpStr: TStr const & value
       SplitCh: char const & value

    TUInt_IsIpv6Str(TStr IpStr) -> bool
    Parameters:
       IpStr: TStr const & value

       IpStr: TStr const & value

    """
  return _snap.TUInt_IsIpv6Str(*args)

class TUInt64(object):
    """Proxy of C++ TUInt64 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TUInt64_Val_get, _snap.TUInt64_Val_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TUInt64
        __init__(self, TUInt64 Int) -> TUInt64
        Parameters:
           Int: TUInt64 const & value

           Int: TUInt64 const & value

        __init__(self, uint64 Int) -> TUInt64
        Parameters:
           Int: uint64 const & value

           Int: uint64 const & value

        __init__(self, uint MsVal, uint LsVal) -> TUInt64
        Parameters:
           MsVal: uint const & value
           LsVal: uint const & value

           MsVal: uint const & value
           LsVal: uint const & value

        __init__(self, void Pt) -> TUInt64
        Parameters:
           Pt: void * value

           Pt: void * value

        __init__(self, TSIn SIn) -> TUInt64
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TUInt64_swiginit(self,_snap.new_TUInt64(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TUInt64 * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TUInt64_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TUInt64 const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TUInt64_Save(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, TUInt64 Int) -> TUInt64
        Parameters:
           self: TUInt64 * value
           Int: TUInt64 const & value

           Int: TUInt64 const & value

        """
        return _snap.TUInt64___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, TUInt64 Int) -> TUInt64
        Parameters:
           self: TUInt64 * value
           Int: TUInt64 const & value

           Int: TUInt64 const & value

        """
        return _snap.TUInt64___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, TUInt64 Int) -> TUInt64
        Parameters:
           self: TUInt64 * value
           Int: TUInt64 const & value

           Int: TUInt64 const & value

        """
        return _snap.TUInt64___imul__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TUInt64 const * value




        """
        return _snap.TUInt64_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TUInt64 const * value




        """
        return _snap.TUInt64_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TUInt64 const * value




        """
        return _snap.TUInt64_GetSecHashCd(self)

    def GetMsVal(self):
        """
        GetMsVal(self) -> uint
        Parameters:
           self: TUInt64 const * value




        """
        return _snap.TUInt64_GetMsVal(self)

    def GetLsVal(self):
        """
        GetLsVal(self) -> uint
        Parameters:
           self: TUInt64 const * value




        """
        return _snap.TUInt64_GetLsVal(self)

    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(TUInt64 Int) -> TStr
        Parameters:
           Int: TUInt64 const & value

           Int: TUInt64 const & value

           Int: TUInt64 const & value

        """
        return _snap.TUInt64_GetStr(*args)

    GetStr = staticmethod(GetStr)
    def GetHexStr(*args):
        """
        GetHexStr(TUInt64 Int) -> TStr
        Parameters:
           Int: TUInt64 const & value

           Int: TUInt64 const & value

           Int: TUInt64 const & value

        """
        return _snap.TUInt64_GetHexStr(*args)

    GetHexStr = staticmethod(GetHexStr)
    def GetKiloStr(*args):
        """
        GetKiloStr(uint64 Val) -> TStr
        Parameters:
           Val: uint64 const & value

           Val: uint64 const & value

           Val: uint64 const & value

        """
        return _snap.TUInt64_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(uint64 Val) -> TStr
        Parameters:
           Val: uint64 const & value

           Val: uint64 const & value

           Val: uint64 const & value

        """
        return _snap.TUInt64_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    __swig_destroy__ = _snap.delete_TUInt64
TUInt64.Load = new_instancemethod(_snap.TUInt64_Load,None,TUInt64)
TUInt64.Save = new_instancemethod(_snap.TUInt64_Save,None,TUInt64)
TUInt64.__iadd__ = new_instancemethod(_snap.TUInt64___iadd__,None,TUInt64)
TUInt64.__isub__ = new_instancemethod(_snap.TUInt64___isub__,None,TUInt64)
TUInt64.__imul__ = new_instancemethod(_snap.TUInt64___imul__,None,TUInt64)
TUInt64.GetMemUsed = new_instancemethod(_snap.TUInt64_GetMemUsed,None,TUInt64)
TUInt64.GetPrimHashCd = new_instancemethod(_snap.TUInt64_GetPrimHashCd,None,TUInt64)
TUInt64.GetSecHashCd = new_instancemethod(_snap.TUInt64_GetSecHashCd,None,TUInt64)
TUInt64.GetMsVal = new_instancemethod(_snap.TUInt64_GetMsVal,None,TUInt64)
TUInt64.GetLsVal = new_instancemethod(_snap.TUInt64_GetLsVal,None,TUInt64)
TUInt64_swigregister = _snap.TUInt64_swigregister
TUInt64_swigregister(TUInt64)
TUInt64.Mn = _snap.cvar.TUInt64_Mn
TUInt64.Mx = _snap.cvar.TUInt64_Mx

def TUInt64_GetStr(*args):
  """
    GetStr() -> TStr
    TUInt64_GetStr(TUInt64 Int) -> TStr
    Parameters:
       Int: TUInt64 const & value

       Int: TUInt64 const & value

    """
  return _snap.TUInt64_GetStr(*args)

def TUInt64_GetHexStr(*args):
  """
    TUInt64_GetHexStr(TUInt64 Int) -> TStr
    Parameters:
       Int: TUInt64 const & value

       Int: TUInt64 const & value

    """
  return _snap.TUInt64_GetHexStr(*args)

def TUInt64_GetKiloStr(*args):
  """
    TUInt64_GetKiloStr(uint64 Val) -> TStr
    Parameters:
       Val: uint64 const & value

       Val: uint64 const & value

    """
  return _snap.TUInt64_GetKiloStr(*args)

def TUInt64_GetMegaStr(*args):
  """
    TUInt64_GetMegaStr(uint64 Val) -> TStr
    Parameters:
       Val: uint64 const & value

       Val: uint64 const & value

    """
  return _snap.TUInt64_GetMegaStr(*args)

class TFlt(object):
    """Proxy of C++ TFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TFlt_Val_get, _snap.TFlt_Val_set)
    Rnd = _swig_property(_snap.TFlt_Rnd_get, _snap.TFlt_Rnd_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TFlt
        __init__(self, double _Val) -> TFlt
        Parameters:
           _Val: double const & value

           _Val: double const & value

        __init__(self, TSIn SIn) -> TFlt
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        __init__(self, TSIn SIn, bool IsTxt) -> TFlt
        Parameters:
           SIn: TSIn & value
           IsTxt: bool const & value

           SIn: TSIn & value
           IsTxt: bool const & value

        """
        _snap.TFlt_swiginit(self,_snap.new_TFlt(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TFlt * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TFlt_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           SOut: TSOut & value

           SOut: TSOut & value

        Save(self, TSOut SOut, bool IsTxt)
        Parameters:
           self: TFlt const * value
           SOut: TSOut & value
           IsTxt: bool const & value

           SOut: TSOut & value
           IsTxt: bool const & value

        """
        return _snap.TFlt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TFlt Flt) -> bool
        Parameters:
           Flt: TFlt const & value

           Flt: TFlt const & value

        __eq__(self, double Flt) -> bool
        Parameters:
           self: TFlt const * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, double Flt) -> bool
        Parameters:
           self: TFlt const * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt___ne__(self, *args)

    def __call__(self):
        """
        __call__(self) -> double
        Parameters:
           self: TFlt const * value




        """
        return _snap.TFlt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(self, double Flt) -> TFlt
        Parameters:
           self: TFlt * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double Flt) -> TFlt
        Parameters:
           self: TFlt * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double Flt) -> TFlt
        Parameters:
           self: TFlt * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, double Flt) -> TFlt
        Parameters:
           self: TFlt * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt___idiv__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TFlt const * value




        """
        return _snap.TFlt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TFlt const * value




        """
        return _snap.TFlt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TFlt const * value




        """
        return _snap.TFlt_GetSecHashCd(self)

    def Abs(*args):
        """
        Abs(double Flt) -> double
        Parameters:
           Flt: double const & value

           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt_Abs(*args)

    Abs = staticmethod(Abs)
    def Sign(*args):
        """
        Sign(double Flt) -> int
        Parameters:
           Flt: double const & value

           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt_Sign(*args)

    Sign = staticmethod(Sign)
    def Round(*args):
        """
        Round(double Flt) -> int
        Parameters:
           Flt: double const & value

           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TFlt_Round(*args)

    Round = staticmethod(Round)
    def GetRnd():
        """GetRnd() -> double"""
        return _snap.TFlt_GetRnd()

    GetRnd = staticmethod(GetRnd)
    def Eq6(*args):
        """
        Eq6(double LFlt, double RFlt) -> bool
        Parameters:
           LFlt: double const & value
           RFlt: double const & value

           LFlt: double const & value
           RFlt: double const & value

           LFlt: double const & value
           RFlt: double const & value

        """
        return _snap.TFlt_Eq6(*args)

    Eq6 = staticmethod(Eq6)
    def GetMn(*args):
        """
        GetMn(double Flt1, double Flt2) -> double
        Parameters:
           Flt1: double const & value
           Flt2: double const & value

           Flt1: double const & value
           Flt2: double const & value

           Flt1: double const & value
           Flt2: double const & value

        GetMn(double Flt1, double Flt2, double Flt3) -> double
        Parameters:
           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const & value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const & value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const & value

        GetMn(double Flt1, double Flt2, double Flt3, double Flt4) -> double
        Parameters:
           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const & value
           Flt4: double const & value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const & value
           Flt4: double const & value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const & value
           Flt4: double const & value

        """
        return _snap.TFlt_GetMn(*args)

    GetMn = staticmethod(GetMn)
    def GetMx(*args):
        """
        GetMx(double Flt1, double Flt2) -> double
        Parameters:
           Flt1: double const & value
           Flt2: double const & value

           Flt1: double const & value
           Flt2: double const & value

           Flt1: double const & value
           Flt2: double const & value

        GetMx(double Flt1, double Flt2, double Flt3) -> double
        Parameters:
           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const value

        GetMx(double Flt1, double Flt2, double Flt3, double Flt4) -> double
        Parameters:
           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const value
           Flt4: double const & value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const value
           Flt4: double const & value

           Flt1: double const & value
           Flt2: double const & value
           Flt3: double const value
           Flt4: double const & value

        """
        return _snap.TFlt_GetMx(*args)

    GetMx = staticmethod(GetMx)
    def GetInRng(*args):
        """
        GetInRng(double Val, double Mn, double Mx) -> double
        Parameters:
           Val: double const & value
           Mn: double const & value
           Mx: double const & value

           Val: double const & value
           Mn: double const & value
           Mx: double const & value

           Val: double const & value
           Mn: double const & value
           Mx: double const & value

        """
        return _snap.TFlt_GetInRng(*args)

    GetInRng = staticmethod(GetInRng)
    def IsNum(self, *args):
        """
        IsNum(self, double Val) -> bool
        Parameters:
           Val: double const & value

           Val: double const & value

        IsNum(self) -> bool
        Parameters:
           self: TFlt const * value


        """
        return _snap.TFlt_IsNum(self, *args)

    def IsNan(self, *args):
        """
        IsNan(self, double Val) -> bool
        Parameters:
           Val: double const & value

           Val: double const & value

        IsNan(self) -> bool
        Parameters:
           self: TFlt const * value


        """
        return _snap.TFlt_IsNan(self, *args)

    def GetStr(*args):
        """
        GetStr() -> TStr
        GetStr(double Val, int Width = -1, int Prec = -1) -> TStr
        Parameters:
           Val: double const & value
           Width: int const & value
           Prec: int const & value

           Val: double const & value
           Width: int const & value
           Prec: int const & value

           Val: double const & value
           Width: int const & value
           Prec: int const & value

        GetStr(double Val, int Width = -1) -> TStr
        Parameters:
           Val: double const & value
           Width: int const & value

           Val: double const & value
           Width: int const & value

           Val: double const & value
           Width: int const & value

        GetStr(double Val) -> TStr
        Parameters:
           Val: double const & value

           Val: double const & value

           Val: double const & value

        GetStr(TFlt Flt, int Width = -1, int Prec = -1) -> TStr
        Parameters:
           Flt: TFlt const & value
           Width: int const & value
           Prec: int const & value

           Flt: TFlt const & value
           Width: int const & value
           Prec: int const & value

           Flt: TFlt const & value
           Width: int const & value
           Prec: int const & value

        GetStr(TFlt Flt, int Width = -1) -> TStr
        Parameters:
           Flt: TFlt const & value
           Width: int const & value

           Flt: TFlt const & value
           Width: int const & value

           Flt: TFlt const & value
           Width: int const & value

        GetStr(TFlt Flt) -> TStr
        Parameters:
           Flt: TFlt const & value

           Flt: TFlt const & value

           Flt: TFlt const & value

        GetStr(double Val, char FmtStr) -> TStr
        Parameters:
           Val: double const & value
           FmtStr: char const * value

           Val: double const & value
           FmtStr: char const * value

           Val: double const & value
           FmtStr: char const * value

        GetStr(double Val, TStr FmtStr) -> TStr
        Parameters:
           Val: double const & value
           FmtStr: TStr const & value

           Val: double const & value
           FmtStr: TStr const & value

           Val: double const & value
           FmtStr: TStr const & value

        """
        return _snap.TFlt_GetStr(*args)

    GetStr = staticmethod(GetStr)
    def GetPrcStr(*args):
        """
        GetPrcStr(double RelVal, double FullVal) -> TStr
        Parameters:
           RelVal: double const & value
           FullVal: double const & value

           RelVal: double const & value
           FullVal: double const & value

           RelVal: double const & value
           FullVal: double const & value

        """
        return _snap.TFlt_GetPrcStr(*args)

    GetPrcStr = staticmethod(GetPrcStr)
    def GetKiloStr(*args):
        """
        GetKiloStr(double Val) -> TStr
        Parameters:
           Val: double const & value

           Val: double const & value

           Val: double const & value

        """
        return _snap.TFlt_GetKiloStr(*args)

    GetKiloStr = staticmethod(GetKiloStr)
    def GetMegaStr(*args):
        """
        GetMegaStr(double Val) -> TStr
        Parameters:
           Val: double const & value

           Val: double const & value

           Val: double const & value

        """
        return _snap.TFlt_GetMegaStr(*args)

    GetMegaStr = staticmethod(GetMegaStr)
    def GetGigaStr(*args):
        """
        GetGigaStr(double Val) -> TStr
        Parameters:
           Val: double const & value

           Val: double const & value

           Val: double const & value

        """
        return _snap.TFlt_GetGigaStr(*args)

    GetGigaStr = staticmethod(GetGigaStr)
    __swig_destroy__ = _snap.delete_TFlt
TFlt.Load = new_instancemethod(_snap.TFlt_Load,None,TFlt)
TFlt.Save = new_instancemethod(_snap.TFlt_Save,None,TFlt)
TFlt.__eq__ = new_instancemethod(_snap.TFlt___eq__,None,TFlt)
TFlt.__ne__ = new_instancemethod(_snap.TFlt___ne__,None,TFlt)
TFlt.__call__ = new_instancemethod(_snap.TFlt___call__,None,TFlt)
TFlt.__iadd__ = new_instancemethod(_snap.TFlt___iadd__,None,TFlt)
TFlt.__isub__ = new_instancemethod(_snap.TFlt___isub__,None,TFlt)
TFlt.__imul__ = new_instancemethod(_snap.TFlt___imul__,None,TFlt)
TFlt.__idiv__ = new_instancemethod(_snap.TFlt___idiv__,None,TFlt)
TFlt.GetMemUsed = new_instancemethod(_snap.TFlt_GetMemUsed,None,TFlt)
TFlt.GetPrimHashCd = new_instancemethod(_snap.TFlt_GetPrimHashCd,None,TFlt)
TFlt.GetSecHashCd = new_instancemethod(_snap.TFlt_GetSecHashCd,None,TFlt)
TFlt.IsNum = new_instancemethod(_snap.TFlt_IsNum,None,TFlt)
TFlt.IsNan = new_instancemethod(_snap.TFlt_IsNan,None,TFlt)
TFlt_swigregister = _snap.TFlt_swigregister
TFlt_swigregister(TFlt)
TFlt.Mn = _snap.cvar.TFlt_Mn
TFlt.Mx = _snap.cvar.TFlt_Mx
TFlt.NInf = _snap.cvar.TFlt_NInf
TFlt.PInf = _snap.cvar.TFlt_PInf
TFlt.Eps = _snap.cvar.TFlt_Eps
TFlt.EpsHalf = _snap.cvar.TFlt_EpsHalf

def TFlt_Abs(*args):
  """
    TFlt_Abs(double Flt) -> double
    Parameters:
       Flt: double const & value

       Flt: double const & value

    """
  return _snap.TFlt_Abs(*args)

def TFlt_Sign(*args):
  """
    TFlt_Sign(double Flt) -> int
    Parameters:
       Flt: double const & value

       Flt: double const & value

    """
  return _snap.TFlt_Sign(*args)

def TFlt_Round(*args):
  """
    TFlt_Round(double Flt) -> int
    Parameters:
       Flt: double const & value

       Flt: double const & value

    """
  return _snap.TFlt_Round(*args)

def TFlt_GetRnd():
  """TFlt_GetRnd() -> double"""
  return _snap.TFlt_GetRnd()

def TFlt_Eq6(*args):
  """
    TFlt_Eq6(double LFlt, double RFlt) -> bool
    Parameters:
       LFlt: double const & value
       RFlt: double const & value

       LFlt: double const & value
       RFlt: double const & value

    """
  return _snap.TFlt_Eq6(*args)

def TFlt_GetMn(*args):
  """
    GetMn(double Flt1, double Flt2) -> double
    Parameters:
       Flt1: double const & value
       Flt2: double const & value

       Flt1: double const & value
       Flt2: double const & value

    GetMn(double Flt1, double Flt2, double Flt3) -> double
    Parameters:
       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const & value

       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const & value

    TFlt_GetMn(double Flt1, double Flt2, double Flt3, double Flt4) -> double
    Parameters:
       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const & value
       Flt4: double const & value

       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const & value
       Flt4: double const & value

    """
  return _snap.TFlt_GetMn(*args)

def TFlt_GetMx(*args):
  """
    GetMx(double Flt1, double Flt2) -> double
    Parameters:
       Flt1: double const & value
       Flt2: double const & value

       Flt1: double const & value
       Flt2: double const & value

    GetMx(double Flt1, double Flt2, double Flt3) -> double
    Parameters:
       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const value

       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const value

    TFlt_GetMx(double Flt1, double Flt2, double Flt3, double Flt4) -> double
    Parameters:
       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const value
       Flt4: double const & value

       Flt1: double const & value
       Flt2: double const & value
       Flt3: double const value
       Flt4: double const & value

    """
  return _snap.TFlt_GetMx(*args)

def TFlt_GetInRng(*args):
  """
    TFlt_GetInRng(double Val, double Mn, double Mx) -> double
    Parameters:
       Val: double const & value
       Mn: double const & value
       Mx: double const & value

       Val: double const & value
       Mn: double const & value
       Mx: double const & value

    """
  return _snap.TFlt_GetInRng(*args)

def TFlt_GetStr(*args):
  """
    GetStr() -> TStr
    GetStr(double Val, int Width = -1, int Prec = -1) -> TStr
    Parameters:
       Val: double const & value
       Width: int const & value
       Prec: int const & value

       Val: double const & value
       Width: int const & value
       Prec: int const & value

    GetStr(double Val, int Width = -1) -> TStr
    Parameters:
       Val: double const & value
       Width: int const & value

       Val: double const & value
       Width: int const & value

    GetStr(double Val) -> TStr
    Parameters:
       Val: double const & value

       Val: double const & value

    GetStr(TFlt Flt, int Width = -1, int Prec = -1) -> TStr
    Parameters:
       Flt: TFlt const & value
       Width: int const & value
       Prec: int const & value

       Flt: TFlt const & value
       Width: int const & value
       Prec: int const & value

    GetStr(TFlt Flt, int Width = -1) -> TStr
    Parameters:
       Flt: TFlt const & value
       Width: int const & value

       Flt: TFlt const & value
       Width: int const & value

    GetStr(TFlt Flt) -> TStr
    Parameters:
       Flt: TFlt const & value

       Flt: TFlt const & value

    GetStr(double Val, char FmtStr) -> TStr
    Parameters:
       Val: double const & value
       FmtStr: char const * value

       Val: double const & value
       FmtStr: char const * value

    TFlt_GetStr(double Val, TStr FmtStr) -> TStr
    Parameters:
       Val: double const & value
       FmtStr: TStr const & value

       Val: double const & value
       FmtStr: TStr const & value

    """
  return _snap.TFlt_GetStr(*args)

def TFlt_GetPrcStr(*args):
  """
    TFlt_GetPrcStr(double RelVal, double FullVal) -> TStr
    Parameters:
       RelVal: double const & value
       FullVal: double const & value

       RelVal: double const & value
       FullVal: double const & value

    """
  return _snap.TFlt_GetPrcStr(*args)

def TFlt_GetKiloStr(*args):
  """
    TFlt_GetKiloStr(double Val) -> TStr
    Parameters:
       Val: double const & value

       Val: double const & value

    """
  return _snap.TFlt_GetKiloStr(*args)

def TFlt_GetMegaStr(*args):
  """
    TFlt_GetMegaStr(double Val) -> TStr
    Parameters:
       Val: double const & value

       Val: double const & value

    """
  return _snap.TFlt_GetMegaStr(*args)

def TFlt_GetGigaStr(*args):
  """
    TFlt_GetGigaStr(double Val) -> TStr
    Parameters:
       Val: double const & value

       Val: double const & value

    """
  return _snap.TFlt_GetGigaStr(*args)

class TAscFlt(TFlt):
    """Proxy of C++ TAscFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TAscFlt
        __init__(self, double Val) -> TAscFlt
        Parameters:
           Val: double const & value

           Val: double const & value

        __init__(self, TSIn SIn) -> TAscFlt
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TAscFlt_swiginit(self,_snap.new_TAscFlt(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TAscFlt const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TAscFlt_Save(self, *args)

    __swig_destroy__ = _snap.delete_TAscFlt
TAscFlt.Save = new_instancemethod(_snap.TAscFlt_Save,None,TAscFlt)
TAscFlt_swigregister = _snap.TAscFlt_swigregister
TAscFlt_swigregister(TAscFlt)

class TSFlt(object):
    """Proxy of C++ TSFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TSFlt_Val_get, _snap.TSFlt_Val_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TSFlt
        __init__(self, sdouble _Val) -> TSFlt
        Parameters:
           _Val: sdouble const & value

           _Val: sdouble const & value

        __init__(self, TSIn SIn) -> TSFlt
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TSFlt_swiginit(self,_snap.new_TSFlt(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TSFlt const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TSFlt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TSFlt SFlt) -> bool
        Parameters:
           SFlt: TSFlt const & value

           SFlt: TSFlt const & value

        __eq__(self, double Flt) -> bool
        Parameters:
           self: TSFlt const * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TSFlt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, double Flt) -> bool
        Parameters:
           self: TSFlt const * value
           Flt: double const & value

           Flt: double const & value

        """
        return _snap.TSFlt___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TSFlt SFlt) -> bool
        Parameters:
           self: TSFlt const * value
           SFlt: TSFlt const & value

           SFlt: TSFlt const & value

        """
        return _snap.TSFlt___lt__(self, *args)

    def __call__(self):
        """
        __call__(self) -> sdouble
        Parameters:
           self: TSFlt const * value




        """
        return _snap.TSFlt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(self, double SFlt) -> TSFlt
        Parameters:
           self: TSFlt * value
           SFlt: double const & value

           SFlt: double const & value

        """
        return _snap.TSFlt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double SFlt) -> TSFlt
        Parameters:
           self: TSFlt * value
           SFlt: double const & value

           SFlt: double const & value

        """
        return _snap.TSFlt___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double SFlt) -> TSFlt
        Parameters:
           self: TSFlt * value
           SFlt: double const & value

           SFlt: double const & value

        """
        return _snap.TSFlt___imul__(self, *args)

    def __idiv__(self, *args):
        """
        __idiv__(self, double SFlt) -> TSFlt
        Parameters:
           self: TSFlt * value
           SFlt: double const & value

           SFlt: double const & value

        """
        return _snap.TSFlt___idiv__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TSFlt const * value




        """
        return _snap.TSFlt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TSFlt const * value




        """
        return _snap.TSFlt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TSFlt const * value




        """
        return _snap.TSFlt_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TSFlt
TSFlt.Save = new_instancemethod(_snap.TSFlt_Save,None,TSFlt)
TSFlt.__eq__ = new_instancemethod(_snap.TSFlt___eq__,None,TSFlt)
TSFlt.__ne__ = new_instancemethod(_snap.TSFlt___ne__,None,TSFlt)
TSFlt.__lt__ = new_instancemethod(_snap.TSFlt___lt__,None,TSFlt)
TSFlt.__call__ = new_instancemethod(_snap.TSFlt___call__,None,TSFlt)
TSFlt.__iadd__ = new_instancemethod(_snap.TSFlt___iadd__,None,TSFlt)
TSFlt.__isub__ = new_instancemethod(_snap.TSFlt___isub__,None,TSFlt)
TSFlt.__imul__ = new_instancemethod(_snap.TSFlt___imul__,None,TSFlt)
TSFlt.__idiv__ = new_instancemethod(_snap.TSFlt___idiv__,None,TSFlt)
TSFlt.GetMemUsed = new_instancemethod(_snap.TSFlt_GetMemUsed,None,TSFlt)
TSFlt.GetPrimHashCd = new_instancemethod(_snap.TSFlt_GetPrimHashCd,None,TSFlt)
TSFlt.GetSecHashCd = new_instancemethod(_snap.TSFlt_GetSecHashCd,None,TSFlt)
TSFlt_swigregister = _snap.TSFlt_swigregister
TSFlt_swigregister(TSFlt)
TSFlt.Mn = _snap.cvar.TSFlt_Mn
TSFlt.Mx = _snap.cvar.TSFlt_Mx

class TLFlt(object):
    """Proxy of C++ TLFlt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val = _swig_property(_snap.TLFlt_Val_get, _snap.TLFlt_Val_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TLFlt
        __init__(self, ldouble _Val) -> TLFlt
        Parameters:
           _Val: ldouble const & value

           _Val: ldouble const & value

        __init__(self, TSIn SIn) -> TLFlt
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TLFlt_swiginit(self,_snap.new_TLFlt(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TLFlt const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TLFlt_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TLFlt LFlt) -> bool
        Parameters:
           LFlt: TLFlt const & value

           LFlt: TLFlt const & value

        __eq__(self, ldouble LFlt) -> bool
        Parameters:
           self: TLFlt const * value
           LFlt: ldouble const & value

           LFlt: ldouble const & value

        """
        return _snap.TLFlt___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, ldouble LFlt) -> bool
        Parameters:
           self: TLFlt const * value
           LFlt: ldouble const & value

           LFlt: ldouble const & value

        """
        return _snap.TLFlt___ne__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TLFlt LFlt) -> bool
        Parameters:
           self: TLFlt const * value
           LFlt: TLFlt const & value

           LFlt: TLFlt const & value

        """
        return _snap.TLFlt___lt__(self, *args)

    def __call__(self):
        """
        __call__(self) -> ldouble
        Parameters:
           self: TLFlt const * value




        """
        return _snap.TLFlt___call__(self)

    def __iadd__(self, *args):
        """
        __iadd__(self, ldouble LFlt) -> TLFlt
        Parameters:
           self: TLFlt * value
           LFlt: ldouble const & value

           LFlt: ldouble const & value

        """
        return _snap.TLFlt___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, ldouble LFlt) -> TLFlt
        Parameters:
           self: TLFlt * value
           LFlt: ldouble const & value

           LFlt: ldouble const & value

        """
        return _snap.TLFlt___isub__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TLFlt const * value




        """
        return _snap.TLFlt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TLFlt const * value




        """
        return _snap.TLFlt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TLFlt const * value




        """
        return _snap.TLFlt_GetSecHashCd(self)

    def GetStr(*args):
        """
        GetStr(ldouble Val, int Width = -1, int Prec = -1) -> TStr
        Parameters:
           Val: ldouble const & value
           Width: int const & value
           Prec: int const & value

           Val: ldouble const & value
           Width: int const & value
           Prec: int const & value

           Val: ldouble const & value
           Width: int const & value
           Prec: int const & value

        GetStr(ldouble Val, int Width = -1) -> TStr
        Parameters:
           Val: ldouble const & value
           Width: int const & value

           Val: ldouble const & value
           Width: int const & value

           Val: ldouble const & value
           Width: int const & value

        GetStr(ldouble Val) -> TStr
        Parameters:
           Val: ldouble const & value

           Val: ldouble const & value

           Val: ldouble const & value

        GetStr(TLFlt LFlt, int Width = -1, int Prec = -1) -> TStr
        Parameters:
           LFlt: TLFlt const & value
           Width: int const & value
           Prec: int const & value

           LFlt: TLFlt const & value
           Width: int const & value
           Prec: int const & value

           LFlt: TLFlt const & value
           Width: int const & value
           Prec: int const & value

        GetStr(TLFlt LFlt, int Width = -1) -> TStr
        Parameters:
           LFlt: TLFlt const & value
           Width: int const & value

           LFlt: TLFlt const & value
           Width: int const & value

           LFlt: TLFlt const & value
           Width: int const & value

        GetStr(TLFlt LFlt) -> TStr
        Parameters:
           LFlt: TLFlt const & value

           LFlt: TLFlt const & value

           LFlt: TLFlt const & value

        GetStr(ldouble Val, char FmtStr) -> TStr
        Parameters:
           Val: ldouble const & value
           FmtStr: char const * value

           Val: ldouble const & value
           FmtStr: char const * value

           Val: ldouble const & value
           FmtStr: char const * value

        GetStr(ldouble Val, TStr FmtStr) -> TStr
        Parameters:
           Val: ldouble const & value
           FmtStr: TStr const & value

           Val: ldouble const & value
           FmtStr: TStr const & value

           Val: ldouble const & value
           FmtStr: TStr const & value

        """
        return _snap.TLFlt_GetStr(*args)

    GetStr = staticmethod(GetStr)
    __swig_destroy__ = _snap.delete_TLFlt
TLFlt.Save = new_instancemethod(_snap.TLFlt_Save,None,TLFlt)
TLFlt.__eq__ = new_instancemethod(_snap.TLFlt___eq__,None,TLFlt)
TLFlt.__ne__ = new_instancemethod(_snap.TLFlt___ne__,None,TLFlt)
TLFlt.__lt__ = new_instancemethod(_snap.TLFlt___lt__,None,TLFlt)
TLFlt.__call__ = new_instancemethod(_snap.TLFlt___call__,None,TLFlt)
TLFlt.__iadd__ = new_instancemethod(_snap.TLFlt___iadd__,None,TLFlt)
TLFlt.__isub__ = new_instancemethod(_snap.TLFlt___isub__,None,TLFlt)
TLFlt.GetMemUsed = new_instancemethod(_snap.TLFlt_GetMemUsed,None,TLFlt)
TLFlt.GetPrimHashCd = new_instancemethod(_snap.TLFlt_GetPrimHashCd,None,TLFlt)
TLFlt.GetSecHashCd = new_instancemethod(_snap.TLFlt_GetSecHashCd,None,TLFlt)
TLFlt_swigregister = _snap.TLFlt_swigregister
TLFlt_swigregister(TLFlt)
TLFlt.Mn = _snap.cvar.TLFlt_Mn
TLFlt.Mx = _snap.cvar.TLFlt_Mx

def TLFlt_GetStr(*args):
  """
    GetStr(ldouble Val, int Width = -1, int Prec = -1) -> TStr
    Parameters:
       Val: ldouble const & value
       Width: int const & value
       Prec: int const & value

       Val: ldouble const & value
       Width: int const & value
       Prec: int const & value

    GetStr(ldouble Val, int Width = -1) -> TStr
    Parameters:
       Val: ldouble const & value
       Width: int const & value

       Val: ldouble const & value
       Width: int const & value

    GetStr(ldouble Val) -> TStr
    Parameters:
       Val: ldouble const & value

       Val: ldouble const & value

    GetStr(TLFlt LFlt, int Width = -1, int Prec = -1) -> TStr
    Parameters:
       LFlt: TLFlt const & value
       Width: int const & value
       Prec: int const & value

       LFlt: TLFlt const & value
       Width: int const & value
       Prec: int const & value

    GetStr(TLFlt LFlt, int Width = -1) -> TStr
    Parameters:
       LFlt: TLFlt const & value
       Width: int const & value

       LFlt: TLFlt const & value
       Width: int const & value

    GetStr(TLFlt LFlt) -> TStr
    Parameters:
       LFlt: TLFlt const & value

       LFlt: TLFlt const & value

    GetStr(ldouble Val, char FmtStr) -> TStr
    Parameters:
       Val: ldouble const & value
       FmtStr: char const * value

       Val: ldouble const & value
       FmtStr: char const * value

    TLFlt_GetStr(ldouble Val, TStr FmtStr) -> TStr
    Parameters:
       Val: ldouble const & value
       FmtStr: TStr const & value

       Val: ldouble const & value
       FmtStr: TStr const & value

    """
  return _snap.TLFlt_GetStr(*args)

class TFltRect(object):
    """Proxy of C++ TFltRect class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MnX = _swig_property(_snap.TFltRect_MnX_get, _snap.TFltRect_MnX_set)
    MnY = _swig_property(_snap.TFltRect_MnY_get, _snap.TFltRect_MnY_set)
    MxX = _swig_property(_snap.TFltRect_MxX_get, _snap.TFltRect_MxX_set)
    MxY = _swig_property(_snap.TFltRect_MxY_get, _snap.TFltRect_MxY_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TFltRect
        __init__(self, TFltRect FltRect) -> TFltRect
        Parameters:
           FltRect: TFltRect const & value

           FltRect: TFltRect const & value

        __init__(self, double _MnX, double _MnY, double _MxX, double _MxY) -> TFltRect
        Parameters:
           _MnX: double const & value
           _MnY: double const & value
           _MxX: double const & value
           _MxY: double const & value

           _MnX: double const & value
           _MnY: double const & value
           _MxX: double const & value
           _MxY: double const & value

        __init__(self, TSIn SIn) -> TFltRect
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TFltRect_swiginit(self,_snap.new_TFltRect(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TFltRect const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TFltRect_Save(self, *args)

    def GetMnX(self):
        """
        GetMnX(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetMnX(self)

    def GetMnY(self):
        """
        GetMnY(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetMnY(self)

    def GetMxX(self):
        """
        GetMxX(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetMxX(self)

    def GetMxY(self):
        """
        GetMxY(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetMxY(self)

    def GetXLen(self):
        """
        GetXLen(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetXLen(self)

    def GetYLen(self):
        """
        GetYLen(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetYLen(self)

    def GetXCenter(self):
        """
        GetXCenter(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetXCenter(self)

    def GetYCenter(self):
        """
        GetYCenter(self) -> double
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetYCenter(self)

    def IsXYIn(self, *args):
        """
        IsXYIn(self, double X, double Y) -> bool
        Parameters:
           self: TFltRect const * value
           X: double const & value
           Y: double const & value

           X: double const & value
           Y: double const & value

        """
        return _snap.TFltRect_IsXYIn(self, *args)

    def Intersection(*args):
        """
        Intersection(TFltRect Rect1, TFltRect Rect2) -> bool
        Parameters:
           Rect1: TFltRect const & value
           Rect2: TFltRect const & value

           Rect1: TFltRect const & value
           Rect2: TFltRect const & value

           Rect1: TFltRect const & value
           Rect2: TFltRect const & value

        """
        return _snap.TFltRect_Intersection(*args)

    Intersection = staticmethod(Intersection)
    def GetStr(self):
        """
        GetStr(self) -> TStr
        Parameters:
           self: TFltRect const * value




        """
        return _snap.TFltRect_GetStr(self)

    __swig_destroy__ = _snap.delete_TFltRect
TFltRect.Save = new_instancemethod(_snap.TFltRect_Save,None,TFltRect)
TFltRect.GetMnX = new_instancemethod(_snap.TFltRect_GetMnX,None,TFltRect)
TFltRect.GetMnY = new_instancemethod(_snap.TFltRect_GetMnY,None,TFltRect)
TFltRect.GetMxX = new_instancemethod(_snap.TFltRect_GetMxX,None,TFltRect)
TFltRect.GetMxY = new_instancemethod(_snap.TFltRect_GetMxY,None,TFltRect)
TFltRect.GetXLen = new_instancemethod(_snap.TFltRect_GetXLen,None,TFltRect)
TFltRect.GetYLen = new_instancemethod(_snap.TFltRect_GetYLen,None,TFltRect)
TFltRect.GetXCenter = new_instancemethod(_snap.TFltRect_GetXCenter,None,TFltRect)
TFltRect.GetYCenter = new_instancemethod(_snap.TFltRect_GetYCenter,None,TFltRect)
TFltRect.IsXYIn = new_instancemethod(_snap.TFltRect_IsXYIn,None,TFltRect)
TFltRect.GetStr = new_instancemethod(_snap.TFltRect_GetStr,None,TFltRect)
TFltRect_swigregister = _snap.TFltRect_swigregister
TFltRect_swigregister(TFltRect)

def TFltRect_Intersection(*args):
  """
    TFltRect_Intersection(TFltRect Rect1, TFltRect Rect2) -> bool
    Parameters:
       Rect1: TFltRect const & value
       Rect2: TFltRect const & value

       Rect1: TFltRect const & value
       Rect2: TFltRect const & value

    """
  return _snap.TFltRect_Intersection(*args)

class TCs(object):
    """Proxy of C++ TCs class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TCs
        __init__(self, TCs Cs) -> TCs
        Parameters:
           Cs: TCs const & value

           Cs: TCs const & value

        __init__(self, int Int) -> TCs
        Parameters:
           Int: int const & value

           Int: int const & value

        """
        _snap.TCs_swiginit(self,_snap.new_TCs(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TCs Cs) -> bool
        Parameters:
           self: TCs const * value
           Cs: TCs const & value

           Cs: TCs const & value

        """
        return _snap.TCs___eq__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, TCs Cs) -> TCs
        Parameters:
           Cs: TCs const & value

           Cs: TCs const & value

        __iadd__(self, char Ch) -> TCs
        Parameters:
           Ch: char const & value

           Ch: char const & value

        __iadd__(self, int Int) -> TCs
        Parameters:
           self: TCs * value
           Int: int const & value

           Int: int const & value

        """
        return _snap.TCs___iadd__(self, *args)

    def Get(self):
        """
        Get(self) -> int
        Parameters:
           self: TCs const * value




        """
        return _snap.TCs_Get(self)

    def GetCsFromBf(*args):
        """
        GetCsFromBf(char Bf, int BfL) -> TCs
        Parameters:
           Bf: char * value
           BfL: int const & value

           Bf: char * value
           BfL: int const & value

           Bf: char * value
           BfL: int const & value

        """
        return _snap.TCs_GetCsFromBf(*args)

    GetCsFromBf = staticmethod(GetCsFromBf)
    __swig_destroy__ = _snap.delete_TCs
TCs.__eq__ = new_instancemethod(_snap.TCs___eq__,None,TCs)
TCs.__iadd__ = new_instancemethod(_snap.TCs___iadd__,None,TCs)
TCs.Get = new_instancemethod(_snap.TCs_Get,None,TCs)
TCs_swigregister = _snap.TCs_swigregister
TCs_swigregister(TCs)

def TCs_GetCsFromBf(*args):
  """
    TCs_GetCsFromBf(char Bf, int BfL) -> TCs
    Parameters:
       Bf: char * value
       BfL: int const & value

       Bf: char * value
       BfL: int const & value

    """
  return _snap.TCs_GetCsFromBf(*args)

class TSOutMnp(object):
    """Proxy of C++ TSOutMnp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __call__(self, *args):
        """
        __call__(self, TSOut SOut) -> TSOut
        Parameters:
           self: TSOutMnp const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TSOutMnp___call__(self, *args)

    __swig_destroy__ = _snap.delete_TSOutMnp
TSOutMnp.__call__ = new_instancemethod(_snap.TSOutMnp___call__,None,TSOutMnp)
TSOutMnp_swigregister = _snap.TSOutMnp_swigregister
TSOutMnp_swigregister(TSOutMnp)

class TSBase(object):
    """Proxy of C++ TSBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TSStr Nm) -> TSBase
        Parameters:
           Nm: TSStr const & value

           Nm: TSStr const & value

        """
        _snap.TSBase_swiginit(self,_snap.new_TSBase(*args))
    __swig_destroy__ = _snap.delete_TSBase
    def GetSNm(self):
        """
        GetSNm(self) -> TStr
        Parameters:
           self: TSBase const * value




        """
        return _snap.TSBase_GetSNm(self)

TSBase.GetSNm = new_instancemethod(_snap.TSBase_GetSNm,None,TSBase)
TSBase_swigregister = _snap.TSBase_swigregister
TSBase_swigregister(TSBase)

class TSIn(TSBase):
    """Proxy of C++ TSIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSIn
    def Eof(self):
        """
        Eof(self) -> bool
        Parameters:
           self: TSIn * value




        """
        return _snap.TSIn_Eof(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TSIn const * value




        """
        return _snap.TSIn_Len(self)

    def GetCh(self):
        """
        GetCh(self) -> char
        Parameters:
           self: TSIn * value




        """
        return _snap.TSIn_GetCh(self)

    def PeekCh(self):
        """
        PeekCh(self) -> char
        Parameters:
           self: TSIn * value




        """
        return _snap.TSIn_PeekCh(self)

    def GetBf(self, *args):
        """
        GetBf(self, void Bf, TSize BfL) -> int
        Parameters:
           self: TSIn * value
           Bf: void const * value
           BfL: TSize const & value

           Bf: void const * value
           BfL: TSize const & value

        """
        return _snap.TSIn_GetBf(self, *args)

    def GetNextLnBf(self, *args):
        """
        GetNextLnBf(self, TChA LnChA) -> bool
        Parameters:
           self: TSIn * value
           LnChA: TChA & value

           LnChA: TChA & value

        """
        return _snap.TSIn_GetNextLnBf(self, *args)

    def Reset(self):
        """
        Reset(self)
        Parameters:
           self: TSIn * value




        """
        return _snap.TSIn_Reset(self)

    def IsFastMode(self):
        """
        IsFastMode(self) -> bool
        Parameters:
           self: TSIn const * value




        """
        return _snap.TSIn_IsFastMode(self)

    def SetFastMode(self, *args):
        """
        SetFastMode(self, bool _FastMode)
        Parameters:
           self: TSIn * value
           _FastMode: bool const & value

           _FastMode: bool const & value

        """
        return _snap.TSIn_SetFastMode(self, *args)

    def LoadCs(self):
        """
        LoadCs(self)
        Parameters:
           self: TSIn * value




        """
        return _snap.TSIn_LoadCs(self)

    def LoadBf(self, *args):
        """
        LoadBf(self, void Bf, TSize BfL)
        Parameters:
           self: TSIn * value
           Bf: void const * value
           BfL: TSize const & value

           Bf: void const * value
           BfL: TSize const & value

        """
        return _snap.TSIn_LoadBf(self, *args)

    def LoadNewBf(self, *args):
        """
        LoadNewBf(self, int BfL) -> void
        Parameters:
           self: TSIn * value
           BfL: int const & value

           BfL: int const & value

        """
        return _snap.TSIn_LoadNewBf(self, *args)

    def Load(self, *args):
        """
        Load(self, bool Bool)
        Parameters:
           Bool: bool & value

           Bool: bool & value

        Load(self, uchar UCh)
        Parameters:
           UCh: uchar & value

           UCh: uchar & value

        Load(self, char Ch)
        Parameters:
           Ch: char & value

           Ch: char & value

        Load(self, short Short)
        Parameters:
           Short: short & value

           Short: short & value

        Load(self, ushort UShort)
        Parameters:
           UShort: ushort & value

           UShort: ushort & value

        Load(self, int Int)
        Parameters:
           Int: int & value

           Int: int & value

        Load(self, uint UInt)
        Parameters:
           UInt: uint & value

           UInt: uint & value

        Load(self, int64 Int)
        Parameters:
           Int: int64 & value

           Int: int64 & value

        Load(self, uint64 UInt)
        Parameters:
           UInt: uint64 & value

           UInt: uint64 & value

        Load(self, double Flt)
        Parameters:
           Flt: double & value

           Flt: double & value

        Load(self, sdouble SFlt)
        Parameters:
           SFlt: sdouble & value

           SFlt: sdouble & value

        Load(self, ldouble LFlt)
        Parameters:
           LFlt: ldouble & value

           LFlt: ldouble & value

        Load(self, char CStr, int MxCStrLen, int CStrLen)
        Parameters:
           CStr: char *& value
           MxCStrLen: int const & value
           CStrLen: int const & value

           CStr: char *& value
           MxCStrLen: int const & value
           CStrLen: int const & value

        Load(self, char CStr)
        Parameters:
           self: TSIn * value
           CStr: char *& value

           CStr: char *& value

        """
        return _snap.TSIn_Load(self, *args)

    def __rshift__(self, *args):
        """
        __rshift__(self, bool Bool) -> TSIn
        Parameters:
           Bool: bool & value

           Bool: bool & value

        __rshift__(self, uchar UCh) -> TSIn
        Parameters:
           UCh: uchar & value

           UCh: uchar & value

        __rshift__(self, char Ch) -> TSIn
        Parameters:
           Ch: char & value

           Ch: char & value

        __rshift__(self, short Sh) -> TSIn
        Parameters:
           Sh: short & value

           Sh: short & value

        __rshift__(self, ushort USh) -> TSIn
        Parameters:
           USh: ushort & value

           USh: ushort & value

        __rshift__(self, int Int) -> TSIn
        Parameters:
           Int: int & value

           Int: int & value

        __rshift__(self, uint UInt) -> TSIn
        Parameters:
           UInt: uint & value

           UInt: uint & value

        __rshift__(self, int64 Int) -> TSIn
        Parameters:
           Int: int64 & value

           Int: int64 & value

        __rshift__(self, uint64 UInt) -> TSIn
        Parameters:
           UInt: uint64 & value

           UInt: uint64 & value

        __rshift__(self, float Flt) -> TSIn
        Parameters:
           Flt: float & value

           Flt: float & value

        __rshift__(self, double Double) -> TSIn
        Parameters:
           Double: double & value

           Double: double & value

        __rshift__(self, long double LDouble) -> TSIn
        Parameters:
           self: TSIn * value
           LDouble: long double & value

           LDouble: long double & value

        """
        return _snap.TSIn___rshift__(self, *args)

    def GetNextLn(self, *args):
        """
        GetNextLn(self, TStr LnStr) -> bool
        Parameters:
           LnStr: TStr & value

           LnStr: TStr & value

        GetNextLn(self, TChA LnChA) -> bool
        Parameters:
           self: TSIn * value
           LnChA: TChA & value

           LnChA: TChA & value

        """
        return _snap.TSIn_GetNextLn(self, *args)

TSIn.Eof = new_instancemethod(_snap.TSIn_Eof,None,TSIn)
TSIn.Len = new_instancemethod(_snap.TSIn_Len,None,TSIn)
TSIn.GetCh = new_instancemethod(_snap.TSIn_GetCh,None,TSIn)
TSIn.PeekCh = new_instancemethod(_snap.TSIn_PeekCh,None,TSIn)
TSIn.GetBf = new_instancemethod(_snap.TSIn_GetBf,None,TSIn)
TSIn.GetNextLnBf = new_instancemethod(_snap.TSIn_GetNextLnBf,None,TSIn)
TSIn.Reset = new_instancemethod(_snap.TSIn_Reset,None,TSIn)
TSIn.IsFastMode = new_instancemethod(_snap.TSIn_IsFastMode,None,TSIn)
TSIn.SetFastMode = new_instancemethod(_snap.TSIn_SetFastMode,None,TSIn)
TSIn.LoadCs = new_instancemethod(_snap.TSIn_LoadCs,None,TSIn)
TSIn.LoadBf = new_instancemethod(_snap.TSIn_LoadBf,None,TSIn)
TSIn.LoadNewBf = new_instancemethod(_snap.TSIn_LoadNewBf,None,TSIn)
TSIn.Load = new_instancemethod(_snap.TSIn_Load,None,TSIn)
TSIn.__rshift__ = new_instancemethod(_snap.TSIn___rshift__,None,TSIn)
TSIn.GetNextLn = new_instancemethod(_snap.TSIn_GetNextLn,None,TSIn)
TSIn_swigregister = _snap.TSIn_swigregister
TSIn_swigregister(TSIn)
TSIn.StdIn = _snap.cvar.TSIn_StdIn

class TSOut(TSBase):
    """Proxy of C++ TSOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSOut
    def EnableLnTrunc(self, *args):
        """
        EnableLnTrunc(self, int _MxLnLen)
        Parameters:
           self: TSOut * value
           _MxLnLen: int const & value

           _MxLnLen: int const & value

        """
        return _snap.TSOut_EnableLnTrunc(self, *args)

    def DisableLnTrunc(self):
        """
        DisableLnTrunc(self)
        Parameters:
           self: TSOut * value




        """
        return _snap.TSOut_DisableLnTrunc(self)

    def PutBf(self, *args):
        """
        PutBf(self, void LBf, TSize LBfL) -> int
        Parameters:
           self: TSOut * value
           LBf: void const * value
           LBfL: TSize const & value

           LBf: void const * value
           LBfL: TSize const & value

        """
        return _snap.TSOut_PutBf(self, *args)

    def Flush(self):
        """
        Flush(self)
        Parameters:
           self: TSOut * value




        """
        return _snap.TSOut_Flush(self)

    def GetFileId(self):
        """
        GetFileId(self) -> TFileId
        Parameters:
           self: TSOut const * value




        """
        return _snap.TSOut_GetFileId(self)

    def PutMem(self, *args):
        """
        PutMem(self, TMem Mem) -> int
        Parameters:
           self: TSOut * value
           Mem: TMem const & value

           Mem: TMem const & value

        """
        return _snap.TSOut_PutMem(self, *args)

    def PutCh(self, *args):
        """
        PutCh(self, char Ch) -> int
        Parameters:
           Ch: char const & value

           Ch: char const & value

        PutCh(self, char Ch, int Chs) -> int
        Parameters:
           self: TSOut * value
           Ch: char const & value
           Chs: int const & value

           Ch: char const & value
           Chs: int const & value

        """
        return _snap.TSOut_PutCh(self, *args)

    def PutBool(self, *args):
        """
        PutBool(self, bool Bool) -> int
        Parameters:
           self: TSOut * value
           Bool: bool const & value

           Bool: bool const & value

        """
        return _snap.TSOut_PutBool(self, *args)

    def PutInt(self, *args):
        """
        PutInt(self, int Int) -> int
        Parameters:
           Int: int const & value

           Int: int const & value

        PutInt(self, int Int, char FmtStr) -> int
        Parameters:
           self: TSOut * value
           Int: int const & value
           FmtStr: char const * value

           Int: int const & value
           FmtStr: char const * value

        """
        return _snap.TSOut_PutInt(self, *args)

    def PutUInt(self, *args):
        """
        PutUInt(self, uint Int) -> int
        Parameters:
           Int: uint const & value

           Int: uint const & value

        PutUInt(self, uint Int, char FmtStr) -> int
        Parameters:
           self: TSOut * value
           Int: uint const & value
           FmtStr: char const * value

           Int: uint const & value
           FmtStr: char const * value

        """
        return _snap.TSOut_PutUInt(self, *args)

    def PutFlt(self, *args):
        """
        PutFlt(self, double Flt) -> int
        Parameters:
           Flt: double const & value

           Flt: double const & value

        PutFlt(self, double Flt, char FmtStr) -> int
        Parameters:
           self: TSOut * value
           Flt: double const & value
           FmtStr: char const * value

           Flt: double const & value
           FmtStr: char const * value

        """
        return _snap.TSOut_PutFlt(self, *args)

    def PutStr(self, *args):
        """
        PutStr(self, char CStr) -> int
        Parameters:
           CStr: char const * value

           CStr: char const * value

        PutStr(self, TChA ChA) -> int
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        PutStr(self, TStr Str, char FmtStr) -> int
        Parameters:
           Str: TStr const & value
           FmtStr: char const * value

           Str: TStr const & value
           FmtStr: char const * value

        PutStr(self, TStr Str, bool ForceInLn = False) -> int
        Parameters:
           Str: TStr const & value
           ForceInLn: bool const & value

           Str: TStr const & value
           ForceInLn: bool const & value

        PutStr(self, TStr Str) -> int
        Parameters:
           self: TSOut * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TSOut_PutStr(self, *args)

    def PutStrLn(self, *args):
        """
        PutStrLn(self, TStr Str, bool ForceInLn = False) -> int
        Parameters:
           Str: TStr const & value
           ForceInLn: bool const & value

           Str: TStr const & value
           ForceInLn: bool const & value

        PutStrLn(self, TStr Str) -> int
        Parameters:
           self: TSOut * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TSOut_PutStrLn(self, *args)

    def PutStrFmt(self, *args):
        """
        PutStrFmt(self, char FmtStr, v(...) *args) -> int
        Parameters:
           self: TSOut * value
           FmtStr: char const * value

           FmtStr: char const * value

        """
        return _snap.TSOut_PutStrFmt(self, *args)

    def PutStrFmtLn(self, *args):
        """
        PutStrFmtLn(self, char FmtStr, v(...) *args) -> int
        Parameters:
           self: TSOut * value
           FmtStr: char const * value

           FmtStr: char const * value

        """
        return _snap.TSOut_PutStrFmtLn(self, *args)

    def PutIndent(self, IndentLev = 1):
        """
        PutIndent(self, int IndentLev = 1) -> int
        Parameters:
           IndentLev: int const & value

           IndentLev: int const & value

           IndentLev: int const & value

           IndentLev: int const & value

        PutIndent(self) -> int
        Parameters:
           self: TSOut * value


        """
        return _snap.TSOut_PutIndent(self, IndentLev)

    def PutLn(self, Lns = 1):
        """
        PutLn(self, int Lns = 1) -> int
        Parameters:
           Lns: int const & value

           Lns: int const & value

           Lns: int const & value

           Lns: int const & value

        PutLn(self) -> int
        Parameters:
           self: TSOut * value


        """
        return _snap.TSOut_PutLn(self, Lns)

    def PutDosLn(self, Lns = 1):
        """
        PutDosLn(self, int Lns = 1) -> int
        Parameters:
           Lns: int const & value

           Lns: int const & value

           Lns: int const & value

           Lns: int const & value

        PutDosLn(self) -> int
        Parameters:
           self: TSOut * value


        """
        return _snap.TSOut_PutDosLn(self, Lns)

    def PutSep(self, NextStrLen = 0):
        """
        PutSep(self, int NextStrLen = 0) -> int
        Parameters:
           NextStrLen: int const & value

           NextStrLen: int const & value

           NextStrLen: int const & value

           NextStrLen: int const & value

        PutSep(self) -> int
        Parameters:
           self: TSOut * value


        """
        return _snap.TSOut_PutSep(self, NextStrLen)

    def PutSepLn(self, Lns = 0):
        """
        PutSepLn(self, int Lns = 0) -> int
        Parameters:
           Lns: int const & value

           Lns: int const & value

           Lns: int const & value

           Lns: int const & value

        PutSepLn(self) -> int
        Parameters:
           self: TSOut * value


        """
        return _snap.TSOut_PutSepLn(self, Lns)

    def SaveCs(self):
        """
        SaveCs(self)
        Parameters:
           self: TSOut * value




        """
        return _snap.TSOut_SaveCs(self)

    def SaveBf(self, *args):
        """
        SaveBf(self, void Bf, TSize BfL)
        Parameters:
           self: TSOut * value
           Bf: void const * value
           BfL: TSize const & value

           Bf: void const * value
           BfL: TSize const & value

        """
        return _snap.TSOut_SaveBf(self, *args)

    def Save(self, *args):
        """
        Save(self, bool Bool)
        Parameters:
           Bool: bool const & value

           Bool: bool const & value

        Save(self, char Ch)
        Parameters:
           Ch: char const & value

           Ch: char const & value

        Save(self, uchar UCh)
        Parameters:
           UCh: uchar const & value

           UCh: uchar const & value

        Save(self, short Short)
        Parameters:
           Short: short const & value

           Short: short const & value

        Save(self, ushort UShort)
        Parameters:
           UShort: ushort const & value

           UShort: ushort const & value

        Save(self, int Int)
        Parameters:
           Int: int const & value

           Int: int const & value

        Save(self, uint UInt)
        Parameters:
           UInt: uint const & value

           UInt: uint const & value

        Save(self, int64 Int)
        Parameters:
           Int: int64 const & value

           Int: int64 const & value

        Save(self, uint64 UInt)
        Parameters:
           UInt: uint64 const & value

           UInt: uint64 const & value

        Save(self, double Flt)
        Parameters:
           Flt: double const & value

           Flt: double const & value

        Save(self, sdouble SFlt)
        Parameters:
           SFlt: sdouble const & value

           SFlt: sdouble const & value

        Save(self, ldouble LFlt)
        Parameters:
           LFlt: ldouble const & value

           LFlt: ldouble const & value

        Save(self, char CStr, TSize CStrLen)
        Parameters:
           CStr: char const * value
           CStrLen: TSize const & value

           CStr: char const * value
           CStrLen: TSize const & value

        Save(self, char CStr)
        Parameters:
           CStr: char const * value

           CStr: char const * value

        Save(self, TSIn SIn, TSize BfL = -1)
        Parameters:
           SIn: TSIn & value
           BfL: TSize const & value

           SIn: TSIn & value
           BfL: TSize const & value

        Save(self, TSIn SIn)
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        Save(self, PSIn SIn, TSize BfL = -1)
        Parameters:
           SIn: PSIn const & value
           BfL: TSize const & value

           SIn: PSIn const & value
           BfL: TSize const & value

        Save(self, PSIn SIn)
        Parameters:
           SIn: PSIn const & value

           SIn: PSIn const & value

        Save(self, void Bf, TSize BfL)
        Parameters:
           self: TSOut * value
           Bf: void const * value
           BfL: TSize const & value

           Bf: void const * value
           BfL: TSize const & value

        """
        return _snap.TSOut_Save(self, *args)

    def __lshift__(self, *args):
        """
        __lshift__(self, bool Bool) -> TSOut
        Parameters:
           Bool: bool const & value

           Bool: bool const & value

        __lshift__(self, uchar UCh) -> TSOut
        Parameters:
           UCh: uchar const & value

           UCh: uchar const & value

        __lshift__(self, char Ch) -> TSOut
        Parameters:
           Ch: char const & value

           Ch: char const & value

        __lshift__(self, short Sh) -> TSOut
        Parameters:
           Sh: short const & value

           Sh: short const & value

        __lshift__(self, ushort USh) -> TSOut
        Parameters:
           USh: ushort const & value

           USh: ushort const & value

        __lshift__(self, int Int) -> TSOut
        Parameters:
           Int: int const & value

           Int: int const & value

        __lshift__(self, uint Int) -> TSOut
        Parameters:
           Int: uint const & value

           Int: uint const & value

        __lshift__(self, int64 Int) -> TSOut
        Parameters:
           Int: int64 const & value

           Int: int64 const & value

        __lshift__(self, uint64 UInt) -> TSOut
        Parameters:
           UInt: uint64 const & value

           UInt: uint64 const & value

        __lshift__(self, float Flt) -> TSOut
        Parameters:
           Flt: float const & value

           Flt: float const & value

        __lshift__(self, double Double) -> TSOut
        Parameters:
           Double: double const & value

           Double: double const & value

        __lshift__(self, long double LDouble) -> TSOut
        Parameters:
           LDouble: long double const & value

           LDouble: long double const & value

        __lshift__(self, TSOutMnp Mnp) -> TSOut
        Parameters:
           Mnp: TSOutMnp const & value

           Mnp: TSOutMnp const & value

        __lshift__(self, TSOut FuncPt) -> TSOut
        Parameters:
           FuncPt: TSOut &(*)(TSOut &) value

           FuncPt: TSOut &(*)(TSOut &) value

        __lshift__(self, TSIn SIn) -> TSOut
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        __lshift__(self, PSIn SIn) -> TSOut
        Parameters:
           self: TSOut * value
           SIn: PSIn & value

           SIn: PSIn & value

        """
        return _snap.TSOut___lshift__(self, *args)

TSOut.EnableLnTrunc = new_instancemethod(_snap.TSOut_EnableLnTrunc,None,TSOut)
TSOut.DisableLnTrunc = new_instancemethod(_snap.TSOut_DisableLnTrunc,None,TSOut)
TSOut.PutBf = new_instancemethod(_snap.TSOut_PutBf,None,TSOut)
TSOut.Flush = new_instancemethod(_snap.TSOut_Flush,None,TSOut)
TSOut.GetFileId = new_instancemethod(_snap.TSOut_GetFileId,None,TSOut)
TSOut.PutMem = new_instancemethod(_snap.TSOut_PutMem,None,TSOut)
TSOut.PutCh = new_instancemethod(_snap.TSOut_PutCh,None,TSOut)
TSOut.PutBool = new_instancemethod(_snap.TSOut_PutBool,None,TSOut)
TSOut.PutInt = new_instancemethod(_snap.TSOut_PutInt,None,TSOut)
TSOut.PutUInt = new_instancemethod(_snap.TSOut_PutUInt,None,TSOut)
TSOut.PutFlt = new_instancemethod(_snap.TSOut_PutFlt,None,TSOut)
TSOut.PutStr = new_instancemethod(_snap.TSOut_PutStr,None,TSOut)
TSOut.PutStrLn = new_instancemethod(_snap.TSOut_PutStrLn,None,TSOut)
TSOut.PutStrFmt = new_instancemethod(_snap.TSOut_PutStrFmt,None,TSOut)
TSOut.PutStrFmtLn = new_instancemethod(_snap.TSOut_PutStrFmtLn,None,TSOut)
TSOut.PutIndent = new_instancemethod(_snap.TSOut_PutIndent,None,TSOut)
TSOut.PutLn = new_instancemethod(_snap.TSOut_PutLn,None,TSOut)
TSOut.PutDosLn = new_instancemethod(_snap.TSOut_PutDosLn,None,TSOut)
TSOut.PutSep = new_instancemethod(_snap.TSOut_PutSep,None,TSOut)
TSOut.PutSepLn = new_instancemethod(_snap.TSOut_PutSepLn,None,TSOut)
TSOut.SaveCs = new_instancemethod(_snap.TSOut_SaveCs,None,TSOut)
TSOut.SaveBf = new_instancemethod(_snap.TSOut_SaveBf,None,TSOut)
TSOut.Save = new_instancemethod(_snap.TSOut_Save,None,TSOut)
TSOut.__lshift__ = new_instancemethod(_snap.TSOut___lshift__,None,TSOut)
TSOut_swigregister = _snap.TSOut_swigregister
TSOut_swigregister(TSOut)
TSOut.StdOut = _snap.cvar.TSOut_StdOut

class TSInOut(TSIn,TSOut):
    """Proxy of C++ TSInOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TSInOut
    def SetPos(self, *args):
        """
        SetPos(self, int Pos)
        Parameters:
           self: TSInOut * value
           Pos: int const & value

           Pos: int const & value

        """
        return _snap.TSInOut_SetPos(self, *args)

    def MovePos(self, *args):
        """
        MovePos(self, int DPos)
        Parameters:
           self: TSInOut * value
           DPos: int const & value

           DPos: int const & value

        """
        return _snap.TSInOut_MovePos(self, *args)

    def GetPos(self):
        """
        GetPos(self) -> int
        Parameters:
           self: TSInOut const * value




        """
        return _snap.TSInOut_GetPos(self)

    def GetSize(self):
        """
        GetSize(self) -> int
        Parameters:
           self: TSInOut const * value




        """
        return _snap.TSInOut_GetSize(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TSInOut * value




        """
        return _snap.TSInOut_Clr(self)

TSInOut.SetPos = new_instancemethod(_snap.TSInOut_SetPos,None,TSInOut)
TSInOut.MovePos = new_instancemethod(_snap.TSInOut_MovePos,None,TSInOut)
TSInOut.GetPos = new_instancemethod(_snap.TSInOut_GetPos,None,TSInOut)
TSInOut.GetSize = new_instancemethod(_snap.TSInOut_GetSize,None,TSInOut)
TSInOut.Clr = new_instancemethod(_snap.TSInOut_Clr,None,TSInOut)
TSInOut_swigregister = _snap.TSInOut_swigregister
TSInOut_swigregister(TSInOut)

class TStdIn(TSIn):
    """Proxy of C++ TStdIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TStdIn"""
        _snap.TStdIn_swiginit(self,_snap.new_TStdIn())
    def New():
        """New() -> TPt<(TSIn)>"""
        return _snap.TStdIn_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdIn
TStdIn_swigregister = _snap.TStdIn_swigregister
TStdIn_swigregister(TStdIn)

def TStdIn_New():
  """TStdIn_New() -> TPt<(TSIn)>"""
  return _snap.TStdIn_New()

class TStdOut(TSOut):
    """Proxy of C++ TStdOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TStdOut"""
        _snap.TStdOut_swiginit(self,_snap.new_TStdOut())
    def New():
        """New() -> TPt<(TSOut)>"""
        return _snap.TStdOut_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdOut
TStdOut_swigregister = _snap.TStdOut_swigregister
TStdOut_swigregister(TStdOut)

def TStdOut_New():
  """TStdOut_New() -> TPt<(TSOut)>"""
  return _snap.TStdOut_New()

class TFIn(TSIn):
    """Proxy of C++ TFIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TStr FNm) -> TFIn
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

        __init__(self, TStr FNm, bool OpenedP) -> TFIn
        Parameters:
           FNm: TStr const & value
           OpenedP: bool & value

           FNm: TStr const & value
           OpenedP: bool & value

        """
        _snap.TFIn_swiginit(self,_snap.new_TFIn(*args))
    def New(*args):
        """
        New(TStr FNm) -> PSIn
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

           FNm: TStr const & value

        New(TStr FNm, bool OpenedP) -> PSIn
        Parameters:
           FNm: TStr const & value
           OpenedP: bool & value

           FNm: TStr const & value
           OpenedP: bool & value

           FNm: TStr const & value
           OpenedP: bool & value

        """
        return _snap.TFIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TFIn
TFIn_swigregister = _snap.TFIn_swigregister
TFIn_swigregister(TFIn)

def TFIn_New(*args):
  """
    New(TStr FNm) -> PSIn
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    TFIn_New(TStr FNm, bool OpenedP) -> PSIn
    Parameters:
       FNm: TStr const & value
       OpenedP: bool & value

       FNm: TStr const & value
       OpenedP: bool & value

    """
  return _snap.TFIn_New(*args)

class TFOut(TSOut):
    """Proxy of C++ TFOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TStr _FNm, bool Append = False) -> TFOut
        Parameters:
           _FNm: TStr const & value
           Append: bool const & value

           _FNm: TStr const & value
           Append: bool const & value

        __init__(self, TStr _FNm) -> TFOut
        Parameters:
           _FNm: TStr const & value

           _FNm: TStr const & value

        __init__(self, TStr _FNm, bool Append, bool OpenedP) -> TFOut
        Parameters:
           _FNm: TStr const & value
           Append: bool const & value
           OpenedP: bool & value

           _FNm: TStr const & value
           Append: bool const & value
           OpenedP: bool & value

        """
        _snap.TFOut_swiginit(self,_snap.new_TFOut(*args))
    def New(*args):
        """
        New(TStr FNm, bool Append = False) -> PSOut
        Parameters:
           FNm: TStr const & value
           Append: bool const & value

           FNm: TStr const & value
           Append: bool const & value

           FNm: TStr const & value
           Append: bool const & value

        New(TStr FNm) -> PSOut
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

           FNm: TStr const & value

        New(TStr FNm, bool Append, bool OpenedP) -> PSOut
        Parameters:
           FNm: TStr const & value
           Append: bool const & value
           OpenedP: bool & value

           FNm: TStr const & value
           Append: bool const & value
           OpenedP: bool & value

           FNm: TStr const & value
           Append: bool const & value
           OpenedP: bool & value

        """
        return _snap.TFOut_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TFOut
TFOut_swigregister = _snap.TFOut_swigregister
TFOut_swigregister(TFOut)

def TFOut_New(*args):
  """
    New(TStr FNm, bool Append = False) -> PSOut
    Parameters:
       FNm: TStr const & value
       Append: bool const & value

       FNm: TStr const & value
       Append: bool const & value

    New(TStr FNm) -> PSOut
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    TFOut_New(TStr FNm, bool Append, bool OpenedP) -> PSOut
    Parameters:
       FNm: TStr const & value
       Append: bool const & value
       OpenedP: bool & value

       FNm: TStr const & value
       Append: bool const & value
       OpenedP: bool & value

    """
  return _snap.TFOut_New(*args)

faUndef = _snap.faUndef
faCreate = _snap.faCreate
faUpdate = _snap.faUpdate
faAppend = _snap.faAppend
faRdOnly = _snap.faRdOnly
faRestore = _snap.faRestore
class TMIn(TSIn):
    """Proxy of C++ TMIn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, void _Bf, uint64 _BfL, bool TakeBf = False) -> TMIn
        Parameters:
           _Bf: void const * value
           _BfL: uint64 const & value
           TakeBf: bool const & value

           _Bf: void const * value
           _BfL: uint64 const & value
           TakeBf: bool const & value

        __init__(self, void _Bf, uint64 _BfL) -> TMIn
        Parameters:
           _Bf: void const * value
           _BfL: uint64 const & value

           _Bf: void const * value
           _BfL: uint64 const & value

        __init__(self, TSIn SIn) -> TMIn
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        __init__(self, char CStr) -> TMIn
        Parameters:
           CStr: char const * value

           CStr: char const * value

        __init__(self, TStr Str, bool FromFile) -> TMIn
        Parameters:
           Str: TStr const & value
           FromFile: bool value

           Str: TStr const & value
           FromFile: bool value

        __init__(self, TChA ChA) -> TMIn
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

        """
        _snap.TMIn_swiginit(self,_snap.new_TMIn(*args))
    def New(*args):
        """
        New(void _Bf, uint64 _BfL, bool TakeBf = False) -> PSIn
        Parameters:
           _Bf: void const * value
           _BfL: uint64 const & value
           TakeBf: bool const & value

           _Bf: void const * value
           _BfL: uint64 const & value
           TakeBf: bool const & value

           _Bf: void const * value
           _BfL: uint64 const & value
           TakeBf: bool const & value

        New(void _Bf, uint64 _BfL) -> PSIn
        Parameters:
           _Bf: void const * value
           _BfL: uint64 const & value

           _Bf: void const * value
           _BfL: uint64 const & value

           _Bf: void const * value
           _BfL: uint64 const & value

        New(char CStr) -> PSIn
        Parameters:
           CStr: char const * value

           CStr: char const * value

           CStr: char const * value

        New(TStr Str) -> PSIn
        Parameters:
           Str: TStr const & value

           Str: TStr const & value

           Str: TStr const & value

        New(TChA ChA) -> PSIn
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

           ChA: TChA const & value

        New(TStr Str, bool FromFile) -> TPt<(TMIn)>
        Parameters:
           Str: TStr const & value
           FromFile: bool value

           Str: TStr const & value
           FromFile: bool value

           Str: TStr const & value
           FromFile: bool value

        """
        return _snap.TMIn_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TMIn
    def GetBfC(self):
        """
        GetBfC(self) -> uint64
        Parameters:
           self: TMIn * value




        """
        return _snap.TMIn_GetBfC(self)

    def GetBfL(self):
        """
        GetBfL(self) -> uint64
        Parameters:
           self: TMIn * value




        """
        return _snap.TMIn_GetBfL(self)

    def SetBfC(self, *args):
        """
        SetBfC(self, uint64 Pos)
        Parameters:
           self: TMIn * value
           Pos: uint64 value

           Pos: uint64 value

        """
        return _snap.TMIn_SetBfC(self, *args)

    def CountNewLinesInRange(self, *args):
        """
        CountNewLinesInRange(self, uint64 Lb, uint64 Ub) -> uint64
        Parameters:
           self: TMIn * value
           Lb: uint64 value
           Ub: uint64 value

           Lb: uint64 value
           Ub: uint64 value

        """
        return _snap.TMIn_CountNewLinesInRange(self, *args)

    def GetLineStartPos(self, *args):
        """
        GetLineStartPos(self, uint64 Ind) -> uint64
        Parameters:
           self: TMIn * value
           Ind: uint64 value

           Ind: uint64 value

        """
        return _snap.TMIn_GetLineStartPos(self, *args)

    def GetLineEndPos(self, *args):
        """
        GetLineEndPos(self, uint64 Ind) -> uint64
        Parameters:
           self: TMIn * value
           Ind: uint64 value

           Ind: uint64 value

        """
        return _snap.TMIn_GetLineEndPos(self, *args)

    def GetLine(self, *args):
        """
        GetLine(self, uint64 Ind) -> char
        Parameters:
           self: TMIn * value
           Ind: uint64 value

           Ind: uint64 value

        """
        return _snap.TMIn_GetLine(self, *args)

    def SkipCommentLines(self):
        """
        SkipCommentLines(self)
        Parameters:
           self: TMIn * value




        """
        return _snap.TMIn_SkipCommentLines(self)

    def GetBfAddr(self):
        """
        GetBfAddr(self) -> char
        Parameters:
           self: TMIn * value




        """
        return _snap.TMIn_GetBfAddr(self)

TMIn.GetBfC = new_instancemethod(_snap.TMIn_GetBfC,None,TMIn)
TMIn.GetBfL = new_instancemethod(_snap.TMIn_GetBfL,None,TMIn)
TMIn.SetBfC = new_instancemethod(_snap.TMIn_SetBfC,None,TMIn)
TMIn.CountNewLinesInRange = new_instancemethod(_snap.TMIn_CountNewLinesInRange,None,TMIn)
TMIn.GetLineStartPos = new_instancemethod(_snap.TMIn_GetLineStartPos,None,TMIn)
TMIn.GetLineEndPos = new_instancemethod(_snap.TMIn_GetLineEndPos,None,TMIn)
TMIn.GetLine = new_instancemethod(_snap.TMIn_GetLine,None,TMIn)
TMIn.SkipCommentLines = new_instancemethod(_snap.TMIn_SkipCommentLines,None,TMIn)
TMIn.GetBfAddr = new_instancemethod(_snap.TMIn_GetBfAddr,None,TMIn)
TMIn_swigregister = _snap.TMIn_swigregister
TMIn_swigregister(TMIn)

def TMIn_New(*args):
  """
    New(void _Bf, uint64 _BfL, bool TakeBf = False) -> PSIn
    Parameters:
       _Bf: void const * value
       _BfL: uint64 const & value
       TakeBf: bool const & value

       _Bf: void const * value
       _BfL: uint64 const & value
       TakeBf: bool const & value

    New(void _Bf, uint64 _BfL) -> PSIn
    Parameters:
       _Bf: void const * value
       _BfL: uint64 const & value

       _Bf: void const * value
       _BfL: uint64 const & value

    New(char CStr) -> PSIn
    Parameters:
       CStr: char const * value

       CStr: char const * value

    New(TStr Str) -> PSIn
    Parameters:
       Str: TStr const & value

       Str: TStr const & value

    New(TChA ChA) -> PSIn
    Parameters:
       ChA: TChA const & value

       ChA: TChA const & value

    TMIn_New(TStr Str, bool FromFile) -> TPt<(TMIn)>
    Parameters:
       Str: TStr const & value
       FromFile: bool value

       Str: TStr const & value
       FromFile: bool value

    """
  return _snap.TMIn_New(*args)

class TMOut(TSOut):
    """Proxy of C++ TMOut class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def New(MxBfL = 1024):
        """
        New(int MxBfL = 1024) -> PSOut
        Parameters:
           MxBfL: int const & value

           MxBfL: int const & value

           MxBfL: int const & value

           MxBfL: int const & value

           MxBfL: int const & value

           MxBfL: int const & value

           MxBfL: int const & value

        New() -> PSOut
        """
        return _snap.TMOut_New(MxBfL)

    New = staticmethod(New)
    def __init__(self, *args): 
        """
        __init__(self, int _MxBfL = 1024) -> TMOut
        Parameters:
           _MxBfL: int const & value

           _MxBfL: int const & value

        __init__(self) -> TMOut
        __init__(self, char _Bf, int _MxBfL) -> TMOut
        Parameters:
           _Bf: char * value
           _MxBfL: int const & value

           _Bf: char * value
           _MxBfL: int const & value

        """
        _snap.TMOut_swiginit(self,_snap.new_TMOut(*args))
    __swig_destroy__ = _snap.delete_TMOut
    def AppendBf(self, *args):
        """
        AppendBf(self, void LBf, TSize LBfL)
        Parameters:
           self: TMOut * value
           LBf: void const * value
           LBfL: TSize const & value

           LBf: void const * value
           LBfL: TSize const & value

        """
        return _snap.TMOut_AppendBf(self, *args)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TMOut const * value




        """
        return _snap.TMOut_Len(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TMOut * value




        """
        return _snap.TMOut_Clr(self)

    def GetCh(self, *args):
        """
        GetCh(self, int ChN) -> char
        Parameters:
           self: TMOut const * value
           ChN: int const & value

           ChN: int const & value

        """
        return _snap.TMOut_GetCh(self, *args)

    def GetAsStr(self):
        """
        GetAsStr(self) -> TStr
        Parameters:
           self: TMOut const * value




        """
        return _snap.TMOut_GetAsStr(self)

    def CutBf(self, *args):
        """
        CutBf(self, int CutBfL)
        Parameters:
           self: TMOut * value
           CutBfL: int const & value

           CutBfL: int const & value

        """
        return _snap.TMOut_CutBf(self, *args)

    def GetSIn(self, *args):
        """
        GetSIn(self, bool IsCut = True, int CutBfL = -1) -> PSIn
        Parameters:
           IsCut: bool const & value
           CutBfL: int const & value

           IsCut: bool const & value
           CutBfL: int const & value

        GetSIn(self, bool IsCut = True) -> PSIn
        Parameters:
           IsCut: bool const & value

           IsCut: bool const & value

        GetSIn(self) -> PSIn
        Parameters:
           self: TMOut * value


        """
        return _snap.TMOut_GetSIn(self, *args)

    def GetBfAddr(self):
        """
        GetBfAddr(self) -> char
        Parameters:
           self: TMOut const * value




        """
        return _snap.TMOut_GetBfAddr(self)

    def IsCrLfLn(self):
        """
        IsCrLfLn(self) -> bool
        Parameters:
           self: TMOut const * value




        """
        return _snap.TMOut_IsCrLfLn(self)

    def GetCrLfLn(self):
        """
        GetCrLfLn(self) -> TStr
        Parameters:
           self: TMOut * value




        """
        return _snap.TMOut_GetCrLfLn(self)

    def IsEolnLn(self):
        """
        IsEolnLn(self) -> bool
        Parameters:
           self: TMOut const * value




        """
        return _snap.TMOut_IsEolnLn(self)

    def GetEolnLn(self, *args):
        """
        GetEolnLn(self, bool DoAddEoln, bool DoCutBf) -> TStr
        Parameters:
           self: TMOut * value
           DoAddEoln: bool const & value
           DoCutBf: bool const & value

           DoAddEoln: bool const & value
           DoCutBf: bool const & value

        """
        return _snap.TMOut_GetEolnLn(self, *args)

    def MkEolnLn(self):
        """
        MkEolnLn(self)
        Parameters:
           self: TMOut * value




        """
        return _snap.TMOut_MkEolnLn(self)

TMOut.AppendBf = new_instancemethod(_snap.TMOut_AppendBf,None,TMOut)
TMOut.Len = new_instancemethod(_snap.TMOut_Len,None,TMOut)
TMOut.Clr = new_instancemethod(_snap.TMOut_Clr,None,TMOut)
TMOut.GetCh = new_instancemethod(_snap.TMOut_GetCh,None,TMOut)
TMOut.GetAsStr = new_instancemethod(_snap.TMOut_GetAsStr,None,TMOut)
TMOut.CutBf = new_instancemethod(_snap.TMOut_CutBf,None,TMOut)
TMOut.GetSIn = new_instancemethod(_snap.TMOut_GetSIn,None,TMOut)
TMOut.GetBfAddr = new_instancemethod(_snap.TMOut_GetBfAddr,None,TMOut)
TMOut.IsCrLfLn = new_instancemethod(_snap.TMOut_IsCrLfLn,None,TMOut)
TMOut.GetCrLfLn = new_instancemethod(_snap.TMOut_GetCrLfLn,None,TMOut)
TMOut.IsEolnLn = new_instancemethod(_snap.TMOut_IsEolnLn,None,TMOut)
TMOut.GetEolnLn = new_instancemethod(_snap.TMOut_GetEolnLn,None,TMOut)
TMOut.MkEolnLn = new_instancemethod(_snap.TMOut_MkEolnLn,None,TMOut)
TMOut_swigregister = _snap.TMOut_swigregister
TMOut_swigregister(TMOut)

def TMOut_New(MxBfL = 1024):
  """
    New(int MxBfL = 1024) -> PSOut
    Parameters:
       MxBfL: int const & value

       MxBfL: int const & value

       MxBfL: int const & value

       MxBfL: int const & value

    TMOut_New() -> PSOut
    """
  return _snap.TMOut_New(MxBfL)

class TChRet(object):
    """Proxy of C++ TChRet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PSIn _SIn, char _EofCh = 0) -> TChRet
        Parameters:
           _SIn: PSIn const & value
           _EofCh: char const & value

           _SIn: PSIn const & value
           _EofCh: char const & value

        __init__(self, PSIn _SIn) -> TChRet
        Parameters:
           _SIn: PSIn const & value

           _SIn: PSIn const & value

        """
        _snap.TChRet_swiginit(self,_snap.new_TChRet(*args))
    def Eof(self):
        """
        Eof(self) -> bool
        Parameters:
           self: TChRet const * value




        """
        return _snap.TChRet_Eof(self)

    def GetCh(self):
        """
        GetCh(self) -> char
        Parameters:
           self: TChRet * value




        """
        return _snap.TChRet_GetCh(self)

    def __call__(self):
        """
        __call__(self) -> char
        Parameters:
           self: TChRet * value




        """
        return _snap.TChRet___call__(self)

    __swig_destroy__ = _snap.delete_TChRet
TChRet.Eof = new_instancemethod(_snap.TChRet_Eof,None,TChRet)
TChRet.GetCh = new_instancemethod(_snap.TChRet_GetCh,None,TChRet)
TChRet.__call__ = new_instancemethod(_snap.TChRet___call__,None,TChRet)
TChRet_swigregister = _snap.TChRet_swigregister
TChRet_swigregister(TChRet)

class TLnRet(object):
    """Proxy of C++ TLnRet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PSIn _SIn) -> TLnRet
        Parameters:
           _SIn: PSIn const & value

           _SIn: PSIn const & value

        """
        _snap.TLnRet_swiginit(self,_snap.new_TLnRet(*args))
    def NextLn(self, *args):
        """
        NextLn(self, TStr LnStr) -> bool
        Parameters:
           self: TLnRet * value
           LnStr: TStr & value

           LnStr: TStr & value

        """
        return _snap.TLnRet_NextLn(self, *args)

    __swig_destroy__ = _snap.delete_TLnRet
TLnRet.NextLn = new_instancemethod(_snap.TLnRet_NextLn,None,TLnRet)
TLnRet_swigregister = _snap.TLnRet_swigregister
TLnRet_swigregister(TLnRet)

class TFile(object):
    """Proxy of C++ TFile class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Exists(*args):
        """
        Exists(TStr FNm) -> bool
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

           FNm: TStr const & value

        """
        return _snap.TFile_Exists(*args)

    Exists = staticmethod(Exists)
    def Del(*args):
        """
        Del(TStr FNm, bool ThrowExceptP = True)
        Parameters:
           FNm: TStr const & value
           ThrowExceptP: bool const & value

           FNm: TStr const & value
           ThrowExceptP: bool const & value

           FNm: TStr const & value
           ThrowExceptP: bool const & value

        Del(TStr FNm)
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

           FNm: TStr const & value

        """
        return _snap.TFile_Del(*args)

    Del = staticmethod(Del)
    def DelWc(*args):
        """
        DelWc(TStr WcStr, bool RecurseDirP = False)
        Parameters:
           WcStr: TStr const & value
           RecurseDirP: bool const & value

           WcStr: TStr const & value
           RecurseDirP: bool const & value

           WcStr: TStr const & value
           RecurseDirP: bool const & value

        DelWc(TStr WcStr)
        Parameters:
           WcStr: TStr const & value

           WcStr: TStr const & value

           WcStr: TStr const & value

        """
        return _snap.TFile_DelWc(*args)

    DelWc = staticmethod(DelWc)
    def Rename(*args):
        """
        Rename(TStr SrcFNm, TStr DstFNm)
        Parameters:
           SrcFNm: TStr const & value
           DstFNm: TStr const & value

           SrcFNm: TStr const & value
           DstFNm: TStr const & value

           SrcFNm: TStr const & value
           DstFNm: TStr const & value

        """
        return _snap.TFile_Rename(*args)

    Rename = staticmethod(Rename)
    def GetUniqueFNm(*args):
        """
        GetUniqueFNm(TStr FNm) -> TStr
        Parameters:
           FNm: TStr const & value

           FNm: TStr const & value

           FNm: TStr const & value

        """
        return _snap.TFile_GetUniqueFNm(*args)

    GetUniqueFNm = staticmethod(GetUniqueFNm)
    def __init__(self): 
        """__init__(self) -> TFile"""
        _snap.TFile_swiginit(self,_snap.new_TFile())
    __swig_destroy__ = _snap.delete_TFile
TFile_swigregister = _snap.TFile_swigregister
TFile_swigregister(TFile)
TFile.TxtFExt = _snap.cvar.TFile_TxtFExt
TFile.HtmlFExt = _snap.cvar.TFile_HtmlFExt
TFile.HtmFExt = _snap.cvar.TFile_HtmFExt
TFile.GifFExt = _snap.cvar.TFile_GifFExt
TFile.JarFExt = _snap.cvar.TFile_JarFExt

def TFile_Exists(*args):
  """
    TFile_Exists(TStr FNm) -> bool
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    """
  return _snap.TFile_Exists(*args)

def TFile_Del(*args):
  """
    Del(TStr FNm, bool ThrowExceptP = True)
    Parameters:
       FNm: TStr const & value
       ThrowExceptP: bool const & value

       FNm: TStr const & value
       ThrowExceptP: bool const & value

    TFile_Del(TStr FNm)
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    """
  return _snap.TFile_Del(*args)

def TFile_DelWc(*args):
  """
    DelWc(TStr WcStr, bool RecurseDirP = False)
    Parameters:
       WcStr: TStr const & value
       RecurseDirP: bool const & value

       WcStr: TStr const & value
       RecurseDirP: bool const & value

    TFile_DelWc(TStr WcStr)
    Parameters:
       WcStr: TStr const & value

       WcStr: TStr const & value

    """
  return _snap.TFile_DelWc(*args)

def TFile_Rename(*args):
  """
    TFile_Rename(TStr SrcFNm, TStr DstFNm)
    Parameters:
       SrcFNm: TStr const & value
       DstFNm: TStr const & value

       SrcFNm: TStr const & value
       DstFNm: TStr const & value

    """
  return _snap.TFile_Rename(*args)

def TFile_GetUniqueFNm(*args):
  """
    TFile_GetUniqueFNm(TStr FNm) -> TStr
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    """
  return _snap.TFile_GetUniqueFNm(*args)

ntInfo = _snap.ntInfo
ntWarn = _snap.ntWarn
ntErr = _snap.ntErr
ntStat = _snap.ntStat
class TNotify(object):
    """Proxy of C++ TNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TNotify"""
        _snap.TNotify_swiginit(self,_snap.new_TNotify())
    __swig_destroy__ = _snap.delete_TNotify
    def OnNotifyFmt(self, *args):
        """
        OnNotifyFmt(self,  Type, char FmtStr, v(...) *args)
        Parameters:
           self: TNotify * value
           Type: TNotifyType const & value
           FmtStr: char const * value

           Type: TNotifyType const & value
           FmtStr: char const * value

        """
        return _snap.TNotify_OnNotifyFmt(self, *args)

    def OnStatusFmt(self, *args):
        """
        OnStatusFmt(self, char FmtStr, v(...) *args)
        Parameters:
           self: TNotify * value
           FmtStr: char const * value

           FmtStr: char const * value

        """
        return _snap.TNotify_OnStatusFmt(self, *args)

    def OnLnFmt(self, *args):
        """
        OnLnFmt(self, char FmtStr, v(...) *args)
        Parameters:
           self: TNotify * value
           FmtStr: char const * value

           FmtStr: char const * value

        """
        return _snap.TNotify_OnLnFmt(self, *args)

    def OnTxtFmt(self, *args):
        """
        OnTxtFmt(self, char FmtStr, v(...) *args)
        Parameters:
           self: TNotify * value
           FmtStr: char const * value

           FmtStr: char const * value

        """
        return _snap.TNotify_OnTxtFmt(self, *args)

    def GetTypeStr(*args):
        """
        GetTypeStr( Type, bool Brief = True) -> TStr
        Parameters:
           Type: TNotifyType const & value
           Brief: bool const & value

           Type: TNotifyType const & value
           Brief: bool const & value

           Type: TNotifyType const & value
           Brief: bool const & value

        GetTypeStr( Type) -> TStr
        Parameters:
           Type: TNotifyType const & value

           Type: TNotifyType const & value

           Type: TNotifyType const & value

        """
        return _snap.TNotify_GetTypeStr(*args)

    GetTypeStr = staticmethod(GetTypeStr)
    def OnNotify(*args):
        """
        OnNotify( arg0, TStr arg1)
        Parameters:
           : TNotifyType const & value
           : TStr const & value

           : TNotifyType const & value
           : TStr const & value

           : TNotifyType const & value
           : TStr const & value

        OnNotify(PNotify Notify,  Type, TStr MsgStr)
        Parameters:
           Notify: PNotify const & value
           Type: TNotifyType const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           Type: TNotifyType const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           Type: TNotifyType const & value
           MsgStr: TStr const & value

        """
        return _snap.TNotify_OnNotify(*args)

    OnNotify = staticmethod(OnNotify)
    def OnStatus(*args):
        """
        OnStatus(TStr arg0)
        Parameters:
           : TStr const & value

           : TStr const & value

           : TStr const & value

        OnStatus(PNotify Notify, TStr MsgStr)
        Parameters:
           Notify: PNotify const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           MsgStr: TStr const & value

        """
        return _snap.TNotify_OnStatus(*args)

    OnStatus = staticmethod(OnStatus)
    def OnLn(*args):
        """
        OnLn(TStr arg0)
        Parameters:
           : TStr const & value

           : TStr const & value

           : TStr const & value

        OnLn(PNotify Notify, TStr MsgStr)
        Parameters:
           Notify: PNotify const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           MsgStr: TStr const & value

        """
        return _snap.TNotify_OnLn(*args)

    OnLn = staticmethod(OnLn)
    def OnTxt(*args):
        """
        OnTxt(TStr arg0)
        Parameters:
           : TStr const & value

           : TStr const & value

           : TStr const & value

        OnTxt(PNotify Notify, TStr MsgStr)
        Parameters:
           Notify: PNotify const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           MsgStr: TStr const & value

           Notify: PNotify const & value
           MsgStr: TStr const & value

        """
        return _snap.TNotify_OnTxt(*args)

    OnTxt = staticmethod(OnTxt)
    def DfOnNotify(*args):
        """
        DfOnNotify( Type, TStr MsgStr)
        Parameters:
           Type: TNotifyType const & value
           MsgStr: TStr const & value

           Type: TNotifyType const & value
           MsgStr: TStr const & value

           Type: TNotifyType const & value
           MsgStr: TStr const & value

        """
        return _snap.TNotify_DfOnNotify(*args)

    DfOnNotify = staticmethod(DfOnNotify)
TNotify.OnNotifyFmt = new_instancemethod(_snap.TNotify_OnNotifyFmt,None,TNotify)
TNotify.OnStatusFmt = new_instancemethod(_snap.TNotify_OnStatusFmt,None,TNotify)
TNotify.OnLnFmt = new_instancemethod(_snap.TNotify_OnLnFmt,None,TNotify)
TNotify.OnTxtFmt = new_instancemethod(_snap.TNotify_OnTxtFmt,None,TNotify)
TNotify_swigregister = _snap.TNotify_swigregister
TNotify_swigregister(TNotify)

def InfoNotify(*args):
  """
    InfoNotify(char NotifyCStr)
    Parameters:
       NotifyCStr: char const * value

       NotifyCStr: char const * value

    InfoNotify(TStr MsgStr)
    Parameters:
       MsgStr: TStr const & value

       MsgStr: TStr const & value

    """
  return _snap.InfoNotify(*args)

def WarnNotify(*args):
  """
    WarnNotify(char NotifyCStr)
    Parameters:
       NotifyCStr: char const * value

       NotifyCStr: char const * value

    WarnNotify(TStr MsgStr)
    Parameters:
       MsgStr: TStr const & value

       MsgStr: TStr const & value

    """
  return _snap.WarnNotify(*args)

def ErrNotify(*args):
  """
    ErrNotify(char NotifyCStr)
    Parameters:
       NotifyCStr: char const * value

       NotifyCStr: char const * value

    ErrNotify(TStr MsgStr)
    Parameters:
       MsgStr: TStr const & value

       MsgStr: TStr const & value

    """
  return _snap.ErrNotify(*args)

def StatNotify(*args):
  """
    StatNotify(char NotifyCStr)
    Parameters:
       NotifyCStr: char const * value

       NotifyCStr: char const * value

    StatNotify(TStr MsgStr)
    Parameters:
       MsgStr: TStr const & value

       MsgStr: TStr const & value

    """
  return _snap.StatNotify(*args)

def TNotify_GetTypeStr(*args):
  """
    GetTypeStr( Type, bool Brief = True) -> TStr
    Parameters:
       Type: TNotifyType const & value
       Brief: bool const & value

       Type: TNotifyType const & value
       Brief: bool const & value

    TNotify_GetTypeStr( Type) -> TStr
    Parameters:
       Type: TNotifyType const & value

       Type: TNotifyType const & value

    """
  return _snap.TNotify_GetTypeStr(*args)

def TNotify_OnNotify(*args):
  """
    OnNotify( arg0, TStr arg1)
    Parameters:
       : TNotifyType const & value
       : TStr const & value

       : TNotifyType const & value
       : TStr const & value

    TNotify_OnNotify(PNotify Notify,  Type, TStr MsgStr)
    Parameters:
       Notify: PNotify const & value
       Type: TNotifyType const & value
       MsgStr: TStr const & value

       Notify: PNotify const & value
       Type: TNotifyType const & value
       MsgStr: TStr const & value

    """
  return _snap.TNotify_OnNotify(*args)

def TNotify_OnStatus(*args):
  """
    OnStatus(TStr arg0)
    Parameters:
       : TStr const & value

       : TStr const & value

    TNotify_OnStatus(PNotify Notify, TStr MsgStr)
    Parameters:
       Notify: PNotify const & value
       MsgStr: TStr const & value

       Notify: PNotify const & value
       MsgStr: TStr const & value

    """
  return _snap.TNotify_OnStatus(*args)

def TNotify_OnLn(*args):
  """
    OnLn(TStr arg0)
    Parameters:
       : TStr const & value

       : TStr const & value

    TNotify_OnLn(PNotify Notify, TStr MsgStr)
    Parameters:
       Notify: PNotify const & value
       MsgStr: TStr const & value

       Notify: PNotify const & value
       MsgStr: TStr const & value

    """
  return _snap.TNotify_OnLn(*args)

def TNotify_OnTxt(*args):
  """
    OnTxt(TStr arg0)
    Parameters:
       : TStr const & value

       : TStr const & value

    TNotify_OnTxt(PNotify Notify, TStr MsgStr)
    Parameters:
       Notify: PNotify const & value
       MsgStr: TStr const & value

       Notify: PNotify const & value
       MsgStr: TStr const & value

    """
  return _snap.TNotify_OnTxt(*args)

def TNotify_DfOnNotify(*args):
  """
    TNotify_DfOnNotify( Type, TStr MsgStr)
    Parameters:
       Type: TNotifyType const & value
       MsgStr: TStr const & value

       Type: TNotifyType const & value
       MsgStr: TStr const & value

    """
  return _snap.TNotify_DfOnNotify(*args)
TNotify.NullNotify = _snap.cvar.TNotify_NullNotify
TNotify.StdNotify = _snap.cvar.TNotify_StdNotify
TNotify.StdErrNotify = _snap.cvar.TNotify_StdErrNotify

class TNullNotify(TNotify):
    """Proxy of C++ TNullNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TNullNotify"""
        _snap.TNullNotify_swiginit(self,_snap.new_TNullNotify())
    def New():
        """New() -> PNotify"""
        return _snap.TNullNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TNullNotify
TNullNotify_swigregister = _snap.TNullNotify_swigregister
TNullNotify_swigregister(TNullNotify)

def TNullNotify_New():
  """TNullNotify_New() -> PNotify"""
  return _snap.TNullNotify_New()

class TCallbackNotify(TNotify):
    """Proxy of C++ TCallbackNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TCallbackF _CallbackF) -> TCallbackNotify
        Parameters:
           _CallbackF: TCallbackF const & value

           _CallbackF: TCallbackF const & value

        """
        _snap.TCallbackNotify_swiginit(self,_snap.new_TCallbackNotify(*args))
    def New(*args):
        """
        New(TCallbackF CallbackF) -> PNotify
        Parameters:
           CallbackF: TCallbackF const & value

           CallbackF: TCallbackF const & value

           CallbackF: TCallbackF const & value

        """
        return _snap.TCallbackNotify_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TCallbackNotify
TCallbackNotify_swigregister = _snap.TCallbackNotify_swigregister
TCallbackNotify_swigregister(TCallbackNotify)

def TCallbackNotify_New(*args):
  """
    TCallbackNotify_New(TCallbackF CallbackF) -> PNotify
    Parameters:
       CallbackF: TCallbackF const & value

       CallbackF: TCallbackF const & value

    """
  return _snap.TCallbackNotify_New(*args)

class TNativeCallbackNotify(TNotify):
    """Proxy of C++ TNativeCallbackNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TNativeCallbackF _CallbackF) -> TNativeCallbackNotify
        Parameters:
           _CallbackF: TNativeCallbackF const & value

           _CallbackF: TNativeCallbackF const & value

        """
        _snap.TNativeCallbackNotify_swiginit(self,_snap.new_TNativeCallbackNotify(*args))
    def New(*args):
        """
        New(TNativeCallbackF CallbackF) -> PNotify
        Parameters:
           CallbackF: TNativeCallbackF const & value

           CallbackF: TNativeCallbackF const & value

           CallbackF: TNativeCallbackF const & value

        """
        return _snap.TNativeCallbackNotify_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TNativeCallbackNotify
TNativeCallbackNotify_swigregister = _snap.TNativeCallbackNotify_swigregister
TNativeCallbackNotify_swigregister(TNativeCallbackNotify)

def TNativeCallbackNotify_New(*args):
  """
    TNativeCallbackNotify_New(TNativeCallbackF CallbackF) -> PNotify
    Parameters:
       CallbackF: TNativeCallbackF const & value

       CallbackF: TNativeCallbackF const & value

    """
  return _snap.TNativeCallbackNotify_New(*args)

class TStdNotify(TNotify):
    """Proxy of C++ TStdNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TStdNotify"""
        _snap.TStdNotify_swiginit(self,_snap.new_TStdNotify())
    def New():
        """New() -> PNotify"""
        return _snap.TStdNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdNotify
TStdNotify_swigregister = _snap.TStdNotify_swigregister
TStdNotify_swigregister(TStdNotify)

def TStdNotify_New():
  """TStdNotify_New() -> PNotify"""
  return _snap.TStdNotify_New()

class TStdErrNotify(TNotify):
    """Proxy of C++ TStdErrNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TStdErrNotify"""
        _snap.TStdErrNotify_swiginit(self,_snap.new_TStdErrNotify())
    def New():
        """New() -> PNotify"""
        return _snap.TStdErrNotify_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TStdErrNotify
TStdErrNotify_swigregister = _snap.TStdErrNotify_swigregister
TStdErrNotify_swigregister(TStdErrNotify)

def TStdErrNotify_New():
  """TStdErrNotify_New() -> PNotify"""
  return _snap.TStdErrNotify_New()

class TLogNotify(TNotify):
    """Proxy of C++ TLogNotify class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PNotify _Notify) -> TLogNotify
        Parameters:
           _Notify: PNotify const & value

           _Notify: PNotify const & value

        """
        _snap.TLogNotify_swiginit(self,_snap.new_TLogNotify(*args))
    def New(*args):
        """
        New(PNotify Notify) -> PNotify
        Parameters:
           Notify: PNotify const & value

           Notify: PNotify const & value

           Notify: PNotify const & value

        """
        return _snap.TLogNotify_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TLogNotify
TLogNotify_swigregister = _snap.TLogNotify_swigregister
TLogNotify_swigregister(TLogNotify)

def TLogNotify_New(*args):
  """
    TLogNotify_New(PNotify Notify) -> PNotify
    Parameters:
       Notify: PNotify const & value

       Notify: PNotify const & value

    """
  return _snap.TLogNotify_New(*args)

class TExcept(object):
    """Proxy of C++ TExcept class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TStr _MsgStr) -> TExcept
        Parameters:
           _MsgStr: TStr const & value

           _MsgStr: TStr const & value

        __init__(self, TStr _MsgStr, TStr _LocStr) -> TExcept
        Parameters:
           _MsgStr: TStr const & value
           _LocStr: TStr const & value

           _MsgStr: TStr const & value
           _LocStr: TStr const & value

        """
        _snap.TExcept_swiginit(self,_snap.new_TExcept(*args))
    def New(*args):
        """
        New(TStr MsgStr, TStr LocStr = TStr()) -> PExcept
        Parameters:
           MsgStr: TStr const & value
           LocStr: TStr const & value

           MsgStr: TStr const & value
           LocStr: TStr const & value

           MsgStr: TStr const & value
           LocStr: TStr const & value

        New(TStr MsgStr) -> PExcept
        Parameters:
           MsgStr: TStr const & value

           MsgStr: TStr const & value

           MsgStr: TStr const & value

        """
        return _snap.TExcept_New(*args)

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_TExcept
    def GetMsgStr(self):
        """
        GetMsgStr(self) -> TStr
        Parameters:
           self: TExcept const * value




        """
        return _snap.TExcept_GetMsgStr(self)

    def GetLocStr(self):
        """
        GetLocStr(self) -> TStr
        Parameters:
           self: TExcept const * value




        """
        return _snap.TExcept_GetLocStr(self)

    def GetStr(self):
        """
        GetStr(self) -> TStr
        Parameters:
           self: TExcept const * value




        """
        return _snap.TExcept_GetStr(self)

    OnExceptF = _swig_property(_snap.TExcept_OnExceptF_get, _snap.TExcept_OnExceptF_set)
    def IsOnExceptF():
        """IsOnExceptF() -> bool"""
        return _snap.TExcept_IsOnExceptF()

    IsOnExceptF = staticmethod(IsOnExceptF)
    def PutOnExceptF(*args):
        """
        PutOnExceptF(TOnExceptF _OnExceptF)
        Parameters:
           _OnExceptF: TExcept::TOnExceptF value

           _OnExceptF: TExcept::TOnExceptF value

           _OnExceptF: TExcept::TOnExceptF value

        """
        return _snap.TExcept_PutOnExceptF(*args)

    PutOnExceptF = staticmethod(PutOnExceptF)
    def GetOnExceptF():
        """GetOnExceptF() -> TOnExceptF"""
        return _snap.TExcept_GetOnExceptF()

    GetOnExceptF = staticmethod(GetOnExceptF)
    def Throw(*args):
        """
        Throw(TStr MsgStr)
        Parameters:
           MsgStr: TStr const & value

           MsgStr: TStr const & value

           MsgStr: TStr const & value

        Throw(TStr MsgStr, TStr ArgStr)
        Parameters:
           MsgStr: TStr const & value
           ArgStr: TStr const & value

           MsgStr: TStr const & value
           ArgStr: TStr const & value

           MsgStr: TStr const & value
           ArgStr: TStr const & value

        Throw(TStr MsgStr, TStr ArgStr1, TStr ArgStr2)
        Parameters:
           MsgStr: TStr const & value
           ArgStr1: TStr const & value
           ArgStr2: TStr const & value

           MsgStr: TStr const & value
           ArgStr1: TStr const & value
           ArgStr2: TStr const & value

           MsgStr: TStr const & value
           ArgStr1: TStr const & value
           ArgStr2: TStr const & value

        """
        return _snap.TExcept_Throw(*args)

    Throw = staticmethod(Throw)
    def ThrowFull(*args):
        """
        ThrowFull(TStr MsgStr, TStr LocStr)
        Parameters:
           MsgStr: TStr const & value
           LocStr: TStr const & value

           MsgStr: TStr const & value
           LocStr: TStr const & value

           MsgStr: TStr const & value
           LocStr: TStr const & value

        """
        return _snap.TExcept_ThrowFull(*args)

    ThrowFull = staticmethod(ThrowFull)
TExcept.GetMsgStr = new_instancemethod(_snap.TExcept_GetMsgStr,None,TExcept)
TExcept.GetLocStr = new_instancemethod(_snap.TExcept_GetLocStr,None,TExcept)
TExcept.GetStr = new_instancemethod(_snap.TExcept_GetStr,None,TExcept)
TExcept_swigregister = _snap.TExcept_swigregister
TExcept_swigregister(TExcept)

def TExcept_New(*args):
  """
    New(TStr MsgStr, TStr LocStr = TStr()) -> PExcept
    Parameters:
       MsgStr: TStr const & value
       LocStr: TStr const & value

       MsgStr: TStr const & value
       LocStr: TStr const & value

    TExcept_New(TStr MsgStr) -> PExcept
    Parameters:
       MsgStr: TStr const & value

       MsgStr: TStr const & value

    """
  return _snap.TExcept_New(*args)

def TExcept_IsOnExceptF():
  """TExcept_IsOnExceptF() -> bool"""
  return _snap.TExcept_IsOnExceptF()

def TExcept_PutOnExceptF(*args):
  """
    TExcept_PutOnExceptF(TOnExceptF _OnExceptF)
    Parameters:
       _OnExceptF: TExcept::TOnExceptF value

       _OnExceptF: TExcept::TOnExceptF value

    """
  return _snap.TExcept_PutOnExceptF(*args)

def TExcept_GetOnExceptF():
  """TExcept_GetOnExceptF() -> TOnExceptF"""
  return _snap.TExcept_GetOnExceptF()

def TExcept_Throw(*args):
  """
    Throw(TStr MsgStr)
    Parameters:
       MsgStr: TStr const & value

       MsgStr: TStr const & value

    Throw(TStr MsgStr, TStr ArgStr)
    Parameters:
       MsgStr: TStr const & value
       ArgStr: TStr const & value

       MsgStr: TStr const & value
       ArgStr: TStr const & value

    TExcept_Throw(TStr MsgStr, TStr ArgStr1, TStr ArgStr2)
    Parameters:
       MsgStr: TStr const & value
       ArgStr1: TStr const & value
       ArgStr2: TStr const & value

       MsgStr: TStr const & value
       ArgStr1: TStr const & value
       ArgStr2: TStr const & value

    """
  return _snap.TExcept_Throw(*args)

def TExcept_ThrowFull(*args):
  """
    TExcept_ThrowFull(TStr MsgStr, TStr LocStr)
    Parameters:
       MsgStr: TStr const & value
       LocStr: TStr const & value

       MsgStr: TStr const & value
       LocStr: TStr const & value

    """
  return _snap.TExcept_ThrowFull(*args)

gfUndef = _snap.gfUndef
gfDirected = _snap.gfDirected
gfMultiGraph = _snap.gfMultiGraph
gfNodeDat = _snap.gfNodeDat
gfEdgeDat = _snap.gfEdgeDat
gfSources = _snap.gfSources
gfBipart = _snap.gfBipart
gfMx = _snap.gfMx

def GetFlagStr(*args):
  """
    GetFlagStr( GraphFlag) -> TStr
    Parameters:
       GraphFlag: TGraphFlag const & value

       GraphFlag: TGraphFlag const & value

    """
  return _snap.GetFlagStr(*args)
class TUnionFind(object):
    """Proxy of C++ TUnionFind class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Parent(self, *args):
        """
        Parent(self, int Key) -> TInt
        Parameters:
           self: TUnionFind * value
           Key: int const & value

           Key: int const & value

        """
        return _snap.TUnionFind_Parent(self, *args)

    def Rank(self, *args):
        """
        Rank(self, int Key) -> TInt
        Parameters:
           self: TUnionFind * value
           Key: int const & value

           Key: int const & value

        """
        return _snap.TUnionFind_Rank(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> TUnionFind
        __init__(self, int ExpectKeys) -> TUnionFind
        Parameters:
           ExpectKeys: int const & value

           ExpectKeys: int const & value

        __init__(self, TUnionFind UnionFind) -> TUnionFind
        Parameters:
           UnionFind: TUnionFind const & value

           UnionFind: TUnionFind const & value

        """
        _snap.TUnionFind_swiginit(self,_snap.new_TUnionFind(*args))
    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TUnionFind const * value




        """
        return _snap.TUnionFind_Len(self)

    def IsKey(self, *args):
        """
        IsKey(self, int Key) -> bool
        Parameters:
           self: TUnionFind const * value
           Key: int const & value

           Key: int const & value

        """
        return _snap.TUnionFind_IsKey(self, *args)

    def GetKeyI(self, *args):
        """
        GetKeyI(self, int KeyN) -> int
        Parameters:
           self: TUnionFind const * value
           KeyN: int const & value

           KeyN: int const & value

        """
        return _snap.TUnionFind_GetKeyI(self, *args)

    def Find(self, *args):
        """
        Find(self, int Key) -> int
        Parameters:
           self: TUnionFind * value
           Key: int const & value

           Key: int const & value

        """
        return _snap.TUnionFind_Find(self, *args)

    def Add(self, *args):
        """
        Add(self, int Key) -> int
        Parameters:
           self: TUnionFind * value
           Key: int const & value

           Key: int const & value

        """
        return _snap.TUnionFind_Add(self, *args)

    def Union(self, *args):
        """
        Union(self, int Key1, int Key2)
        Parameters:
           self: TUnionFind * value
           Key1: int const & value
           Key2: int const & value

           Key1: int const & value
           Key2: int const & value

        """
        return _snap.TUnionFind_Union(self, *args)

    def IsSameSet(self, *args):
        """
        IsSameSet(self, int Key1, int Key2) -> bool
        Parameters:
           self: TUnionFind * value
           Key1: int const & value
           Key2: int const & value

           Key1: int const & value
           Key2: int const & value

        """
        return _snap.TUnionFind_IsSameSet(self, *args)

    def Dump(self):
        """
        Dump(self)
        Parameters:
           self: TUnionFind * value




        """
        return _snap.TUnionFind_Dump(self)

    __swig_destroy__ = _snap.delete_TUnionFind
TUnionFind.Parent = new_instancemethod(_snap.TUnionFind_Parent,None,TUnionFind)
TUnionFind.Rank = new_instancemethod(_snap.TUnionFind_Rank,None,TUnionFind)
TUnionFind.Len = new_instancemethod(_snap.TUnionFind_Len,None,TUnionFind)
TUnionFind.IsKey = new_instancemethod(_snap.TUnionFind_IsKey,None,TUnionFind)
TUnionFind.GetKeyI = new_instancemethod(_snap.TUnionFind_GetKeyI,None,TUnionFind)
TUnionFind.Find = new_instancemethod(_snap.TUnionFind_Find,None,TUnionFind)
TUnionFind.Add = new_instancemethod(_snap.TUnionFind_Add,None,TUnionFind)
TUnionFind.Union = new_instancemethod(_snap.TUnionFind_Union,None,TUnionFind)
TUnionFind.IsSameSet = new_instancemethod(_snap.TUnionFind_IsSameSet,None,TUnionFind)
TUnionFind.Dump = new_instancemethod(_snap.TUnionFind_Dump,None,TUnionFind)
TUnionFind_swigregister = _snap.TUnionFind_swigregister
TUnionFind_swigregister(TUnionFind)

class TGUtil(object):
    """Proxy of C++ TGUtil class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetCdf(*args):
        """
        GetCdf(TIntPrV PdfV, TIntPrV CdfV)
        Parameters:
           PdfV: TIntPrV const & value
           CdfV: TIntPrV & value

           PdfV: TIntPrV const & value
           CdfV: TIntPrV & value

           PdfV: TIntPrV const & value
           CdfV: TIntPrV & value

        GetCdf(TFltPrV PdfV, TFltPrV CdfV)
        Parameters:
           PdfV: TFltPrV const & value
           CdfV: TFltPrV & value

           PdfV: TFltPrV const & value
           CdfV: TFltPrV & value

           PdfV: TFltPrV const & value
           CdfV: TFltPrV & value

        GetCdf(TIntFltKdV PdfV, TIntFltKdV CdfV)
        Parameters:
           PdfV: TIntFltKdV const & value
           CdfV: TIntFltKdV & value

           PdfV: TIntFltKdV const & value
           CdfV: TIntFltKdV & value

           PdfV: TIntFltKdV const & value
           CdfV: TIntFltKdV & value

        GetCdf(TIntPrV PdfV) -> TIntPrV
        Parameters:
           PdfV: TIntPrV const & value

           PdfV: TIntPrV const & value

           PdfV: TIntPrV const & value

        GetCdf(TFltPrV PdfV) -> TFltPrV
        Parameters:
           PdfV: TFltPrV const & value

           PdfV: TFltPrV const & value

           PdfV: TFltPrV const & value

        """
        return _snap.TGUtil_GetCdf(*args)

    GetCdf = staticmethod(GetCdf)
    def GetCCdf(*args):
        """
        GetCCdf(TIntPrV PdfV, TIntPrV CCdfV)
        Parameters:
           PdfV: TIntPrV const & value
           CCdfV: TIntPrV & value

           PdfV: TIntPrV const & value
           CCdfV: TIntPrV & value

           PdfV: TIntPrV const & value
           CCdfV: TIntPrV & value

        GetCCdf(TFltPrV PdfV, TFltPrV CCdfV)
        Parameters:
           PdfV: TFltPrV const & value
           CCdfV: TFltPrV & value

           PdfV: TFltPrV const & value
           CCdfV: TFltPrV & value

           PdfV: TFltPrV const & value
           CCdfV: TFltPrV & value

        GetCCdf(TIntFltKdV PdfV, TIntFltKdV CCdfV)
        Parameters:
           PdfV: TIntFltKdV const & value
           CCdfV: TIntFltKdV & value

           PdfV: TIntFltKdV const & value
           CCdfV: TIntFltKdV & value

           PdfV: TIntFltKdV const & value
           CCdfV: TIntFltKdV & value

        GetCCdf(TIntPrV PdfV) -> TIntPrV
        Parameters:
           PdfV: TIntPrV const & value

           PdfV: TIntPrV const & value

           PdfV: TIntPrV const & value

        GetCCdf(TFltPrV PdfV) -> TFltPrV
        Parameters:
           PdfV: TFltPrV const & value

           PdfV: TFltPrV const & value

           PdfV: TFltPrV const & value

        """
        return _snap.TGUtil_GetCCdf(*args)

    GetCCdf = staticmethod(GetCCdf)
    def GetPdf(*args):
        """
        GetPdf(TIntPrV CdfV, TIntPrV PdfV)
        Parameters:
           CdfV: TIntPrV const & value
           PdfV: TIntPrV & value

           CdfV: TIntPrV const & value
           PdfV: TIntPrV & value

           CdfV: TIntPrV const & value
           PdfV: TIntPrV & value

        GetPdf(TFltPrV CdfV, TFltPrV PdfV)
        Parameters:
           CdfV: TFltPrV const & value
           PdfV: TFltPrV & value

           CdfV: TFltPrV const & value
           PdfV: TFltPrV & value

           CdfV: TFltPrV const & value
           PdfV: TFltPrV & value

        GetPdf(TIntFltKdV CdfV, TIntFltKdV PdfV)
        Parameters:
           CdfV: TIntFltKdV const & value
           PdfV: TIntFltKdV & value

           CdfV: TIntFltKdV const & value
           PdfV: TIntFltKdV & value

           CdfV: TIntFltKdV const & value
           PdfV: TIntFltKdV & value

        """
        return _snap.TGUtil_GetPdf(*args)

    GetPdf = staticmethod(GetPdf)
    def Normalize(*args):
        """
        Normalize(TFltPrV PdfV)
        Parameters:
           PdfV: TFltPrV & value

           PdfV: TFltPrV & value

           PdfV: TFltPrV & value

        Normalize(TIntFltKdV PdfV)
        Parameters:
           PdfV: TIntFltKdV & value

           PdfV: TIntFltKdV & value

           PdfV: TIntFltKdV & value

        """
        return _snap.TGUtil_Normalize(*args)

    Normalize = staticmethod(Normalize)
    def MakeExpBins(*args):
        """
        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double BinFactor = 2, 
            double MinYVal = 1)
        Parameters:
           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value
           BinFactor: double const & value
           MinYVal: double const & value

           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value
           BinFactor: double const & value
           MinYVal: double const & value

           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value
           BinFactor: double const & value
           MinYVal: double const & value

        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double BinFactor = 2)
        Parameters:
           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value
           BinFactor: double const & value

           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value
           BinFactor: double const & value

           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value
           BinFactor: double const & value

        MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV)
        Parameters:
           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value

           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value

           XYValV: TFltPrV const & value
           ExpXYValV: TFltPrV & value

        MakeExpBins(TFltKdV XYValV, TFltKdV ExpXYValV, double BinFactor = 2, 
            double MinYVal = 1)
        Parameters:
           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value
           BinFactor: double const & value
           MinYVal: double const & value

           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value
           BinFactor: double const & value
           MinYVal: double const & value

           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value
           BinFactor: double const & value
           MinYVal: double const & value

        MakeExpBins(TFltKdV XYValV, TFltKdV ExpXYValV, double BinFactor = 2)
        Parameters:
           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value
           BinFactor: double const & value

           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value
           BinFactor: double const & value

           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value
           BinFactor: double const & value

        MakeExpBins(TFltKdV XYValV, TFltKdV ExpXYValV)
        Parameters:
           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value

           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value

           XYValV: TFltKdV const & value
           ExpXYValV: TFltKdV & value

        MakeExpBins(TFltV YValV, TFltV ExpYValV, double BinFactor = 1.01)
        Parameters:
           YValV: TFltV const & value
           ExpYValV: TFltV & value
           BinFactor: double const & value

           YValV: TFltV const & value
           ExpYValV: TFltV & value
           BinFactor: double const & value

           YValV: TFltV const & value
           ExpYValV: TFltV & value
           BinFactor: double const & value

        MakeExpBins(TFltV YValV, TFltV ExpYValV)
        Parameters:
           YValV: TFltV const & value
           ExpYValV: TFltV & value

           YValV: TFltV const & value
           ExpYValV: TFltV & value

           YValV: TFltV const & value
           ExpYValV: TFltV & value

        MakeExpBins(TIntV YValV, TIntV ExpYValV, double BinFactor = 1.01)
        Parameters:
           YValV: TIntV const & value
           ExpYValV: TIntV & value
           BinFactor: double const & value

           YValV: TIntV const & value
           ExpYValV: TIntV & value
           BinFactor: double const & value

           YValV: TIntV const & value
           ExpYValV: TIntV & value
           BinFactor: double const & value

        MakeExpBins(TIntV YValV, TIntV ExpYValV)
        Parameters:
           YValV: TIntV const & value
           ExpYValV: TIntV & value

           YValV: TIntV const & value
           ExpYValV: TIntV & value

           YValV: TIntV const & value
           ExpYValV: TIntV & value

        """
        return _snap.TGUtil_MakeExpBins(*args)

    MakeExpBins = staticmethod(MakeExpBins)
    def __init__(self): 
        """__init__(self) -> TGUtil"""
        _snap.TGUtil_swiginit(self,_snap.new_TGUtil())
    __swig_destroy__ = _snap.delete_TGUtil
TGUtil_swigregister = _snap.TGUtil_swigregister
TGUtil_swigregister(TGUtil)

def TGUtil_GetCdf(*args):
  """
    GetCdf(TIntPrV PdfV, TIntPrV CdfV)
    Parameters:
       PdfV: TIntPrV const & value
       CdfV: TIntPrV & value

       PdfV: TIntPrV const & value
       CdfV: TIntPrV & value

    GetCdf(TFltPrV PdfV, TFltPrV CdfV)
    Parameters:
       PdfV: TFltPrV const & value
       CdfV: TFltPrV & value

       PdfV: TFltPrV const & value
       CdfV: TFltPrV & value

    GetCdf(TIntFltKdV PdfV, TIntFltKdV CdfV)
    Parameters:
       PdfV: TIntFltKdV const & value
       CdfV: TIntFltKdV & value

       PdfV: TIntFltKdV const & value
       CdfV: TIntFltKdV & value

    GetCdf(TIntPrV PdfV) -> TIntPrV
    Parameters:
       PdfV: TIntPrV const & value

       PdfV: TIntPrV const & value

    TGUtil_GetCdf(TFltPrV PdfV) -> TFltPrV
    Parameters:
       PdfV: TFltPrV const & value

       PdfV: TFltPrV const & value

    """
  return _snap.TGUtil_GetCdf(*args)

def TGUtil_GetCCdf(*args):
  """
    GetCCdf(TIntPrV PdfV, TIntPrV CCdfV)
    Parameters:
       PdfV: TIntPrV const & value
       CCdfV: TIntPrV & value

       PdfV: TIntPrV const & value
       CCdfV: TIntPrV & value

    GetCCdf(TFltPrV PdfV, TFltPrV CCdfV)
    Parameters:
       PdfV: TFltPrV const & value
       CCdfV: TFltPrV & value

       PdfV: TFltPrV const & value
       CCdfV: TFltPrV & value

    GetCCdf(TIntFltKdV PdfV, TIntFltKdV CCdfV)
    Parameters:
       PdfV: TIntFltKdV const & value
       CCdfV: TIntFltKdV & value

       PdfV: TIntFltKdV const & value
       CCdfV: TIntFltKdV & value

    GetCCdf(TIntPrV PdfV) -> TIntPrV
    Parameters:
       PdfV: TIntPrV const & value

       PdfV: TIntPrV const & value

    TGUtil_GetCCdf(TFltPrV PdfV) -> TFltPrV
    Parameters:
       PdfV: TFltPrV const & value

       PdfV: TFltPrV const & value

    """
  return _snap.TGUtil_GetCCdf(*args)

def TGUtil_GetPdf(*args):
  """
    GetPdf(TIntPrV CdfV, TIntPrV PdfV)
    Parameters:
       CdfV: TIntPrV const & value
       PdfV: TIntPrV & value

       CdfV: TIntPrV const & value
       PdfV: TIntPrV & value

    GetPdf(TFltPrV CdfV, TFltPrV PdfV)
    Parameters:
       CdfV: TFltPrV const & value
       PdfV: TFltPrV & value

       CdfV: TFltPrV const & value
       PdfV: TFltPrV & value

    TGUtil_GetPdf(TIntFltKdV CdfV, TIntFltKdV PdfV)
    Parameters:
       CdfV: TIntFltKdV const & value
       PdfV: TIntFltKdV & value

       CdfV: TIntFltKdV const & value
       PdfV: TIntFltKdV & value

    """
  return _snap.TGUtil_GetPdf(*args)

def TGUtil_Normalize(*args):
  """
    Normalize(TFltPrV PdfV)
    Parameters:
       PdfV: TFltPrV & value

       PdfV: TFltPrV & value

    TGUtil_Normalize(TIntFltKdV PdfV)
    Parameters:
       PdfV: TIntFltKdV & value

       PdfV: TIntFltKdV & value

    """
  return _snap.TGUtil_Normalize(*args)

def TGUtil_MakeExpBins(*args):
  """
    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double BinFactor = 2, 
        double MinYVal = 1)
    Parameters:
       XYValV: TFltPrV const & value
       ExpXYValV: TFltPrV & value
       BinFactor: double const & value
       MinYVal: double const & value

       XYValV: TFltPrV const & value
       ExpXYValV: TFltPrV & value
       BinFactor: double const & value
       MinYVal: double const & value

    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV, double BinFactor = 2)
    Parameters:
       XYValV: TFltPrV const & value
       ExpXYValV: TFltPrV & value
       BinFactor: double const & value

       XYValV: TFltPrV const & value
       ExpXYValV: TFltPrV & value
       BinFactor: double const & value

    MakeExpBins(TFltPrV XYValV, TFltPrV ExpXYValV)
    Parameters:
       XYValV: TFltPrV const & value
       ExpXYValV: TFltPrV & value

       XYValV: TFltPrV const & value
       ExpXYValV: TFltPrV & value

    MakeExpBins(TFltKdV XYValV, TFltKdV ExpXYValV, double BinFactor = 2, 
        double MinYVal = 1)
    Parameters:
       XYValV: TFltKdV const & value
       ExpXYValV: TFltKdV & value
       BinFactor: double const & value
       MinYVal: double const & value

       XYValV: TFltKdV const & value
       ExpXYValV: TFltKdV & value
       BinFactor: double const & value
       MinYVal: double const & value

    MakeExpBins(TFltKdV XYValV, TFltKdV ExpXYValV, double BinFactor = 2)
    Parameters:
       XYValV: TFltKdV const & value
       ExpXYValV: TFltKdV & value
       BinFactor: double const & value

       XYValV: TFltKdV const & value
       ExpXYValV: TFltKdV & value
       BinFactor: double const & value

    MakeExpBins(TFltKdV XYValV, TFltKdV ExpXYValV)
    Parameters:
       XYValV: TFltKdV const & value
       ExpXYValV: TFltKdV & value

       XYValV: TFltKdV const & value
       ExpXYValV: TFltKdV & value

    MakeExpBins(TFltV YValV, TFltV ExpYValV, double BinFactor = 1.01)
    Parameters:
       YValV: TFltV const & value
       ExpYValV: TFltV & value
       BinFactor: double const & value

       YValV: TFltV const & value
       ExpYValV: TFltV & value
       BinFactor: double const & value

    MakeExpBins(TFltV YValV, TFltV ExpYValV)
    Parameters:
       YValV: TFltV const & value
       ExpYValV: TFltV & value

       YValV: TFltV const & value
       ExpYValV: TFltV & value

    MakeExpBins(TIntV YValV, TIntV ExpYValV, double BinFactor = 1.01)
    Parameters:
       YValV: TIntV const & value
       ExpYValV: TIntV & value
       BinFactor: double const & value

       YValV: TIntV const & value
       ExpYValV: TIntV & value
       BinFactor: double const & value

    TGUtil_MakeExpBins(TIntV YValV, TIntV ExpYValV)
    Parameters:
       YValV: TIntV const & value
       ExpYValV: TIntV & value

       YValV: TIntV const & value
       ExpYValV: TIntV & value

    """
  return _snap.TGUtil_MakeExpBins(*args)

class TStrUtil(object):
    """Proxy of C++ TStrUtil class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetXmlTagVal(*args):
        """
        GetXmlTagVal(TXmlLx XmlLx, TChA TagNm) -> TChA
        Parameters:
           XmlLx: TXmlLx & value
           TagNm: TChA const & value

           XmlLx: TXmlLx & value
           TagNm: TChA const & value

           XmlLx: TXmlLx & value
           TagNm: TChA const & value

        """
        return _snap.TStrUtil_GetXmlTagVal(*args)

    GetXmlTagVal = staticmethod(GetXmlTagVal)
    def GetXmlTagNmVal(*args):
        """
        GetXmlTagNmVal(TXmlLx XmlLx, TChA TagNm, TChA TagVal)
        Parameters:
           XmlLx: TXmlLx & value
           TagNm: TChA & value
           TagVal: TChA & value

           XmlLx: TXmlLx & value
           TagNm: TChA & value
           TagVal: TChA & value

           XmlLx: TXmlLx & value
           TagNm: TChA & value
           TagVal: TChA & value

        """
        return _snap.TStrUtil_GetXmlTagNmVal(*args)

    GetXmlTagNmVal = staticmethod(GetXmlTagNmVal)
    def GetXmlTagNmVal2(*args):
        """
        GetXmlTagNmVal2(TXmlLx XmlLx, TChA TagNm, TChA TagVal, bool TakeTagNms) -> bool
        Parameters:
           XmlLx: TXmlLx & value
           TagNm: TChA & value
           TagVal: TChA & value
           TakeTagNms: bool const & value

           XmlLx: TXmlLx & value
           TagNm: TChA & value
           TagVal: TChA & value
           TakeTagNms: bool const & value

           XmlLx: TXmlLx & value
           TagNm: TChA & value
           TagVal: TChA & value
           TakeTagNms: bool const & value

        """
        return _snap.TStrUtil_GetXmlTagNmVal2(*args)

    GetXmlTagNmVal2 = staticmethod(GetXmlTagNmVal2)
    def GetDomNm(*args):
        """
        GetDomNm(TChA UrlChA) -> TChA
        Parameters:
           UrlChA: TChA const & value

           UrlChA: TChA const & value

           UrlChA: TChA const & value

        """
        return _snap.TStrUtil_GetDomNm(*args)

    GetDomNm = staticmethod(GetDomNm)
    def GetDomNm2(*args):
        """
        GetDomNm2(TChA UrlChA) -> TChA
        Parameters:
           UrlChA: TChA const & value

           UrlChA: TChA const & value

           UrlChA: TChA const & value

        """
        return _snap.TStrUtil_GetDomNm2(*args)

    GetDomNm2 = staticmethod(GetDomNm2)
    def GetWebsiteNm(*args):
        """
        GetWebsiteNm(TChA UrlChA) -> TChA
        Parameters:
           UrlChA: TChA const & value

           UrlChA: TChA const & value

           UrlChA: TChA const & value

        """
        return _snap.TStrUtil_GetWebsiteNm(*args)

    GetWebsiteNm = staticmethod(GetWebsiteNm)
    def GetNormalizedUrl(*args):
        """
        GetNormalizedUrl(TChA UrlIn, TChA BaseUrl, TChA UrlOut) -> bool
        Parameters:
           UrlIn: TChA const & value
           BaseUrl: TChA const & value
           UrlOut: TChA & value

           UrlIn: TChA const & value
           BaseUrl: TChA const & value
           UrlOut: TChA & value

           UrlIn: TChA const & value
           BaseUrl: TChA const & value
           UrlOut: TChA & value

        """
        return _snap.TStrUtil_GetNormalizedUrl(*args)

    GetNormalizedUrl = staticmethod(GetNormalizedUrl)
    def StripEnd(*args):
        """
        StripEnd(TChA Str, TChA SearchStr, TChA NewStr) -> bool
        Parameters:
           Str: TChA const & value
           SearchStr: TChA const & value
           NewStr: TChA & value

           Str: TChA const & value
           SearchStr: TChA const & value
           NewStr: TChA & value

           Str: TChA const & value
           SearchStr: TChA const & value
           NewStr: TChA & value

        """
        return _snap.TStrUtil_StripEnd(*args)

    StripEnd = staticmethod(StripEnd)
    def GetShorStr(*args):
        """
        GetShorStr(TChA LongStr, int MaxLen = 50) -> TChA
        Parameters:
           LongStr: TChA const & value
           MaxLen: int const value

           LongStr: TChA const & value
           MaxLen: int const value

           LongStr: TChA const & value
           MaxLen: int const value

        GetShorStr(TChA LongStr) -> TChA
        Parameters:
           LongStr: TChA const & value

           LongStr: TChA const & value

           LongStr: TChA const & value

        """
        return _snap.TStrUtil_GetShorStr(*args)

    GetShorStr = staticmethod(GetShorStr)
    def GetCleanStr(*args):
        """
        GetCleanStr(TChA ChA) -> TChA
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

           ChA: TChA const & value

        """
        return _snap.TStrUtil_GetCleanStr(*args)

    GetCleanStr = staticmethod(GetCleanStr)
    def GetCleanWrdStr(*args):
        """
        GetCleanWrdStr(TChA ChA) -> TChA
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

           ChA: TChA const & value

        """
        return _snap.TStrUtil_GetCleanWrdStr(*args)

    GetCleanWrdStr = staticmethod(GetCleanWrdStr)
    def CountWords(*args):
        """
        CountWords(char CStr) -> int
        Parameters:
           CStr: char const * value

           CStr: char const * value

           CStr: char const * value

        CountWords(TChA ChA) -> int
        Parameters:
           ChA: TChA const & value

           ChA: TChA const & value

           ChA: TChA const & value

        CountWords(TChA ChA, TStrHash<(TInt)> StopWordH) -> int
        Parameters:
           ChA: TChA const & value
           StopWordH: TStrHash< TInt > const & value

           ChA: TChA const & value
           StopWordH: TStrHash< TInt > const & value

           ChA: TChA const & value
           StopWordH: TStrHash< TInt > const & value

        """
        return _snap.TStrUtil_CountWords(*args)

    CountWords = staticmethod(CountWords)
    def SplitWords(*args):
        """
        SplitWords(TChA ChA, TVec<(p.char)> WrdV, bool SplitOnWs = True) -> int
        Parameters:
           ChA: TChA & value
           WrdV: TVec< char * > & value
           SplitOnWs: bool const & value

           ChA: TChA & value
           WrdV: TVec< char * > & value
           SplitOnWs: bool const & value

           ChA: TChA & value
           WrdV: TVec< char * > & value
           SplitOnWs: bool const & value

        SplitWords(TChA ChA, TVec<(p.char)> WrdV) -> int
        Parameters:
           ChA: TChA & value
           WrdV: TVec< char * > & value

           ChA: TChA & value
           WrdV: TVec< char * > & value

           ChA: TChA & value
           WrdV: TVec< char * > & value

        """
        return _snap.TStrUtil_SplitWords(*args)

    SplitWords = staticmethod(SplitWords)
    def SplitOnCh(*args):
        """
        SplitOnCh(TChA ChA, TVec<(p.char)> WrdV, char Ch, bool SkipEmpty = False) -> int
        Parameters:
           ChA: TChA & value
           WrdV: TVec< char * > & value
           Ch: char const & value
           SkipEmpty: bool const & value

           ChA: TChA & value
           WrdV: TVec< char * > & value
           Ch: char const & value
           SkipEmpty: bool const & value

           ChA: TChA & value
           WrdV: TVec< char * > & value
           Ch: char const & value
           SkipEmpty: bool const & value

        SplitOnCh(TChA ChA, TVec<(p.char)> WrdV, char Ch) -> int
        Parameters:
           ChA: TChA & value
           WrdV: TVec< char * > & value
           Ch: char const & value

           ChA: TChA & value
           WrdV: TVec< char * > & value
           Ch: char const & value

           ChA: TChA & value
           WrdV: TVec< char * > & value
           Ch: char const & value

        """
        return _snap.TStrUtil_SplitOnCh(*args)

    SplitOnCh = staticmethod(SplitOnCh)
    def SplitLines(*args):
        """
        SplitLines(TChA ChA, TVec<(p.char)> LineV, bool SkipEmpty = False) -> int
        Parameters:
           ChA: TChA & value
           LineV: TVec< char * > & value
           SkipEmpty: bool const & value

           ChA: TChA & value
           LineV: TVec< char * > & value
           SkipEmpty: bool const & value

           ChA: TChA & value
           LineV: TVec< char * > & value
           SkipEmpty: bool const & value

        SplitLines(TChA ChA, TVec<(p.char)> LineV) -> int
        Parameters:
           ChA: TChA & value
           LineV: TVec< char * > & value

           ChA: TChA & value
           LineV: TVec< char * > & value

           ChA: TChA & value
           LineV: TVec< char * > & value

        """
        return _snap.TStrUtil_SplitLines(*args)

    SplitLines = staticmethod(SplitLines)
    def SplitSentences(*args):
        """
        SplitSentences(TChA ChA, TVec<(p.char)> SentenceV) -> int
        Parameters:
           ChA: TChA & value
           SentenceV: TVec< char * > & value

           ChA: TChA & value
           SentenceV: TVec< char * > & value

           ChA: TChA & value
           SentenceV: TVec< char * > & value

        """
        return _snap.TStrUtil_SplitSentences(*args)

    SplitSentences = staticmethod(SplitSentences)
    def RemoveHtmlTags(*args):
        """
        RemoveHtmlTags(TChA HtmlStr, TChA TextStr)
        Parameters:
           HtmlStr: TChA const & value
           TextStr: TChA & value

           HtmlStr: TChA const & value
           TextStr: TChA & value

           HtmlStr: TChA const & value
           TextStr: TChA & value

        """
        return _snap.TStrUtil_RemoveHtmlTags(*args)

    RemoveHtmlTags = staticmethod(RemoveHtmlTags)
    def IsLatinStr(*args):
        """
        IsLatinStr(TChA Str, double MinAlFrac) -> bool
        Parameters:
           Str: TChA const & value
           MinAlFrac: double const & value

           Str: TChA const & value
           MinAlFrac: double const & value

           Str: TChA const & value
           MinAlFrac: double const & value

        """
        return _snap.TStrUtil_IsLatinStr(*args)

    IsLatinStr = staticmethod(IsLatinStr)
    def GetWIdV(*args):
        """
        GetWIdV(TStrHash<(TInt)> StrH, char CStr, TIntV WIdV)
        Parameters:
           StrH: TStrHash< TInt > const & value
           CStr: char const * value
           WIdV: TIntV & value

           StrH: TStrHash< TInt > const & value
           CStr: char const * value
           WIdV: TIntV & value

           StrH: TStrHash< TInt > const & value
           CStr: char const * value
           WIdV: TIntV & value

        """
        return _snap.TStrUtil_GetWIdV(*args)

    GetWIdV = staticmethod(GetWIdV)
    def GetAddWIdV(*args):
        """
        GetAddWIdV(TStrHash<(TInt)> StrH, char CStr, TIntV WIdV)
        Parameters:
           StrH: TStrHash< TInt > & value
           CStr: char const * value
           WIdV: TIntV & value

           StrH: TStrHash< TInt > & value
           CStr: char const * value
           WIdV: TIntV & value

           StrH: TStrHash< TInt > & value
           CStr: char const * value
           WIdV: TIntV & value

        """
        return _snap.TStrUtil_GetAddWIdV(*args)

    GetAddWIdV = staticmethod(GetAddWIdV)
    def GetTmFromStr(*args):
        """
        GetTmFromStr(char TmStr, TSecTm Tm) -> bool
        Parameters:
           TmStr: char const * value
           Tm: TSecTm & value

           TmStr: char const * value
           Tm: TSecTm & value

           TmStr: char const * value
           Tm: TSecTm & value

        """
        return _snap.TStrUtil_GetTmFromStr(*args)

    GetTmFromStr = staticmethod(GetTmFromStr)
    def GetStdName(*args):
        """
        GetStdName(TStr AuthorName) -> TStr
        Parameters:
           AuthorName: TStr value

           AuthorName: TStr value

           AuthorName: TStr value

        """
        return _snap.TStrUtil_GetStdName(*args)

    GetStdName = staticmethod(GetStdName)
    def GetStdNameV(*args):
        """
        GetStdNameV(TStr AuthorNames, TStrV StdNameV)
        Parameters:
           AuthorNames: TStr value
           StdNameV: TStrV & value

           AuthorNames: TStr value
           StdNameV: TStrV & value

           AuthorNames: TStr value
           StdNameV: TStrV & value

        """
        return _snap.TStrUtil_GetStdNameV(*args)

    GetStdNameV = staticmethod(GetStdNameV)
    def __init__(self): 
        """__init__(self) -> TStrUtil"""
        _snap.TStrUtil_swiginit(self,_snap.new_TStrUtil())
    __swig_destroy__ = _snap.delete_TStrUtil
TStrUtil_swigregister = _snap.TStrUtil_swigregister
TStrUtil_swigregister(TStrUtil)

def TStrUtil_GetXmlTagVal(*args):
  """
    TStrUtil_GetXmlTagVal(TXmlLx XmlLx, TChA TagNm) -> TChA
    Parameters:
       XmlLx: TXmlLx & value
       TagNm: TChA const & value

       XmlLx: TXmlLx & value
       TagNm: TChA const & value

    """
  return _snap.TStrUtil_GetXmlTagVal(*args)

def TStrUtil_GetXmlTagNmVal(*args):
  """
    TStrUtil_GetXmlTagNmVal(TXmlLx XmlLx, TChA TagNm, TChA TagVal)
    Parameters:
       XmlLx: TXmlLx & value
       TagNm: TChA & value
       TagVal: TChA & value

       XmlLx: TXmlLx & value
       TagNm: TChA & value
       TagVal: TChA & value

    """
  return _snap.TStrUtil_GetXmlTagNmVal(*args)

def TStrUtil_GetXmlTagNmVal2(*args):
  """
    TStrUtil_GetXmlTagNmVal2(TXmlLx XmlLx, TChA TagNm, TChA TagVal, bool TakeTagNms) -> bool
    Parameters:
       XmlLx: TXmlLx & value
       TagNm: TChA & value
       TagVal: TChA & value
       TakeTagNms: bool const & value

       XmlLx: TXmlLx & value
       TagNm: TChA & value
       TagVal: TChA & value
       TakeTagNms: bool const & value

    """
  return _snap.TStrUtil_GetXmlTagNmVal2(*args)

def TStrUtil_GetDomNm(*args):
  """
    TStrUtil_GetDomNm(TChA UrlChA) -> TChA
    Parameters:
       UrlChA: TChA const & value

       UrlChA: TChA const & value

    """
  return _snap.TStrUtil_GetDomNm(*args)

def TStrUtil_GetDomNm2(*args):
  """
    TStrUtil_GetDomNm2(TChA UrlChA) -> TChA
    Parameters:
       UrlChA: TChA const & value

       UrlChA: TChA const & value

    """
  return _snap.TStrUtil_GetDomNm2(*args)

def TStrUtil_GetWebsiteNm(*args):
  """
    TStrUtil_GetWebsiteNm(TChA UrlChA) -> TChA
    Parameters:
       UrlChA: TChA const & value

       UrlChA: TChA const & value

    """
  return _snap.TStrUtil_GetWebsiteNm(*args)

def TStrUtil_GetNormalizedUrl(*args):
  """
    TStrUtil_GetNormalizedUrl(TChA UrlIn, TChA BaseUrl, TChA UrlOut) -> bool
    Parameters:
       UrlIn: TChA const & value
       BaseUrl: TChA const & value
       UrlOut: TChA & value

       UrlIn: TChA const & value
       BaseUrl: TChA const & value
       UrlOut: TChA & value

    """
  return _snap.TStrUtil_GetNormalizedUrl(*args)

def TStrUtil_StripEnd(*args):
  """
    TStrUtil_StripEnd(TChA Str, TChA SearchStr, TChA NewStr) -> bool
    Parameters:
       Str: TChA const & value
       SearchStr: TChA const & value
       NewStr: TChA & value

       Str: TChA const & value
       SearchStr: TChA const & value
       NewStr: TChA & value

    """
  return _snap.TStrUtil_StripEnd(*args)

def TStrUtil_GetShorStr(*args):
  """
    GetShorStr(TChA LongStr, int MaxLen = 50) -> TChA
    Parameters:
       LongStr: TChA const & value
       MaxLen: int const value

       LongStr: TChA const & value
       MaxLen: int const value

    TStrUtil_GetShorStr(TChA LongStr) -> TChA
    Parameters:
       LongStr: TChA const & value

       LongStr: TChA const & value

    """
  return _snap.TStrUtil_GetShorStr(*args)

def TStrUtil_GetCleanStr(*args):
  """
    TStrUtil_GetCleanStr(TChA ChA) -> TChA
    Parameters:
       ChA: TChA const & value

       ChA: TChA const & value

    """
  return _snap.TStrUtil_GetCleanStr(*args)

def TStrUtil_GetCleanWrdStr(*args):
  """
    TStrUtil_GetCleanWrdStr(TChA ChA) -> TChA
    Parameters:
       ChA: TChA const & value

       ChA: TChA const & value

    """
  return _snap.TStrUtil_GetCleanWrdStr(*args)

def TStrUtil_CountWords(*args):
  """
    CountWords(char CStr) -> int
    Parameters:
       CStr: char const * value

       CStr: char const * value

    CountWords(TChA ChA) -> int
    Parameters:
       ChA: TChA const & value

       ChA: TChA const & value

    TStrUtil_CountWords(TChA ChA, TStrHash<(TInt)> StopWordH) -> int
    Parameters:
       ChA: TChA const & value
       StopWordH: TStrHash< TInt > const & value

       ChA: TChA const & value
       StopWordH: TStrHash< TInt > const & value

    """
  return _snap.TStrUtil_CountWords(*args)

def TStrUtil_SplitWords(*args):
  """
    SplitWords(TChA ChA, TVec<(p.char)> WrdV, bool SplitOnWs = True) -> int
    Parameters:
       ChA: TChA & value
       WrdV: TVec< char * > & value
       SplitOnWs: bool const & value

       ChA: TChA & value
       WrdV: TVec< char * > & value
       SplitOnWs: bool const & value

    TStrUtil_SplitWords(TChA ChA, TVec<(p.char)> WrdV) -> int
    Parameters:
       ChA: TChA & value
       WrdV: TVec< char * > & value

       ChA: TChA & value
       WrdV: TVec< char * > & value

    """
  return _snap.TStrUtil_SplitWords(*args)

def TStrUtil_SplitOnCh(*args):
  """
    SplitOnCh(TChA ChA, TVec<(p.char)> WrdV, char Ch, bool SkipEmpty = False) -> int
    Parameters:
       ChA: TChA & value
       WrdV: TVec< char * > & value
       Ch: char const & value
       SkipEmpty: bool const & value

       ChA: TChA & value
       WrdV: TVec< char * > & value
       Ch: char const & value
       SkipEmpty: bool const & value

    TStrUtil_SplitOnCh(TChA ChA, TVec<(p.char)> WrdV, char Ch) -> int
    Parameters:
       ChA: TChA & value
       WrdV: TVec< char * > & value
       Ch: char const & value

       ChA: TChA & value
       WrdV: TVec< char * > & value
       Ch: char const & value

    """
  return _snap.TStrUtil_SplitOnCh(*args)

def TStrUtil_SplitLines(*args):
  """
    SplitLines(TChA ChA, TVec<(p.char)> LineV, bool SkipEmpty = False) -> int
    Parameters:
       ChA: TChA & value
       LineV: TVec< char * > & value
       SkipEmpty: bool const & value

       ChA: TChA & value
       LineV: TVec< char * > & value
       SkipEmpty: bool const & value

    TStrUtil_SplitLines(TChA ChA, TVec<(p.char)> LineV) -> int
    Parameters:
       ChA: TChA & value
       LineV: TVec< char * > & value

       ChA: TChA & value
       LineV: TVec< char * > & value

    """
  return _snap.TStrUtil_SplitLines(*args)

def TStrUtil_SplitSentences(*args):
  """
    TStrUtil_SplitSentences(TChA ChA, TVec<(p.char)> SentenceV) -> int
    Parameters:
       ChA: TChA & value
       SentenceV: TVec< char * > & value

       ChA: TChA & value
       SentenceV: TVec< char * > & value

    """
  return _snap.TStrUtil_SplitSentences(*args)

def TStrUtil_RemoveHtmlTags(*args):
  """
    TStrUtil_RemoveHtmlTags(TChA HtmlStr, TChA TextStr)
    Parameters:
       HtmlStr: TChA const & value
       TextStr: TChA & value

       HtmlStr: TChA const & value
       TextStr: TChA & value

    """
  return _snap.TStrUtil_RemoveHtmlTags(*args)

def TStrUtil_IsLatinStr(*args):
  """
    TStrUtil_IsLatinStr(TChA Str, double MinAlFrac) -> bool
    Parameters:
       Str: TChA const & value
       MinAlFrac: double const & value

       Str: TChA const & value
       MinAlFrac: double const & value

    """
  return _snap.TStrUtil_IsLatinStr(*args)

def TStrUtil_GetWIdV(*args):
  """
    TStrUtil_GetWIdV(TStrHash<(TInt)> StrH, char CStr, TIntV WIdV)
    Parameters:
       StrH: TStrHash< TInt > const & value
       CStr: char const * value
       WIdV: TIntV & value

       StrH: TStrHash< TInt > const & value
       CStr: char const * value
       WIdV: TIntV & value

    """
  return _snap.TStrUtil_GetWIdV(*args)

def TStrUtil_GetAddWIdV(*args):
  """
    TStrUtil_GetAddWIdV(TStrHash<(TInt)> StrH, char CStr, TIntV WIdV)
    Parameters:
       StrH: TStrHash< TInt > & value
       CStr: char const * value
       WIdV: TIntV & value

       StrH: TStrHash< TInt > & value
       CStr: char const * value
       WIdV: TIntV & value

    """
  return _snap.TStrUtil_GetAddWIdV(*args)

def TStrUtil_GetTmFromStr(*args):
  """
    TStrUtil_GetTmFromStr(char TmStr, TSecTm Tm) -> bool
    Parameters:
       TmStr: char const * value
       Tm: TSecTm & value

       TmStr: char const * value
       Tm: TSecTm & value

    """
  return _snap.TStrUtil_GetTmFromStr(*args)

def TStrUtil_GetStdName(*args):
  """
    TStrUtil_GetStdName(TStr AuthorName) -> TStr
    Parameters:
       AuthorName: TStr value

       AuthorName: TStr value

    """
  return _snap.TStrUtil_GetStdName(*args)

def TStrUtil_GetStdNameV(*args):
  """
    TStrUtil_GetStdNameV(TStr AuthorNames, TStrV StdNameV)
    Parameters:
       AuthorNames: TStr value
       StdNameV: TStrV & value

       AuthorNames: TStr value
       StdNameV: TStrV & value

    """
  return _snap.TStrUtil_GetStdNameV(*args)

class TStopwatch(object):
    """Proxy of C++ TStopwatch class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    LoadTables = _snap.TStopwatch_LoadTables
    Preprocess = _snap.TStopwatch_Preprocess
    ConstructGraph = _snap.TStopwatch_ConstructGraph
    Compute = _snap.TStopwatch_Compute
    Postprocess = _snap.TStopwatch_Postprocess
    StoreOutputs = _snap.TStopwatch_StoreOutputs
    AllocateColumnCopies = _snap.TStopwatch_AllocateColumnCopies
    CopyColumns = _snap.TStopwatch_CopyColumns
    Sort = _snap.TStopwatch_Sort
    Group = _snap.TStopwatch_Group
    MergeNeighborhoods = _snap.TStopwatch_MergeNeighborhoods
    AddNeighborhoods = _snap.TStopwatch_AddNeighborhoods
    AddEdges = _snap.TStopwatch_AddEdges
    Sort2 = _snap.TStopwatch_Sort2
    ComputeOffset = _snap.TStopwatch_ComputeOffset
    ComputeETypes = _snap.TStopwatch_ComputeETypes
    EstimateSizes = _snap.TStopwatch_EstimateSizes
    InitGraph = _snap.TStopwatch_InitGraph
    ExtractNbrETypes = _snap.TStopwatch_ExtractNbrETypes
    CopyNodes = _snap.TStopwatch_CopyNodes
    PopulateGraph = _snap.TStopwatch_PopulateGraph
    ExtractEdges = _snap.TStopwatch_ExtractEdges
    BuildSubgraph = _snap.TStopwatch_BuildSubgraph
    NEXPS = _snap.TStopwatch_NEXPS
    def GetInstance():
        """GetInstance() -> TStopwatch"""
        return _snap.TStopwatch_GetInstance()

    GetInstance = staticmethod(GetInstance)
    def Start(self, *args):
        """
        Start(self, TExperiment Exp)
        Parameters:
           self: TStopwatch * value
           Exp: enum TStopwatch::TExperiment const value

           Exp: enum TStopwatch::TExperiment const value

        """
        return _snap.TStopwatch_Start(self, *args)

    def Stop(self, *args):
        """
        Stop(self, TExperiment Exp)
        Parameters:
           self: TStopwatch * value
           Exp: enum TStopwatch::TExperiment const value

           Exp: enum TStopwatch::TExperiment const value

        """
        return _snap.TStopwatch_Stop(self, *args)

    def Cnt(self, *args):
        """
        Cnt(self, TExperiment Exp) -> int
        Parameters:
           self: TStopwatch const * value
           Exp: enum TStopwatch::TExperiment const value

           Exp: enum TStopwatch::TExperiment const value

        """
        return _snap.TStopwatch_Cnt(self, *args)

    def Sum(self, *args):
        """
        Sum(self, TExperiment Exp) -> double
        Parameters:
           self: TStopwatch const * value
           Exp: enum TStopwatch::TExperiment const value

           Exp: enum TStopwatch::TExperiment const value

        """
        return _snap.TStopwatch_Sum(self, *args)

    def Avg(self, *args):
        """
        Avg(self, TExperiment Exp) -> double
        Parameters:
           self: TStopwatch const * value
           Exp: enum TStopwatch::TExperiment const value

           Exp: enum TStopwatch::TExperiment const value

        """
        return _snap.TStopwatch_Avg(self, *args)

    def Max(self, *args):
        """
        Max(self, TExperiment Exp) -> double
        Parameters:
           self: TStopwatch const * value
           Exp: enum TStopwatch::TExperiment const value

           Exp: enum TStopwatch::TExperiment const value

        """
        return _snap.TStopwatch_Max(self, *args)

    def Min(self, *args):
        """
        Min(self, TExperiment Exp) -> double
        Parameters:
           self: TStopwatch const * value
           Exp: enum TStopwatch::TExperiment const value

           Exp: enum TStopwatch::TExperiment const value

        """
        return _snap.TStopwatch_Min(self, *args)

    __swig_destroy__ = _snap.delete_TStopwatch
TStopwatch.Start = new_instancemethod(_snap.TStopwatch_Start,None,TStopwatch)
TStopwatch.Stop = new_instancemethod(_snap.TStopwatch_Stop,None,TStopwatch)
TStopwatch.Cnt = new_instancemethod(_snap.TStopwatch_Cnt,None,TStopwatch)
TStopwatch.Sum = new_instancemethod(_snap.TStopwatch_Sum,None,TStopwatch)
TStopwatch.Avg = new_instancemethod(_snap.TStopwatch_Avg,None,TStopwatch)
TStopwatch.Max = new_instancemethod(_snap.TStopwatch_Max,None,TStopwatch)
TStopwatch.Min = new_instancemethod(_snap.TStopwatch_Min,None,TStopwatch)
TStopwatch_swigregister = _snap.TStopwatch_swigregister
TStopwatch_swigregister(TStopwatch)

def TStopwatch_GetInstance():
  """TStopwatch_GetInstance() -> TStopwatch"""
  return _snap.TStopwatch_GetInstance()

atInt = _snap.atInt
atFlt = _snap.atFlt
atStr = _snap.atStr
NOT = _snap.NOT
AND = _snap.AND
OR = _snap.OR
NOP = _snap.NOP
LT = _snap.LT
LTE = _snap.LTE
EQ = _snap.EQ
NEQ = _snap.NEQ
GTE = _snap.GTE
GT = _snap.GT
SUBSTR = _snap.SUBSTR
SUPERSTR = _snap.SUPERSTR
class TAtomicPredicate(object):
    """Proxy of C++ TAtomicPredicate class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TAtomicPredicate
        __init__(self,  Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R, 
            TInt ICnst, TFlt FCnst, TStr SCnst) -> TAtomicPredicate
        Parameters:
           Typ: enum TAttrType value
           IsCnst: TBool value
           Cmp: enum TPredComp value
           L: TStr value
           R: TStr value
           ICnst: TInt value
           FCnst: TFlt value
           SCnst: TStr value

           Typ: enum TAttrType value
           IsCnst: TBool value
           Cmp: enum TPredComp value
           L: TStr value
           R: TStr value
           ICnst: TInt value
           FCnst: TFlt value
           SCnst: TStr value

        __init__(self,  Typ, TBool IsCnst, TPredComp Cmp, TStr L, TStr R) -> TAtomicPredicate
        Parameters:
           Typ: enum TAttrType value
           IsCnst: TBool value
           Cmp: enum TPredComp value
           L: TStr value
           R: TStr value

           Typ: enum TAttrType value
           IsCnst: TBool value
           Cmp: enum TPredComp value
           L: TStr value
           R: TStr value

        """
        _snap.TAtomicPredicate_swiginit(self,_snap.new_TAtomicPredicate(*args))
    __swig_destroy__ = _snap.delete_TAtomicPredicate
TAtomicPredicate_swigregister = _snap.TAtomicPredicate_swigregister
TAtomicPredicate_swigregister(TAtomicPredicate)

class TPredicateNode(object):
    """Proxy of C++ TPredicateNode class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Op = _swig_property(_snap.TPredicateNode_Op_get, _snap.TPredicateNode_Op_set)
    Result = _swig_property(_snap.TPredicateNode_Result_get, _snap.TPredicateNode_Result_set)
    Atom = _swig_property(_snap.TPredicateNode_Atom_get, _snap.TPredicateNode_Atom_set)
    Parent = _swig_property(_snap.TPredicateNode_Parent_get, _snap.TPredicateNode_Parent_set)
    Left = _swig_property(_snap.TPredicateNode_Left_get, _snap.TPredicateNode_Left_set)
    Right = _swig_property(_snap.TPredicateNode_Right_get, _snap.TPredicateNode_Right_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TPredicateNode
        __init__(self, TAtomicPredicate A) -> TPredicateNode
        Parameters:
           A: TAtomicPredicate const & value

           A: TAtomicPredicate const & value

        __init__(self, TPredOp Opr) -> TPredicateNode
        Parameters:
           Opr: enum TPredOp value

           Opr: enum TPredOp value

        __init__(self, TPredicateNode P) -> TPredicateNode
        Parameters:
           P: TPredicateNode const & value

           P: TPredicateNode const & value

        """
        _snap.TPredicateNode_swiginit(self,_snap.new_TPredicateNode(*args))
    def AddLeftChild(self, *args):
        """
        AddLeftChild(self, TPredicateNode Child)
        Parameters:
           self: TPredicateNode * value
           Child: TPredicateNode * value

           Child: TPredicateNode * value

        """
        return _snap.TPredicateNode_AddLeftChild(self, *args)

    def AddRightChild(self, *args):
        """
        AddRightChild(self, TPredicateNode Child)
        Parameters:
           self: TPredicateNode * value
           Child: TPredicateNode * value

           Child: TPredicateNode * value

        """
        return _snap.TPredicateNode_AddRightChild(self, *args)

    def GetVariables(self, *args):
        """
        GetVariables(self, TStrV Variables)
        Parameters:
           self: TPredicateNode * value
           Variables: TStrV & value

           Variables: TStrV & value

        """
        return _snap.TPredicateNode_GetVariables(self, *args)

    __swig_destroy__ = _snap.delete_TPredicateNode
TPredicateNode.AddLeftChild = new_instancemethod(_snap.TPredicateNode_AddLeftChild,None,TPredicateNode)
TPredicateNode.AddRightChild = new_instancemethod(_snap.TPredicateNode_AddRightChild,None,TPredicateNode)
TPredicateNode.GetVariables = new_instancemethod(_snap.TPredicateNode_GetVariables,None,TPredicateNode)
TPredicateNode_swigregister = _snap.TPredicateNode_swigregister
TPredicateNode_swigregister(TPredicateNode)

class TPredicate(object):
    """Proxy of C++ TPredicate class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TPredicate
        __init__(self, TPredicateNode R) -> TPredicate
        Parameters:
           R: TPredicateNode * value

           R: TPredicateNode * value

        __init__(self, TPredicate Pred) -> TPredicate
        Parameters:
           Pred: TPredicate const & value

           Pred: TPredicate const & value

        """
        _snap.TPredicate_swiginit(self,_snap.new_TPredicate(*args))
    def GetVariables(self, *args):
        """
        GetVariables(self, TStrV Variables)
        Parameters:
           self: TPredicate * value
           Variables: TStrV & value

           Variables: TStrV & value

        """
        return _snap.TPredicate_GetVariables(self, *args)

    def SetIntVal(self, *args):
        """
        SetIntVal(self, TStr VarName, TInt VarVal)
        Parameters:
           self: TPredicate * value
           VarName: TStr value
           VarVal: TInt value

           VarName: TStr value
           VarVal: TInt value

        """
        return _snap.TPredicate_SetIntVal(self, *args)

    def SetFltVal(self, *args):
        """
        SetFltVal(self, TStr VarName, TFlt VarVal)
        Parameters:
           self: TPredicate * value
           VarName: TStr value
           VarVal: TFlt value

           VarName: TStr value
           VarVal: TFlt value

        """
        return _snap.TPredicate_SetFltVal(self, *args)

    def SetStrVal(self, *args):
        """
        SetStrVal(self, TStr VarName, TStr VarVal)
        Parameters:
           self: TPredicate * value
           VarName: TStr value
           VarVal: TStr value

           VarName: TStr value
           VarVal: TStr value

        """
        return _snap.TPredicate_SetStrVal(self, *args)

    def Eval(self):
        """
        Eval(self) -> TBool
        Parameters:
           self: TPredicate * value




        """
        return _snap.TPredicate_Eval(self)

    def EvalAtomicPredicate(self, *args):
        """
        EvalAtomicPredicate(self, TAtomicPredicate Atom) -> TBool
        Parameters:
           self: TPredicate * value
           Atom: TAtomicPredicate const & value

           Atom: TAtomicPredicate const & value

        """
        return _snap.TPredicate_EvalAtomicPredicate(self, *args)

    def EvalStrAtom(*args):
        """
        EvalStrAtom(TStr Val1, TStr Val2, TPredComp Cmp) -> TBool
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Cmp: enum TPredComp value

           Val1: TStr const & value
           Val2: TStr const & value
           Cmp: enum TPredComp value

           Val1: TStr const & value
           Val2: TStr const & value
           Cmp: enum TPredComp value

        """
        return _snap.TPredicate_EvalStrAtom(*args)

    EvalStrAtom = staticmethod(EvalStrAtom)
    __swig_destroy__ = _snap.delete_TPredicate
TPredicate.GetVariables = new_instancemethod(_snap.TPredicate_GetVariables,None,TPredicate)
TPredicate.SetIntVal = new_instancemethod(_snap.TPredicate_SetIntVal,None,TPredicate)
TPredicate.SetFltVal = new_instancemethod(_snap.TPredicate_SetFltVal,None,TPredicate)
TPredicate.SetStrVal = new_instancemethod(_snap.TPredicate_SetStrVal,None,TPredicate)
TPredicate.Eval = new_instancemethod(_snap.TPredicate_Eval,None,TPredicate)
TPredicate.EvalAtomicPredicate = new_instancemethod(_snap.TPredicate_EvalAtomicPredicate,None,TPredicate)
TPredicate_swigregister = _snap.TPredicate_swigregister
TPredicate_swigregister(TPredicate)

def TPredicate_EvalStrAtom(*args):
  """
    TPredicate_EvalStrAtom(TStr Val1, TStr Val2, TPredComp Cmp) -> TBool
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Cmp: enum TPredComp value

       Val1: TStr const & value
       Val2: TStr const & value
       Cmp: enum TPredComp value

    """
  return _snap.TPredicate_EvalStrAtom(*args)

class TBigStrPool(object):
    """Proxy of C++ TBigStrPool class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TSize MxBfLen = 0, uint _GrowBy = 16*1024*1024) -> TBigStrPool
        Parameters:
           MxBfLen: TSize value
           _GrowBy: uint value

           MxBfLen: TSize value
           _GrowBy: uint value

        __init__(self, TSize MxBfLen = 0) -> TBigStrPool
        Parameters:
           MxBfLen: TSize value

           MxBfLen: TSize value

        __init__(self) -> TBigStrPool
        __init__(self, TSIn SIn, bool LoadCompact = True) -> TBigStrPool
        Parameters:
           SIn: TSIn & value
           LoadCompact: bool value

           SIn: TSIn & value
           LoadCompact: bool value

        __init__(self, TSIn SIn) -> TBigStrPool
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        __init__(self, TBigStrPool Pool) -> TBigStrPool
        Parameters:
           Pool: TBigStrPool const & value

           Pool: TBigStrPool const & value

        """
        _snap.TBigStrPool_swiginit(self,_snap.new_TBigStrPool(*args))
    __swig_destroy__ = _snap.delete_TBigStrPool
    def New(*args):
        """
        New(TSize _MxBfLen = 0, uint _GrowBy = 16*1024*1024) -> PBigStrPool
        Parameters:
           _MxBfLen: TSize value
           _GrowBy: uint value

           _MxBfLen: TSize value
           _GrowBy: uint value

           _MxBfLen: TSize value
           _GrowBy: uint value

        New(TSize _MxBfLen = 0) -> PBigStrPool
        Parameters:
           _MxBfLen: TSize value

           _MxBfLen: TSize value

           _MxBfLen: TSize value

        New() -> PBigStrPool
        New(TSIn SIn) -> PBigStrPool
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        New(TStr fileName) -> PBigStrPool
        Parameters:
           fileName: TStr const & value

           fileName: TStr const & value

           fileName: TStr const & value

        """
        return _snap.TBigStrPool_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn, bool LoadCompacted = True) -> PBigStrPool
        Parameters:
           SIn: TSIn & value
           LoadCompacted: bool value

           SIn: TSIn & value
           LoadCompacted: bool value

           SIn: TSIn & value
           LoadCompacted: bool value

        Load(TSIn SIn) -> PBigStrPool
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TBigStrPool_Load(*args)

    Load = staticmethod(Load)
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           SOut: TSOut & value

           SOut: TSOut & value

        Save(self, TStr fileName)
        Parameters:
           self: TBigStrPool * value
           fileName: TStr const & value

           fileName: TStr const & value

        """
        return _snap.TBigStrPool_Save(self, *args)

    def GetStrs(self):
        """
        GetStrs(self) -> int
        Parameters:
           self: TBigStrPool const * value




        """
        return _snap.TBigStrPool_GetStrs(self)

    def Len(self):
        """
        Len(self) -> TSize
        Parameters:
           self: TBigStrPool const * value




        """
        return _snap.TBigStrPool_Len(self)

    def Size(self):
        """
        Size(self) -> TSize
        Parameters:
           self: TBigStrPool const * value




        """
        return _snap.TBigStrPool_Size(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TBigStrPool const * value




        """
        return _snap.TBigStrPool_Empty(self)

    def __call__(self):
        """
        __call__(self) -> char
        Parameters:
           self: TBigStrPool const * value




        """
        return _snap.TBigStrPool___call__(self)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: TBigStrPool * value




        """
        return _snap.TBigStrPool_GetMemUsed(self)

    def AddStr(self, *args):
        """
        AddStr(self, char Str, uint Len) -> int
        Parameters:
           Str: char const * value
           Len: uint value

           Str: char const * value
           Len: uint value

        AddStr(self, char Str) -> int
        Parameters:
           Str: char const * value

           Str: char const * value

        AddStr(self, TStr Str) -> int
        Parameters:
           self: TBigStrPool * value
           Str: TStr const & value

           Str: TStr const & value

        """
        return _snap.TBigStrPool_AddStr(self, *args)

    def GetStr(self, *args):
        """
        GetStr(self, int StrId) -> TStr
        Parameters:
           self: TBigStrPool const * value
           StrId: int const & value

           StrId: int const & value

        """
        return _snap.TBigStrPool_GetStr(self, *args)

    def GetCStr(self, *args):
        """
        GetCStr(self, int StrId) -> char
        Parameters:
           self: TBigStrPool const * value
           StrId: int const & value

           StrId: int const & value

        """
        return _snap.TBigStrPool_GetCStr(self, *args)

    def GetStrFromOffset(self, *args):
        """
        GetStrFromOffset(self, TSize Offset) -> TStr
        Parameters:
           self: TBigStrPool const * value
           Offset: TSize const & value

           Offset: TSize const & value

        """
        return _snap.TBigStrPool_GetStrFromOffset(self, *args)

    def GetCStrFromOffset(self, *args):
        """
        GetCStrFromOffset(self, TSize Offset) -> char
        Parameters:
           self: TBigStrPool const * value
           Offset: TSize const & value

           Offset: TSize const & value

        """
        return _snap.TBigStrPool_GetCStrFromOffset(self, *args)

    def Clr(self, DoDel = False):
        """
        Clr(self, bool DoDel = False)
        Parameters:
           DoDel: bool value

           DoDel: bool value

           DoDel: bool value

           DoDel: bool value

        Clr(self)
        Parameters:
           self: TBigStrPool * value


        """
        return _snap.TBigStrPool_Clr(self, DoDel)

    def Cmp(self, *args):
        """
        Cmp(self, int StrId, char Str) -> int
        Parameters:
           self: TBigStrPool const * value
           StrId: int const & value
           Str: char const * value

           StrId: int const & value
           Str: char const * value

        """
        return _snap.TBigStrPool_Cmp(self, *args)

    def GetPrimHashCd(self, *args):
        """
        GetPrimHashCd(self, char CStr) -> int
        Parameters:
           CStr: char const * value

           CStr: char const * value

        GetPrimHashCd(self, int StrId) -> int
        Parameters:
           self: TBigStrPool * value
           StrId: int const & value

           StrId: int const & value

        """
        return _snap.TBigStrPool_GetPrimHashCd(self, *args)

    def GetSecHashCd(self, *args):
        """
        GetSecHashCd(self, char CStr) -> int
        Parameters:
           CStr: char const * value

           CStr: char const * value

        GetSecHashCd(self, int StrId) -> int
        Parameters:
           self: TBigStrPool * value
           StrId: int const & value

           StrId: int const & value

        """
        return _snap.TBigStrPool_GetSecHashCd(self, *args)

TBigStrPool.Save = new_instancemethod(_snap.TBigStrPool_Save,None,TBigStrPool)
TBigStrPool.GetStrs = new_instancemethod(_snap.TBigStrPool_GetStrs,None,TBigStrPool)
TBigStrPool.Len = new_instancemethod(_snap.TBigStrPool_Len,None,TBigStrPool)
TBigStrPool.Size = new_instancemethod(_snap.TBigStrPool_Size,None,TBigStrPool)
TBigStrPool.Empty = new_instancemethod(_snap.TBigStrPool_Empty,None,TBigStrPool)
TBigStrPool.__call__ = new_instancemethod(_snap.TBigStrPool___call__,None,TBigStrPool)
TBigStrPool.GetMemUsed = new_instancemethod(_snap.TBigStrPool_GetMemUsed,None,TBigStrPool)
TBigStrPool.AddStr = new_instancemethod(_snap.TBigStrPool_AddStr,None,TBigStrPool)
TBigStrPool.GetStr = new_instancemethod(_snap.TBigStrPool_GetStr,None,TBigStrPool)
TBigStrPool.GetCStr = new_instancemethod(_snap.TBigStrPool_GetCStr,None,TBigStrPool)
TBigStrPool.GetStrFromOffset = new_instancemethod(_snap.TBigStrPool_GetStrFromOffset,None,TBigStrPool)
TBigStrPool.GetCStrFromOffset = new_instancemethod(_snap.TBigStrPool_GetCStrFromOffset,None,TBigStrPool)
TBigStrPool.Clr = new_instancemethod(_snap.TBigStrPool_Clr,None,TBigStrPool)
TBigStrPool.Cmp = new_instancemethod(_snap.TBigStrPool_Cmp,None,TBigStrPool)
TBigStrPool.GetPrimHashCd = new_instancemethod(_snap.TBigStrPool_GetPrimHashCd,None,TBigStrPool)
TBigStrPool.GetSecHashCd = new_instancemethod(_snap.TBigStrPool_GetSecHashCd,None,TBigStrPool)
TBigStrPool_swigregister = _snap.TBigStrPool_swigregister
TBigStrPool_swigregister(TBigStrPool)

def TBigStrPool_New(*args):
  """
    New(TSize _MxBfLen = 0, uint _GrowBy = 16*1024*1024) -> PBigStrPool
    Parameters:
       _MxBfLen: TSize value
       _GrowBy: uint value

       _MxBfLen: TSize value
       _GrowBy: uint value

    New(TSize _MxBfLen = 0) -> PBigStrPool
    Parameters:
       _MxBfLen: TSize value

       _MxBfLen: TSize value

    New() -> PBigStrPool
    New(TSIn SIn) -> PBigStrPool
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    TBigStrPool_New(TStr fileName) -> PBigStrPool
    Parameters:
       fileName: TStr const & value

       fileName: TStr const & value

    """
  return _snap.TBigStrPool_New(*args)

def TBigStrPool_Load(*args):
  """
    Load(TSIn SIn, bool LoadCompacted = True) -> PBigStrPool
    Parameters:
       SIn: TSIn & value
       LoadCompacted: bool value

       SIn: TSIn & value
       LoadCompacted: bool value

    TBigStrPool_Load(TSIn SIn) -> PBigStrPool
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TBigStrPool_Load(*args)

class TStrHashF_OldGLib(object):
    """Proxy of C++ TStrHashF_OldGLib class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char p) -> int
        Parameters:
           p: char const * value

           p: char const * value

           p: char const * value

        GetPrimHashCd(TStr s) -> int
        Parameters:
           s: TStr const & value

           s: TStr const & value

           s: TStr const & value

        """
        return _snap.TStrHashF_OldGLib_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)
    def GetSecHashCd(*args):
        """
        GetSecHashCd(char p) -> int
        Parameters:
           p: char const * value

           p: char const * value

           p: char const * value

        GetSecHashCd(TStr s) -> int
        Parameters:
           s: TStr const & value

           s: TStr const & value

           s: TStr const & value

        """
        return _snap.TStrHashF_OldGLib_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)
    def __init__(self): 
        """__init__(self) -> TStrHashF_OldGLib"""
        _snap.TStrHashF_OldGLib_swiginit(self,_snap.new_TStrHashF_OldGLib())
    __swig_destroy__ = _snap.delete_TStrHashF_OldGLib
TStrHashF_OldGLib_swigregister = _snap.TStrHashF_OldGLib_swigregister
TStrHashF_OldGLib_swigregister(TStrHashF_OldGLib)

def TStrHashF_OldGLib_GetPrimHashCd(*args):
  """
    GetPrimHashCd(char p) -> int
    Parameters:
       p: char const * value

       p: char const * value

    TStrHashF_OldGLib_GetPrimHashCd(TStr s) -> int
    Parameters:
       s: TStr const & value

       s: TStr const & value

    """
  return _snap.TStrHashF_OldGLib_GetPrimHashCd(*args)

def TStrHashF_OldGLib_GetSecHashCd(*args):
  """
    GetSecHashCd(char p) -> int
    Parameters:
       p: char const * value

       p: char const * value

    TStrHashF_OldGLib_GetSecHashCd(TStr s) -> int
    Parameters:
       s: TStr const & value

       s: TStr const & value

    """
  return _snap.TStrHashF_OldGLib_GetSecHashCd(*args)

class TStrHashF_Md5(object):
    """Proxy of C++ TStrHashF_Md5 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char p) -> int
        Parameters:
           p: char const * value

           p: char const * value

           p: char const * value

        GetPrimHashCd(TStr s) -> int
        Parameters:
           s: TStr const & value

           s: TStr const & value

           s: TStr const & value

        """
        return _snap.TStrHashF_Md5_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)
    def GetSecHashCd(*args):
        """
        GetSecHashCd(char p) -> int
        Parameters:
           p: char const * value

           p: char const * value

           p: char const * value

        GetSecHashCd(TStr s) -> int
        Parameters:
           s: TStr const & value

           s: TStr const & value

           s: TStr const & value

        """
        return _snap.TStrHashF_Md5_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)
    def __init__(self): 
        """__init__(self) -> TStrHashF_Md5"""
        _snap.TStrHashF_Md5_swiginit(self,_snap.new_TStrHashF_Md5())
    __swig_destroy__ = _snap.delete_TStrHashF_Md5
TStrHashF_Md5_swigregister = _snap.TStrHashF_Md5_swigregister
TStrHashF_Md5_swigregister(TStrHashF_Md5)

def TStrHashF_Md5_GetPrimHashCd(*args):
  """
    GetPrimHashCd(char p) -> int
    Parameters:
       p: char const * value

       p: char const * value

    TStrHashF_Md5_GetPrimHashCd(TStr s) -> int
    Parameters:
       s: TStr const & value

       s: TStr const & value

    """
  return _snap.TStrHashF_Md5_GetPrimHashCd(*args)

def TStrHashF_Md5_GetSecHashCd(*args):
  """
    GetSecHashCd(char p) -> int
    Parameters:
       p: char const * value

       p: char const * value

    TStrHashF_Md5_GetSecHashCd(TStr s) -> int
    Parameters:
       s: TStr const & value

       s: TStr const & value

    """
  return _snap.TStrHashF_Md5_GetSecHashCd(*args)

class TStrHashF_DJB(object):
    """Proxy of C++ TStrHashF_DJB class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetPrimHashCd(*args):
        """
        GetPrimHashCd(char p) -> int
        Parameters:
           p: char const * value

           p: char const * value

           p: char const * value

        GetPrimHashCd(TStr s) -> int
        Parameters:
           s: TStr const & value

           s: TStr const & value

           s: TStr const & value

        """
        return _snap.TStrHashF_DJB_GetPrimHashCd(*args)

    GetPrimHashCd = staticmethod(GetPrimHashCd)
    def GetSecHashCd(*args):
        """
        GetSecHashCd(char p) -> int
        Parameters:
           p: char const * value

           p: char const * value

           p: char const * value

        GetSecHashCd(TStr s) -> int
        Parameters:
           s: TStr const & value

           s: TStr const & value

           s: TStr const & value

        """
        return _snap.TStrHashF_DJB_GetSecHashCd(*args)

    GetSecHashCd = staticmethod(GetSecHashCd)
    def __init__(self): 
        """__init__(self) -> TStrHashF_DJB"""
        _snap.TStrHashF_DJB_swiginit(self,_snap.new_TStrHashF_DJB())
    __swig_destroy__ = _snap.delete_TStrHashF_DJB
TStrHashF_DJB_swigregister = _snap.TStrHashF_DJB_swigregister
TStrHashF_DJB_swigregister(TStrHashF_DJB)

def TStrHashF_DJB_GetPrimHashCd(*args):
  """
    GetPrimHashCd(char p) -> int
    Parameters:
       p: char const * value

       p: char const * value

    TStrHashF_DJB_GetPrimHashCd(TStr s) -> int
    Parameters:
       s: TStr const & value

       s: TStr const & value

    """
  return _snap.TStrHashF_DJB_GetPrimHashCd(*args)

def TStrHashF_DJB_GetSecHashCd(*args):
  """
    GetSecHashCd(char p) -> int
    Parameters:
       p: char const * value

       p: char const * value

    TStrHashF_DJB_GetSecHashCd(TStr s) -> int
    Parameters:
       s: TStr const & value

       s: TStr const & value

    """
  return _snap.TStrHashF_DJB_GetSecHashCd(*args)

class TUNGraph(object):
    """Proxy of C++ TUNGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TUNGraph
        __init__(self, int Nodes, int Edges) -> TUNGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TUNGraph Graph) -> TUNGraph
        Parameters:
           Graph: TUNGraph const & value

           Graph: TUNGraph const & value

        __init__(self, TSIn SIn) -> TUNGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TUNGraph_swiginit(self,_snap.new_TUNGraph(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TUNGraph const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TUNGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PUNGraph
        New(int Nodes, int Edges) -> PUNGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TUNGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PUNGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TUNGraph_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TUNGraph const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TUNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TUNGraph const * value




        """
        return _snap.TUNGraph_GetNodes(self)

    def AddNodeUnchecked(self, *args):
        """
        AddNodeUnchecked(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNodeUnchecked(self) -> int
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_AddNodeUnchecked(self, *args)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeI) -> int
        Parameters:
           NodeI: TUNGraph::TNodeI const & value

           NodeI: TUNGraph::TNodeI const & value

        AddNode(self, int NId, TIntV NbrNIdV) -> int
        Parameters:
           NId: int const & value
           NbrNIdV: TIntV const & value

           NId: int const & value
           NbrNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int NIdVId) -> int
        Parameters:
           self: TUNGraph * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

        """
        return _snap.TUNGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TUNGraph * value
           NodeI: TUNGraph::TNode const & value

           NodeI: TUNGraph::TNode const & value

        """
        return _snap.TUNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TUNGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TUNGraph_IsNode(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TUNGraph const * value




        """
        return _snap.TUNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TUNGraph const * value




        """
        return _snap.TUNGraph_GetEdges(self)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TUNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TUNGraph_AddEdgeUnchecked(self, *args)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TUNGraph * value
           EdgeI: TUNGraph::TEdgeI const & value

           EdgeI: TUNGraph::TEdgeI const & value

        """
        return _snap.TUNGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TUNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TUNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TUNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TUNGraph_IsEdge(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TUNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TUNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TUNGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TUNGraph_GetNIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TUNGraph const * value




        """
        return _snap.TUNGraph_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TUNGraph * value




        """
        return _snap.TUNGraph_Clr(self)

    def SortNodeAdjV(self):
        """
        SortNodeAdjV(self)
        Parameters:
           self: TUNGraph * value




        """
        return _snap.TUNGraph_SortNodeAdjV(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TUNGraph * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TUNGraph_Reserve(self, *args)

    def ReserveNIdDeg(self, *args):
        """
        ReserveNIdDeg(self, int NId, int Deg)
        Parameters:
           self: TUNGraph * value
           NId: int const & value
           Deg: int const & value

           NId: int const & value
           Deg: int const & value

        """
        return _snap.TUNGraph_ReserveNIdDeg(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TUNGraph const * value


        """
        return _snap.TUNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TUNGraph const * value


        """
        return _snap.TUNGraph_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PUNGraph"""
        return _snap.TUNGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TUNGraphNodeI
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TUNGraphNodeI
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TUNGraphNodeI
        Parameters:
           self: TUNGraph * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TUNGraph_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TUNGraphEdgeI
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TUNGraphEdgeI
        Parameters:
           self: TUNGraph * value


        """
        return _snap.TUNGraph_EndEI(self, *args)

    __swig_destroy__ = _snap.delete_TUNGraph
TUNGraph.Save = new_instancemethod(_snap.TUNGraph_Save,None,TUNGraph)
TUNGraph.HasFlag = new_instancemethod(_snap.TUNGraph_HasFlag,None,TUNGraph)
TUNGraph.GetNodes = new_instancemethod(_snap.TUNGraph_GetNodes,None,TUNGraph)
TUNGraph.AddNodeUnchecked = new_instancemethod(_snap.TUNGraph_AddNodeUnchecked,None,TUNGraph)
TUNGraph.AddNode = new_instancemethod(_snap.TUNGraph_AddNode,None,TUNGraph)
TUNGraph.DelNode = new_instancemethod(_snap.TUNGraph_DelNode,None,TUNGraph)
TUNGraph.IsNode = new_instancemethod(_snap.TUNGraph_IsNode,None,TUNGraph)
TUNGraph.GetMxNId = new_instancemethod(_snap.TUNGraph_GetMxNId,None,TUNGraph)
TUNGraph.GetEdges = new_instancemethod(_snap.TUNGraph_GetEdges,None,TUNGraph)
TUNGraph.AddEdgeUnchecked = new_instancemethod(_snap.TUNGraph_AddEdgeUnchecked,None,TUNGraph)
TUNGraph.AddEdge = new_instancemethod(_snap.TUNGraph_AddEdge,None,TUNGraph)
TUNGraph.DelEdge = new_instancemethod(_snap.TUNGraph_DelEdge,None,TUNGraph)
TUNGraph.IsEdge = new_instancemethod(_snap.TUNGraph_IsEdge,None,TUNGraph)
TUNGraph.GetEI = new_instancemethod(_snap.TUNGraph_GetEI,None,TUNGraph)
TUNGraph.GetRndNId = new_instancemethod(_snap.TUNGraph_GetRndNId,None,TUNGraph)
TUNGraph.GetRndNI = new_instancemethod(_snap.TUNGraph_GetRndNI,None,TUNGraph)
TUNGraph.GetNIdV = new_instancemethod(_snap.TUNGraph_GetNIdV,None,TUNGraph)
TUNGraph.Empty = new_instancemethod(_snap.TUNGraph_Empty,None,TUNGraph)
TUNGraph.Clr = new_instancemethod(_snap.TUNGraph_Clr,None,TUNGraph)
TUNGraph.SortNodeAdjV = new_instancemethod(_snap.TUNGraph_SortNodeAdjV,None,TUNGraph)
TUNGraph.Reserve = new_instancemethod(_snap.TUNGraph_Reserve,None,TUNGraph)
TUNGraph.ReserveNIdDeg = new_instancemethod(_snap.TUNGraph_ReserveNIdDeg,None,TUNGraph)
TUNGraph.Defrag = new_instancemethod(_snap.TUNGraph_Defrag,None,TUNGraph)
TUNGraph.IsOk = new_instancemethod(_snap.TUNGraph_IsOk,None,TUNGraph)
TUNGraph.Dump = new_instancemethod(_snap.TUNGraph_Dump,None,TUNGraph)
TUNGraph.BegNI = new_instancemethod(_snap.TUNGraph_BegNI,None,TUNGraph)
TUNGraph.EndNI = new_instancemethod(_snap.TUNGraph_EndNI,None,TUNGraph)
TUNGraph.GetNI = new_instancemethod(_snap.TUNGraph_GetNI,None,TUNGraph)
TUNGraph.BegEI = new_instancemethod(_snap.TUNGraph_BegEI,None,TUNGraph)
TUNGraph.EndEI = new_instancemethod(_snap.TUNGraph_EndEI,None,TUNGraph)
TUNGraph_swigregister = _snap.TUNGraph_swigregister
TUNGraph_swigregister(TUNGraph)

def TUNGraph_New(*args):
  """
    New() -> PUNGraph
    TUNGraph_New(int Nodes, int Edges) -> PUNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TUNGraph_New(*args)

def TUNGraph_Load(*args):
  """
    TUNGraph_Load(TSIn SIn) -> PUNGraph
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TUNGraph_Load(*args)

def TUNGraph_GetSmallGraph():
  """TUNGraph_GetSmallGraph() -> PUNGraph"""
  return _snap.TUNGraph_GetSmallGraph()

class TNGraph(object):
    """Proxy of C++ TNGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNGraph
        __init__(self, int Nodes, int Edges) -> TNGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TNGraph Graph) -> TNGraph
        Parameters:
           Graph: TNGraph const & value

           Graph: TNGraph const & value

        __init__(self, TSIn SIn) -> TNGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TNGraph_swiginit(self,_snap.new_TNGraph(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TNGraph const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TNGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PNGraph
        New(int Nodes, int Edges) -> PNGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TNGraph_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNGraph const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNGraph const * value




        """
        return _snap.TNGraph_GetNodes(self)

    def AddNodeUnchecked(self, *args):
        """
        AddNodeUnchecked(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNodeUnchecked(self) -> int
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_AddNodeUnchecked(self, *args)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           NodeId: TNGraph::TNodeI const & value

           NodeId: TNGraph::TNodeI const & value

        AddNode(self, int NId, TIntV InNIdV, TIntV OutNIdV) -> int
        Parameters:
           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int SrcVId, int DstVId) -> int
        Parameters:
           self: TNGraph * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

        """
        return _snap.TNGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TNGraph * value
           NodeI: TNGraph::TNode const & value

           NodeI: TNGraph::TNode const & value

        """
        return _snap.TNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraph_IsNode(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNGraph const * value




        """
        return _snap.TNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNGraph const * value




        """
        return _snap.TNGraph_GetEdges(self)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraph_AddEdgeUnchecked(self, *args)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNGraph * value
           EdgeI: TNGraph::TEdgeI const & value

           EdgeI: TNGraph::TEdgeI const & value

        """
        return _snap.TNGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraph_IsEdge(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TNGraph_GetNIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TNGraph const * value




        """
        return _snap.TNGraph_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TNGraph * value




        """
        return _snap.TNGraph_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNGraph * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNGraph_Reserve(self, *args)

    def ReserveNIdInDeg(self, *args):
        """
        ReserveNIdInDeg(self, int NId, int InDeg)
        Parameters:
           self: TNGraph * value
           NId: int const & value
           InDeg: int const & value

           NId: int const & value
           InDeg: int const & value

        """
        return _snap.TNGraph_ReserveNIdInDeg(self, *args)

    def ReserveNIdOutDeg(self, *args):
        """
        ReserveNIdOutDeg(self, int NId, int OutDeg)
        Parameters:
           self: TNGraph * value
           NId: int const & value
           OutDeg: int const & value

           NId: int const & value
           OutDeg: int const & value

        """
        return _snap.TNGraph_ReserveNIdOutDeg(self, *args)

    def SortNodeAdjV(self):
        """
        SortNodeAdjV(self)
        Parameters:
           self: TNGraph * value




        """
        return _snap.TNGraph_SortNodeAdjV(self)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNGraph const * value


        """
        return _snap.TNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNGraph const * value


        """
        return _snap.TNGraph_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PNGraph"""
        return _snap.TNGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNGraphNodeI
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNGraphNodeI
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNGraphNodeI
        Parameters:
           self: TNGraph * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraph_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNGraphEdgeI
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNGraphEdgeI
        Parameters:
           self: TNGraph * value


        """
        return _snap.TNGraph_EndEI(self, *args)

    __swig_destroy__ = _snap.delete_TNGraph
TNGraph.Save = new_instancemethod(_snap.TNGraph_Save,None,TNGraph)
TNGraph.HasFlag = new_instancemethod(_snap.TNGraph_HasFlag,None,TNGraph)
TNGraph.GetNodes = new_instancemethod(_snap.TNGraph_GetNodes,None,TNGraph)
TNGraph.AddNodeUnchecked = new_instancemethod(_snap.TNGraph_AddNodeUnchecked,None,TNGraph)
TNGraph.AddNode = new_instancemethod(_snap.TNGraph_AddNode,None,TNGraph)
TNGraph.DelNode = new_instancemethod(_snap.TNGraph_DelNode,None,TNGraph)
TNGraph.IsNode = new_instancemethod(_snap.TNGraph_IsNode,None,TNGraph)
TNGraph.GetMxNId = new_instancemethod(_snap.TNGraph_GetMxNId,None,TNGraph)
TNGraph.GetEdges = new_instancemethod(_snap.TNGraph_GetEdges,None,TNGraph)
TNGraph.AddEdgeUnchecked = new_instancemethod(_snap.TNGraph_AddEdgeUnchecked,None,TNGraph)
TNGraph.AddEdge = new_instancemethod(_snap.TNGraph_AddEdge,None,TNGraph)
TNGraph.DelEdge = new_instancemethod(_snap.TNGraph_DelEdge,None,TNGraph)
TNGraph.IsEdge = new_instancemethod(_snap.TNGraph_IsEdge,None,TNGraph)
TNGraph.GetEI = new_instancemethod(_snap.TNGraph_GetEI,None,TNGraph)
TNGraph.GetRndNId = new_instancemethod(_snap.TNGraph_GetRndNId,None,TNGraph)
TNGraph.GetRndNI = new_instancemethod(_snap.TNGraph_GetRndNI,None,TNGraph)
TNGraph.GetNIdV = new_instancemethod(_snap.TNGraph_GetNIdV,None,TNGraph)
TNGraph.Empty = new_instancemethod(_snap.TNGraph_Empty,None,TNGraph)
TNGraph.Clr = new_instancemethod(_snap.TNGraph_Clr,None,TNGraph)
TNGraph.Reserve = new_instancemethod(_snap.TNGraph_Reserve,None,TNGraph)
TNGraph.ReserveNIdInDeg = new_instancemethod(_snap.TNGraph_ReserveNIdInDeg,None,TNGraph)
TNGraph.ReserveNIdOutDeg = new_instancemethod(_snap.TNGraph_ReserveNIdOutDeg,None,TNGraph)
TNGraph.SortNodeAdjV = new_instancemethod(_snap.TNGraph_SortNodeAdjV,None,TNGraph)
TNGraph.Defrag = new_instancemethod(_snap.TNGraph_Defrag,None,TNGraph)
TNGraph.IsOk = new_instancemethod(_snap.TNGraph_IsOk,None,TNGraph)
TNGraph.Dump = new_instancemethod(_snap.TNGraph_Dump,None,TNGraph)
TNGraph.BegNI = new_instancemethod(_snap.TNGraph_BegNI,None,TNGraph)
TNGraph.EndNI = new_instancemethod(_snap.TNGraph_EndNI,None,TNGraph)
TNGraph.GetNI = new_instancemethod(_snap.TNGraph_GetNI,None,TNGraph)
TNGraph.BegEI = new_instancemethod(_snap.TNGraph_BegEI,None,TNGraph)
TNGraph.EndEI = new_instancemethod(_snap.TNGraph_EndEI,None,TNGraph)
TNGraph_swigregister = _snap.TNGraph_swigregister
TNGraph_swigregister(TNGraph)

def TNGraph_New(*args):
  """
    New() -> PNGraph
    TNGraph_New(int Nodes, int Edges) -> PNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TNGraph_New(*args)

def TNGraph_Load(*args):
  """
    TNGraph_Load(TSIn SIn) -> PNGraph
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TNGraph_Load(*args)

def TNGraph_GetSmallGraph():
  """TNGraph_GetSmallGraph() -> PNGraph"""
  return _snap.TNGraph_GetSmallGraph()

class TNEGraph(object):
    """Proxy of C++ TNEGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEGraph
        __init__(self, int Nodes, int Edges) -> TNEGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TNEGraph Graph) -> TNEGraph
        Parameters:
           Graph: TNEGraph const & value

           Graph: TNEGraph const & value

        __init__(self, TSIn SIn) -> TNEGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TNEGraph_swiginit(self,_snap.new_TNEGraph(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TNEGraph const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TNEGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PNEGraph
        New(int Nodes, int Edges) -> PNEGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNEGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNEGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TNEGraph_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNEGraph const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TNEGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           self: TNEGraph * value
           NodeId: TNEGraph::TNodeI const & value

           NodeId: TNEGraph::TNodeI const & value

        """
        return _snap.TNEGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TNEGraph * value
           NodeI: TNEGraph::TNode const & value

           NodeI: TNEGraph::TNode const & value

        """
        return _snap.TNEGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNEGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEGraph_IsNode(self, *args)

    def BegNI(self):
        """
        BegNI(self) -> TNodeI
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_BegNI(self)

    def EndNI(self):
        """
        EndNI(self) -> TNodeI
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_EndNI(self)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           self: TNEGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEGraph_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId, int EId = -1) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNEGraph * value
           EdgeI: TNEGraph::TEdgeI const & value

           EdgeI: TNEGraph::TEdgeI const & value

        """
        return _snap.TNEGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int EId)
        Parameters:
           EId: int const & value

           EId: int const & value

        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TNEGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int EId) -> bool
        Parameters:
           EId: int const & value

           EId: int const & value

        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        IsEdge(self, int SrcNId, int DstNId, int EId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId, int EId) -> bool
        Parameters:
           self: TNEGraph const * value
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

        """
        return _snap.TNEGraph_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNEGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEGraph_GetEId(self, *args)

    def BegEI(self):
        """
        BegEI(self) -> TEdgeI
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_BegEI(self)

    def EndEI(self):
        """
        EndEI(self) -> TEdgeI
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_EndEI(self)

    def GetEI(self, *args):
        """
        GetEI(self, int EId) -> TEdgeI
        Parameters:
           EId: int const & value

           EId: int const & value

        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNEGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNEGraph * value


        """
        return _snap.TNEGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNEGraph * value


        """
        return _snap.TNEGraph_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEId(self) -> int
        Parameters:
           self: TNEGraph * value


        """
        return _snap.TNEGraph_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(self, TRnd Rnd = Rnd) -> TEdgeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEI(self) -> TEdgeI
        Parameters:
           self: TNEGraph * value


        """
        return _snap.TNEGraph_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNEGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TNEGraph_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(self, TIntV EIdV)
        Parameters:
           self: TNEGraph const * value
           EIdV: TIntV & value

           EIdV: TIntV & value

        """
        return _snap.TNEGraph_GetEIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TNEGraph const * value




        """
        return _snap.TNEGraph_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TNEGraph * value




        """
        return _snap.TNEGraph_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNEGraph * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNEGraph_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNEGraph * value


        """
        return _snap.TNEGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNEGraph const * value


        """
        return _snap.TNEGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNEGraph const * value


        """
        return _snap.TNEGraph_Dump(self, *args)

    __swig_destroy__ = _snap.delete_TNEGraph
TNEGraph.Save = new_instancemethod(_snap.TNEGraph_Save,None,TNEGraph)
TNEGraph.HasFlag = new_instancemethod(_snap.TNEGraph_HasFlag,None,TNEGraph)
TNEGraph.GetNodes = new_instancemethod(_snap.TNEGraph_GetNodes,None,TNEGraph)
TNEGraph.AddNode = new_instancemethod(_snap.TNEGraph_AddNode,None,TNEGraph)
TNEGraph.DelNode = new_instancemethod(_snap.TNEGraph_DelNode,None,TNEGraph)
TNEGraph.IsNode = new_instancemethod(_snap.TNEGraph_IsNode,None,TNEGraph)
TNEGraph.BegNI = new_instancemethod(_snap.TNEGraph_BegNI,None,TNEGraph)
TNEGraph.EndNI = new_instancemethod(_snap.TNEGraph_EndNI,None,TNEGraph)
TNEGraph.GetNI = new_instancemethod(_snap.TNEGraph_GetNI,None,TNEGraph)
TNEGraph.GetMxNId = new_instancemethod(_snap.TNEGraph_GetMxNId,None,TNEGraph)
TNEGraph.GetEdges = new_instancemethod(_snap.TNEGraph_GetEdges,None,TNEGraph)
TNEGraph.AddEdge = new_instancemethod(_snap.TNEGraph_AddEdge,None,TNEGraph)
TNEGraph.DelEdge = new_instancemethod(_snap.TNEGraph_DelEdge,None,TNEGraph)
TNEGraph.IsEdge = new_instancemethod(_snap.TNEGraph_IsEdge,None,TNEGraph)
TNEGraph.GetEId = new_instancemethod(_snap.TNEGraph_GetEId,None,TNEGraph)
TNEGraph.BegEI = new_instancemethod(_snap.TNEGraph_BegEI,None,TNEGraph)
TNEGraph.EndEI = new_instancemethod(_snap.TNEGraph_EndEI,None,TNEGraph)
TNEGraph.GetEI = new_instancemethod(_snap.TNEGraph_GetEI,None,TNEGraph)
TNEGraph.GetRndNId = new_instancemethod(_snap.TNEGraph_GetRndNId,None,TNEGraph)
TNEGraph.GetRndNI = new_instancemethod(_snap.TNEGraph_GetRndNI,None,TNEGraph)
TNEGraph.GetRndEId = new_instancemethod(_snap.TNEGraph_GetRndEId,None,TNEGraph)
TNEGraph.GetRndEI = new_instancemethod(_snap.TNEGraph_GetRndEI,None,TNEGraph)
TNEGraph.GetNIdV = new_instancemethod(_snap.TNEGraph_GetNIdV,None,TNEGraph)
TNEGraph.GetEIdV = new_instancemethod(_snap.TNEGraph_GetEIdV,None,TNEGraph)
TNEGraph.Empty = new_instancemethod(_snap.TNEGraph_Empty,None,TNEGraph)
TNEGraph.Clr = new_instancemethod(_snap.TNEGraph_Clr,None,TNEGraph)
TNEGraph.Reserve = new_instancemethod(_snap.TNEGraph_Reserve,None,TNEGraph)
TNEGraph.Defrag = new_instancemethod(_snap.TNEGraph_Defrag,None,TNEGraph)
TNEGraph.IsOk = new_instancemethod(_snap.TNEGraph_IsOk,None,TNEGraph)
TNEGraph.Dump = new_instancemethod(_snap.TNEGraph_Dump,None,TNEGraph)
TNEGraph_swigregister = _snap.TNEGraph_swigregister
TNEGraph_swigregister(TNEGraph)

def TNEGraph_New(*args):
  """
    New() -> PNEGraph
    TNEGraph_New(int Nodes, int Edges) -> PNEGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TNEGraph_New(*args)

def TNEGraph_Load(*args):
  """
    TNEGraph_Load(TSIn SIn) -> PNEGraph
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TNEGraph_Load(*args)

class TBPGraph(object):
    """Proxy of C++ TBPGraph class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bgsUndef = _snap.TBPGraph_bgsUndef
    bgsLeft = _snap.TBPGraph_bgsLeft
    bgsRight = _snap.TBPGraph_bgsRight
    bgsBoth = _snap.TBPGraph_bgsBoth
    def __init__(self, *args): 
        """
        __init__(self) -> TBPGraph
        __init__(self, int Nodes, int Edges) -> TBPGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TBPGraph BPGraph) -> TBPGraph
        Parameters:
           BPGraph: TBPGraph const & value

           BPGraph: TBPGraph const & value

        __init__(self, TSIn SIn) -> TBPGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TBPGraph_swiginit(self,_snap.new_TBPGraph(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TBPGraph const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TBPGraph_Save(self, *args)

    def New(*args):
        """
        New() -> PBPGraph
        New(int Nodes, int Edges) -> PBPGraph
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TBPGraph_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PBPGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TBPGraph_Load(*args)

    Load = staticmethod(Load)
    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_GetNodes(self)

    def GetLNodes(self):
        """
        GetLNodes(self) -> int
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_GetLNodes(self)

    def GetRNodes(self):
        """
        GetRNodes(self) -> int
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_GetRNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1, bool LeftNode = True) -> int
        Parameters:
           NId: int value
           LeftNode: bool const & value

           NId: int value
           LeftNode: bool const & value

        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeI) -> int
        Parameters:
           self: TBPGraph * value
           NodeI: TBPGraph::TNodeI const & value

           NodeI: TBPGraph::TNodeI const & value

        """
        return _snap.TBPGraph_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TBPGraph * value
           NodeI: TBPGraph::TNode const & value

           NodeI: TBPGraph::TNode const & value

        """
        return _snap.TBPGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TBPGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TBPGraph_IsNode(self, *args)

    def IsLNode(self, *args):
        """
        IsLNode(self, int NId) -> bool
        Parameters:
           self: TBPGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TBPGraph_IsLNode(self, *args)

    def IsRNode(self, *args):
        """
        IsRNode(self, int NId) -> bool
        Parameters:
           self: TBPGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TBPGraph_IsRNode(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_GetMxNId(self)

    def BegNI(self):
        """
        BegNI(self) -> TNodeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_BegNI(self)

    def EndNI(self):
        """
        EndNI(self) -> TNodeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_EndNI(self)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           self: TBPGraph const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TBPGraph_GetNI(self, *args)

    def BegLNI(self):
        """
        BegLNI(self) -> TNodeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_BegLNI(self)

    def EndLNI(self):
        """
        EndLNI(self) -> TNodeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_EndLNI(self)

    def BegRNI(self):
        """
        BegRNI(self) -> TNodeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_BegRNI(self)

    def EndRNI(self):
        """
        EndRNI(self) -> TNodeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_EndRNI(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int LeftNId, int RightNId) -> int
        Parameters:
           LeftNId: int const & value
           RightNId: int const & value

           LeftNId: int const & value
           RightNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TBPGraph * value
           EdgeI: TBPGraph::TEdgeI const & value

           EdgeI: TBPGraph::TEdgeI const & value

        """
        return _snap.TBPGraph_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int LeftNId, int RightNId)
        Parameters:
           self: TBPGraph * value
           LeftNId: int const & value
           RightNId: int const & value

           LeftNId: int const & value
           RightNId: int const & value

        """
        return _snap.TBPGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int LeftNId, int RightNId) -> bool
        Parameters:
           self: TBPGraph const * value
           LeftNId: int const & value
           RightNId: int const & value

           LeftNId: int const & value
           RightNId: int const & value

        """
        return _snap.TBPGraph_IsEdge(self, *args)

    def BegEI(self):
        """
        BegEI(self) -> TEdgeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_BegEI(self)

    def EndEI(self):
        """
        EndEI(self) -> TEdgeI
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_EndEI(self)

    def GetEI(self, *args):
        """
        GetEI(self, int LeftNId, int RightNId) -> TEdgeI
        Parameters:
           self: TBPGraph const * value
           LeftNId: int const & value
           RightNId: int const & value

           LeftNId: int const & value
           RightNId: int const & value

        """
        return _snap.TBPGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TBPGraph * value


        """
        return _snap.TBPGraph_GetRndNId(self, *args)

    def GetRndLNId(self, *args):
        """
        GetRndLNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndLNId(self) -> int
        Parameters:
           self: TBPGraph * value


        """
        return _snap.TBPGraph_GetRndLNId(self, *args)

    def GetRndRNId(self, *args):
        """
        GetRndRNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndRNId(self) -> int
        Parameters:
           self: TBPGraph * value


        """
        return _snap.TBPGraph_GetRndRNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TBPGraph * value


        """
        return _snap.TBPGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TBPGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TBPGraph_GetNIdV(self, *args)

    def GetLNIdV(self, *args):
        """
        GetLNIdV(self, TIntV NIdV)
        Parameters:
           self: TBPGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TBPGraph_GetLNIdV(self, *args)

    def GetRNIdV(self, *args):
        """
        GetRNIdV(self, TIntV NIdV)
        Parameters:
           self: TBPGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TBPGraph_GetRNIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TBPGraph const * value




        """
        return _snap.TBPGraph_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TBPGraph * value




        """
        return _snap.TBPGraph_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TBPGraph * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TBPGraph_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TBPGraph * value


        """
        return _snap.TBPGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TBPGraph const * value


        """
        return _snap.TBPGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TBPGraph const * value


        """
        return _snap.TBPGraph_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PBPGraph"""
        return _snap.TBPGraph_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    __swig_destroy__ = _snap.delete_TBPGraph
TBPGraph.Save = new_instancemethod(_snap.TBPGraph_Save,None,TBPGraph)
TBPGraph.GetNodes = new_instancemethod(_snap.TBPGraph_GetNodes,None,TBPGraph)
TBPGraph.GetLNodes = new_instancemethod(_snap.TBPGraph_GetLNodes,None,TBPGraph)
TBPGraph.GetRNodes = new_instancemethod(_snap.TBPGraph_GetRNodes,None,TBPGraph)
TBPGraph.AddNode = new_instancemethod(_snap.TBPGraph_AddNode,None,TBPGraph)
TBPGraph.DelNode = new_instancemethod(_snap.TBPGraph_DelNode,None,TBPGraph)
TBPGraph.IsNode = new_instancemethod(_snap.TBPGraph_IsNode,None,TBPGraph)
TBPGraph.IsLNode = new_instancemethod(_snap.TBPGraph_IsLNode,None,TBPGraph)
TBPGraph.IsRNode = new_instancemethod(_snap.TBPGraph_IsRNode,None,TBPGraph)
TBPGraph.GetMxNId = new_instancemethod(_snap.TBPGraph_GetMxNId,None,TBPGraph)
TBPGraph.BegNI = new_instancemethod(_snap.TBPGraph_BegNI,None,TBPGraph)
TBPGraph.EndNI = new_instancemethod(_snap.TBPGraph_EndNI,None,TBPGraph)
TBPGraph.GetNI = new_instancemethod(_snap.TBPGraph_GetNI,None,TBPGraph)
TBPGraph.BegLNI = new_instancemethod(_snap.TBPGraph_BegLNI,None,TBPGraph)
TBPGraph.EndLNI = new_instancemethod(_snap.TBPGraph_EndLNI,None,TBPGraph)
TBPGraph.BegRNI = new_instancemethod(_snap.TBPGraph_BegRNI,None,TBPGraph)
TBPGraph.EndRNI = new_instancemethod(_snap.TBPGraph_EndRNI,None,TBPGraph)
TBPGraph.GetEdges = new_instancemethod(_snap.TBPGraph_GetEdges,None,TBPGraph)
TBPGraph.AddEdge = new_instancemethod(_snap.TBPGraph_AddEdge,None,TBPGraph)
TBPGraph.DelEdge = new_instancemethod(_snap.TBPGraph_DelEdge,None,TBPGraph)
TBPGraph.IsEdge = new_instancemethod(_snap.TBPGraph_IsEdge,None,TBPGraph)
TBPGraph.BegEI = new_instancemethod(_snap.TBPGraph_BegEI,None,TBPGraph)
TBPGraph.EndEI = new_instancemethod(_snap.TBPGraph_EndEI,None,TBPGraph)
TBPGraph.GetEI = new_instancemethod(_snap.TBPGraph_GetEI,None,TBPGraph)
TBPGraph.GetRndNId = new_instancemethod(_snap.TBPGraph_GetRndNId,None,TBPGraph)
TBPGraph.GetRndLNId = new_instancemethod(_snap.TBPGraph_GetRndLNId,None,TBPGraph)
TBPGraph.GetRndRNId = new_instancemethod(_snap.TBPGraph_GetRndRNId,None,TBPGraph)
TBPGraph.GetRndNI = new_instancemethod(_snap.TBPGraph_GetRndNI,None,TBPGraph)
TBPGraph.GetNIdV = new_instancemethod(_snap.TBPGraph_GetNIdV,None,TBPGraph)
TBPGraph.GetLNIdV = new_instancemethod(_snap.TBPGraph_GetLNIdV,None,TBPGraph)
TBPGraph.GetRNIdV = new_instancemethod(_snap.TBPGraph_GetRNIdV,None,TBPGraph)
TBPGraph.Empty = new_instancemethod(_snap.TBPGraph_Empty,None,TBPGraph)
TBPGraph.Clr = new_instancemethod(_snap.TBPGraph_Clr,None,TBPGraph)
TBPGraph.Reserve = new_instancemethod(_snap.TBPGraph_Reserve,None,TBPGraph)
TBPGraph.Defrag = new_instancemethod(_snap.TBPGraph_Defrag,None,TBPGraph)
TBPGraph.IsOk = new_instancemethod(_snap.TBPGraph_IsOk,None,TBPGraph)
TBPGraph.Dump = new_instancemethod(_snap.TBPGraph_Dump,None,TBPGraph)
TBPGraph_swigregister = _snap.TBPGraph_swigregister
TBPGraph_swigregister(TBPGraph)

def TBPGraph_New(*args):
  """
    New() -> PBPGraph
    TBPGraph_New(int Nodes, int Edges) -> PBPGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TBPGraph_New(*args)

def TBPGraph_Load(*args):
  """
    TBPGraph_Load(TSIn SIn) -> PBPGraph
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TBPGraph_Load(*args)

def TBPGraph_GetSmallGraph():
  """TBPGraph_GetSmallGraph() -> PBPGraph"""
  return _snap.TBPGraph_GetSmallGraph()

class TNGraphMP(object):
    """Proxy of C++ TNGraphMP class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNGraphMP
        __init__(self, int Nodes, int Edges) -> TNGraphMP
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TNGraphMP Graph) -> TNGraphMP
        Parameters:
           Graph: TNGraphMP const & value

           Graph: TNGraphMP const & value

        __init__(self, TSIn SIn) -> TNGraphMP
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TNGraphMP_swiginit(self,_snap.new_TNGraphMP(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TNGraphMP const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TNGraphMP_Save(self, *args)

    def New(*args):
        """
        New() -> PNGraphMP
        New(int Nodes, int Edges) -> PNGraphMP
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNGraphMP_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNGraphMP
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TNGraphMP_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNGraphMP const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TNGraphMP_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNGraphMP const * value




        """
        return _snap.TNGraphMP_GetNodes(self)

    def SetNodes(self, *args):
        """
        SetNodes(self, int Length)
        Parameters:
           self: TNGraphMP * value
           Length: int const & value

           Length: int const & value

        """
        return _snap.TNGraphMP_SetNodes(self, *args)

    def AddNodeUnchecked(self, *args):
        """
        AddNodeUnchecked(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNodeUnchecked(self) -> int
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_AddNodeUnchecked(self, *args)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           NodeId: TNGraphMP::TNodeI const & value

           NodeId: TNGraphMP::TNodeI const & value

        AddNode(self, int NId, TIntV InNIdV, TIntV OutNIdV) -> int
        Parameters:
           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int SrcVId, int DstVId) -> int
        Parameters:
           self: TNGraphMP * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

        """
        return _snap.TNGraphMP_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TNGraphMP * value
           NodeI: TNGraphMP::TNode const & value

           NodeI: TNGraphMP::TNode const & value

        """
        return _snap.TNGraphMP_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNGraphMP const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphMP_IsNode(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNGraphMP const * value




        """
        return _snap.TNGraphMP_GetMxNId(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TNGraphMP const * value




        """
        return _snap.TNGraphMP_Reserved(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNGraphMP const * value




        """
        return _snap.TNGraphMP_GetEdges(self)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_AddEdgeUnchecked(self, *args)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNGraphMP * value
           EdgeI: TNGraphMP::TEdgeI const & value

           EdgeI: TNGraphMP::TEdgeI const & value

        """
        return _snap.TNGraphMP_AddEdge(self, *args)

    def AddOutEdge1(self, *args):
        """
        AddOutEdge1(self, int SrcIdx, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraphMP * value
           SrcIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           SrcIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_AddOutEdge1(self, *args)

    def AddInEdge1(self, *args):
        """
        AddInEdge1(self, int DstIdx, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraphMP * value
           DstIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           DstIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_AddInEdge1(self, *args)

    def AddOutEdge2(self, *args):
        """
        AddOutEdge2(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_AddOutEdge2(self, *args)

    def AddInEdge2(self, *args):
        """
        AddInEdge2(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_AddInEdge2(self, *args)

    def AddNodeWithEdges(self, *args):
        """
        AddNodeWithEdges(self, TInt NId, TIntV InNIdV, TIntV OutNIdV)
        Parameters:
           self: TNGraphMP * value
           NId: TInt const & value
           InNIdV: TIntV & value
           OutNIdV: TIntV & value

           NId: TInt const & value
           InNIdV: TIntV & value
           OutNIdV: TIntV & value

        """
        return _snap.TNGraphMP_AddNodeWithEdges(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TNGraphMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_IsEdge(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNGraphMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNGraphMP_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNGraphMP const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TNGraphMP_GetNIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TNGraphMP const * value




        """
        return _snap.TNGraphMP_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TNGraphMP * value




        """
        return _snap.TNGraphMP_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNGraphMP * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNGraphMP_Reserve(self, *args)

    def ReserveNodeDegs(self, *args):
        """
        ReserveNodeDegs(self, int Idx, int InDeg, int OutDeg)
        Parameters:
           self: TNGraphMP * value
           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

        """
        return _snap.TNGraphMP_ReserveNodeDegs(self, *args)

    def ReserveNIdInDeg(self, *args):
        """
        ReserveNIdInDeg(self, int NId, int InDeg)
        Parameters:
           self: TNGraphMP * value
           NId: int const & value
           InDeg: int const & value

           NId: int const & value
           InDeg: int const & value

        """
        return _snap.TNGraphMP_ReserveNIdInDeg(self, *args)

    def ReserveNIdOutDeg(self, *args):
        """
        ReserveNIdOutDeg(self, int NId, int OutDeg)
        Parameters:
           self: TNGraphMP * value
           NId: int const & value
           OutDeg: int const & value

           NId: int const & value
           OutDeg: int const & value

        """
        return _snap.TNGraphMP_ReserveNIdOutDeg(self, *args)

    def SortEdges(self, *args):
        """
        SortEdges(self, int Idx, int InDeg, int OutDeg)
        Parameters:
           self: TNGraphMP * value
           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

        """
        return _snap.TNGraphMP_SortEdges(self, *args)

    def SortNodeAdjV(self):
        """
        SortNodeAdjV(self)
        Parameters:
           self: TNGraphMP * value




        """
        return _snap.TNGraphMP_SortNodeAdjV(self)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNGraphMP const * value


        """
        return _snap.TNGraphMP_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNGraphMP const * value


        """
        return _snap.TNGraphMP_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PNGraphMP"""
        return _snap.TNGraphMP_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNGraphMPNodeI
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNGraphMPNodeI
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNGraphMPNodeI
        Parameters:
           self: TNGraphMP * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphMP_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNGraphMPEdgeI
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNGraphMPEdgeI
        Parameters:
           self: TNGraphMP * value


        """
        return _snap.TNGraphMP_EndEI(self, *args)

    __swig_destroy__ = _snap.delete_TNGraphMP
TNGraphMP.Save = new_instancemethod(_snap.TNGraphMP_Save,None,TNGraphMP)
TNGraphMP.HasFlag = new_instancemethod(_snap.TNGraphMP_HasFlag,None,TNGraphMP)
TNGraphMP.GetNodes = new_instancemethod(_snap.TNGraphMP_GetNodes,None,TNGraphMP)
TNGraphMP.SetNodes = new_instancemethod(_snap.TNGraphMP_SetNodes,None,TNGraphMP)
TNGraphMP.AddNodeUnchecked = new_instancemethod(_snap.TNGraphMP_AddNodeUnchecked,None,TNGraphMP)
TNGraphMP.AddNode = new_instancemethod(_snap.TNGraphMP_AddNode,None,TNGraphMP)
TNGraphMP.DelNode = new_instancemethod(_snap.TNGraphMP_DelNode,None,TNGraphMP)
TNGraphMP.IsNode = new_instancemethod(_snap.TNGraphMP_IsNode,None,TNGraphMP)
TNGraphMP.GetMxNId = new_instancemethod(_snap.TNGraphMP_GetMxNId,None,TNGraphMP)
TNGraphMP.Reserved = new_instancemethod(_snap.TNGraphMP_Reserved,None,TNGraphMP)
TNGraphMP.GetEdges = new_instancemethod(_snap.TNGraphMP_GetEdges,None,TNGraphMP)
TNGraphMP.AddEdgeUnchecked = new_instancemethod(_snap.TNGraphMP_AddEdgeUnchecked,None,TNGraphMP)
TNGraphMP.AddEdge = new_instancemethod(_snap.TNGraphMP_AddEdge,None,TNGraphMP)
TNGraphMP.AddOutEdge1 = new_instancemethod(_snap.TNGraphMP_AddOutEdge1,None,TNGraphMP)
TNGraphMP.AddInEdge1 = new_instancemethod(_snap.TNGraphMP_AddInEdge1,None,TNGraphMP)
TNGraphMP.AddOutEdge2 = new_instancemethod(_snap.TNGraphMP_AddOutEdge2,None,TNGraphMP)
TNGraphMP.AddInEdge2 = new_instancemethod(_snap.TNGraphMP_AddInEdge2,None,TNGraphMP)
TNGraphMP.AddNodeWithEdges = new_instancemethod(_snap.TNGraphMP_AddNodeWithEdges,None,TNGraphMP)
TNGraphMP.DelEdge = new_instancemethod(_snap.TNGraphMP_DelEdge,None,TNGraphMP)
TNGraphMP.IsEdge = new_instancemethod(_snap.TNGraphMP_IsEdge,None,TNGraphMP)
TNGraphMP.GetEI = new_instancemethod(_snap.TNGraphMP_GetEI,None,TNGraphMP)
TNGraphMP.GetRndNId = new_instancemethod(_snap.TNGraphMP_GetRndNId,None,TNGraphMP)
TNGraphMP.GetRndNI = new_instancemethod(_snap.TNGraphMP_GetRndNI,None,TNGraphMP)
TNGraphMP.GetNIdV = new_instancemethod(_snap.TNGraphMP_GetNIdV,None,TNGraphMP)
TNGraphMP.Empty = new_instancemethod(_snap.TNGraphMP_Empty,None,TNGraphMP)
TNGraphMP.Clr = new_instancemethod(_snap.TNGraphMP_Clr,None,TNGraphMP)
TNGraphMP.Reserve = new_instancemethod(_snap.TNGraphMP_Reserve,None,TNGraphMP)
TNGraphMP.ReserveNodeDegs = new_instancemethod(_snap.TNGraphMP_ReserveNodeDegs,None,TNGraphMP)
TNGraphMP.ReserveNIdInDeg = new_instancemethod(_snap.TNGraphMP_ReserveNIdInDeg,None,TNGraphMP)
TNGraphMP.ReserveNIdOutDeg = new_instancemethod(_snap.TNGraphMP_ReserveNIdOutDeg,None,TNGraphMP)
TNGraphMP.SortEdges = new_instancemethod(_snap.TNGraphMP_SortEdges,None,TNGraphMP)
TNGraphMP.SortNodeAdjV = new_instancemethod(_snap.TNGraphMP_SortNodeAdjV,None,TNGraphMP)
TNGraphMP.Defrag = new_instancemethod(_snap.TNGraphMP_Defrag,None,TNGraphMP)
TNGraphMP.IsOk = new_instancemethod(_snap.TNGraphMP_IsOk,None,TNGraphMP)
TNGraphMP.Dump = new_instancemethod(_snap.TNGraphMP_Dump,None,TNGraphMP)
TNGraphMP.BegNI = new_instancemethod(_snap.TNGraphMP_BegNI,None,TNGraphMP)
TNGraphMP.EndNI = new_instancemethod(_snap.TNGraphMP_EndNI,None,TNGraphMP)
TNGraphMP.GetNI = new_instancemethod(_snap.TNGraphMP_GetNI,None,TNGraphMP)
TNGraphMP.BegEI = new_instancemethod(_snap.TNGraphMP_BegEI,None,TNGraphMP)
TNGraphMP.EndEI = new_instancemethod(_snap.TNGraphMP_EndEI,None,TNGraphMP)
TNGraphMP_swigregister = _snap.TNGraphMP_swigregister
TNGraphMP_swigregister(TNGraphMP)

def TNGraphMP_New(*args):
  """
    New() -> PNGraphMP
    TNGraphMP_New(int Nodes, int Edges) -> PNGraphMP
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TNGraphMP_New(*args)

def TNGraphMP_Load(*args):
  """
    TNGraphMP_Load(TSIn SIn) -> PNGraphMP
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TNGraphMP_Load(*args)

def TNGraphMP_GetSmallGraph():
  """TNGraphMP_GetSmallGraph() -> PNGraphMP"""
  return _snap.TNGraphMP_GetSmallGraph()

class TNEANet(object):
    """Proxy of C++ TNEANet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANet
        __init__(self, int Nodes, int Edges) -> TNEANet
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TNEANet Graph) -> TNEANet
        Parameters:
           Graph: TNEANet const & value

           Graph: TNEANet const & value

        __init__(self, TSIn SIn) -> TNEANet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TNEANet_swiginit(self,_snap.new_TNEANet(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TNEANet const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TNEANet_Save(self, *args)

    def Save_V1(self, *args):
        """
        Save_V1(self, TSOut SOut)
        Parameters:
           self: TNEANet const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TNEANet_Save_V1(self, *args)

    def New(*args):
        """
        New() -> PNEANet
        New(int Nodes, int Edges) -> PNEANet
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNEANet_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNEANet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TNEANet_Load(*args)

    Load = staticmethod(Load)
    def Load_V1(*args):
        """
        Load_V1(TSIn SIn) -> PNEANet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TNEANet_Load_V1(*args)

    Load_V1 = staticmethod(Load_V1)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNEANet const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TNEANet_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNEANet const * value




        """
        return _snap.TNEANet_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeI) -> int
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNodeI const & value

           NodeI: TNEANet::TNodeI const & value

        """
        return _snap.TNEANet_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNode const & value

           NodeI: TNEANet::TNode const & value

        """
        return _snap.TNEANet_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANet_IsNode(self, *args)

    def GetNAIntI(self, *args):
        """
        GetNAIntI(self, TStr attr, int NId) -> TAIntI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.TNEANet_GetNAIntI(self, *args)

    def GetNAStrI(self, *args):
        """
        GetNAStrI(self, TStr attr, int NId) -> TAStrI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.TNEANet_GetNAStrI(self, *args)

    def GetNAFltI(self, *args):
        """
        GetNAFltI(self, TStr attr, int NId) -> TAFltI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.TNEANet_GetNAFltI(self, *args)

    def AttrNameNI(self, *args):
        """
        AttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        AttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_AttrNameNI(self, *args)

    def AttrValueNI(self, *args):
        """
        AttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        AttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANet_AttrValueNI(self, *args)

    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        IntAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_IntAttrNameNI(self, *args)

    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(self, TInt NId, TIntV Values)
        Parameters:
           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

        IntAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TIntV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.TNEANet_IntAttrValueNI(self, *args)

    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        StrAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_StrAttrNameNI(self, *args)

    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        StrAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANet_StrAttrValueNI(self, *args)

    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        FltAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_FltAttrNameNI(self, *args)

    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(self, TInt NId, TFltV Values)
        Parameters:
           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

        FltAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TFltV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.TNEANet_FltAttrValueNI(self, *args)

    def AttrNameEI(self, *args):
        """
        AttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        AttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_AttrNameEI(self, *args)

    def AttrValueEI(self, *args):
        """
        AttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        AttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANet_AttrValueEI(self, *args)

    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        IntAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_IntAttrNameEI(self, *args)

    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(self, TInt EId, TIntV Values)
        Parameters:
           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

        IntAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TIntV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.TNEANet_IntAttrValueEI(self, *args)

    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        StrAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_StrAttrNameEI(self, *args)

    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        StrAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANet_StrAttrValueEI(self, *args)

    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        FltAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANet_FltAttrNameEI(self, *args)

    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(self, TInt EId, TFltV Values)
        Parameters:
           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

        FltAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TFltV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.TNEANet_FltAttrValueEI(self, *args)

    def GetEAIntI(self, *args):
        """
        GetEAIntI(self, TStr attr, int EId) -> TAIntI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.TNEANet_GetEAIntI(self, *args)

    def GetEAStrI(self, *args):
        """
        GetEAStrI(self, TStr attr, int EId) -> TAStrI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.TNEANet_GetEAStrI(self, *args)

    def GetEAFltI(self, *args):
        """
        GetEAFltI(self, TStr attr, int EId) -> TAFltI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.TNEANet_GetEAFltI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNEANet const * value




        """
        return _snap.TNEANet_GetMxNId(self)

    def GetMxEId(self):
        """
        GetMxEId(self) -> int
        Parameters:
           self: TNEANet const * value




        """
        return _snap.TNEANet_GetMxEId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNEANet const * value




        """
        return _snap.TNEANet_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId, int EId = -1) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNEANet * value
           EdgeI: TNEANet::TEdgeI const & value

           EdgeI: TNEANet::TEdgeI const & value

        """
        return _snap.TNEANet_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int EId)
        Parameters:
           EId: int const & value

           EId: int const & value

        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TNEANet * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEANet_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int EId) -> bool
        Parameters:
           EId: int const & value

           EId: int const & value

        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        IsEdge(self, int SrcNId, int DstNId, int EId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId, int EId) -> bool
        Parameters:
           self: TNEANet const * value
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

        """
        return _snap.TNEANet_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNEANet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEANet_GetEId(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNEANet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEANet_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEId(self) -> int
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(self, TRnd Rnd = Rnd) -> TEdgeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEI(self) -> TEdgeI
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNEANet const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TNEANet_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(self, TIntV EIdV)
        Parameters:
           self: TNEANet const * value
           EIdV: TIntV & value

           EIdV: TIntV & value

        """
        return _snap.TNEANet_GetEIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TNEANet const * value




        """
        return _snap.TNEANet_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TNEANet * value




        """
        return _snap.TNEANet_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNEANet * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNEANet_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNEANet const * value


        """
        return _snap.TNEANet_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNEANet const * value


        """
        return _snap.TNEANet_Dump(self, *args)

    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(self, TNodeI NodeI, TInt value, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatN(self, int NId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_AddIntAttrDatN(self, *args)

    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(self, TNodeI NodeI, TStr value, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatN(self, int NId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_AddStrAttrDatN(self, *args)

    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(self, TNodeI NodeI, TFlt value, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatN(self, int NId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_AddFltAttrDatN(self, *args)

    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(self, TEdgeI EdgeI, TInt value, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatE(self, int EId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_AddIntAttrDatE(self, *args)

    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(self, TEdgeI EdgeI, TStr value, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatE(self, int EId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_AddStrAttrDatE(self, *args)

    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(self, TEdgeI EdgeI, TFlt value, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatE(self, int EId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_AddFltAttrDatE(self, *args)

    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(self, TNodeI NodeI, TStr attr) -> TInt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        GetIntAttrDatN(self, int NId, TStr attr) -> TInt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_GetIntAttrDatN(self, *args)

    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(self, TNodeI NodeI, TStr attr) -> TStr
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        GetStrAttrDatN(self, int NId, TStr attr) -> TStr
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_GetStrAttrDatN(self, *args)

    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(self, TNodeI NodeI, TStr attr) -> TFlt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        GetFltAttrDatN(self, int NId, TStr attr) -> TFlt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_GetFltAttrDatN(self, *args)

    def GetIntAttrIndN(self, *args):
        """
        GetIntAttrIndN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_GetIntAttrIndN(self, *args)

    def GetAttrIndN(self, *args):
        """
        GetAttrIndN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_GetAttrIndN(self, *args)

    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(self, TNodeI NodeI, int index) -> TInt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

        GetIntAttrIndDatN(self, int NId, int index) -> TInt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.TNEANet_GetIntAttrIndDatN(self, *args)

    def GetStrAttrIndDatN(self, *args):
        """
        GetStrAttrIndDatN(self, TNodeI NodeI, int index) -> TStr
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

        GetStrAttrIndDatN(self, int NId, int index) -> TStr
        Parameters:
           self: TNEANet * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.TNEANet_GetStrAttrIndDatN(self, *args)

    def GetFltAttrIndDatN(self, *args):
        """
        GetFltAttrIndDatN(self, TNodeI NodeI, int index) -> TFlt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

        GetFltAttrIndDatN(self, int NId, int index) -> TFlt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.TNEANet_GetFltAttrIndDatN(self, *args)

    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(self, TEdgeI EdgeI, TStr attr) -> TInt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        GetIntAttrDatE(self, int EId, TStr attr) -> TInt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_GetIntAttrDatE(self, *args)

    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(self, TEdgeI EdgeI, TStr attr) -> TStr
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        GetStrAttrDatE(self, int EId, TStr attr) -> TStr
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_GetStrAttrDatE(self, *args)

    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(self, TEdgeI EdgeI, TStr attr) -> TFlt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        GetFltAttrDatE(self, int EId, TStr attr) -> TFlt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_GetFltAttrDatE(self, *args)

    def GetIntAttrIndE(self, *args):
        """
        GetIntAttrIndE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_GetIntAttrIndE(self, *args)

    def GetAttrIndE(self, *args):
        """
        GetAttrIndE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_GetAttrIndE(self, *args)

    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(self, TEdgeI EdgeI, int index) -> TInt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

        GetIntAttrIndDatE(self, int EId, int index) -> TInt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.TNEANet_GetIntAttrIndDatE(self, *args)

    def GetFltAttrIndDatE(self, *args):
        """
        GetFltAttrIndDatE(self, TEdgeI EdgeI, int index) -> TFlt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

        GetFltAttrIndDatE(self, int EId, int index) -> TFlt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.TNEANet_GetFltAttrIndDatE(self, *args)

    def GetStrAttrIndDatE(self, *args):
        """
        GetStrAttrIndDatE(self, TEdgeI EdgeI, int index) -> TStr
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

        GetStrAttrIndDatE(self, int EId, int index) -> TStr
        Parameters:
           self: TNEANet * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.TNEANet_GetStrAttrIndDatE(self, *args)

    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(self, TNodeI NodeI, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        DelAttrDatN(self, int NId, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_DelAttrDatN(self, *args)

    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(self, TEdgeI EdgeI, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        DelAttrDatE(self, int EId, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_DelAttrDatE(self, *args)

    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_AddIntAttrN(self, *args)

    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_AddStrAttrN(self, *args)

    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_AddFltAttrN(self, *args)

    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_AddIntAttrE(self, *args)

    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_AddStrAttrE(self, *args)

    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_AddFltAttrE(self, *args)

    def DelAttrN(self, *args):
        """
        DelAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_DelAttrN(self, *args)

    def DelAttrE(self, *args):
        """
        DelAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_DelAttrE(self, *args)

    def IsAttrDeletedN(self, *args):
        """
        IsAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsAttrDeletedN(self, *args)

    def IsIntAttrDeletedN(self, *args):
        """
        IsIntAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsIntAttrDeletedN(self, *args)

    def IsStrAttrDeletedN(self, *args):
        """
        IsStrAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsStrAttrDeletedN(self, *args)

    def IsFltAttrDeletedN(self, *args):
        """
        IsFltAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsFltAttrDeletedN(self, *args)

    def NodeAttrIsDeleted(self, *args):
        """
        NodeAttrIsDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_NodeAttrIsDeleted(self, *args)

    def NodeAttrIsIntDeleted(self, *args):
        """
        NodeAttrIsIntDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_NodeAttrIsIntDeleted(self, *args)

    def NodeAttrIsStrDeleted(self, *args):
        """
        NodeAttrIsStrDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_NodeAttrIsStrDeleted(self, *args)

    def NodeAttrIsFltDeleted(self, *args):
        """
        NodeAttrIsFltDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_NodeAttrIsFltDeleted(self, *args)

    def IsAttrDeletedE(self, *args):
        """
        IsAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsAttrDeletedE(self, *args)

    def IsIntAttrDeletedE(self, *args):
        """
        IsIntAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsIntAttrDeletedE(self, *args)

    def IsStrAttrDeletedE(self, *args):
        """
        IsStrAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsStrAttrDeletedE(self, *args)

    def IsFltAttrDeletedE(self, *args):
        """
        IsFltAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_IsFltAttrDeletedE(self, *args)

    def EdgeAttrIsDeleted(self, *args):
        """
        EdgeAttrIsDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_EdgeAttrIsDeleted(self, *args)

    def EdgeAttrIsIntDeleted(self, *args):
        """
        EdgeAttrIsIntDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_EdgeAttrIsIntDeleted(self, *args)

    def EdgeAttrIsStrDeleted(self, *args):
        """
        EdgeAttrIsStrDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_EdgeAttrIsStrDeleted(self, *args)

    def EdgeAttrIsFltDeleted(self, *args):
        """
        EdgeAttrIsFltDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_EdgeAttrIsFltDeleted(self, *args)

    def GetNodeAttrValue(self, *args):
        """
        GetNodeAttrValue(self, int NId, TStrIntPrH::TIter NodeHI) -> TStr
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_GetNodeAttrValue(self, *args)

    def GetEdgeAttrValue(self, *args):
        """
        GetEdgeAttrValue(self, int EId, TStrIntPrH::TIter EdgeHI) -> TStr
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANet_GetEdgeAttrValue(self, *args)

    def GetWeightOutEdges(self, *args):
        """
        GetWeightOutEdges(self, TNodeI NI, TStr attr) -> TFlt
        Parameters:
           self: TNEANet * value
           NI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NI: TNEANet::TNodeI const & value
           attr: TStr const & value

        """
        return _snap.TNEANet_GetWeightOutEdges(self, *args)

    def IsFltAttrE(self, *args):
        """
        IsFltAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_IsFltAttrE(self, *args)

    def IsIntAttrE(self, *args):
        """
        IsIntAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_IsIntAttrE(self, *args)

    def IsStrAttrE(self, *args):
        """
        IsStrAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_IsStrAttrE(self, *args)

    def GetFltAttrVecE(self, *args):
        """
        GetFltAttrVecE(self, TStr attr) -> TFltV
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_GetFltAttrVecE(self, *args)

    def GetFltKeyIdE(self, *args):
        """
        GetFltKeyIdE(self, int EId) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value

           EId: int const & value

        """
        return _snap.TNEANet_GetFltKeyIdE(self, *args)

    def GetWeightOutEdgesV(self, *args):
        """
        GetWeightOutEdgesV(self, TFltV OutWeights, TFltV AttrVal)
        Parameters:
           self: TNEANet * value
           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           OutWeights: TFltV & value
           AttrVal: TFltV const & value

        """
        return _snap.TNEANet_GetWeightOutEdgesV(self, *args)

    def GetAttrNNames(self, *args):
        """
        GetAttrNNames(self, TStrV IntAttrNames, TStrV FltAttrNames, TStrV StrAttrNames)
        Parameters:
           self: TNEANet const * value
           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

        """
        return _snap.TNEANet_GetAttrNNames(self, *args)

    def GetAttrENames(self, *args):
        """
        GetAttrENames(self, TStrV IntAttrNames, TStrV FltAttrNames, TStrV StrAttrNames)
        Parameters:
           self: TNEANet const * value
           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

        """
        return _snap.TNEANet_GetAttrENames(self, *args)

    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.TNEANet_AddSAttrDatN(self, *args)

    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet const * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.TNEANet_GetSAttrDatN(self, *args)

    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(self, TInt NId, TStr AttrName) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TInt NId, TInt AttrId) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value

        DelSAttrDatN(self, TNodeI NodeI, TStr AttrName) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TNodeI NodeI, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value

        """
        return _snap.TNEANet_DelSAttrDatN(self, *args)

    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(self, TInt NId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVN(self, TNodeI NodeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TNEANet const * value
           NodeI: TNEANet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NodeI: TNEANet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.TNEANet_GetSAttrVN(self, *args)

    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(self, TStr AttrName, TIntV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

        GetIdVSAttrN(self, TInt AttrId, TIntV IdV) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

        """
        return _snap.TNEANet_GetIdVSAttrN(self, *args)

    def AddSAttrN(self, *args):
        """
        AddSAttrN(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.TNEANet_AddSAttrN(self, *args)

    def GetSAttrIdN(self, *args):
        """
        GetSAttrIdN(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.TNEANet_GetSAttrIdN(self, *args)

    def GetSAttrNameN(self, *args):
        """
        GetSAttrNameN(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.TNEANet_GetSAttrNameN(self, *args)

    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(self, TInt EId, TStr AttrName, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, TInt EId, TInt AttrId, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, TInt EId, TStr AttrName, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TInt EId, TInt AttrId, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TInt EId, TStr AttrName, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, TInt EId, TInt AttrId, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.TNEANet_AddSAttrDatE(self, *args)

    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(self, TInt EId, TStr AttrName, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, TInt EId, TInt AttrId, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, TInt EId, TStr AttrName, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, TInt EId, TInt AttrId, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, TInt EId, TStr AttrName, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, TInt EId, TInt AttrId, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet const * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.TNEANet_GetSAttrDatE(self, *args)

    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(self, TInt EId, TStr AttrName) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, TInt EId, TInt AttrId) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TStr AttrName) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value

        """
        return _snap.TNEANet_DelSAttrDatE(self, *args)

    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(self, TInt EId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           EId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVE(self, TEdgeI EdgeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TNEANet const * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.TNEANet_GetSAttrVE(self, *args)

    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(self, TStr AttrName, TIntV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

        GetIdVSAttrE(self, TInt AttrId, TIntV IdV) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

        """
        return _snap.TNEANet_GetIdVSAttrE(self, *args)

    def AddSAttrE(self, *args):
        """
        AddSAttrE(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.TNEANet_AddSAttrE(self, *args)

    def GetSAttrIdE(self, *args):
        """
        GetSAttrIdE(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.TNEANet_GetSAttrIdE(self, *args)

    def GetSAttrNameE(self, *args):
        """
        GetSAttrNameE(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.TNEANet_GetSAttrNameE(self, *args)

    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNEANetNodeI
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNEANetNodeI
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNEANetNodeI
        Parameters:
           self: TNEANet * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANet_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNEANetEdgeI
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNEANetEdgeI
        Parameters:
           self: TNEANet * value


        """
        return _snap.TNEANet_EndEI(self, *args)

    def BegNAIntI(self, *args):
        """
        BegNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        BegNAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_BegNAIntI(self, *args)

    def EndNAIntI(self, *args):
        """
        EndNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        EndNAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_EndNAIntI(self, *args)

    def BegNAStrI(self, *args):
        """
        BegNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        BegNAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_BegNAStrI(self, *args)

    def EndNAStrI(self, *args):
        """
        EndNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        EndNAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_EndNAStrI(self, *args)

    def BegNAFltI(self, *args):
        """
        BegNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        BegNAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_BegNAFltI(self, *args)

    def EndNAFltI(self, *args):
        """
        EndNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        EndNAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_EndNAFltI(self, *args)

    def BegEAIntI(self, *args):
        """
        BegEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        BegEAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_BegEAIntI(self, *args)

    def EndEAIntI(self, *args):
        """
        EndEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        EndEAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_EndEAIntI(self, *args)

    def BegEAStrI(self, *args):
        """
        BegEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        BegEAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_BegEAStrI(self, *args)

    def EndEAStrI(self, *args):
        """
        EndEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        EndEAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_EndEAStrI(self, *args)

    def BegEAFltI(self, *args):
        """
        BegEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        BegEAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_BegEAFltI(self, *args)

    def EndEAFltI(self, *args):
        """
        EndEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

        EndEAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANet_EndEAFltI(self, *args)

    __swig_destroy__ = _snap.delete_TNEANet
TNEANet.Save = new_instancemethod(_snap.TNEANet_Save,None,TNEANet)
TNEANet.Save_V1 = new_instancemethod(_snap.TNEANet_Save_V1,None,TNEANet)
TNEANet.HasFlag = new_instancemethod(_snap.TNEANet_HasFlag,None,TNEANet)
TNEANet.GetNodes = new_instancemethod(_snap.TNEANet_GetNodes,None,TNEANet)
TNEANet.AddNode = new_instancemethod(_snap.TNEANet_AddNode,None,TNEANet)
TNEANet.DelNode = new_instancemethod(_snap.TNEANet_DelNode,None,TNEANet)
TNEANet.IsNode = new_instancemethod(_snap.TNEANet_IsNode,None,TNEANet)
TNEANet.GetNAIntI = new_instancemethod(_snap.TNEANet_GetNAIntI,None,TNEANet)
TNEANet.GetNAStrI = new_instancemethod(_snap.TNEANet_GetNAStrI,None,TNEANet)
TNEANet.GetNAFltI = new_instancemethod(_snap.TNEANet_GetNAFltI,None,TNEANet)
TNEANet.AttrNameNI = new_instancemethod(_snap.TNEANet_AttrNameNI,None,TNEANet)
TNEANet.AttrValueNI = new_instancemethod(_snap.TNEANet_AttrValueNI,None,TNEANet)
TNEANet.IntAttrNameNI = new_instancemethod(_snap.TNEANet_IntAttrNameNI,None,TNEANet)
TNEANet.IntAttrValueNI = new_instancemethod(_snap.TNEANet_IntAttrValueNI,None,TNEANet)
TNEANet.StrAttrNameNI = new_instancemethod(_snap.TNEANet_StrAttrNameNI,None,TNEANet)
TNEANet.StrAttrValueNI = new_instancemethod(_snap.TNEANet_StrAttrValueNI,None,TNEANet)
TNEANet.FltAttrNameNI = new_instancemethod(_snap.TNEANet_FltAttrNameNI,None,TNEANet)
TNEANet.FltAttrValueNI = new_instancemethod(_snap.TNEANet_FltAttrValueNI,None,TNEANet)
TNEANet.AttrNameEI = new_instancemethod(_snap.TNEANet_AttrNameEI,None,TNEANet)
TNEANet.AttrValueEI = new_instancemethod(_snap.TNEANet_AttrValueEI,None,TNEANet)
TNEANet.IntAttrNameEI = new_instancemethod(_snap.TNEANet_IntAttrNameEI,None,TNEANet)
TNEANet.IntAttrValueEI = new_instancemethod(_snap.TNEANet_IntAttrValueEI,None,TNEANet)
TNEANet.StrAttrNameEI = new_instancemethod(_snap.TNEANet_StrAttrNameEI,None,TNEANet)
TNEANet.StrAttrValueEI = new_instancemethod(_snap.TNEANet_StrAttrValueEI,None,TNEANet)
TNEANet.FltAttrNameEI = new_instancemethod(_snap.TNEANet_FltAttrNameEI,None,TNEANet)
TNEANet.FltAttrValueEI = new_instancemethod(_snap.TNEANet_FltAttrValueEI,None,TNEANet)
TNEANet.GetEAIntI = new_instancemethod(_snap.TNEANet_GetEAIntI,None,TNEANet)
TNEANet.GetEAStrI = new_instancemethod(_snap.TNEANet_GetEAStrI,None,TNEANet)
TNEANet.GetEAFltI = new_instancemethod(_snap.TNEANet_GetEAFltI,None,TNEANet)
TNEANet.GetMxNId = new_instancemethod(_snap.TNEANet_GetMxNId,None,TNEANet)
TNEANet.GetMxEId = new_instancemethod(_snap.TNEANet_GetMxEId,None,TNEANet)
TNEANet.GetEdges = new_instancemethod(_snap.TNEANet_GetEdges,None,TNEANet)
TNEANet.AddEdge = new_instancemethod(_snap.TNEANet_AddEdge,None,TNEANet)
TNEANet.DelEdge = new_instancemethod(_snap.TNEANet_DelEdge,None,TNEANet)
TNEANet.IsEdge = new_instancemethod(_snap.TNEANet_IsEdge,None,TNEANet)
TNEANet.GetEId = new_instancemethod(_snap.TNEANet_GetEId,None,TNEANet)
TNEANet.GetEI = new_instancemethod(_snap.TNEANet_GetEI,None,TNEANet)
TNEANet.GetRndNId = new_instancemethod(_snap.TNEANet_GetRndNId,None,TNEANet)
TNEANet.GetRndNI = new_instancemethod(_snap.TNEANet_GetRndNI,None,TNEANet)
TNEANet.GetRndEId = new_instancemethod(_snap.TNEANet_GetRndEId,None,TNEANet)
TNEANet.GetRndEI = new_instancemethod(_snap.TNEANet_GetRndEI,None,TNEANet)
TNEANet.GetNIdV = new_instancemethod(_snap.TNEANet_GetNIdV,None,TNEANet)
TNEANet.GetEIdV = new_instancemethod(_snap.TNEANet_GetEIdV,None,TNEANet)
TNEANet.Empty = new_instancemethod(_snap.TNEANet_Empty,None,TNEANet)
TNEANet.Clr = new_instancemethod(_snap.TNEANet_Clr,None,TNEANet)
TNEANet.Reserve = new_instancemethod(_snap.TNEANet_Reserve,None,TNEANet)
TNEANet.Defrag = new_instancemethod(_snap.TNEANet_Defrag,None,TNEANet)
TNEANet.IsOk = new_instancemethod(_snap.TNEANet_IsOk,None,TNEANet)
TNEANet.Dump = new_instancemethod(_snap.TNEANet_Dump,None,TNEANet)
TNEANet.AddIntAttrDatN = new_instancemethod(_snap.TNEANet_AddIntAttrDatN,None,TNEANet)
TNEANet.AddStrAttrDatN = new_instancemethod(_snap.TNEANet_AddStrAttrDatN,None,TNEANet)
TNEANet.AddFltAttrDatN = new_instancemethod(_snap.TNEANet_AddFltAttrDatN,None,TNEANet)
TNEANet.AddIntAttrDatE = new_instancemethod(_snap.TNEANet_AddIntAttrDatE,None,TNEANet)
TNEANet.AddStrAttrDatE = new_instancemethod(_snap.TNEANet_AddStrAttrDatE,None,TNEANet)
TNEANet.AddFltAttrDatE = new_instancemethod(_snap.TNEANet_AddFltAttrDatE,None,TNEANet)
TNEANet.GetIntAttrDatN = new_instancemethod(_snap.TNEANet_GetIntAttrDatN,None,TNEANet)
TNEANet.GetStrAttrDatN = new_instancemethod(_snap.TNEANet_GetStrAttrDatN,None,TNEANet)
TNEANet.GetFltAttrDatN = new_instancemethod(_snap.TNEANet_GetFltAttrDatN,None,TNEANet)
TNEANet.GetIntAttrIndN = new_instancemethod(_snap.TNEANet_GetIntAttrIndN,None,TNEANet)
TNEANet.GetAttrIndN = new_instancemethod(_snap.TNEANet_GetAttrIndN,None,TNEANet)
TNEANet.GetIntAttrIndDatN = new_instancemethod(_snap.TNEANet_GetIntAttrIndDatN,None,TNEANet)
TNEANet.GetStrAttrIndDatN = new_instancemethod(_snap.TNEANet_GetStrAttrIndDatN,None,TNEANet)
TNEANet.GetFltAttrIndDatN = new_instancemethod(_snap.TNEANet_GetFltAttrIndDatN,None,TNEANet)
TNEANet.GetIntAttrDatE = new_instancemethod(_snap.TNEANet_GetIntAttrDatE,None,TNEANet)
TNEANet.GetStrAttrDatE = new_instancemethod(_snap.TNEANet_GetStrAttrDatE,None,TNEANet)
TNEANet.GetFltAttrDatE = new_instancemethod(_snap.TNEANet_GetFltAttrDatE,None,TNEANet)
TNEANet.GetIntAttrIndE = new_instancemethod(_snap.TNEANet_GetIntAttrIndE,None,TNEANet)
TNEANet.GetAttrIndE = new_instancemethod(_snap.TNEANet_GetAttrIndE,None,TNEANet)
TNEANet.GetIntAttrIndDatE = new_instancemethod(_snap.TNEANet_GetIntAttrIndDatE,None,TNEANet)
TNEANet.GetFltAttrIndDatE = new_instancemethod(_snap.TNEANet_GetFltAttrIndDatE,None,TNEANet)
TNEANet.GetStrAttrIndDatE = new_instancemethod(_snap.TNEANet_GetStrAttrIndDatE,None,TNEANet)
TNEANet.DelAttrDatN = new_instancemethod(_snap.TNEANet_DelAttrDatN,None,TNEANet)
TNEANet.DelAttrDatE = new_instancemethod(_snap.TNEANet_DelAttrDatE,None,TNEANet)
TNEANet.AddIntAttrN = new_instancemethod(_snap.TNEANet_AddIntAttrN,None,TNEANet)
TNEANet.AddStrAttrN = new_instancemethod(_snap.TNEANet_AddStrAttrN,None,TNEANet)
TNEANet.AddFltAttrN = new_instancemethod(_snap.TNEANet_AddFltAttrN,None,TNEANet)
TNEANet.AddIntAttrE = new_instancemethod(_snap.TNEANet_AddIntAttrE,None,TNEANet)
TNEANet.AddStrAttrE = new_instancemethod(_snap.TNEANet_AddStrAttrE,None,TNEANet)
TNEANet.AddFltAttrE = new_instancemethod(_snap.TNEANet_AddFltAttrE,None,TNEANet)
TNEANet.DelAttrN = new_instancemethod(_snap.TNEANet_DelAttrN,None,TNEANet)
TNEANet.DelAttrE = new_instancemethod(_snap.TNEANet_DelAttrE,None,TNEANet)
TNEANet.IsAttrDeletedN = new_instancemethod(_snap.TNEANet_IsAttrDeletedN,None,TNEANet)
TNEANet.IsIntAttrDeletedN = new_instancemethod(_snap.TNEANet_IsIntAttrDeletedN,None,TNEANet)
TNEANet.IsStrAttrDeletedN = new_instancemethod(_snap.TNEANet_IsStrAttrDeletedN,None,TNEANet)
TNEANet.IsFltAttrDeletedN = new_instancemethod(_snap.TNEANet_IsFltAttrDeletedN,None,TNEANet)
TNEANet.NodeAttrIsDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsDeleted,None,TNEANet)
TNEANet.NodeAttrIsIntDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsIntDeleted,None,TNEANet)
TNEANet.NodeAttrIsStrDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsStrDeleted,None,TNEANet)
TNEANet.NodeAttrIsFltDeleted = new_instancemethod(_snap.TNEANet_NodeAttrIsFltDeleted,None,TNEANet)
TNEANet.IsAttrDeletedE = new_instancemethod(_snap.TNEANet_IsAttrDeletedE,None,TNEANet)
TNEANet.IsIntAttrDeletedE = new_instancemethod(_snap.TNEANet_IsIntAttrDeletedE,None,TNEANet)
TNEANet.IsStrAttrDeletedE = new_instancemethod(_snap.TNEANet_IsStrAttrDeletedE,None,TNEANet)
TNEANet.IsFltAttrDeletedE = new_instancemethod(_snap.TNEANet_IsFltAttrDeletedE,None,TNEANet)
TNEANet.EdgeAttrIsDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsDeleted,None,TNEANet)
TNEANet.EdgeAttrIsIntDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsIntDeleted,None,TNEANet)
TNEANet.EdgeAttrIsStrDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsStrDeleted,None,TNEANet)
TNEANet.EdgeAttrIsFltDeleted = new_instancemethod(_snap.TNEANet_EdgeAttrIsFltDeleted,None,TNEANet)
TNEANet.GetNodeAttrValue = new_instancemethod(_snap.TNEANet_GetNodeAttrValue,None,TNEANet)
TNEANet.GetEdgeAttrValue = new_instancemethod(_snap.TNEANet_GetEdgeAttrValue,None,TNEANet)
TNEANet.GetWeightOutEdges = new_instancemethod(_snap.TNEANet_GetWeightOutEdges,None,TNEANet)
TNEANet.IsFltAttrE = new_instancemethod(_snap.TNEANet_IsFltAttrE,None,TNEANet)
TNEANet.IsIntAttrE = new_instancemethod(_snap.TNEANet_IsIntAttrE,None,TNEANet)
TNEANet.IsStrAttrE = new_instancemethod(_snap.TNEANet_IsStrAttrE,None,TNEANet)
TNEANet.GetFltAttrVecE = new_instancemethod(_snap.TNEANet_GetFltAttrVecE,None,TNEANet)
TNEANet.GetFltKeyIdE = new_instancemethod(_snap.TNEANet_GetFltKeyIdE,None,TNEANet)
TNEANet.GetWeightOutEdgesV = new_instancemethod(_snap.TNEANet_GetWeightOutEdgesV,None,TNEANet)
TNEANet.GetAttrNNames = new_instancemethod(_snap.TNEANet_GetAttrNNames,None,TNEANet)
TNEANet.GetAttrENames = new_instancemethod(_snap.TNEANet_GetAttrENames,None,TNEANet)
TNEANet.AddSAttrDatN = new_instancemethod(_snap.TNEANet_AddSAttrDatN,None,TNEANet)
TNEANet.GetSAttrDatN = new_instancemethod(_snap.TNEANet_GetSAttrDatN,None,TNEANet)
TNEANet.DelSAttrDatN = new_instancemethod(_snap.TNEANet_DelSAttrDatN,None,TNEANet)
TNEANet.GetSAttrVN = new_instancemethod(_snap.TNEANet_GetSAttrVN,None,TNEANet)
TNEANet.GetIdVSAttrN = new_instancemethod(_snap.TNEANet_GetIdVSAttrN,None,TNEANet)
TNEANet.AddSAttrN = new_instancemethod(_snap.TNEANet_AddSAttrN,None,TNEANet)
TNEANet.GetSAttrIdN = new_instancemethod(_snap.TNEANet_GetSAttrIdN,None,TNEANet)
TNEANet.GetSAttrNameN = new_instancemethod(_snap.TNEANet_GetSAttrNameN,None,TNEANet)
TNEANet.AddSAttrDatE = new_instancemethod(_snap.TNEANet_AddSAttrDatE,None,TNEANet)
TNEANet.GetSAttrDatE = new_instancemethod(_snap.TNEANet_GetSAttrDatE,None,TNEANet)
TNEANet.DelSAttrDatE = new_instancemethod(_snap.TNEANet_DelSAttrDatE,None,TNEANet)
TNEANet.GetSAttrVE = new_instancemethod(_snap.TNEANet_GetSAttrVE,None,TNEANet)
TNEANet.GetIdVSAttrE = new_instancemethod(_snap.TNEANet_GetIdVSAttrE,None,TNEANet)
TNEANet.AddSAttrE = new_instancemethod(_snap.TNEANet_AddSAttrE,None,TNEANet)
TNEANet.GetSAttrIdE = new_instancemethod(_snap.TNEANet_GetSAttrIdE,None,TNEANet)
TNEANet.GetSAttrNameE = new_instancemethod(_snap.TNEANet_GetSAttrNameE,None,TNEANet)
TNEANet.BegNI = new_instancemethod(_snap.TNEANet_BegNI,None,TNEANet)
TNEANet.EndNI = new_instancemethod(_snap.TNEANet_EndNI,None,TNEANet)
TNEANet.GetNI = new_instancemethod(_snap.TNEANet_GetNI,None,TNEANet)
TNEANet.BegEI = new_instancemethod(_snap.TNEANet_BegEI,None,TNEANet)
TNEANet.EndEI = new_instancemethod(_snap.TNEANet_EndEI,None,TNEANet)
TNEANet.BegNAIntI = new_instancemethod(_snap.TNEANet_BegNAIntI,None,TNEANet)
TNEANet.EndNAIntI = new_instancemethod(_snap.TNEANet_EndNAIntI,None,TNEANet)
TNEANet.BegNAStrI = new_instancemethod(_snap.TNEANet_BegNAStrI,None,TNEANet)
TNEANet.EndNAStrI = new_instancemethod(_snap.TNEANet_EndNAStrI,None,TNEANet)
TNEANet.BegNAFltI = new_instancemethod(_snap.TNEANet_BegNAFltI,None,TNEANet)
TNEANet.EndNAFltI = new_instancemethod(_snap.TNEANet_EndNAFltI,None,TNEANet)
TNEANet.BegEAIntI = new_instancemethod(_snap.TNEANet_BegEAIntI,None,TNEANet)
TNEANet.EndEAIntI = new_instancemethod(_snap.TNEANet_EndEAIntI,None,TNEANet)
TNEANet.BegEAStrI = new_instancemethod(_snap.TNEANet_BegEAStrI,None,TNEANet)
TNEANet.EndEAStrI = new_instancemethod(_snap.TNEANet_EndEAStrI,None,TNEANet)
TNEANet.BegEAFltI = new_instancemethod(_snap.TNEANet_BegEAFltI,None,TNEANet)
TNEANet.EndEAFltI = new_instancemethod(_snap.TNEANet_EndEAFltI,None,TNEANet)
TNEANet_swigregister = _snap.TNEANet_swigregister
TNEANet_swigregister(TNEANet)

def TNEANet_New(*args):
  """
    New() -> PNEANet
    TNEANet_New(int Nodes, int Edges) -> PNEANet
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TNEANet_New(*args)

def TNEANet_Load(*args):
  """
    TNEANet_Load(TSIn SIn) -> PNEANet
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TNEANet_Load(*args)

def TNEANet_Load_V1(*args):
  """
    TNEANet_Load_V1(TSIn SIn) -> PNEANet
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TNEANet_Load_V1(*args)

class TUndirNet(object):
    """Proxy of C++ TUndirNet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TUndirNet
        __init__(self, int Nodes, int Edges) -> TUndirNet
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TUndirNet Graph) -> TUndirNet
        Parameters:
           Graph: TUndirNet const & value

           Graph: TUndirNet const & value

        __init__(self, TSIn SIn) -> TUndirNet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TUndirNet_swiginit(self,_snap.new_TUndirNet(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TUndirNet const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TUndirNet_Save(self, *args)

    def Save_V1(self, *args):
        """
        Save_V1(self, TSOut SOut)
        Parameters:
           self: TUndirNet const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TUndirNet_Save_V1(self, *args)

    def New(*args):
        """
        New() -> PUndirNet
        New(int Nodes, int Edges) -> PUndirNet
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TUndirNet_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PUndirNet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TUndirNet_Load(*args)

    Load = staticmethod(Load)
    def Load_V1(*args):
        """
        Load_V1(TSIn SIn) -> PUndirNet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TUndirNet_Load_V1(*args)

    Load_V1 = staticmethod(Load_V1)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TUndirNet const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TUndirNet_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeI) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value

           NodeI: TUndirNet::TNodeI const & value

        AddNode(self, int NId, TIntV NbrNIdV) -> int
        Parameters:
           NId: int const & value
           NbrNIdV: TIntV const & value

           NId: int const & value
           NbrNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int NIdVId) -> int
        Parameters:
           self: TUndirNet * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

        """
        return _snap.TUndirNet_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TUndirNet * value
           NodeI: TUndirNet::TNode const & value

           NodeI: TUndirNet::TNode const & value

        """
        return _snap.TUndirNet_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TUndirNet const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TUndirNet_IsNode(self, *args)

    def BegNI(self):
        """
        BegNI(self) -> TNodeI
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_BegNI(self)

    def EndNI(self):
        """
        EndNI(self) -> TNodeI
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_EndNI(self)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           self: TUndirNet const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TUndirNet_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TUndirNet * value
           EdgeI: TUndirNet::TEdgeI const & value

           EdgeI: TUndirNet::TEdgeI const & value

        """
        return _snap.TUndirNet_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TUndirNet * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TUndirNet_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TUndirNet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TUndirNet_IsEdge(self, *args)

    def BegEI(self):
        """
        BegEI(self) -> TEdgeI
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_BegEI(self)

    def EndEI(self):
        """
        EndEI(self) -> TEdgeI
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_EndEI(self)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TUndirNet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TUndirNet_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TUndirNet * value


        """
        return _snap.TUndirNet_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TUndirNet * value


        """
        return _snap.TUndirNet_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TUndirNet const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TUndirNet_GetNIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TUndirNet const * value




        """
        return _snap.TUndirNet_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TUndirNet * value




        """
        return _snap.TUndirNet_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TUndirNet * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TUndirNet_Reserve(self, *args)

    def ReserveNIdDeg(self, *args):
        """
        ReserveNIdDeg(self, int NId, int Deg)
        Parameters:
           self: TUndirNet * value
           NId: int const & value
           Deg: int const & value

           NId: int const & value
           Deg: int const & value

        """
        return _snap.TUndirNet_ReserveNIdDeg(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TUndirNet * value


        """
        return _snap.TUndirNet_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TUndirNet const * value


        """
        return _snap.TUndirNet_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TUndirNet const * value


        """
        return _snap.TUndirNet_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PUndirNet"""
        return _snap.TUndirNet_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TUndirNet * value
           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.TUndirNet_AddSAttrDatN(self, *args)

    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TUndirNet const * value
           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.TUndirNet_GetSAttrDatN(self, *args)

    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(self, TInt NId, TStr AttrName) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TInt NId, TInt AttrId) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value

        DelSAttrDatN(self, TNodeI NodeI, TStr AttrName) -> int
        Parameters:
           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TNodeI NodeI, TInt AttrId) -> int
        Parameters:
           self: TUndirNet * value
           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value

           NodeI: TUndirNet::TNodeI const & value
           AttrId: TInt const & value

        """
        return _snap.TUndirNet_DelSAttrDatN(self, *args)

    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(self, TInt NId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVN(self, TNodeI NodeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TUndirNet const * value
           NodeI: TUndirNet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NodeI: TUndirNet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.TUndirNet_GetSAttrVN(self, *args)

    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(self, TStr AttrName, TIntV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

        GetIdVSAttrN(self, TInt AttrId, TIntV IdV) -> int
        Parameters:
           self: TUndirNet const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

        """
        return _snap.TUndirNet_GetIdVSAttrN(self, *args)

    def AddSAttrN(self, *args):
        """
        AddSAttrN(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TUndirNet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.TUndirNet_AddSAttrN(self, *args)

    def GetSAttrIdN(self, *args):
        """
        GetSAttrIdN(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TUndirNet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.TUndirNet_GetSAttrIdN(self, *args)

    def GetSAttrNameN(self, *args):
        """
        GetSAttrNameN(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TUndirNet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.TUndirNet_GetSAttrNameN(self, *args)

    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TUndirNet * value
           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.TUndirNet_AddSAttrDatE(self, *args)

    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TUndirNet const * value
           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.TUndirNet_GetSAttrDatE(self, *args)

    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TStr AttrName) -> int
        Parameters:
           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TInt AttrId) -> int
        Parameters:
           self: TUndirNet * value
           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrId: TInt const & value

        """
        return _snap.TUndirNet_DelSAttrDatE(self, *args)

    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(self, int SrcNId, int DstNId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVE(self, TEdgeI EdgeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TUndirNet const * value
           EdgeI: TUndirNet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EdgeI: TUndirNet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.TUndirNet_GetSAttrVE(self, *args)

    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(self, TStr AttrName, TIntPrV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntPrV & value

           AttrName: TStr const & value
           IdV: TIntPrV & value

        GetIdVSAttrE(self, TInt AttrId, TIntPrV IdV) -> int
        Parameters:
           self: TUndirNet const * value
           AttrId: TInt const & value
           IdV: TIntPrV & value

           AttrId: TInt const & value
           IdV: TIntPrV & value

        """
        return _snap.TUndirNet_GetIdVSAttrE(self, *args)

    def AddSAttrE(self, *args):
        """
        AddSAttrE(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TUndirNet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.TUndirNet_AddSAttrE(self, *args)

    def GetSAttrIdE(self, *args):
        """
        GetSAttrIdE(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TUndirNet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.TUndirNet_GetSAttrIdE(self, *args)

    def GetSAttrNameE(self, *args):
        """
        GetSAttrNameE(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TUndirNet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.TUndirNet_GetSAttrNameE(self, *args)

    __swig_destroy__ = _snap.delete_TUndirNet
TUndirNet.Save = new_instancemethod(_snap.TUndirNet_Save,None,TUndirNet)
TUndirNet.Save_V1 = new_instancemethod(_snap.TUndirNet_Save_V1,None,TUndirNet)
TUndirNet.HasFlag = new_instancemethod(_snap.TUndirNet_HasFlag,None,TUndirNet)
TUndirNet.GetNodes = new_instancemethod(_snap.TUndirNet_GetNodes,None,TUndirNet)
TUndirNet.AddNode = new_instancemethod(_snap.TUndirNet_AddNode,None,TUndirNet)
TUndirNet.DelNode = new_instancemethod(_snap.TUndirNet_DelNode,None,TUndirNet)
TUndirNet.IsNode = new_instancemethod(_snap.TUndirNet_IsNode,None,TUndirNet)
TUndirNet.BegNI = new_instancemethod(_snap.TUndirNet_BegNI,None,TUndirNet)
TUndirNet.EndNI = new_instancemethod(_snap.TUndirNet_EndNI,None,TUndirNet)
TUndirNet.GetNI = new_instancemethod(_snap.TUndirNet_GetNI,None,TUndirNet)
TUndirNet.GetMxNId = new_instancemethod(_snap.TUndirNet_GetMxNId,None,TUndirNet)
TUndirNet.GetEdges = new_instancemethod(_snap.TUndirNet_GetEdges,None,TUndirNet)
TUndirNet.AddEdge = new_instancemethod(_snap.TUndirNet_AddEdge,None,TUndirNet)
TUndirNet.DelEdge = new_instancemethod(_snap.TUndirNet_DelEdge,None,TUndirNet)
TUndirNet.IsEdge = new_instancemethod(_snap.TUndirNet_IsEdge,None,TUndirNet)
TUndirNet.BegEI = new_instancemethod(_snap.TUndirNet_BegEI,None,TUndirNet)
TUndirNet.EndEI = new_instancemethod(_snap.TUndirNet_EndEI,None,TUndirNet)
TUndirNet.GetEI = new_instancemethod(_snap.TUndirNet_GetEI,None,TUndirNet)
TUndirNet.GetRndNId = new_instancemethod(_snap.TUndirNet_GetRndNId,None,TUndirNet)
TUndirNet.GetRndNI = new_instancemethod(_snap.TUndirNet_GetRndNI,None,TUndirNet)
TUndirNet.GetNIdV = new_instancemethod(_snap.TUndirNet_GetNIdV,None,TUndirNet)
TUndirNet.Empty = new_instancemethod(_snap.TUndirNet_Empty,None,TUndirNet)
TUndirNet.Clr = new_instancemethod(_snap.TUndirNet_Clr,None,TUndirNet)
TUndirNet.Reserve = new_instancemethod(_snap.TUndirNet_Reserve,None,TUndirNet)
TUndirNet.ReserveNIdDeg = new_instancemethod(_snap.TUndirNet_ReserveNIdDeg,None,TUndirNet)
TUndirNet.Defrag = new_instancemethod(_snap.TUndirNet_Defrag,None,TUndirNet)
TUndirNet.IsOk = new_instancemethod(_snap.TUndirNet_IsOk,None,TUndirNet)
TUndirNet.Dump = new_instancemethod(_snap.TUndirNet_Dump,None,TUndirNet)
TUndirNet.AddSAttrDatN = new_instancemethod(_snap.TUndirNet_AddSAttrDatN,None,TUndirNet)
TUndirNet.GetSAttrDatN = new_instancemethod(_snap.TUndirNet_GetSAttrDatN,None,TUndirNet)
TUndirNet.DelSAttrDatN = new_instancemethod(_snap.TUndirNet_DelSAttrDatN,None,TUndirNet)
TUndirNet.GetSAttrVN = new_instancemethod(_snap.TUndirNet_GetSAttrVN,None,TUndirNet)
TUndirNet.GetIdVSAttrN = new_instancemethod(_snap.TUndirNet_GetIdVSAttrN,None,TUndirNet)
TUndirNet.AddSAttrN = new_instancemethod(_snap.TUndirNet_AddSAttrN,None,TUndirNet)
TUndirNet.GetSAttrIdN = new_instancemethod(_snap.TUndirNet_GetSAttrIdN,None,TUndirNet)
TUndirNet.GetSAttrNameN = new_instancemethod(_snap.TUndirNet_GetSAttrNameN,None,TUndirNet)
TUndirNet.AddSAttrDatE = new_instancemethod(_snap.TUndirNet_AddSAttrDatE,None,TUndirNet)
TUndirNet.GetSAttrDatE = new_instancemethod(_snap.TUndirNet_GetSAttrDatE,None,TUndirNet)
TUndirNet.DelSAttrDatE = new_instancemethod(_snap.TUndirNet_DelSAttrDatE,None,TUndirNet)
TUndirNet.GetSAttrVE = new_instancemethod(_snap.TUndirNet_GetSAttrVE,None,TUndirNet)
TUndirNet.GetIdVSAttrE = new_instancemethod(_snap.TUndirNet_GetIdVSAttrE,None,TUndirNet)
TUndirNet.AddSAttrE = new_instancemethod(_snap.TUndirNet_AddSAttrE,None,TUndirNet)
TUndirNet.GetSAttrIdE = new_instancemethod(_snap.TUndirNet_GetSAttrIdE,None,TUndirNet)
TUndirNet.GetSAttrNameE = new_instancemethod(_snap.TUndirNet_GetSAttrNameE,None,TUndirNet)
TUndirNet_swigregister = _snap.TUndirNet_swigregister
TUndirNet_swigregister(TUndirNet)

def TUndirNet_New(*args):
  """
    New() -> PUndirNet
    TUndirNet_New(int Nodes, int Edges) -> PUndirNet
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TUndirNet_New(*args)

def TUndirNet_Load(*args):
  """
    TUndirNet_Load(TSIn SIn) -> PUndirNet
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TUndirNet_Load(*args)

def TUndirNet_Load_V1(*args):
  """
    TUndirNet_Load_V1(TSIn SIn) -> PUndirNet
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TUndirNet_Load_V1(*args)

def TUndirNet_GetSmallGraph():
  """TUndirNet_GetSmallGraph() -> PUndirNet"""
  return _snap.TUndirNet_GetSmallGraph()

class TDirNet(object):
    """Proxy of C++ TDirNet class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TDirNet
        __init__(self, int Nodes, int Edges) -> TDirNet
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TDirNet Graph) -> TDirNet
        Parameters:
           Graph: TDirNet const & value

           Graph: TDirNet const & value

        __init__(self, TSIn SIn) -> TDirNet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TDirNet_swiginit(self,_snap.new_TDirNet(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TDirNet const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TDirNet_Save(self, *args)

    def Save_V1(self, *args):
        """
        Save_V1(self, TSOut SOut)
        Parameters:
           self: TDirNet const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TDirNet_Save_V1(self, *args)

    def New(*args):
        """
        New() -> PDirNet
        New(int Nodes, int Edges) -> PDirNet
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TDirNet_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PDirNet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TDirNet_Load(*args)

    Load = staticmethod(Load)
    def Load_V1(*args):
        """
        Load_V1(TSIn SIn) -> PDirNet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TDirNet_Load_V1(*args)

    Load_V1 = staticmethod(Load_V1)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TDirNet const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TDirNet_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           NodeId: TDirNet::TNodeI const & value

           NodeId: TDirNet::TNodeI const & value

        AddNode(self, int NId, TIntV InNIdV, TIntV OutNIdV) -> int
        Parameters:
           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int SrcVId, int DstVId) -> int
        Parameters:
           self: TDirNet * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

        """
        return _snap.TDirNet_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TDirNet * value
           NodeI: TDirNet::TNode const & value

           NodeI: TDirNet::TNode const & value

        """
        return _snap.TDirNet_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TDirNet const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TDirNet_IsNode(self, *args)

    def BegNI(self):
        """
        BegNI(self) -> TNodeI
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_BegNI(self)

    def EndNI(self):
        """
        EndNI(self) -> TNodeI
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_EndNI(self)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           self: TDirNet const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TDirNet_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TDirNet * value
           EdgeI: TDirNet::TEdgeI const & value

           EdgeI: TDirNet::TEdgeI const & value

        """
        return _snap.TDirNet_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TDirNet * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TDirNet_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TDirNet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TDirNet_IsEdge(self, *args)

    def BegEI(self):
        """
        BegEI(self) -> TEdgeI
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_BegEI(self)

    def EndEI(self):
        """
        EndEI(self) -> TEdgeI
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_EndEI(self)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TDirNet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TDirNet_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TDirNet * value


        """
        return _snap.TDirNet_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TDirNet * value


        """
        return _snap.TDirNet_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TDirNet const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TDirNet_GetNIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TDirNet const * value




        """
        return _snap.TDirNet_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TDirNet * value




        """
        return _snap.TDirNet_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TDirNet * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TDirNet_Reserve(self, *args)

    def ReserveNIdInDeg(self, *args):
        """
        ReserveNIdInDeg(self, int NId, int InDeg)
        Parameters:
           self: TDirNet * value
           NId: int const & value
           InDeg: int const & value

           NId: int const & value
           InDeg: int const & value

        """
        return _snap.TDirNet_ReserveNIdInDeg(self, *args)

    def ReserveNIdOutDeg(self, *args):
        """
        ReserveNIdOutDeg(self, int NId, int OutDeg)
        Parameters:
           self: TDirNet * value
           NId: int const & value
           OutDeg: int const & value

           NId: int const & value
           OutDeg: int const & value

        """
        return _snap.TDirNet_ReserveNIdOutDeg(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TDirNet * value


        """
        return _snap.TDirNet_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TDirNet const * value


        """
        return _snap.TDirNet_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TDirNet const * value


        """
        return _snap.TDirNet_Dump(self, *args)

    def GetSmallGraph():
        """GetSmallGraph() -> PDirNet"""
        return _snap.TDirNet_GetSmallGraph()

    GetSmallGraph = staticmethod(GetSmallGraph)
    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TDirNet * value
           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.TDirNet_AddSAttrDatN(self, *args)

    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TDirNet const * value
           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.TDirNet_GetSAttrDatN(self, *args)

    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(self, TInt NId, TStr AttrName) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TInt NId, TInt AttrId) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value

        DelSAttrDatN(self, TNodeI NodeI, TStr AttrName) -> int
        Parameters:
           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value

           NodeI: TDirNet::TNodeI const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TNodeI NodeI, TInt AttrId) -> int
        Parameters:
           self: TDirNet * value
           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value

           NodeI: TDirNet::TNodeI const & value
           AttrId: TInt const & value

        """
        return _snap.TDirNet_DelSAttrDatN(self, *args)

    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(self, TInt NId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVN(self, TNodeI NodeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TDirNet const * value
           NodeI: TDirNet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NodeI: TDirNet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.TDirNet_GetSAttrVN(self, *args)

    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(self, TStr AttrName, TIntV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

        GetIdVSAttrN(self, TInt AttrId, TIntV IdV) -> int
        Parameters:
           self: TDirNet const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

        """
        return _snap.TDirNet_GetIdVSAttrN(self, *args)

    def AddSAttrN(self, *args):
        """
        AddSAttrN(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TDirNet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.TDirNet_AddSAttrN(self, *args)

    def GetSAttrIdN(self, *args):
        """
        GetSAttrIdN(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TDirNet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.TDirNet_GetSAttrIdN(self, *args)

    def GetSAttrNameN(self, *args):
        """
        GetSAttrNameN(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TDirNet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.TDirNet_GetSAttrNameN(self, *args)

    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TDirNet * value
           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.TDirNet_AddSAttrDatE(self, *args)

    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TInt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TFlt Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId, TStr Val) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TDirNet const * value
           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.TDirNet_GetSAttrDatE(self, *args)

    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(self, int SrcNId, int DstNId, TStr AttrName) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, int SrcNId, int DstNId, TInt AttrId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrId: TInt const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TStr AttrName) -> int
        Parameters:
           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TInt AttrId) -> int
        Parameters:
           self: TDirNet * value
           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrId: TInt const & value

        """
        return _snap.TDirNet_DelSAttrDatE(self, *args)

    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(self, int SrcNId, int DstNId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           SrcNId: int const & value
           DstNId: int const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVE(self, TEdgeI EdgeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TDirNet const * value
           EdgeI: TDirNet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EdgeI: TDirNet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.TDirNet_GetSAttrVE(self, *args)

    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(self, TStr AttrName, TIntPrV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntPrV & value

           AttrName: TStr const & value
           IdV: TIntPrV & value

        GetIdVSAttrE(self, TInt AttrId, TIntPrV IdV) -> int
        Parameters:
           self: TDirNet const * value
           AttrId: TInt const & value
           IdV: TIntPrV & value

           AttrId: TInt const & value
           IdV: TIntPrV & value

        """
        return _snap.TDirNet_GetIdVSAttrE(self, *args)

    def AddSAttrE(self, *args):
        """
        AddSAttrE(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TDirNet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.TDirNet_AddSAttrE(self, *args)

    def GetSAttrIdE(self, *args):
        """
        GetSAttrIdE(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TDirNet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.TDirNet_GetSAttrIdE(self, *args)

    def GetSAttrNameE(self, *args):
        """
        GetSAttrNameE(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TDirNet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.TDirNet_GetSAttrNameE(self, *args)

    __swig_destroy__ = _snap.delete_TDirNet
TDirNet.Save = new_instancemethod(_snap.TDirNet_Save,None,TDirNet)
TDirNet.Save_V1 = new_instancemethod(_snap.TDirNet_Save_V1,None,TDirNet)
TDirNet.HasFlag = new_instancemethod(_snap.TDirNet_HasFlag,None,TDirNet)
TDirNet.GetNodes = new_instancemethod(_snap.TDirNet_GetNodes,None,TDirNet)
TDirNet.AddNode = new_instancemethod(_snap.TDirNet_AddNode,None,TDirNet)
TDirNet.DelNode = new_instancemethod(_snap.TDirNet_DelNode,None,TDirNet)
TDirNet.IsNode = new_instancemethod(_snap.TDirNet_IsNode,None,TDirNet)
TDirNet.BegNI = new_instancemethod(_snap.TDirNet_BegNI,None,TDirNet)
TDirNet.EndNI = new_instancemethod(_snap.TDirNet_EndNI,None,TDirNet)
TDirNet.GetNI = new_instancemethod(_snap.TDirNet_GetNI,None,TDirNet)
TDirNet.GetMxNId = new_instancemethod(_snap.TDirNet_GetMxNId,None,TDirNet)
TDirNet.GetEdges = new_instancemethod(_snap.TDirNet_GetEdges,None,TDirNet)
TDirNet.AddEdge = new_instancemethod(_snap.TDirNet_AddEdge,None,TDirNet)
TDirNet.DelEdge = new_instancemethod(_snap.TDirNet_DelEdge,None,TDirNet)
TDirNet.IsEdge = new_instancemethod(_snap.TDirNet_IsEdge,None,TDirNet)
TDirNet.BegEI = new_instancemethod(_snap.TDirNet_BegEI,None,TDirNet)
TDirNet.EndEI = new_instancemethod(_snap.TDirNet_EndEI,None,TDirNet)
TDirNet.GetEI = new_instancemethod(_snap.TDirNet_GetEI,None,TDirNet)
TDirNet.GetRndNId = new_instancemethod(_snap.TDirNet_GetRndNId,None,TDirNet)
TDirNet.GetRndNI = new_instancemethod(_snap.TDirNet_GetRndNI,None,TDirNet)
TDirNet.GetNIdV = new_instancemethod(_snap.TDirNet_GetNIdV,None,TDirNet)
TDirNet.Empty = new_instancemethod(_snap.TDirNet_Empty,None,TDirNet)
TDirNet.Clr = new_instancemethod(_snap.TDirNet_Clr,None,TDirNet)
TDirNet.Reserve = new_instancemethod(_snap.TDirNet_Reserve,None,TDirNet)
TDirNet.ReserveNIdInDeg = new_instancemethod(_snap.TDirNet_ReserveNIdInDeg,None,TDirNet)
TDirNet.ReserveNIdOutDeg = new_instancemethod(_snap.TDirNet_ReserveNIdOutDeg,None,TDirNet)
TDirNet.Defrag = new_instancemethod(_snap.TDirNet_Defrag,None,TDirNet)
TDirNet.IsOk = new_instancemethod(_snap.TDirNet_IsOk,None,TDirNet)
TDirNet.Dump = new_instancemethod(_snap.TDirNet_Dump,None,TDirNet)
TDirNet.AddSAttrDatN = new_instancemethod(_snap.TDirNet_AddSAttrDatN,None,TDirNet)
TDirNet.GetSAttrDatN = new_instancemethod(_snap.TDirNet_GetSAttrDatN,None,TDirNet)
TDirNet.DelSAttrDatN = new_instancemethod(_snap.TDirNet_DelSAttrDatN,None,TDirNet)
TDirNet.GetSAttrVN = new_instancemethod(_snap.TDirNet_GetSAttrVN,None,TDirNet)
TDirNet.GetIdVSAttrN = new_instancemethod(_snap.TDirNet_GetIdVSAttrN,None,TDirNet)
TDirNet.AddSAttrN = new_instancemethod(_snap.TDirNet_AddSAttrN,None,TDirNet)
TDirNet.GetSAttrIdN = new_instancemethod(_snap.TDirNet_GetSAttrIdN,None,TDirNet)
TDirNet.GetSAttrNameN = new_instancemethod(_snap.TDirNet_GetSAttrNameN,None,TDirNet)
TDirNet.AddSAttrDatE = new_instancemethod(_snap.TDirNet_AddSAttrDatE,None,TDirNet)
TDirNet.GetSAttrDatE = new_instancemethod(_snap.TDirNet_GetSAttrDatE,None,TDirNet)
TDirNet.DelSAttrDatE = new_instancemethod(_snap.TDirNet_DelSAttrDatE,None,TDirNet)
TDirNet.GetSAttrVE = new_instancemethod(_snap.TDirNet_GetSAttrVE,None,TDirNet)
TDirNet.GetIdVSAttrE = new_instancemethod(_snap.TDirNet_GetIdVSAttrE,None,TDirNet)
TDirNet.AddSAttrE = new_instancemethod(_snap.TDirNet_AddSAttrE,None,TDirNet)
TDirNet.GetSAttrIdE = new_instancemethod(_snap.TDirNet_GetSAttrIdE,None,TDirNet)
TDirNet.GetSAttrNameE = new_instancemethod(_snap.TDirNet_GetSAttrNameE,None,TDirNet)
TDirNet_swigregister = _snap.TDirNet_swigregister
TDirNet_swigregister(TDirNet)

def TDirNet_New(*args):
  """
    New() -> PDirNet
    TDirNet_New(int Nodes, int Edges) -> PDirNet
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TDirNet_New(*args)

def TDirNet_Load(*args):
  """
    TDirNet_Load(TSIn SIn) -> PDirNet
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TDirNet_Load(*args)

def TDirNet_Load_V1(*args):
  """
    TDirNet_Load_V1(TSIn SIn) -> PDirNet
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TDirNet_Load_V1(*args)

def TDirNet_GetSmallGraph():
  """TDirNet_GetSmallGraph() -> PDirNet"""
  return _snap.TDirNet_GetSmallGraph()

class TNEANetMP(object):
    """Proxy of C++ TNEANetMP class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetMP
        __init__(self, int Nodes, int Edges) -> TNEANetMP
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        __init__(self, TNEANetMP Graph) -> TNEANetMP
        Parameters:
           Graph: TNEANetMP const & value

           Graph: TNEANetMP const & value

        __init__(self, TSIn SIn) -> TNEANetMP
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TNEANetMP_swiginit(self,_snap.new_TNEANetMP(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TNEANetMP const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TNEANetMP_Save(self, *args)

    def New(*args):
        """
        New() -> PNEANetMP
        New(int Nodes, int Edges) -> PNEANetMP
        Parameters:
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNEANetMP_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PNEANetMP
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TNEANetMP_Load(*args)

    Load = staticmethod(Load)
    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNEANetMP const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.TNEANetMP_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNEANetMP const * value




        """
        return _snap.TNEANetMP_GetNodes(self)

    def SetNodes(self, *args):
        """
        SetNodes(self, int Length)
        Parameters:
           self: TNEANetMP * value
           Length: int const & value

           Length: int const & value

        """
        return _snap.TNEANetMP_SetNodes(self, *args)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           self: TNEANetMP * value
           NodeId: TNEANetMP::TNodeI const & value

           NodeId: TNEANetMP::TNodeI const & value

        """
        return _snap.TNEANetMP_AddNode(self, *args)

    def AddNodeWithEdges(self, *args):
        """
        AddNodeWithEdges(self, TInt NId, TIntV InEIdV, TIntV OutEIdV)
        Parameters:
           self: TNEANetMP * value
           NId: TInt const & value
           InEIdV: TIntV & value
           OutEIdV: TIntV & value

           NId: TInt const & value
           InEIdV: TIntV & value
           OutEIdV: TIntV & value

        """
        return _snap.TNEANetMP_AddNodeWithEdges(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetMP_IsNode(self, *args)

    def BegNAIntI(self, *args):
        """
        BegNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_BegNAIntI(self, *args)

    def EndNAIntI(self, *args):
        """
        EndNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_EndNAIntI(self, *args)

    def GetNAIntI(self, *args):
        """
        GetNAIntI(self, TStr attr, int NId) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.TNEANetMP_GetNAIntI(self, *args)

    def BegNAStrI(self, *args):
        """
        BegNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_BegNAStrI(self, *args)

    def EndNAStrI(self, *args):
        """
        EndNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_EndNAStrI(self, *args)

    def GetNAStrI(self, *args):
        """
        GetNAStrI(self, TStr attr, int NId) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.TNEANetMP_GetNAStrI(self, *args)

    def BegNAFltI(self, *args):
        """
        BegNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_BegNAFltI(self, *args)

    def EndNAFltI(self, *args):
        """
        EndNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_EndNAFltI(self, *args)

    def GetNAFltI(self, *args):
        """
        GetNAFltI(self, TStr attr, int NId) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.TNEANetMP_GetNAFltI(self, *args)

    def AttrNameNI(self, *args):
        """
        AttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        AttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_AttrNameNI(self, *args)

    def AttrValueNI(self, *args):
        """
        AttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        AttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANetMP_AttrValueNI(self, *args)

    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        IntAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_IntAttrNameNI(self, *args)

    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(self, TInt NId, TIntV Values)
        Parameters:
           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

        IntAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TIntV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.TNEANetMP_IntAttrValueNI(self, *args)

    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        StrAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_StrAttrNameNI(self, *args)

    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        StrAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANetMP_StrAttrValueNI(self, *args)

    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        FltAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_FltAttrNameNI(self, *args)

    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(self, TInt NId, TFltV Values)
        Parameters:
           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

        FltAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TFltV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.TNEANetMP_FltAttrValueNI(self, *args)

    def AttrNameEI(self, *args):
        """
        AttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        AttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_AttrNameEI(self, *args)

    def AttrValueEI(self, *args):
        """
        AttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        AttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANetMP_AttrValueEI(self, *args)

    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        IntAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_IntAttrNameEI(self, *args)

    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(self, TInt EId, TIntV Values)
        Parameters:
           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

        IntAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TIntV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.TNEANetMP_IntAttrValueEI(self, *args)

    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        StrAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_StrAttrNameEI(self, *args)

    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        StrAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.TNEANetMP_StrAttrValueEI(self, *args)

    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        FltAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.TNEANetMP_FltAttrNameEI(self, *args)

    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(self, TInt EId, TFltV Values)
        Parameters:
           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

        FltAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TFltV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.TNEANetMP_FltAttrValueEI(self, *args)

    def BegEAIntI(self, *args):
        """
        BegEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_BegEAIntI(self, *args)

    def EndEAIntI(self, *args):
        """
        EndEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_EndEAIntI(self, *args)

    def GetEAIntI(self, *args):
        """
        GetEAIntI(self, TStr attr, int EId) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.TNEANetMP_GetEAIntI(self, *args)

    def BegEAStrI(self, *args):
        """
        BegEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_BegEAStrI(self, *args)

    def EndEAStrI(self, *args):
        """
        EndEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_EndEAStrI(self, *args)

    def GetEAStrI(self, *args):
        """
        GetEAStrI(self, TStr attr, int EId) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.TNEANetMP_GetEAStrI(self, *args)

    def BegEAFltI(self, *args):
        """
        BegEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_BegEAFltI(self, *args)

    def EndEAFltI(self, *args):
        """
        EndEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_EndEAFltI(self, *args)

    def GetEAFltI(self, *args):
        """
        GetEAFltI(self, TStr attr, int EId) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.TNEANetMP_GetEAFltI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNEANetMP const * value




        """
        return _snap.TNEANetMP_GetMxNId(self)

    def GetMxEId(self):
        """
        GetMxEId(self) -> int
        Parameters:
           self: TNEANetMP const * value




        """
        return _snap.TNEANetMP_GetMxEId(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TNEANetMP const * value




        """
        return _snap.TNEANetMP_Reserved(self)

    def ReservedE(self):
        """
        ReservedE(self) -> int
        Parameters:
           self: TNEANetMP const * value




        """
        return _snap.TNEANetMP_ReservedE(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNEANetMP const * value




        """
        return _snap.TNEANetMP_GetEdges(self)

    def SetEdges(self, *args):
        """
        SetEdges(self, int Length)
        Parameters:
           self: TNEANetMP * value
           Length: int const & value

           Length: int const & value

        """
        return _snap.TNEANetMP_SetEdges(self, *args)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId, int EId = -1) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNEANetMP * value
           EdgeI: TNEANetMP::TEdgeI const & value

           EdgeI: TNEANetMP::TEdgeI const & value

        """
        return _snap.TNEANetMP_AddEdge(self, *args)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, TInt EId, int SrcNId, int DstNId)
        Parameters:
           self: TNEANetMP * value
           EId: TInt const & value
           SrcNId: int const value
           DstNId: int const value

           EId: TInt const & value
           SrcNId: int const value
           DstNId: int const value

        """
        return _snap.TNEANetMP_AddEdgeUnchecked(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int EId) -> bool
        Parameters:
           EId: int const & value

           EId: int const & value

        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        IsEdge(self, int SrcNId, int DstNId, int EId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId, int EId) -> bool
        Parameters:
           self: TNEANetMP const * value
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

        """
        return _snap.TNEANetMP_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNEANetMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEANetMP_GetEId(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int EId) -> TEdgeI
        Parameters:
           EId: int const & value

           EId: int const & value

        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNEANetMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.TNEANetMP_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEId(self) -> int
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(self, TRnd Rnd = Rnd) -> TEdgeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEI(self) -> TEdgeI
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNEANetMP const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TNEANetMP_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(self, TIntV EIdV)
        Parameters:
           self: TNEANetMP const * value
           EIdV: TIntV & value

           EIdV: TIntV & value

        """
        return _snap.TNEANetMP_GetEIdV(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TNEANetMP const * value




        """
        return _snap.TNEANetMP_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TNEANetMP * value




        """
        return _snap.TNEANetMP_Clr(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNEANetMP * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.TNEANetMP_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNEANetMP const * value


        """
        return _snap.TNEANetMP_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNEANetMP const * value


        """
        return _snap.TNEANetMP_Dump(self, *args)

    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(self, TNodeI NodeId, TInt value, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatN(self, int NId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddIntAttrDatN(self, *args)

    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(self, TNodeI NodeId, TStr value, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatN(self, int NId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddStrAttrDatN(self, *args)

    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(self, TNodeI NodeId, TFlt value, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatN(self, int NId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddFltAttrDatN(self, *args)

    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(self, TEdgeI EdgeId, TInt value, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatE(self, int EId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddIntAttrDatE(self, *args)

    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(self, TEdgeI EdgeId, TStr value, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatE(self, int EId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddStrAttrDatE(self, *args)

    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(self, TEdgeI EdgeId, TFlt value, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatE(self, int EId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddFltAttrDatE(self, *args)

    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(self, TNodeI NodeId, TStr attr) -> TInt
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        GetIntAttrDatN(self, int NId, TStr attr) -> TInt
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetIntAttrDatN(self, *args)

    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(self, TNodeI NodeId, TStr attr) -> TStr
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        GetStrAttrDatN(self, int NId, TStr attr) -> TStr
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetStrAttrDatN(self, *args)

    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(self, TNodeI NodeId, TStr attr) -> TFlt
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        GetFltAttrDatN(self, int NId, TStr attr) -> TFlt
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetFltAttrDatN(self, *args)

    def GetIntAttrIndN(self, *args):
        """
        GetIntAttrIndN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetIntAttrIndN(self, *args)

    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(self, TNodeI NodeId, int index) -> TInt
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           index: int const & value

           NodeId: TNEANetMP::TNodeI const & value
           index: int const & value

        GetIntAttrIndDatN(self, int NId, int index) -> TInt
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.TNEANetMP_GetIntAttrIndDatN(self, *args)

    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(self, TEdgeI EdgeId, TStr attr) -> TInt
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        GetIntAttrDatE(self, int EId, TStr attr) -> TInt
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetIntAttrDatE(self, *args)

    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(self, TEdgeI EdgeId, TStr attr) -> TStr
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        GetStrAttrDatE(self, int EId, TStr attr) -> TStr
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetStrAttrDatE(self, *args)

    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(self, TEdgeI EdgeId, TStr attr) -> TFlt
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        GetFltAttrDatE(self, int EId, TStr attr) -> TFlt
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetFltAttrDatE(self, *args)

    def GetIntAttrIndE(self, *args):
        """
        GetIntAttrIndE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetIntAttrIndE(self, *args)

    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(self, TEdgeI EdgeId, int index) -> TInt
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           index: int const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           index: int const & value

        GetIntAttrIndDatE(self, int EId, int index) -> TInt
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.TNEANetMP_GetIntAttrIndDatE(self, *args)

    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(self, TNodeI NodeId, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        DelAttrDatN(self, int NId, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_DelAttrDatN(self, *args)

    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(self, TEdgeI EdgeId, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        DelAttrDatE(self, int EId, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_DelAttrDatE(self, *args)

    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddIntAttrN(self, *args)

    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddStrAttrN(self, *args)

    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddFltAttrN(self, *args)

    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddIntAttrE(self, *args)

    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddStrAttrE(self, *args)

    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_AddFltAttrE(self, *args)

    def NodeAttrIsDeleted(self, *args):
        """
        NodeAttrIsDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_NodeAttrIsDeleted(self, *args)

    def NodeAttrIsIntDeleted(self, *args):
        """
        NodeAttrIsIntDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_NodeAttrIsIntDeleted(self, *args)

    def NodeAttrIsStrDeleted(self, *args):
        """
        NodeAttrIsStrDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_NodeAttrIsStrDeleted(self, *args)

    def NodeAttrIsFltDeleted(self, *args):
        """
        NodeAttrIsFltDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_NodeAttrIsFltDeleted(self, *args)

    def EdgeAttrIsDeleted(self, *args):
        """
        EdgeAttrIsDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_EdgeAttrIsDeleted(self, *args)

    def EdgeAttrIsIntDeleted(self, *args):
        """
        EdgeAttrIsIntDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_EdgeAttrIsIntDeleted(self, *args)

    def EdgeAttrIsStrDeleted(self, *args):
        """
        EdgeAttrIsStrDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_EdgeAttrIsStrDeleted(self, *args)

    def EdgeAttrIsFltDeleted(self, *args):
        """
        EdgeAttrIsFltDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_EdgeAttrIsFltDeleted(self, *args)

    def GetNodeAttrValue(self, *args):
        """
        GetNodeAttrValue(self, int NId, TStrIntPrH::TIter NodeHI) -> TStr
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_GetNodeAttrValue(self, *args)

    def GetEdgeAttrValue(self, *args):
        """
        GetEdgeAttrValue(self, int EId, TStrIntPrH::TIter EdgeHI) -> TStr
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.TNEANetMP_GetEdgeAttrValue(self, *args)

    def GetWeightOutEdges(self, *args):
        """
        GetWeightOutEdges(self, TNodeI NI, TStr attr) -> TFlt
        Parameters:
           self: TNEANetMP * value
           NI: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NI: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetWeightOutEdges(self, *args)

    def IsFltAttrE(self, *args):
        """
        IsFltAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_IsFltAttrE(self, *args)

    def IsIntAttrE(self, *args):
        """
        IsIntAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_IsIntAttrE(self, *args)

    def IsStrAttrE(self, *args):
        """
        IsStrAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_IsStrAttrE(self, *args)

    def GetFltAttrVecE(self, *args):
        """
        GetFltAttrVecE(self, TStr attr) -> TFltV
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.TNEANetMP_GetFltAttrVecE(self, *args)

    def GetFltKeyIdE(self, *args):
        """
        GetFltKeyIdE(self, int EId) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value

           EId: int const & value

        """
        return _snap.TNEANetMP_GetFltKeyIdE(self, *args)

    def GetWeightOutEdgesV(self, *args):
        """
        GetWeightOutEdgesV(self, TFltV OutWeights, TFltV AttrVal)
        Parameters:
           self: TNEANetMP * value
           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           OutWeights: TFltV & value
           AttrVal: TFltV const & value

        """
        return _snap.TNEANetMP_GetWeightOutEdgesV(self, *args)

    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNEANetMPNodeI
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNEANetMPNodeI
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNEANetMPNodeI
        Parameters:
           self: TNEANetMP * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetMP_GetNI(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNEANetMPEdgeI
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNEANetMPEdgeI
        Parameters:
           self: TNEANetMP * value


        """
        return _snap.TNEANetMP_EndEI(self, *args)

    __swig_destroy__ = _snap.delete_TNEANetMP
TNEANetMP.Save = new_instancemethod(_snap.TNEANetMP_Save,None,TNEANetMP)
TNEANetMP.HasFlag = new_instancemethod(_snap.TNEANetMP_HasFlag,None,TNEANetMP)
TNEANetMP.GetNodes = new_instancemethod(_snap.TNEANetMP_GetNodes,None,TNEANetMP)
TNEANetMP.SetNodes = new_instancemethod(_snap.TNEANetMP_SetNodes,None,TNEANetMP)
TNEANetMP.AddNode = new_instancemethod(_snap.TNEANetMP_AddNode,None,TNEANetMP)
TNEANetMP.AddNodeWithEdges = new_instancemethod(_snap.TNEANetMP_AddNodeWithEdges,None,TNEANetMP)
TNEANetMP.IsNode = new_instancemethod(_snap.TNEANetMP_IsNode,None,TNEANetMP)
TNEANetMP.BegNAIntI = new_instancemethod(_snap.TNEANetMP_BegNAIntI,None,TNEANetMP)
TNEANetMP.EndNAIntI = new_instancemethod(_snap.TNEANetMP_EndNAIntI,None,TNEANetMP)
TNEANetMP.GetNAIntI = new_instancemethod(_snap.TNEANetMP_GetNAIntI,None,TNEANetMP)
TNEANetMP.BegNAStrI = new_instancemethod(_snap.TNEANetMP_BegNAStrI,None,TNEANetMP)
TNEANetMP.EndNAStrI = new_instancemethod(_snap.TNEANetMP_EndNAStrI,None,TNEANetMP)
TNEANetMP.GetNAStrI = new_instancemethod(_snap.TNEANetMP_GetNAStrI,None,TNEANetMP)
TNEANetMP.BegNAFltI = new_instancemethod(_snap.TNEANetMP_BegNAFltI,None,TNEANetMP)
TNEANetMP.EndNAFltI = new_instancemethod(_snap.TNEANetMP_EndNAFltI,None,TNEANetMP)
TNEANetMP.GetNAFltI = new_instancemethod(_snap.TNEANetMP_GetNAFltI,None,TNEANetMP)
TNEANetMP.AttrNameNI = new_instancemethod(_snap.TNEANetMP_AttrNameNI,None,TNEANetMP)
TNEANetMP.AttrValueNI = new_instancemethod(_snap.TNEANetMP_AttrValueNI,None,TNEANetMP)
TNEANetMP.IntAttrNameNI = new_instancemethod(_snap.TNEANetMP_IntAttrNameNI,None,TNEANetMP)
TNEANetMP.IntAttrValueNI = new_instancemethod(_snap.TNEANetMP_IntAttrValueNI,None,TNEANetMP)
TNEANetMP.StrAttrNameNI = new_instancemethod(_snap.TNEANetMP_StrAttrNameNI,None,TNEANetMP)
TNEANetMP.StrAttrValueNI = new_instancemethod(_snap.TNEANetMP_StrAttrValueNI,None,TNEANetMP)
TNEANetMP.FltAttrNameNI = new_instancemethod(_snap.TNEANetMP_FltAttrNameNI,None,TNEANetMP)
TNEANetMP.FltAttrValueNI = new_instancemethod(_snap.TNEANetMP_FltAttrValueNI,None,TNEANetMP)
TNEANetMP.AttrNameEI = new_instancemethod(_snap.TNEANetMP_AttrNameEI,None,TNEANetMP)
TNEANetMP.AttrValueEI = new_instancemethod(_snap.TNEANetMP_AttrValueEI,None,TNEANetMP)
TNEANetMP.IntAttrNameEI = new_instancemethod(_snap.TNEANetMP_IntAttrNameEI,None,TNEANetMP)
TNEANetMP.IntAttrValueEI = new_instancemethod(_snap.TNEANetMP_IntAttrValueEI,None,TNEANetMP)
TNEANetMP.StrAttrNameEI = new_instancemethod(_snap.TNEANetMP_StrAttrNameEI,None,TNEANetMP)
TNEANetMP.StrAttrValueEI = new_instancemethod(_snap.TNEANetMP_StrAttrValueEI,None,TNEANetMP)
TNEANetMP.FltAttrNameEI = new_instancemethod(_snap.TNEANetMP_FltAttrNameEI,None,TNEANetMP)
TNEANetMP.FltAttrValueEI = new_instancemethod(_snap.TNEANetMP_FltAttrValueEI,None,TNEANetMP)
TNEANetMP.BegEAIntI = new_instancemethod(_snap.TNEANetMP_BegEAIntI,None,TNEANetMP)
TNEANetMP.EndEAIntI = new_instancemethod(_snap.TNEANetMP_EndEAIntI,None,TNEANetMP)
TNEANetMP.GetEAIntI = new_instancemethod(_snap.TNEANetMP_GetEAIntI,None,TNEANetMP)
TNEANetMP.BegEAStrI = new_instancemethod(_snap.TNEANetMP_BegEAStrI,None,TNEANetMP)
TNEANetMP.EndEAStrI = new_instancemethod(_snap.TNEANetMP_EndEAStrI,None,TNEANetMP)
TNEANetMP.GetEAStrI = new_instancemethod(_snap.TNEANetMP_GetEAStrI,None,TNEANetMP)
TNEANetMP.BegEAFltI = new_instancemethod(_snap.TNEANetMP_BegEAFltI,None,TNEANetMP)
TNEANetMP.EndEAFltI = new_instancemethod(_snap.TNEANetMP_EndEAFltI,None,TNEANetMP)
TNEANetMP.GetEAFltI = new_instancemethod(_snap.TNEANetMP_GetEAFltI,None,TNEANetMP)
TNEANetMP.GetMxNId = new_instancemethod(_snap.TNEANetMP_GetMxNId,None,TNEANetMP)
TNEANetMP.GetMxEId = new_instancemethod(_snap.TNEANetMP_GetMxEId,None,TNEANetMP)
TNEANetMP.Reserved = new_instancemethod(_snap.TNEANetMP_Reserved,None,TNEANetMP)
TNEANetMP.ReservedE = new_instancemethod(_snap.TNEANetMP_ReservedE,None,TNEANetMP)
TNEANetMP.GetEdges = new_instancemethod(_snap.TNEANetMP_GetEdges,None,TNEANetMP)
TNEANetMP.SetEdges = new_instancemethod(_snap.TNEANetMP_SetEdges,None,TNEANetMP)
TNEANetMP.AddEdge = new_instancemethod(_snap.TNEANetMP_AddEdge,None,TNEANetMP)
TNEANetMP.AddEdgeUnchecked = new_instancemethod(_snap.TNEANetMP_AddEdgeUnchecked,None,TNEANetMP)
TNEANetMP.IsEdge = new_instancemethod(_snap.TNEANetMP_IsEdge,None,TNEANetMP)
TNEANetMP.GetEId = new_instancemethod(_snap.TNEANetMP_GetEId,None,TNEANetMP)
TNEANetMP.GetEI = new_instancemethod(_snap.TNEANetMP_GetEI,None,TNEANetMP)
TNEANetMP.GetRndNId = new_instancemethod(_snap.TNEANetMP_GetRndNId,None,TNEANetMP)
TNEANetMP.GetRndNI = new_instancemethod(_snap.TNEANetMP_GetRndNI,None,TNEANetMP)
TNEANetMP.GetRndEId = new_instancemethod(_snap.TNEANetMP_GetRndEId,None,TNEANetMP)
TNEANetMP.GetRndEI = new_instancemethod(_snap.TNEANetMP_GetRndEI,None,TNEANetMP)
TNEANetMP.GetNIdV = new_instancemethod(_snap.TNEANetMP_GetNIdV,None,TNEANetMP)
TNEANetMP.GetEIdV = new_instancemethod(_snap.TNEANetMP_GetEIdV,None,TNEANetMP)
TNEANetMP.Empty = new_instancemethod(_snap.TNEANetMP_Empty,None,TNEANetMP)
TNEANetMP.Clr = new_instancemethod(_snap.TNEANetMP_Clr,None,TNEANetMP)
TNEANetMP.Reserve = new_instancemethod(_snap.TNEANetMP_Reserve,None,TNEANetMP)
TNEANetMP.Defrag = new_instancemethod(_snap.TNEANetMP_Defrag,None,TNEANetMP)
TNEANetMP.IsOk = new_instancemethod(_snap.TNEANetMP_IsOk,None,TNEANetMP)
TNEANetMP.Dump = new_instancemethod(_snap.TNEANetMP_Dump,None,TNEANetMP)
TNEANetMP.AddIntAttrDatN = new_instancemethod(_snap.TNEANetMP_AddIntAttrDatN,None,TNEANetMP)
TNEANetMP.AddStrAttrDatN = new_instancemethod(_snap.TNEANetMP_AddStrAttrDatN,None,TNEANetMP)
TNEANetMP.AddFltAttrDatN = new_instancemethod(_snap.TNEANetMP_AddFltAttrDatN,None,TNEANetMP)
TNEANetMP.AddIntAttrDatE = new_instancemethod(_snap.TNEANetMP_AddIntAttrDatE,None,TNEANetMP)
TNEANetMP.AddStrAttrDatE = new_instancemethod(_snap.TNEANetMP_AddStrAttrDatE,None,TNEANetMP)
TNEANetMP.AddFltAttrDatE = new_instancemethod(_snap.TNEANetMP_AddFltAttrDatE,None,TNEANetMP)
TNEANetMP.GetIntAttrDatN = new_instancemethod(_snap.TNEANetMP_GetIntAttrDatN,None,TNEANetMP)
TNEANetMP.GetStrAttrDatN = new_instancemethod(_snap.TNEANetMP_GetStrAttrDatN,None,TNEANetMP)
TNEANetMP.GetFltAttrDatN = new_instancemethod(_snap.TNEANetMP_GetFltAttrDatN,None,TNEANetMP)
TNEANetMP.GetIntAttrIndN = new_instancemethod(_snap.TNEANetMP_GetIntAttrIndN,None,TNEANetMP)
TNEANetMP.GetIntAttrIndDatN = new_instancemethod(_snap.TNEANetMP_GetIntAttrIndDatN,None,TNEANetMP)
TNEANetMP.GetIntAttrDatE = new_instancemethod(_snap.TNEANetMP_GetIntAttrDatE,None,TNEANetMP)
TNEANetMP.GetStrAttrDatE = new_instancemethod(_snap.TNEANetMP_GetStrAttrDatE,None,TNEANetMP)
TNEANetMP.GetFltAttrDatE = new_instancemethod(_snap.TNEANetMP_GetFltAttrDatE,None,TNEANetMP)
TNEANetMP.GetIntAttrIndE = new_instancemethod(_snap.TNEANetMP_GetIntAttrIndE,None,TNEANetMP)
TNEANetMP.GetIntAttrIndDatE = new_instancemethod(_snap.TNEANetMP_GetIntAttrIndDatE,None,TNEANetMP)
TNEANetMP.DelAttrDatN = new_instancemethod(_snap.TNEANetMP_DelAttrDatN,None,TNEANetMP)
TNEANetMP.DelAttrDatE = new_instancemethod(_snap.TNEANetMP_DelAttrDatE,None,TNEANetMP)
TNEANetMP.AddIntAttrN = new_instancemethod(_snap.TNEANetMP_AddIntAttrN,None,TNEANetMP)
TNEANetMP.AddStrAttrN = new_instancemethod(_snap.TNEANetMP_AddStrAttrN,None,TNEANetMP)
TNEANetMP.AddFltAttrN = new_instancemethod(_snap.TNEANetMP_AddFltAttrN,None,TNEANetMP)
TNEANetMP.AddIntAttrE = new_instancemethod(_snap.TNEANetMP_AddIntAttrE,None,TNEANetMP)
TNEANetMP.AddStrAttrE = new_instancemethod(_snap.TNEANetMP_AddStrAttrE,None,TNEANetMP)
TNEANetMP.AddFltAttrE = new_instancemethod(_snap.TNEANetMP_AddFltAttrE,None,TNEANetMP)
TNEANetMP.NodeAttrIsDeleted = new_instancemethod(_snap.TNEANetMP_NodeAttrIsDeleted,None,TNEANetMP)
TNEANetMP.NodeAttrIsIntDeleted = new_instancemethod(_snap.TNEANetMP_NodeAttrIsIntDeleted,None,TNEANetMP)
TNEANetMP.NodeAttrIsStrDeleted = new_instancemethod(_snap.TNEANetMP_NodeAttrIsStrDeleted,None,TNEANetMP)
TNEANetMP.NodeAttrIsFltDeleted = new_instancemethod(_snap.TNEANetMP_NodeAttrIsFltDeleted,None,TNEANetMP)
TNEANetMP.EdgeAttrIsDeleted = new_instancemethod(_snap.TNEANetMP_EdgeAttrIsDeleted,None,TNEANetMP)
TNEANetMP.EdgeAttrIsIntDeleted = new_instancemethod(_snap.TNEANetMP_EdgeAttrIsIntDeleted,None,TNEANetMP)
TNEANetMP.EdgeAttrIsStrDeleted = new_instancemethod(_snap.TNEANetMP_EdgeAttrIsStrDeleted,None,TNEANetMP)
TNEANetMP.EdgeAttrIsFltDeleted = new_instancemethod(_snap.TNEANetMP_EdgeAttrIsFltDeleted,None,TNEANetMP)
TNEANetMP.GetNodeAttrValue = new_instancemethod(_snap.TNEANetMP_GetNodeAttrValue,None,TNEANetMP)
TNEANetMP.GetEdgeAttrValue = new_instancemethod(_snap.TNEANetMP_GetEdgeAttrValue,None,TNEANetMP)
TNEANetMP.GetWeightOutEdges = new_instancemethod(_snap.TNEANetMP_GetWeightOutEdges,None,TNEANetMP)
TNEANetMP.IsFltAttrE = new_instancemethod(_snap.TNEANetMP_IsFltAttrE,None,TNEANetMP)
TNEANetMP.IsIntAttrE = new_instancemethod(_snap.TNEANetMP_IsIntAttrE,None,TNEANetMP)
TNEANetMP.IsStrAttrE = new_instancemethod(_snap.TNEANetMP_IsStrAttrE,None,TNEANetMP)
TNEANetMP.GetFltAttrVecE = new_instancemethod(_snap.TNEANetMP_GetFltAttrVecE,None,TNEANetMP)
TNEANetMP.GetFltKeyIdE = new_instancemethod(_snap.TNEANetMP_GetFltKeyIdE,None,TNEANetMP)
TNEANetMP.GetWeightOutEdgesV = new_instancemethod(_snap.TNEANetMP_GetWeightOutEdgesV,None,TNEANetMP)
TNEANetMP.BegNI = new_instancemethod(_snap.TNEANetMP_BegNI,None,TNEANetMP)
TNEANetMP.EndNI = new_instancemethod(_snap.TNEANetMP_EndNI,None,TNEANetMP)
TNEANetMP.GetNI = new_instancemethod(_snap.TNEANetMP_GetNI,None,TNEANetMP)
TNEANetMP.BegEI = new_instancemethod(_snap.TNEANetMP_BegEI,None,TNEANetMP)
TNEANetMP.EndEI = new_instancemethod(_snap.TNEANetMP_EndEI,None,TNEANetMP)
TNEANetMP_swigregister = _snap.TNEANetMP_swigregister
TNEANetMP_swigregister(TNEANetMP)

def TNEANetMP_New(*args):
  """
    New() -> PNEANetMP
    TNEANetMP_New(int Nodes, int Edges) -> PNEANetMP
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.TNEANetMP_New(*args)

def TNEANetMP_Load(*args):
  """
    TNEANetMP_Load(TSIn SIn) -> PNEANetMP
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TNEANetMP_Load(*args)

CHUNKS_PER_THREAD = _snap.CHUNKS_PER_THREAD
L1Norm = _snap.L1Norm
L2Norm = _snap.L2Norm
Jaccard = _snap.Jaccard
Haversine = _snap.Haversine
class TTableContext(object):
    """Proxy of C++ TTableContext class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TTableContext
        __init__(self, TSIn SIn) -> TTableContext
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TTableContext_swiginit(self,_snap.new_TTableContext(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TTableContext * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TTableContext_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TTableContext * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TTableContext_Save(self, *args)

    def AddStr(self, *args):
        """
        AddStr(self, TStr Key) -> TInt
        Parameters:
           self: TTableContext * value
           Key: TStr const & value

           Key: TStr const & value

        """
        return _snap.TTableContext_AddStr(self, *args)

    def GetStr(self, *args):
        """
        GetStr(self, TInt KeyId) -> TStr
        Parameters:
           self: TTableContext const * value
           KeyId: TInt const & value

           KeyId: TInt const & value

        """
        return _snap.TTableContext_GetStr(self, *args)

    __swig_destroy__ = _snap.delete_TTableContext
TTableContext.Load = new_instancemethod(_snap.TTableContext_Load,None,TTableContext)
TTableContext.Save = new_instancemethod(_snap.TTableContext_Save,None,TTableContext)
TTableContext.AddStr = new_instancemethod(_snap.TTableContext_AddStr,None,TTableContext)
TTableContext.GetStr = new_instancemethod(_snap.TTableContext_GetStr,None,TTableContext)
TTableContext_swigregister = _snap.TTableContext_swigregister
TTableContext_swigregister(TTableContext)

class TPrimitive(object):
    """Proxy of C++ TPrimitive class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TPrimitive
        __init__(self, TInt Val) -> TPrimitive
        Parameters:
           Val: TInt const & value

           Val: TInt const & value

        __init__(self, TFlt Val) -> TPrimitive
        Parameters:
           Val: TFlt const & value

           Val: TFlt const & value

        __init__(self, TStr Val) -> TPrimitive
        Parameters:
           Val: TStr const & value

           Val: TStr const & value

        __init__(self, TPrimitive Prim) -> TPrimitive
        Parameters:
           Prim: TPrimitive const & value

           Prim: TPrimitive const & value

        """
        _snap.TPrimitive_swiginit(self,_snap.new_TPrimitive(*args))
    def GetInt(self):
        """
        GetInt(self) -> TInt
        Parameters:
           self: TPrimitive const * value




        """
        return _snap.TPrimitive_GetInt(self)

    def GetFlt(self):
        """
        GetFlt(self) -> TFlt
        Parameters:
           self: TPrimitive const * value




        """
        return _snap.TPrimitive_GetFlt(self)

    def GetStr(self):
        """
        GetStr(self) -> TStr
        Parameters:
           self: TPrimitive const * value




        """
        return _snap.TPrimitive_GetStr(self)

    def GetType(self):
        """
        GetType(self)
        Parameters:
           self: TPrimitive const * value




        """
        return _snap.TPrimitive_GetType(self)

    __swig_destroy__ = _snap.delete_TPrimitive
TPrimitive.GetInt = new_instancemethod(_snap.TPrimitive_GetInt,None,TPrimitive)
TPrimitive.GetFlt = new_instancemethod(_snap.TPrimitive_GetFlt,None,TPrimitive)
TPrimitive.GetStr = new_instancemethod(_snap.TPrimitive_GetStr,None,TPrimitive)
TPrimitive.GetType = new_instancemethod(_snap.TPrimitive_GetType,None,TPrimitive)
TPrimitive_swigregister = _snap.TPrimitive_swigregister
TPrimitive_swigregister(TPrimitive)

class TTableRow(object):
    """Proxy of C++ TTableRow class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> TTableRow"""
        _snap.TTableRow_swiginit(self,_snap.new_TTableRow())
    def AddInt(self, *args):
        """
        AddInt(self, TInt Val)
        Parameters:
           self: TTableRow * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TTableRow_AddInt(self, *args)

    def AddFlt(self, *args):
        """
        AddFlt(self, TFlt Val)
        Parameters:
           self: TTableRow * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TTableRow_AddFlt(self, *args)

    def AddStr(self, *args):
        """
        AddStr(self, TStr Val)
        Parameters:
           self: TTableRow * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TTableRow_AddStr(self, *args)

    def GetIntVals(self):
        """
        GetIntVals(self) -> TIntV
        Parameters:
           self: TTableRow const * value




        """
        return _snap.TTableRow_GetIntVals(self)

    def GetFltVals(self):
        """
        GetFltVals(self) -> TFltV
        Parameters:
           self: TTableRow const * value




        """
        return _snap.TTableRow_GetFltVals(self)

    def GetStrVals(self):
        """
        GetStrVals(self) -> TStrV
        Parameters:
           self: TTableRow const * value




        """
        return _snap.TTableRow_GetStrVals(self)

    __swig_destroy__ = _snap.delete_TTableRow
TTableRow.AddInt = new_instancemethod(_snap.TTableRow_AddInt,None,TTableRow)
TTableRow.AddFlt = new_instancemethod(_snap.TTableRow_AddFlt,None,TTableRow)
TTableRow.AddStr = new_instancemethod(_snap.TTableRow_AddStr,None,TTableRow)
TTableRow.GetIntVals = new_instancemethod(_snap.TTableRow_GetIntVals,None,TTableRow)
TTableRow.GetFltVals = new_instancemethod(_snap.TTableRow_GetFltVals,None,TTableRow)
TTableRow.GetStrVals = new_instancemethod(_snap.TTableRow_GetStrVals,None,TTableRow)
TTableRow_swigregister = _snap.TTableRow_swigregister
TTableRow_swigregister(TTableRow)

aaMin = _snap.aaMin
aaMax = _snap.aaMax
aaFirst = _snap.aaFirst
aaLast = _snap.aaLast
aaMean = _snap.aaMean
aaMedian = _snap.aaMedian
aaSum = _snap.aaSum
aaCount = _snap.aaCount
aoAdd = _snap.aoAdd
aoSub = _snap.aoSub
aoMul = _snap.aoMul
aoDiv = _snap.aoDiv
aoMod = _snap.aoMod
aoMin = _snap.aoMin
aoMax = _snap.aoMax
class GroupStmt(object):
    """Proxy of C++ GroupStmt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> GroupStmt
        __init__(self, TStrV Attrs) -> GroupStmt
        Parameters:
           Attrs: TStrV const & value

           Attrs: TStrV const & value

        __init__(self, TStrV Attrs, TBool ordered, TBool physical) -> GroupStmt
        Parameters:
           Attrs: TStrV const & value
           ordered: TBool value
           physical: TBool value

           Attrs: TStrV const & value
           ordered: TBool value
           physical: TBool value

        __init__(self, GroupStmt stmt) -> GroupStmt
        Parameters:
           stmt: GroupStmt const & value

           stmt: GroupStmt const & value

        """
        _snap.GroupStmt_swiginit(self,_snap.new_GroupStmt(*args))
    def UsePhysicalIds(self):
        """
        UsePhysicalIds(self) -> TBool
        Parameters:
           self: GroupStmt * value




        """
        return _snap.GroupStmt_UsePhysicalIds(self)

    def __eq__(self, *args):
        """
        __eq__(self, GroupStmt stmt) -> TBool
        Parameters:
           self: GroupStmt const * value
           stmt: GroupStmt const & value

           stmt: GroupStmt const & value

        """
        return _snap.GroupStmt___eq__(self, *args)

    def IsValid(self):
        """
        IsValid(self) -> TBool
        Parameters:
           self: GroupStmt * value




        """
        return _snap.GroupStmt_IsValid(self)

    def Invalidate(self):
        """
        Invalidate(self)
        Parameters:
           self: GroupStmt * value




        """
        return _snap.GroupStmt_Invalidate(self)

    def IncludesAttr(self, *args):
        """
        IncludesAttr(self, TStr Attr) -> TBool
        Parameters:
           self: GroupStmt * value
           Attr: TStr const & value

           Attr: TStr const & value

        """
        return _snap.GroupStmt_IncludesAttr(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> TSize
        Parameters:
           self: GroupStmt const * value




        """
        return _snap.GroupStmt_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: GroupStmt const * value




        """
        return _snap.GroupStmt_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: GroupStmt const * value




        """
        return _snap.GroupStmt_GetSecHashCd(self)

    def Print(self):
        """
        Print(self)
        Parameters:
           self: GroupStmt * value




        """
        return _snap.GroupStmt_Print(self)

    __swig_destroy__ = _snap.delete_GroupStmt
GroupStmt.UsePhysicalIds = new_instancemethod(_snap.GroupStmt_UsePhysicalIds,None,GroupStmt)
GroupStmt.__eq__ = new_instancemethod(_snap.GroupStmt___eq__,None,GroupStmt)
GroupStmt.IsValid = new_instancemethod(_snap.GroupStmt_IsValid,None,GroupStmt)
GroupStmt.Invalidate = new_instancemethod(_snap.GroupStmt_Invalidate,None,GroupStmt)
GroupStmt.IncludesAttr = new_instancemethod(_snap.GroupStmt_IncludesAttr,None,GroupStmt)
GroupStmt.GetMemUsed = new_instancemethod(_snap.GroupStmt_GetMemUsed,None,GroupStmt)
GroupStmt.GetPrimHashCd = new_instancemethod(_snap.GroupStmt_GetPrimHashCd,None,GroupStmt)
GroupStmt.GetSecHashCd = new_instancemethod(_snap.GroupStmt_GetSecHashCd,None,GroupStmt)
GroupStmt.Print = new_instancemethod(_snap.GroupStmt_Print,None,GroupStmt)
GroupStmt_swigregister = _snap.GroupStmt_swigregister
GroupStmt_swigregister(GroupStmt)

class TRowIterator(object):
    """Proxy of C++ TRowIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TRowIterator
        __init__(self, TInt RowIdx, TTable TablePtr) -> TRowIterator
        Parameters:
           RowIdx: TInt value
           TablePtr: TTable const * value

           RowIdx: TInt value
           TablePtr: TTable const * value

        __init__(self, TRowIterator RowI) -> TRowIterator
        Parameters:
           RowI: TRowIterator const & value

           RowI: TRowIterator const & value

        """
        _snap.TRowIterator_swiginit(self,_snap.new_TRowIterator(*args))
    def Next(self):
        """
        Next(self) -> TRowIterator
        Parameters:
           self: TRowIterator * value




        """
        return _snap.TRowIterator_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TRowIterator RowI) -> bool
        Parameters:
           self: TRowIterator const * value
           RowI: TRowIterator const & value

           RowI: TRowIterator const & value

        """
        return _snap.TRowIterator___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TRowIterator RowI) -> bool
        Parameters:
           self: TRowIterator const * value
           RowI: TRowIterator const & value

           RowI: TRowIterator const & value

        """
        return _snap.TRowIterator___eq__(self, *args)

    def GetRowIdx(self):
        """
        GetRowIdx(self) -> TInt
        Parameters:
           self: TRowIterator const * value




        """
        return _snap.TRowIterator_GetRowIdx(self)

    def GetStrMapById(self, *args):
        """
        GetStrMapById(self, TInt ColIdx) -> TInt
        Parameters:
           self: TRowIterator const * value
           ColIdx: TInt value

           ColIdx: TInt value

        """
        return _snap.TRowIterator_GetStrMapById(self, *args)

    def GetIntAttr(self, *args):
        """
        GetIntAttr(self, TStr Col) -> TInt
        Parameters:
           self: TRowIterator const * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TRowIterator_GetIntAttr(self, *args)

    def GetFltAttr(self, *args):
        """
        GetFltAttr(self, TStr Col) -> TFlt
        Parameters:
           self: TRowIterator const * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TRowIterator_GetFltAttr(self, *args)

    def GetStrAttr(self, *args):
        """
        GetStrAttr(self, TStr Col) -> TStr
        Parameters:
           self: TRowIterator const * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TRowIterator_GetStrAttr(self, *args)

    def GetStrMapByName(self, *args):
        """
        GetStrMapByName(self, TStr Col) -> TInt
        Parameters:
           self: TRowIterator const * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TRowIterator_GetStrMapByName(self, *args)

    def CompareAtomicConst(self, *args):
        """
        CompareAtomicConst(self, TInt ColIdx, TPrimitive Val, TPredComp Cmp) -> TBool
        Parameters:
           self: TRowIterator * value
           ColIdx: TInt value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value

           ColIdx: TInt value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value

        """
        return _snap.TRowIterator_CompareAtomicConst(self, *args)

    def CompareAtomicConstTStr(self, *args):
        """
        CompareAtomicConstTStr(self, TInt ColIdx, TStr Val, TPredComp Cmp) -> TBool
        Parameters:
           self: TRowIterator * value
           ColIdx: TInt value
           Val: TStr const & value
           Cmp: enum TPredComp value

           ColIdx: TInt value
           Val: TStr const & value
           Cmp: enum TPredComp value

        """
        return _snap.TRowIterator_CompareAtomicConstTStr(self, *args)

    __swig_destroy__ = _snap.delete_TRowIterator
TRowIterator.Next = new_instancemethod(_snap.TRowIterator_Next,None,TRowIterator)
TRowIterator.__lt__ = new_instancemethod(_snap.TRowIterator___lt__,None,TRowIterator)
TRowIterator.__eq__ = new_instancemethod(_snap.TRowIterator___eq__,None,TRowIterator)
TRowIterator.GetRowIdx = new_instancemethod(_snap.TRowIterator_GetRowIdx,None,TRowIterator)
TRowIterator.GetStrMapById = new_instancemethod(_snap.TRowIterator_GetStrMapById,None,TRowIterator)
TRowIterator.GetIntAttr = new_instancemethod(_snap.TRowIterator_GetIntAttr,None,TRowIterator)
TRowIterator.GetFltAttr = new_instancemethod(_snap.TRowIterator_GetFltAttr,None,TRowIterator)
TRowIterator.GetStrAttr = new_instancemethod(_snap.TRowIterator_GetStrAttr,None,TRowIterator)
TRowIterator.GetStrMapByName = new_instancemethod(_snap.TRowIterator_GetStrMapByName,None,TRowIterator)
TRowIterator.CompareAtomicConst = new_instancemethod(_snap.TRowIterator_CompareAtomicConst,None,TRowIterator)
TRowIterator.CompareAtomicConstTStr = new_instancemethod(_snap.TRowIterator_CompareAtomicConstTStr,None,TRowIterator)
TRowIterator_swigregister = _snap.TRowIterator_swigregister
TRowIterator_swigregister(TRowIterator)

class TRowIteratorWithRemove(object):
    """Proxy of C++ TRowIteratorWithRemove class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TRowIteratorWithRemove
        __init__(self, TInt RowIdx, TTable TablePtr) -> TRowIteratorWithRemove
        Parameters:
           RowIdx: TInt value
           TablePtr: TTable * value

           RowIdx: TInt value
           TablePtr: TTable * value

        __init__(self, TInt RowIdx, TTable TablePtr, TBool IsStart) -> TRowIteratorWithRemove
        Parameters:
           RowIdx: TInt value
           TablePtr: TTable * value
           IsStart: TBool value

           RowIdx: TInt value
           TablePtr: TTable * value
           IsStart: TBool value

        __init__(self, TRowIteratorWithRemove RowI) -> TRowIteratorWithRemove
        Parameters:
           RowI: TRowIteratorWithRemove const & value

           RowI: TRowIteratorWithRemove const & value

        """
        _snap.TRowIteratorWithRemove_swiginit(self,_snap.new_TRowIteratorWithRemove(*args))
    def Next(self):
        """
        Next(self) -> TRowIteratorWithRemove
        Parameters:
           self: TRowIteratorWithRemove * value




        """
        return _snap.TRowIteratorWithRemove_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TRowIteratorWithRemove RowI) -> bool
        Parameters:
           self: TRowIteratorWithRemove const * value
           RowI: TRowIteratorWithRemove const & value

           RowI: TRowIteratorWithRemove const & value

        """
        return _snap.TRowIteratorWithRemove___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TRowIteratorWithRemove RowI) -> bool
        Parameters:
           self: TRowIteratorWithRemove const * value
           RowI: TRowIteratorWithRemove const & value

           RowI: TRowIteratorWithRemove const & value

        """
        return _snap.TRowIteratorWithRemove___eq__(self, *args)

    def GetRowIdx(self):
        """
        GetRowIdx(self) -> TInt
        Parameters:
           self: TRowIteratorWithRemove const * value




        """
        return _snap.TRowIteratorWithRemove_GetRowIdx(self)

    def GetNextRowIdx(self):
        """
        GetNextRowIdx(self) -> TInt
        Parameters:
           self: TRowIteratorWithRemove const * value




        """
        return _snap.TRowIteratorWithRemove_GetNextRowIdx(self)

    def GetNextIntAttr(self, *args):
        """
        GetNextIntAttr(self, TStr Col) -> TInt
        Parameters:
           self: TRowIteratorWithRemove const * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TRowIteratorWithRemove_GetNextIntAttr(self, *args)

    def GetNextFltAttr(self, *args):
        """
        GetNextFltAttr(self, TStr Col) -> TFlt
        Parameters:
           self: TRowIteratorWithRemove const * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TRowIteratorWithRemove_GetNextFltAttr(self, *args)

    def GetNextStrAttr(self, *args):
        """
        GetNextStrAttr(self, TStr Col) -> TStr
        Parameters:
           self: TRowIteratorWithRemove const * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TRowIteratorWithRemove_GetNextStrAttr(self, *args)

    def IsFirst(self):
        """
        IsFirst(self) -> TBool
        Parameters:
           self: TRowIteratorWithRemove const * value




        """
        return _snap.TRowIteratorWithRemove_IsFirst(self)

    def RemoveNext(self):
        """
        RemoveNext(self)
        Parameters:
           self: TRowIteratorWithRemove * value




        """
        return _snap.TRowIteratorWithRemove_RemoveNext(self)

    def CompareAtomicConst(self, *args):
        """
        CompareAtomicConst(self, TInt ColIdx, TPrimitive Val, TPredComp Cmp) -> TBool
        Parameters:
           self: TRowIteratorWithRemove * value
           ColIdx: TInt value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value

           ColIdx: TInt value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value

        """
        return _snap.TRowIteratorWithRemove_CompareAtomicConst(self, *args)

    __swig_destroy__ = _snap.delete_TRowIteratorWithRemove
TRowIteratorWithRemove.Next = new_instancemethod(_snap.TRowIteratorWithRemove_Next,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.__lt__ = new_instancemethod(_snap.TRowIteratorWithRemove___lt__,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.__eq__ = new_instancemethod(_snap.TRowIteratorWithRemove___eq__,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.GetRowIdx = new_instancemethod(_snap.TRowIteratorWithRemove_GetRowIdx,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextRowIdx = new_instancemethod(_snap.TRowIteratorWithRemove_GetNextRowIdx,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextIntAttr = new_instancemethod(_snap.TRowIteratorWithRemove_GetNextIntAttr,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextFltAttr = new_instancemethod(_snap.TRowIteratorWithRemove_GetNextFltAttr,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.GetNextStrAttr = new_instancemethod(_snap.TRowIteratorWithRemove_GetNextStrAttr,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.IsFirst = new_instancemethod(_snap.TRowIteratorWithRemove_IsFirst,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.RemoveNext = new_instancemethod(_snap.TRowIteratorWithRemove_RemoveNext,None,TRowIteratorWithRemove)
TRowIteratorWithRemove.CompareAtomicConst = new_instancemethod(_snap.TRowIteratorWithRemove_CompareAtomicConst,None,TRowIteratorWithRemove)
TRowIteratorWithRemove_swigregister = _snap.TRowIteratorWithRemove_swigregister
TRowIteratorWithRemove_swigregister(TRowIteratorWithRemove)

class TTableIterator(object):
    """Proxy of C++ TTableIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, TVec<(PTable)> PTableV) -> TTableIterator
        Parameters:
           PTableV: TVec< PTable > & value

           PTableV: TVec< PTable > & value

        """
        _snap.TTableIterator_swiginit(self,_snap.new_TTableIterator(*args))
    def Next(self):
        """
        Next(self) -> PTable
        Parameters:
           self: TTableIterator * value




        """
        return _snap.TTableIterator_Next(self)

    def HasNext(self):
        """
        HasNext(self) -> bool
        Parameters:
           self: TTableIterator * value




        """
        return _snap.TTableIterator_HasNext(self)

    __swig_destroy__ = _snap.delete_TTableIterator
TTableIterator.Next = new_instancemethod(_snap.TTableIterator_Next,None,TTableIterator)
TTableIterator.HasNext = new_instancemethod(_snap.TTableIterator_HasNext,None,TTableIterator)
TTableIterator_swigregister = _snap.TTableIterator_swigregister
TTableIterator_swigregister(TTableIterator)

class TTable(object):
    """Proxy of C++ TTable class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def SetMP(*args):
        """
        SetMP(TInt Value)
        Parameters:
           Value: TInt value

           Value: TInt value

           Value: TInt value

        """
        return _snap.TTable_SetMP(*args)

    SetMP = staticmethod(SetMP)
    def GetMP():
        """GetMP() -> TInt"""
        return _snap.TTable_GetMP()

    GetMP = staticmethod(GetMP)
    def NormalizeColName(*args):
        """
        NormalizeColName(TStr ColName) -> TStr
        Parameters:
           ColName: TStr const & value

           ColName: TStr const & value

           ColName: TStr const & value

        """
        return _snap.TTable_NormalizeColName(*args)

    NormalizeColName = staticmethod(NormalizeColName)
    def NormalizeColNameV(*args):
        """
        NormalizeColNameV(TStrV Cols) -> TStrV
        Parameters:
           Cols: TStrV const & value

           Cols: TStrV const & value

           Cols: TStrV const & value

        """
        return _snap.TTable_NormalizeColNameV(*args)

    NormalizeColNameV = staticmethod(NormalizeColNameV)
    def GroupByIntColMP(self, *args):
        """
        GroupByIntColMP(self, TStr GroupBy, THashMP<(TInt,TIntV)> Grouping, TBool UsePhysicalIds = True)
        Parameters:
           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value
           UsePhysicalIds: TBool value

           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value
           UsePhysicalIds: TBool value

        GroupByIntColMP(self, TStr GroupBy, THashMP<(TInt,TIntV)> Grouping)
        Parameters:
           self: TTable const * value
           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value

           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value

        """
        return _snap.TTable_GroupByIntColMP(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> TTable
        __init__(self, TTableContext Context) -> TTable
        Parameters:
           Context: TTableContext * value

           Context: TTableContext * value

        __init__(self, Schema S, TTableContext Context) -> TTable
        Parameters:
           S: Schema const & value
           Context: TTableContext * value

           S: Schema const & value
           Context: TTableContext * value

        __init__(self, TSIn SIn, TTableContext Context) -> TTable
        Parameters:
           SIn: TSIn & value
           Context: TTableContext * value

           SIn: TSIn & value
           Context: TTableContext * value

        __init__(self, TIntH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> TTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        __init__(self, TIntH H, TStr Col1, TStr Col2, TTableContext Context) -> TTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        __init__(self, TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> TTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        __init__(self, TIntFltH H, TStr Col1, TStr Col2, TTableContext Context) -> TTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        __init__(self, TTable Table) -> TTable
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

        __init__(self, TTable Table, TIntV RowIds) -> TTable
        Parameters:
           Table: TTable const & value
           RowIds: TIntV const & value

           Table: TTable const & value
           RowIds: TIntV const & value

        """
        _snap.TTable_swiginit(self,_snap.new_TTable(*args))
    def New(*args):
        """
        New() -> PTable
        New(TTableContext Context) -> PTable
        Parameters:
           Context: TTableContext * value

           Context: TTableContext * value

           Context: TTableContext * value

        New(Schema S, TTableContext Context) -> PTable
        Parameters:
           S: Schema const & value
           Context: TTableContext * value

           S: Schema const & value
           Context: TTableContext * value

           S: Schema const & value
           Context: TTableContext * value

        New(TIntH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> PTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        New(TIntH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        New(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> PTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        New(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        New(PTable Table) -> PTable
        Parameters:
           Table: PTable const value

           Table: PTable const value

           Table: PTable const value

        """
        return _snap.TTable_New(*args)

    New = staticmethod(New)
    def LoadSS(*args):
        """
        LoadSS(Schema S, TStr InFNm, TTableContext Context, char Separator = '\t', 
            TBool HasTitleLine = False) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

        LoadSS(Schema S, TStr InFNm, TTableContext Context, char Separator = '\t') -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

        LoadSS(Schema S, TStr InFNm, TTableContext Context) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

        LoadSS(Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols, 
            char Separator = '\t', TBool HasTitleLine = False) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

        LoadSS(Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols, 
            char Separator = '\t') -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

        LoadSS(Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

        """
        return _snap.TTable_LoadSS(*args)

    LoadSS = staticmethod(LoadSS)
    def SaveSS(self, *args):
        """
        SaveSS(self, TStr OutFNm)
        Parameters:
           self: TTable * value
           OutFNm: TStr const & value

           OutFNm: TStr const & value

        """
        return _snap.TTable_SaveSS(self, *args)

    def SaveBin(self, *args):
        """
        SaveBin(self, TStr OutFNm)
        Parameters:
           self: TTable * value
           OutFNm: TStr const & value

           OutFNm: TStr const & value

        """
        return _snap.TTable_SaveBin(self, *args)

    def Load(*args):
        """
        Load(TSIn SIn, TTableContext Context) -> PTable
        Parameters:
           SIn: TSIn & value
           Context: TTableContext * value

           SIn: TSIn & value
           Context: TTableContext * value

           SIn: TSIn & value
           Context: TTableContext * value

        """
        return _snap.TTable_Load(*args)

    Load = staticmethod(Load)
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TTable * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TTable_Save(self, *args)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TTable const * value


        """
        return _snap.TTable_Dump(self, *args)

    def TableFromHashMap(*args):
        """
        TableFromHashMap(TIntH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> PTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        TableFromHashMap(TIntH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        TableFromHashMap(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> PTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        TableFromHashMap(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        """
        return _snap.TTable_TableFromHashMap(*args)

    TableFromHashMap = staticmethod(TableFromHashMap)
    def AddRow(self, *args):
        """
        AddRow(self, TTableRow Row)
        Parameters:
           self: TTable * value
           Row: TTableRow const & value

           Row: TTableRow const & value

        """
        return _snap.TTable_AddRow(self, *args)

    def GetContext(self):
        """
        GetContext(self) -> TTableContext
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_GetContext(self)

    def ChangeContext(self, *args):
        """
        ChangeContext(self, TTableContext Context) -> TTableContext
        Parameters:
           self: TTable * value
           Context: TTableContext * value

           Context: TTableContext * value

        """
        return _snap.TTable_ChangeContext(self, *args)

    def GetColIdx(self, *args):
        """
        GetColIdx(self, TStr ColName) -> TInt
        Parameters:
           self: TTable const * value
           ColName: TStr const & value

           ColName: TStr const & value

        """
        return _snap.TTable_GetColIdx(self, *args)

    def GetIntVal(self, *args):
        """
        GetIntVal(self, TStr ColName, TInt RowIdx) -> TInt
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           RowIdx: TInt const & value

           ColName: TStr const & value
           RowIdx: TInt const & value

        """
        return _snap.TTable_GetIntVal(self, *args)

    def GetFltVal(self, *args):
        """
        GetFltVal(self, TStr ColName, TInt RowIdx) -> TFlt
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           RowIdx: TInt const & value

           ColName: TStr const & value
           RowIdx: TInt const & value

        """
        return _snap.TTable_GetFltVal(self, *args)

    def GetStrVal(self, *args):
        """
        GetStrVal(self, TStr ColName, TInt RowIdx) -> TStr
        Parameters:
           self: TTable const * value
           ColName: TStr const & value
           RowIdx: TInt const & value

           ColName: TStr const & value
           RowIdx: TInt const & value

        """
        return _snap.TTable_GetStrVal(self, *args)

    def GetStr(self, *args):
        """
        GetStr(self, TInt KeyId) -> TStr
        Parameters:
           self: TTable const * value
           KeyId: TInt const & value

           KeyId: TInt const & value

        """
        return _snap.TTable_GetStr(self, *args)

    def GetIntValAtRowIdx(self, *args):
        """
        GetIntValAtRowIdx(self, TInt ColIdx, TInt RowIdx) -> TInt
        Parameters:
           self: TTable * value
           ColIdx: TInt const & value
           RowIdx: TInt const & value

           ColIdx: TInt const & value
           RowIdx: TInt const & value

        """
        return _snap.TTable_GetIntValAtRowIdx(self, *args)

    def GetFltValAtRowIdx(self, *args):
        """
        GetFltValAtRowIdx(self, TInt ColIdx, TInt RowIdx) -> TFlt
        Parameters:
           self: TTable * value
           ColIdx: TInt const & value
           RowIdx: TInt const & value

           ColIdx: TInt const & value
           RowIdx: TInt const & value

        """
        return _snap.TTable_GetFltValAtRowIdx(self, *args)

    def GetSchema(self):
        """
        GetSchema(self) -> Schema
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_GetSchema(self)

    def ToGraphSequence(self, *args):
        """
        ToGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn, TInt EndVal = Mx) -> PNEANetV
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

        ToGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn) -> PNEANetV
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

        ToGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize) -> PNEANetV
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

        """
        return _snap.TTable_ToGraphSequence(self, *args)

    def ToVarGraphSequence(self, *args):
        """
        ToVarGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPrV SplitIntervals) -> PNEANetV
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

        """
        return _snap.TTable_ToVarGraphSequence(self, *args)

    def ToGraphPerGroup(self, *args):
        """
        ToGraphPerGroup(self, TStr GroupAttr, TAttrAggr AggrPolicy) -> PNEANetV
        Parameters:
           self: TTable * value
           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

        """
        return _snap.TTable_ToGraphPerGroup(self, *args)

    def ToGraphSequenceIterator(self, *args):
        """
        ToGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn, TInt EndVal = Mx) -> PNEANet
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

        ToGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn) -> PNEANet
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

        ToGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize) -> PNEANet
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

        """
        return _snap.TTable_ToGraphSequenceIterator(self, *args)

    def ToVarGraphSequenceIterator(self, *args):
        """
        ToVarGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPrV SplitIntervals) -> PNEANet
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

        """
        return _snap.TTable_ToVarGraphSequenceIterator(self, *args)

    def ToGraphPerGroupIterator(self, *args):
        """
        ToGraphPerGroupIterator(self, TStr GroupAttr, TAttrAggr AggrPolicy) -> PNEANet
        Parameters:
           self: TTable * value
           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

        """
        return _snap.TTable_ToGraphPerGroupIterator(self, *args)

    def NextGraphIterator(self):
        """
        NextGraphIterator(self) -> PNEANet
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_NextGraphIterator(self)

    def IsLastGraphOfSequence(self):
        """
        IsLastGraphOfSequence(self) -> TBool
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_IsLastGraphOfSequence(self)

    def GetSrcCol(self):
        """
        GetSrcCol(self) -> TStr
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetSrcCol(self)

    def SetSrcCol(self, *args):
        """
        SetSrcCol(self, TStr Src)
        Parameters:
           self: TTable * value
           Src: TStr const & value

           Src: TStr const & value

        """
        return _snap.TTable_SetSrcCol(self, *args)

    def GetDstCol(self):
        """
        GetDstCol(self) -> TStr
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetDstCol(self)

    def SetDstCol(self, *args):
        """
        SetDstCol(self, TStr Dst)
        Parameters:
           self: TTable * value
           Dst: TStr const & value

           Dst: TStr const & value

        """
        return _snap.TTable_SetDstCol(self, *args)

    def AddEdgeAttr(self, *args):
        """
        AddEdgeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

        AddEdgeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.TTable_AddEdgeAttr(self, *args)

    def AddSrcNodeAttr(self, *args):
        """
        AddSrcNodeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

        AddSrcNodeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.TTable_AddSrcNodeAttr(self, *args)

    def AddDstNodeAttr(self, *args):
        """
        AddDstNodeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

        AddDstNodeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.TTable_AddDstNodeAttr(self, *args)

    def AddNodeAttr(self, *args):
        """
        AddNodeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

        AddNodeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.TTable_AddNodeAttr(self, *args)

    def SetCommonNodeAttrs(self, *args):
        """
        SetCommonNodeAttrs(self, TStr SrcAttr, TStr DstAttr, TStr CommonAttrName)
        Parameters:
           self: TTable * value
           SrcAttr: TStr const & value
           DstAttr: TStr const & value
           CommonAttrName: TStr const & value

           SrcAttr: TStr const & value
           DstAttr: TStr const & value
           CommonAttrName: TStr const & value

        """
        return _snap.TTable_SetCommonNodeAttrs(self, *args)

    def GetSrcNodeIntAttrV(self):
        """
        GetSrcNodeIntAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetSrcNodeIntAttrV(self)

    def GetDstNodeIntAttrV(self):
        """
        GetDstNodeIntAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetDstNodeIntAttrV(self)

    def GetEdgeIntAttrV(self):
        """
        GetEdgeIntAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetEdgeIntAttrV(self)

    def GetSrcNodeFltAttrV(self):
        """
        GetSrcNodeFltAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetSrcNodeFltAttrV(self)

    def GetDstNodeFltAttrV(self):
        """
        GetDstNodeFltAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetDstNodeFltAttrV(self)

    def GetEdgeFltAttrV(self):
        """
        GetEdgeFltAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetEdgeFltAttrV(self)

    def GetSrcNodeStrAttrV(self):
        """
        GetSrcNodeStrAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetSrcNodeStrAttrV(self)

    def GetDstNodeStrAttrV(self):
        """
        GetDstNodeStrAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetDstNodeStrAttrV(self)

    def GetEdgeStrAttrV(self):
        """
        GetEdgeStrAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetEdgeStrAttrV(self)

    def GetNodeTable(*args):
        """
        GetNodeTable(PNEANet Network, TTableContext Context) -> PTable
        Parameters:
           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

        """
        return _snap.TTable_GetNodeTable(*args)

    GetNodeTable = staticmethod(GetNodeTable)
    def GetEdgeTable(*args):
        """
        GetEdgeTable(PNEANet Network, TTableContext Context) -> PTable
        Parameters:
           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

        """
        return _snap.TTable_GetEdgeTable(*args)

    GetEdgeTable = staticmethod(GetEdgeTable)
    def GetEdgeTablePN(*args):
        """
        GetEdgeTablePN(PNGraphMP Network, TTableContext Context) -> PTable
        Parameters:
           Network: PNGraphMP const & value
           Context: TTableContext * value

           Network: PNGraphMP const & value
           Context: TTableContext * value

           Network: PNGraphMP const & value
           Context: TTableContext * value

        """
        return _snap.TTable_GetEdgeTablePN(*args)

    GetEdgeTablePN = staticmethod(GetEdgeTablePN)
    def GetFltNodePropertyTable(*args):
        """
        GetFltNodePropertyTable(PNEANet Network, TIntFltH Property, TStr NodeAttrName, 
             NodeAttrType, TStr PropertyAttrName, TTableContext Context) -> PTable
        Parameters:
           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

        """
        return _snap.TTable_GetFltNodePropertyTable(*args)

    GetFltNodePropertyTable = staticmethod(GetFltNodePropertyTable)
    def GetColType(self, *args):
        """
        GetColType(self, TStr ColName)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value

           ColName: TStr const & value

        """
        return _snap.TTable_GetColType(self, *args)

    def GetNumRows(self):
        """
        GetNumRows(self) -> TInt
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetNumRows(self)

    def GetNumValidRows(self):
        """
        GetNumValidRows(self) -> TInt
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetNumValidRows(self)

    def GetRowIdMap(self):
        """
        GetRowIdMap(self) -> TIntH
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_GetRowIdMap(self)

    def BegRI(self):
        """
        BegRI(self) -> TRowIterator
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_BegRI(self)

    def EndRI(self):
        """
        EndRI(self) -> TRowIterator
        Parameters:
           self: TTable const * value




        """
        return _snap.TTable_EndRI(self)

    def BegRIWR(self):
        """
        BegRIWR(self) -> TRowIteratorWithRemove
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_BegRIWR(self)

    def EndRIWR(self):
        """
        EndRIWR(self) -> TRowIteratorWithRemove
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_EndRIWR(self)

    def GetPartitionRanges(self, *args):
        """
        GetPartitionRanges(self, TIntPrV Partitions, TInt NumPartitions)
        Parameters:
           self: TTable const * value
           Partitions: TIntPrV & value
           NumPartitions: TInt value

           Partitions: TIntPrV & value
           NumPartitions: TInt value

        """
        return _snap.TTable_GetPartitionRanges(self, *args)

    def Rename(self, *args):
        """
        Rename(self, TStr Column, TStr NewLabel)
        Parameters:
           self: TTable * value
           Column: TStr const & value
           NewLabel: TStr const & value

           Column: TStr const & value
           NewLabel: TStr const & value

        """
        return _snap.TTable_Rename(self, *args)

    def Unique(self, *args):
        """
        Unique(self, TStr Col)
        Parameters:
           Col: TStr const & value

           Col: TStr const & value

        Unique(self, TStrV Cols, TBool Ordered = True)
        Parameters:
           Cols: TStrV const & value
           Ordered: TBool value

           Cols: TStrV const & value
           Ordered: TBool value

        Unique(self, TStrV Cols)
        Parameters:
           self: TTable * value
           Cols: TStrV const & value

           Cols: TStrV const & value

        """
        return _snap.TTable_Unique(self, *args)

    def Select(self, *args):
        """
        Select(self, TPredicate Predicate, TIntV SelectedRows, TBool Remove = True)
        Parameters:
           Predicate: TPredicate & value
           SelectedRows: TIntV & value
           Remove: TBool value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value
           Remove: TBool value

        Select(self, TPredicate Predicate, TIntV SelectedRows)
        Parameters:
           Predicate: TPredicate & value
           SelectedRows: TIntV & value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value

        Select(self, TPredicate Predicate)
        Parameters:
           self: TTable * value
           Predicate: TPredicate & value

           Predicate: TPredicate & value

        """
        return _snap.TTable_Select(self, *args)

    def Classify(self, *args):
        """
        Classify(self, TPredicate Predicate, TStr LabelName, TInt PositiveLabel = 1, 
            TInt NegativeLabel = 0)
        Parameters:
           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

        Classify(self, TPredicate Predicate, TStr LabelName, TInt PositiveLabel = 1)
        Parameters:
           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

        Classify(self, TPredicate Predicate, TStr LabelName)
        Parameters:
           self: TTable * value
           Predicate: TPredicate & value
           LabelName: TStr const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value

        """
        return _snap.TTable_Classify(self, *args)

    def SelectAtomic(self, *args):
        """
        SelectAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TIntV SelectedRows, 
            TBool Remove = True)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           Remove: TBool value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           Remove: TBool value

        SelectAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TIntV SelectedRows)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value

        SelectAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp)
        Parameters:
           self: TTable * value
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value

        """
        return _snap.TTable_SelectAtomic(self, *args)

    def ClassifyAtomic(self, *args):
        """
        ClassifyAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, 
            TInt PositiveLabel = 1, TInt NegativeLabel = 0)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

        ClassifyAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, 
            TInt PositiveLabel = 1)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

        ClassifyAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName)
        Parameters:
           self: TTable * value
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value

        """
        return _snap.TTable_ClassifyAtomic(self, *args)

    def SelectAtomicConst(self, *args):
        """
        SelectAtomicConst(self, TStr Col, TPrimitive Val, TPredComp Cmp, TIntV SelectedRows, 
            PTable SelectedTable, TBool Remove = True, 
            TBool Table = True)
        Parameters:
           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value
           Table: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value
           Table: TBool value

        SelectAtomicConst(self, TStr Col, TPrimitive Val, TPredComp Cmp, TIntV SelectedRows, 
            PTable SelectedTable, TBool Remove = True)
        Parameters:
           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value

        SelectAtomicConst(self, TStr Col, TPrimitive Val, TPredComp Cmp, TIntV SelectedRows, 
            PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value

        """
        return _snap.TTable_SelectAtomicConst(self, *args)

    def SelectAtomicIntConst(self, *args):
        """
        SelectAtomicIntConst(self, TStr Col, TInt Val, TPredComp Cmp)
        Parameters:
           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value

        SelectAtomicIntConst(self, TStr Col, TInt Val, TPredComp Cmp, PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

        """
        return _snap.TTable_SelectAtomicIntConst(self, *args)

    def SelectAtomicStrConst(self, *args):
        """
        SelectAtomicStrConst(self, TStr Col, TStr Val, TPredComp Cmp)
        Parameters:
           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value

        SelectAtomicStrConst(self, TStr Col, TStr Val, TPredComp Cmp, PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

        """
        return _snap.TTable_SelectAtomicStrConst(self, *args)

    def SelectAtomicFltConst(self, *args):
        """
        SelectAtomicFltConst(self, TStr Col, TFlt Val, TPredComp Cmp)
        Parameters:
           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value

        SelectAtomicFltConst(self, TStr Col, TFlt Val, TPredComp Cmp, PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

        """
        return _snap.TTable_SelectAtomicFltConst(self, *args)

    def Group(self, *args):
        """
        Group(self, TStrV GroupBy, TStr GroupColName, TBool Ordered = True, 
            TBool UsePhysicalIds = True)
        Parameters:
           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value
           UsePhysicalIds: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value
           UsePhysicalIds: TBool value

        Group(self, TStrV GroupBy, TStr GroupColName, TBool Ordered = True)
        Parameters:
           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value

        Group(self, TStrV GroupBy, TStr GroupColName)
        Parameters:
           self: TTable * value
           GroupBy: TStrV const & value
           GroupColName: TStr const & value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value

        """
        return _snap.TTable_Group(self, *args)

    def Count(self, *args):
        """
        Count(self, TStr CountColName, TStr Col)
        Parameters:
           self: TTable * value
           CountColName: TStr const & value
           Col: TStr const & value

           CountColName: TStr const & value
           Col: TStr const & value

        """
        return _snap.TTable_Count(self, *args)

    def Order(self, *args):
        """
        Order(self, TStrV OrderBy, TStr OrderColName = "", TBool ResetRankByMSC = False, 
            TBool Asc = True)
        Parameters:
           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value
           Asc: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value
           Asc: TBool value

        Order(self, TStrV OrderBy, TStr OrderColName = "", TBool ResetRankByMSC = False)
        Parameters:
           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value

        Order(self, TStrV OrderBy, TStr OrderColName = "")
        Parameters:
           OrderBy: TStrV const & value
           OrderColName: TStr value

           OrderBy: TStrV const & value
           OrderColName: TStr value

        Order(self, TStrV OrderBy)
        Parameters:
           self: TTable * value
           OrderBy: TStrV const & value

           OrderBy: TStrV const & value

        """
        return _snap.TTable_Order(self, *args)

    def Aggregate(self, *args):
        """
        Aggregate(self, TStrV GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, 
            TStr ResAttr, TBool Ordered = True)
        Parameters:
           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value
           Ordered: TBool value

        Aggregate(self, TStrV GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, 
            TStr ResAttr)
        Parameters:
           self: TTable * value
           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value

           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value

        """
        return _snap.TTable_Aggregate(self, *args)

    def AggregateCols(self, *args):
        """
        AggregateCols(self, TStrV AggrAttrs, TAttrAggr AggOp, TStr ResAttr)
        Parameters:
           self: TTable * value
           AggrAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ResAttr: TStr const & value

           AggrAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ResAttr: TStr const & value

        """
        return _snap.TTable_AggregateCols(self, *args)

    def SpliceByGroup(self, *args):
        """
        SpliceByGroup(self, TStrV GroupByAttrs, TBool Ordered = True) -> TVec<(PTable)>
        Parameters:
           GroupByAttrs: TStrV const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           Ordered: TBool value

        SpliceByGroup(self, TStrV GroupByAttrs) -> TVec<(PTable)>
        Parameters:
           self: TTable * value
           GroupByAttrs: TStrV const & value

           GroupByAttrs: TStrV const & value

        """
        return _snap.TTable_SpliceByGroup(self, *args)

    def Join(self, *args):
        """
        Join(self, TStr Col1, TTable Table, TStr Col2) -> PTable
        Parameters:
           Col1: TStr const & value
           Table: TTable const & value
           Col2: TStr const & value

           Col1: TStr const & value
           Table: TTable const & value
           Col2: TStr const & value

        Join(self, TStr Col1, PTable Table, TStr Col2) -> PTable
        Parameters:
           self: TTable * value
           Col1: TStr const & value
           Table: PTable const & value
           Col2: TStr const & value

           Col1: TStr const & value
           Table: PTable const & value
           Col2: TStr const & value

        """
        return _snap.TTable_Join(self, *args)

    def ThresholdJoin(self, *args):
        """
        ThresholdJoin(self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, 
            TStr JoinCol2, TInt Threshold, TBool PerJoinKey = False) -> PTable
        Parameters:
           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value
           PerJoinKey: TBool value

           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value
           PerJoinKey: TBool value

        ThresholdJoin(self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, 
            TStr JoinCol2, TInt Threshold) -> PTable
        Parameters:
           self: TTable * value
           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value

           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value

        """
        return _snap.TTable_ThresholdJoin(self, *args)

    def SelfJoin(self, *args):
        """
        SelfJoin(self, TStr Col) -> PTable
        Parameters:
           self: TTable * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.TTable_SelfJoin(self, *args)

    def SelfSimJoin(self, *args):
        """
        SelfSimJoin(self, TStrV Cols, TStr DistanceColName, TSimType SimType, 
            TFlt Threshold) -> PTable
        Parameters:
           self: TTable * value
           Cols: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           Cols: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        """
        return _snap.TTable_SelfSimJoin(self, *args)

    def SelfSimJoinPerGroup(self, *args):
        """
        SelfSimJoinPerGroup(self, TStr GroupAttr, TStr SimCol, TStr DistanceColName, 
            TSimType SimType, TFlt Threshold) -> PTable
        Parameters:
           GroupAttr: TStr const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           GroupAttr: TStr const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        SelfSimJoinPerGroup(self, TStrV GroupBy, TStr SimCol, TStr DistanceColName, TSimType SimType, 
            TFlt Threshold) -> PTable
        Parameters:
           self: TTable * value
           GroupBy: TStrV const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           GroupBy: TStrV const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        """
        return _snap.TTable_SelfSimJoinPerGroup(self, *args)

    def SimJoin(self, *args):
        """
        SimJoin(self, TStrV Cols1, TTable Table, TStrV Cols2, TStr DistanceColName, 
            TSimType SimType, TFlt Threshold) -> PTable
        Parameters:
           self: TTable * value
           Cols1: TStrV const & value
           Table: TTable const & value
           Cols2: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           Cols1: TStrV const & value
           Table: TTable const & value
           Cols2: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        """
        return _snap.TTable_SimJoin(self, *args)

    def SelectFirstNRows(self, *args):
        """
        SelectFirstNRows(self, TInt N)
        Parameters:
           self: TTable * value
           N: TInt const & value

           N: TInt const & value

        """
        return _snap.TTable_SelectFirstNRows(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_Defrag(self)

    def StoreIntCol(self, *args):
        """
        StoreIntCol(self, TStr ColName, TIntV ColVals)
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           ColVals: TIntV const & value

           ColName: TStr const & value
           ColVals: TIntV const & value

        """
        return _snap.TTable_StoreIntCol(self, *args)

    def StoreFltCol(self, *args):
        """
        StoreFltCol(self, TStr ColName, TFltV ColVals)
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           ColVals: TFltV const & value

           ColName: TStr const & value
           ColVals: TFltV const & value

        """
        return _snap.TTable_StoreFltCol(self, *args)

    def StoreStrCol(self, *args):
        """
        StoreStrCol(self, TStr ColName, TStrV ColVals)
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           ColVals: TStrV const & value

           ColName: TStr const & value
           ColVals: TStrV const & value

        """
        return _snap.TTable_StoreStrCol(self, *args)

    def UpdateFltFromTable(self, *args):
        """
        UpdateFltFromTable(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr, TFlt DefaultFltVal = 0.0)
        Parameters:
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

        UpdateFltFromTable(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr)
        Parameters:
           self: TTable * value
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

        """
        return _snap.TTable_UpdateFltFromTable(self, *args)

    def UpdateFltFromTableMP(self, *args):
        """
        UpdateFltFromTableMP(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr, TFlt DefaultFltVal = 0.0)
        Parameters:
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

        UpdateFltFromTableMP(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr)
        Parameters:
           self: TTable * value
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

        """
        return _snap.TTable_UpdateFltFromTableMP(self, *args)

    def SetFltColToConstMP(self, *args):
        """
        SetFltColToConstMP(self, TInt UpdateColIdx, TFlt DefaultFltVal)
        Parameters:
           self: TTable * value
           UpdateColIdx: TInt value
           DefaultFltVal: TFlt value

           UpdateColIdx: TInt value
           DefaultFltVal: TFlt value

        """
        return _snap.TTable_SetFltColToConstMP(self, *args)

    def Union(self, *args):
        """
        Union(self, TTable Table) -> PTable
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

        Union(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.TTable_Union(self, *args)

    def UnionAll(self, *args):
        """
        UnionAll(self, TTable Table) -> PTable
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

        UnionAll(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.TTable_UnionAll(self, *args)

    def UnionAllInPlace(self, *args):
        """
        UnionAllInPlace(self, TTable Table)
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

        UnionAllInPlace(self, PTable Table)
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.TTable_UnionAllInPlace(self, *args)

    def Intersection(self, *args):
        """
        Intersection(self, TTable Table) -> PTable
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

        Intersection(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.TTable_Intersection(self, *args)

    def Minus(self, *args):
        """
        Minus(self, TTable Table) -> PTable
        Parameters:
           Table: TTable & value

           Table: TTable & value

        Minus(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.TTable_Minus(self, *args)

    def Project(self, *args):
        """
        Project(self, TStrV ProjectCols) -> PTable
        Parameters:
           self: TTable * value
           ProjectCols: TStrV const & value

           ProjectCols: TStrV const & value

        """
        return _snap.TTable_Project(self, *args)

    def ProjectInPlace(self, *args):
        """
        ProjectInPlace(self, TStrV ProjectCols)
        Parameters:
           self: TTable * value
           ProjectCols: TStrV const & value

           ProjectCols: TStrV const & value

        """
        return _snap.TTable_ProjectInPlace(self, *args)

    def ColMin(self, *args):
        """
        ColMin(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMin(self, TStr Attr1, TStr Attr2)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        """
        return _snap.TTable_ColMin(self, *args)

    def ColMax(self, *args):
        """
        ColMax(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMax(self, TStr Attr1, TStr Attr2)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        """
        return _snap.TTable_ColMax(self, *args)

    def ColGenericOp(self, *args):
        """
        ColGenericOp(self, TStr Attr1, TStr Attr2, TStr ResAttr, TArithOp op)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value

        ColGenericOp(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, 
            TArithOp op, TBool AddToFirstTable)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           AddToFirstTable: TBool value

        ColGenericOp(self, TStr Attr1, TFlt Num, TStr ResAttr, TArithOp op, TBool floatCast)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           floatCast: TBool const value

        """
        return _snap.TTable_ColGenericOp(self, *args)

    def ColGenericOpMP(self, *args):
        """
        ColGenericOpMP(self, TInt ArgColIdx1, TInt ArgColIdx2,  ArgType1,  ArgType2, 
            TInt ResColIdx, TArithOp op)
        Parameters:
           ArgColIdx1: TInt value
           ArgColIdx2: TInt value
           ArgType1: enum TAttrType value
           ArgType2: enum TAttrType value
           ResColIdx: TInt value
           op: enum TArithOp value

           ArgColIdx1: TInt value
           ArgColIdx2: TInt value
           ArgType1: enum TAttrType value
           ArgType2: enum TAttrType value
           ResColIdx: TInt value
           op: enum TArithOp value

        ColGenericOpMP(self, TInt ColIdx1, TInt ColIdx2,  ArgType, TFlt Num, TArithOp op, 
            TBool ShouldCast)
        Parameters:
           self: TTable * value
           ColIdx1: TInt const & value
           ColIdx2: TInt const & value
           ArgType: enum TAttrType value
           Num: TFlt const & value
           op: enum TArithOp value
           ShouldCast: TBool value

           ColIdx1: TInt const & value
           ColIdx2: TInt const & value
           ArgType: enum TAttrType value
           Num: TFlt const & value
           op: enum TArithOp value
           ShouldCast: TBool value

        """
        return _snap.TTable_ColGenericOpMP(self, *args)

    def ColAdd(self, *args):
        """
        ColAdd(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColAdd(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColAdd(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColAdd(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColAdd(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColAdd(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColAdd(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColAdd(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.TTable_ColAdd(self, *args)

    def ColSub(self, *args):
        """
        ColSub(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColSub(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColSub(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColSub(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColSub(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColSub(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColSub(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColSub(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.TTable_ColSub(self, *args)

    def ColMul(self, *args):
        """
        ColMul(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMul(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColMul(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColMul(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColMul(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColMul(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColMul(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColMul(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.TTable_ColMul(self, *args)

    def ColDiv(self, *args):
        """
        ColDiv(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColDiv(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColDiv(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColDiv(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColDiv(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColDiv(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColDiv(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColDiv(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.TTable_ColDiv(self, *args)

    def ColMod(self, *args):
        """
        ColMod(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMod(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColMod(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColMod(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColMod(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColMod(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColMod(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColMod(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.TTable_ColMod(self, *args)

    def ColConcat(self, *args):
        """
        ColConcat(self, TStr Attr1, TStr Attr2, TStr Sep = "", TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

        ColConcat(self, TStr Attr1, TStr Attr2, TStr Sep = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value

        ColConcat(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep = "", 
            TStr ResAttr = "", TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep = "", 
            TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        """
        return _snap.TTable_ColConcat(self, *args)

    def ColConcatConst(self, *args):
        """
        ColConcatConst(self, TStr Attr1, TStr Val, TStr Sep = "", TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

        ColConcatConst(self, TStr Attr1, TStr Val, TStr Sep = "")
        Parameters:
           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value

        ColConcatConst(self, TStr Attr1, TStr Val)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Val: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value

        """
        return _snap.TTable_ColConcatConst(self, *args)

    def ReadIntCol(self, *args):
        """
        ReadIntCol(self, TStr ColName, TIntV Result)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value
           Result: TIntV & value

           ColName: TStr const & value
           Result: TIntV & value

        """
        return _snap.TTable_ReadIntCol(self, *args)

    def ReadFltCol(self, *args):
        """
        ReadFltCol(self, TStr ColName, TFltV Result)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value
           Result: TFltV & value

           ColName: TStr const & value
           Result: TFltV & value

        """
        return _snap.TTable_ReadFltCol(self, *args)

    def ReadStrCol(self, *args):
        """
        ReadStrCol(self, TStr ColName, TStrV Result)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value
           Result: TStrV & value

           ColName: TStr const & value
           Result: TStrV & value

        """
        return _snap.TTable_ReadStrCol(self, *args)

    def InitIds(self):
        """
        InitIds(self)
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_InitIds(self)

    def IsNextK(self, *args):
        """
        IsNextK(self, TStr OrderCol, TInt K, TStr GroupBy, TStr RankColName = "") -> PTable
        Parameters:
           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value
           RankColName: TStr const & value

           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value
           RankColName: TStr const & value

        IsNextK(self, TStr OrderCol, TInt K, TStr GroupBy) -> PTable
        Parameters:
           self: TTable * value
           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value

           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value

        """
        return _snap.TTable_IsNextK(self, *args)

    def GetMapPageRank(*args):
        """
        GetMapPageRank(PNEANetV GraphSeq, TTableContext Context, double C = 0.85, 
            double Eps = 1e-4, int MaxIter = 100) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

        GetMapPageRank(PNEANetV GraphSeq, TTableContext Context, double C = 0.85, 
            double Eps = 1e-4) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

        GetMapPageRank(PNEANetV GraphSeq, TTableContext Context, double C = 0.85) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

        GetMapPageRank(PNEANetV GraphSeq, TTableContext Context) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

        """
        return _snap.TTable_GetMapPageRank(*args)

    GetMapPageRank = staticmethod(GetMapPageRank)
    def GetMapHitsIterator(*args):
        """
        GetMapHitsIterator(PNEANetV GraphSeq, TTableContext Context, int MaxIter = 20) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

        GetMapHitsIterator(PNEANetV GraphSeq, TTableContext Context) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

        """
        return _snap.TTable_GetMapHitsIterator(*args)

    GetMapHitsIterator = staticmethod(GetMapHitsIterator)
    def PrintSize(self):
        """
        PrintSize(self)
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_PrintSize(self)

    def PrintContextSize(self):
        """
        PrintContextSize(self)
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_PrintContextSize(self)

    def GetMemUsedKB(self):
        """
        GetMemUsedKB(self) -> TSize
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_GetMemUsedKB(self)

    def GetContextMemUsedKB(self):
        """
        GetContextMemUsedKB(self) -> TSize
        Parameters:
           self: TTable * value




        """
        return _snap.TTable_GetContextMemUsedKB(self)

    __swig_destroy__ = _snap.delete_TTable
TTable.GroupByIntColMP = new_instancemethod(_snap.TTable_GroupByIntColMP,None,TTable)
TTable.SaveSS = new_instancemethod(_snap.TTable_SaveSS,None,TTable)
TTable.SaveBin = new_instancemethod(_snap.TTable_SaveBin,None,TTable)
TTable.Save = new_instancemethod(_snap.TTable_Save,None,TTable)
TTable.Dump = new_instancemethod(_snap.TTable_Dump,None,TTable)
TTable.AddRow = new_instancemethod(_snap.TTable_AddRow,None,TTable)
TTable.GetContext = new_instancemethod(_snap.TTable_GetContext,None,TTable)
TTable.ChangeContext = new_instancemethod(_snap.TTable_ChangeContext,None,TTable)
TTable.GetColIdx = new_instancemethod(_snap.TTable_GetColIdx,None,TTable)
TTable.GetIntVal = new_instancemethod(_snap.TTable_GetIntVal,None,TTable)
TTable.GetFltVal = new_instancemethod(_snap.TTable_GetFltVal,None,TTable)
TTable.GetStrVal = new_instancemethod(_snap.TTable_GetStrVal,None,TTable)
TTable.GetStr = new_instancemethod(_snap.TTable_GetStr,None,TTable)
TTable.GetIntValAtRowIdx = new_instancemethod(_snap.TTable_GetIntValAtRowIdx,None,TTable)
TTable.GetFltValAtRowIdx = new_instancemethod(_snap.TTable_GetFltValAtRowIdx,None,TTable)
TTable.GetSchema = new_instancemethod(_snap.TTable_GetSchema,None,TTable)
TTable.ToGraphSequence = new_instancemethod(_snap.TTable_ToGraphSequence,None,TTable)
TTable.ToVarGraphSequence = new_instancemethod(_snap.TTable_ToVarGraphSequence,None,TTable)
TTable.ToGraphPerGroup = new_instancemethod(_snap.TTable_ToGraphPerGroup,None,TTable)
TTable.ToGraphSequenceIterator = new_instancemethod(_snap.TTable_ToGraphSequenceIterator,None,TTable)
TTable.ToVarGraphSequenceIterator = new_instancemethod(_snap.TTable_ToVarGraphSequenceIterator,None,TTable)
TTable.ToGraphPerGroupIterator = new_instancemethod(_snap.TTable_ToGraphPerGroupIterator,None,TTable)
TTable.NextGraphIterator = new_instancemethod(_snap.TTable_NextGraphIterator,None,TTable)
TTable.IsLastGraphOfSequence = new_instancemethod(_snap.TTable_IsLastGraphOfSequence,None,TTable)
TTable.GetSrcCol = new_instancemethod(_snap.TTable_GetSrcCol,None,TTable)
TTable.SetSrcCol = new_instancemethod(_snap.TTable_SetSrcCol,None,TTable)
TTable.GetDstCol = new_instancemethod(_snap.TTable_GetDstCol,None,TTable)
TTable.SetDstCol = new_instancemethod(_snap.TTable_SetDstCol,None,TTable)
TTable.AddEdgeAttr = new_instancemethod(_snap.TTable_AddEdgeAttr,None,TTable)
TTable.AddSrcNodeAttr = new_instancemethod(_snap.TTable_AddSrcNodeAttr,None,TTable)
TTable.AddDstNodeAttr = new_instancemethod(_snap.TTable_AddDstNodeAttr,None,TTable)
TTable.AddNodeAttr = new_instancemethod(_snap.TTable_AddNodeAttr,None,TTable)
TTable.SetCommonNodeAttrs = new_instancemethod(_snap.TTable_SetCommonNodeAttrs,None,TTable)
TTable.GetSrcNodeIntAttrV = new_instancemethod(_snap.TTable_GetSrcNodeIntAttrV,None,TTable)
TTable.GetDstNodeIntAttrV = new_instancemethod(_snap.TTable_GetDstNodeIntAttrV,None,TTable)
TTable.GetEdgeIntAttrV = new_instancemethod(_snap.TTable_GetEdgeIntAttrV,None,TTable)
TTable.GetSrcNodeFltAttrV = new_instancemethod(_snap.TTable_GetSrcNodeFltAttrV,None,TTable)
TTable.GetDstNodeFltAttrV = new_instancemethod(_snap.TTable_GetDstNodeFltAttrV,None,TTable)
TTable.GetEdgeFltAttrV = new_instancemethod(_snap.TTable_GetEdgeFltAttrV,None,TTable)
TTable.GetSrcNodeStrAttrV = new_instancemethod(_snap.TTable_GetSrcNodeStrAttrV,None,TTable)
TTable.GetDstNodeStrAttrV = new_instancemethod(_snap.TTable_GetDstNodeStrAttrV,None,TTable)
TTable.GetEdgeStrAttrV = new_instancemethod(_snap.TTable_GetEdgeStrAttrV,None,TTable)
TTable.GetColType = new_instancemethod(_snap.TTable_GetColType,None,TTable)
TTable.GetNumRows = new_instancemethod(_snap.TTable_GetNumRows,None,TTable)
TTable.GetNumValidRows = new_instancemethod(_snap.TTable_GetNumValidRows,None,TTable)
TTable.GetRowIdMap = new_instancemethod(_snap.TTable_GetRowIdMap,None,TTable)
TTable.BegRI = new_instancemethod(_snap.TTable_BegRI,None,TTable)
TTable.EndRI = new_instancemethod(_snap.TTable_EndRI,None,TTable)
TTable.BegRIWR = new_instancemethod(_snap.TTable_BegRIWR,None,TTable)
TTable.EndRIWR = new_instancemethod(_snap.TTable_EndRIWR,None,TTable)
TTable.GetPartitionRanges = new_instancemethod(_snap.TTable_GetPartitionRanges,None,TTable)
TTable.Rename = new_instancemethod(_snap.TTable_Rename,None,TTable)
TTable.Unique = new_instancemethod(_snap.TTable_Unique,None,TTable)
TTable.Select = new_instancemethod(_snap.TTable_Select,None,TTable)
TTable.Classify = new_instancemethod(_snap.TTable_Classify,None,TTable)
TTable.SelectAtomic = new_instancemethod(_snap.TTable_SelectAtomic,None,TTable)
TTable.ClassifyAtomic = new_instancemethod(_snap.TTable_ClassifyAtomic,None,TTable)
TTable.SelectAtomicConst = new_instancemethod(_snap.TTable_SelectAtomicConst,None,TTable)
TTable.SelectAtomicIntConst = new_instancemethod(_snap.TTable_SelectAtomicIntConst,None,TTable)
TTable.SelectAtomicStrConst = new_instancemethod(_snap.TTable_SelectAtomicStrConst,None,TTable)
TTable.SelectAtomicFltConst = new_instancemethod(_snap.TTable_SelectAtomicFltConst,None,TTable)
TTable.Group = new_instancemethod(_snap.TTable_Group,None,TTable)
TTable.Count = new_instancemethod(_snap.TTable_Count,None,TTable)
TTable.Order = new_instancemethod(_snap.TTable_Order,None,TTable)
TTable.Aggregate = new_instancemethod(_snap.TTable_Aggregate,None,TTable)
TTable.AggregateCols = new_instancemethod(_snap.TTable_AggregateCols,None,TTable)
TTable.SpliceByGroup = new_instancemethod(_snap.TTable_SpliceByGroup,None,TTable)
TTable.Join = new_instancemethod(_snap.TTable_Join,None,TTable)
TTable.ThresholdJoin = new_instancemethod(_snap.TTable_ThresholdJoin,None,TTable)
TTable.SelfJoin = new_instancemethod(_snap.TTable_SelfJoin,None,TTable)
TTable.SelfSimJoin = new_instancemethod(_snap.TTable_SelfSimJoin,None,TTable)
TTable.SelfSimJoinPerGroup = new_instancemethod(_snap.TTable_SelfSimJoinPerGroup,None,TTable)
TTable.SimJoin = new_instancemethod(_snap.TTable_SimJoin,None,TTable)
TTable.SelectFirstNRows = new_instancemethod(_snap.TTable_SelectFirstNRows,None,TTable)
TTable.Defrag = new_instancemethod(_snap.TTable_Defrag,None,TTable)
TTable.StoreIntCol = new_instancemethod(_snap.TTable_StoreIntCol,None,TTable)
TTable.StoreFltCol = new_instancemethod(_snap.TTable_StoreFltCol,None,TTable)
TTable.StoreStrCol = new_instancemethod(_snap.TTable_StoreStrCol,None,TTable)
TTable.UpdateFltFromTable = new_instancemethod(_snap.TTable_UpdateFltFromTable,None,TTable)
TTable.UpdateFltFromTableMP = new_instancemethod(_snap.TTable_UpdateFltFromTableMP,None,TTable)
TTable.SetFltColToConstMP = new_instancemethod(_snap.TTable_SetFltColToConstMP,None,TTable)
TTable.Union = new_instancemethod(_snap.TTable_Union,None,TTable)
TTable.UnionAll = new_instancemethod(_snap.TTable_UnionAll,None,TTable)
TTable.UnionAllInPlace = new_instancemethod(_snap.TTable_UnionAllInPlace,None,TTable)
TTable.Intersection = new_instancemethod(_snap.TTable_Intersection,None,TTable)
TTable.Minus = new_instancemethod(_snap.TTable_Minus,None,TTable)
TTable.Project = new_instancemethod(_snap.TTable_Project,None,TTable)
TTable.ProjectInPlace = new_instancemethod(_snap.TTable_ProjectInPlace,None,TTable)
TTable.ColMin = new_instancemethod(_snap.TTable_ColMin,None,TTable)
TTable.ColMax = new_instancemethod(_snap.TTable_ColMax,None,TTable)
TTable.ColGenericOp = new_instancemethod(_snap.TTable_ColGenericOp,None,TTable)
TTable.ColGenericOpMP = new_instancemethod(_snap.TTable_ColGenericOpMP,None,TTable)
TTable.ColAdd = new_instancemethod(_snap.TTable_ColAdd,None,TTable)
TTable.ColSub = new_instancemethod(_snap.TTable_ColSub,None,TTable)
TTable.ColMul = new_instancemethod(_snap.TTable_ColMul,None,TTable)
TTable.ColDiv = new_instancemethod(_snap.TTable_ColDiv,None,TTable)
TTable.ColMod = new_instancemethod(_snap.TTable_ColMod,None,TTable)
TTable.ColConcat = new_instancemethod(_snap.TTable_ColConcat,None,TTable)
TTable.ColConcatConst = new_instancemethod(_snap.TTable_ColConcatConst,None,TTable)
TTable.ReadIntCol = new_instancemethod(_snap.TTable_ReadIntCol,None,TTable)
TTable.ReadFltCol = new_instancemethod(_snap.TTable_ReadFltCol,None,TTable)
TTable.ReadStrCol = new_instancemethod(_snap.TTable_ReadStrCol,None,TTable)
TTable.InitIds = new_instancemethod(_snap.TTable_InitIds,None,TTable)
TTable.IsNextK = new_instancemethod(_snap.TTable_IsNextK,None,TTable)
TTable.PrintSize = new_instancemethod(_snap.TTable_PrintSize,None,TTable)
TTable.PrintContextSize = new_instancemethod(_snap.TTable_PrintContextSize,None,TTable)
TTable.GetMemUsedKB = new_instancemethod(_snap.TTable_GetMemUsedKB,None,TTable)
TTable.GetContextMemUsedKB = new_instancemethod(_snap.TTable_GetContextMemUsedKB,None,TTable)
TTable_swigregister = _snap.TTable_swigregister
TTable_swigregister(TTable)

def TTable_SetMP(*args):
  """
    TTable_SetMP(TInt Value)
    Parameters:
       Value: TInt value

       Value: TInt value

    """
  return _snap.TTable_SetMP(*args)

def TTable_GetMP():
  """TTable_GetMP() -> TInt"""
  return _snap.TTable_GetMP()

def TTable_NormalizeColName(*args):
  """
    TTable_NormalizeColName(TStr ColName) -> TStr
    Parameters:
       ColName: TStr const & value

       ColName: TStr const & value

    """
  return _snap.TTable_NormalizeColName(*args)

def TTable_NormalizeColNameV(*args):
  """
    TTable_NormalizeColNameV(TStrV Cols) -> TStrV
    Parameters:
       Cols: TStrV const & value

       Cols: TStrV const & value

    """
  return _snap.TTable_NormalizeColNameV(*args)

def TTable_New(*args):
  """
    New() -> PTable
    New(TTableContext Context) -> PTable
    Parameters:
       Context: TTableContext * value

       Context: TTableContext * value

    New(Schema S, TTableContext Context) -> PTable
    Parameters:
       S: Schema const & value
       Context: TTableContext * value

       S: Schema const & value
       Context: TTableContext * value

    New(TIntH H, TStr Col1, TStr Col2, TTableContext Context, 
        TBool IsStrKeys = False) -> PTable
    Parameters:
       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

    New(TIntH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
    Parameters:
       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

    New(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, 
        TBool IsStrKeys = False) -> PTable
    Parameters:
       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

    New(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
    Parameters:
       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

    TTable_New(PTable Table) -> PTable
    Parameters:
       Table: PTable const value

       Table: PTable const value

    """
  return _snap.TTable_New(*args)

def TTable_LoadSS(*args):
  """
    LoadSS(Schema S, TStr InFNm, TTableContext Context, char Separator = '\t', 
        TBool HasTitleLine = False) -> PTable
    Parameters:
       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       Separator: char const & value
       HasTitleLine: TBool value

       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       Separator: char const & value
       HasTitleLine: TBool value

    LoadSS(Schema S, TStr InFNm, TTableContext Context, char Separator = '\t') -> PTable
    Parameters:
       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       Separator: char const & value

       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       Separator: char const & value

    LoadSS(Schema S, TStr InFNm, TTableContext Context) -> PTable
    Parameters:
       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value

       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value

    LoadSS(Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols, 
        char Separator = '\t', TBool HasTitleLine = False) -> PTable
    Parameters:
       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       RelevantCols: TIntV const & value
       Separator: char const & value
       HasTitleLine: TBool value

       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       RelevantCols: TIntV const & value
       Separator: char const & value
       HasTitleLine: TBool value

    LoadSS(Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols, 
        char Separator = '\t') -> PTable
    Parameters:
       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       RelevantCols: TIntV const & value
       Separator: char const & value

       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       RelevantCols: TIntV const & value
       Separator: char const & value

    TTable_LoadSS(Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols) -> PTable
    Parameters:
       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       RelevantCols: TIntV const & value

       S: Schema const & value
       InFNm: TStr const & value
       Context: TTableContext * value
       RelevantCols: TIntV const & value

    """
  return _snap.TTable_LoadSS(*args)

def TTable_Load(*args):
  """
    TTable_Load(TSIn SIn, TTableContext Context) -> PTable
    Parameters:
       SIn: TSIn & value
       Context: TTableContext * value

       SIn: TSIn & value
       Context: TTableContext * value

    """
  return _snap.TTable_Load(*args)

def TTable_TableFromHashMap(*args):
  """
    TableFromHashMap(TIntH H, TStr Col1, TStr Col2, TTableContext Context, 
        TBool IsStrKeys = False) -> PTable
    Parameters:
       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

    TableFromHashMap(TIntH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
    Parameters:
       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

       H: THash< TInt,TInt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

    TableFromHashMap(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, 
        TBool IsStrKeys = False) -> PTable
    Parameters:
       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value
       IsStrKeys: TBool const value

    TTable_TableFromHashMap(TIntFltH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
    Parameters:
       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

       H: THash< TInt,TFlt > const & value
       Col1: TStr const & value
       Col2: TStr const & value
       Context: TTableContext * value

    """
  return _snap.TTable_TableFromHashMap(*args)

def TTable_GetNodeTable(*args):
  """
    TTable_GetNodeTable(PNEANet Network, TTableContext Context) -> PTable
    Parameters:
       Network: PNEANet const & value
       Context: TTableContext * value

       Network: PNEANet const & value
       Context: TTableContext * value

    """
  return _snap.TTable_GetNodeTable(*args)

def TTable_GetEdgeTable(*args):
  """
    TTable_GetEdgeTable(PNEANet Network, TTableContext Context) -> PTable
    Parameters:
       Network: PNEANet const & value
       Context: TTableContext * value

       Network: PNEANet const & value
       Context: TTableContext * value

    """
  return _snap.TTable_GetEdgeTable(*args)

def TTable_GetEdgeTablePN(*args):
  """
    TTable_GetEdgeTablePN(PNGraphMP Network, TTableContext Context) -> PTable
    Parameters:
       Network: PNGraphMP const & value
       Context: TTableContext * value

       Network: PNGraphMP const & value
       Context: TTableContext * value

    """
  return _snap.TTable_GetEdgeTablePN(*args)

def TTable_GetFltNodePropertyTable(*args):
  """
    TTable_GetFltNodePropertyTable(PNEANet Network, TIntFltH Property, TStr NodeAttrName, 
         NodeAttrType, TStr PropertyAttrName, TTableContext Context) -> PTable
    Parameters:
       Network: PNEANet const & value
       Property: TIntFltH const & value
       NodeAttrName: TStr const & value
       NodeAttrType: TAttrType const & value
       PropertyAttrName: TStr const & value
       Context: TTableContext * value

       Network: PNEANet const & value
       Property: TIntFltH const & value
       NodeAttrName: TStr const & value
       NodeAttrType: TAttrType const & value
       PropertyAttrName: TStr const & value
       Context: TTableContext * value

    """
  return _snap.TTable_GetFltNodePropertyTable(*args)

def TTable_GetMapPageRank(*args):
  """
    GetMapPageRank(PNEANetV GraphSeq, TTableContext Context, double C = 0.85, 
        double Eps = 1e-4, int MaxIter = 100) -> TTableIterator
    Parameters:
       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetMapPageRank(PNEANetV GraphSeq, TTableContext Context, double C = 0.85, 
        double Eps = 1e-4) -> TTableIterator
    Parameters:
       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       C: double const & value
       Eps: double const & value

       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       C: double const & value
       Eps: double const & value

    GetMapPageRank(PNEANetV GraphSeq, TTableContext Context, double C = 0.85) -> TTableIterator
    Parameters:
       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       C: double const & value

       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       C: double const & value

    TTable_GetMapPageRank(PNEANetV GraphSeq, TTableContext Context) -> TTableIterator
    Parameters:
       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value

       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value

    """
  return _snap.TTable_GetMapPageRank(*args)

def TTable_GetMapHitsIterator(*args):
  """
    GetMapHitsIterator(PNEANetV GraphSeq, TTableContext Context, int MaxIter = 20) -> TTableIterator
    Parameters:
       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       MaxIter: int const & value

       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value
       MaxIter: int const & value

    TTable_GetMapHitsIterator(PNEANetV GraphSeq, TTableContext Context) -> TTableIterator
    Parameters:
       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value

       GraphSeq: TVec< PNEANet > const & value
       Context: TTableContext * value

    """
  return _snap.TTable_GetMapHitsIterator(*args)


def GetDegreeCentr(*args):
  """
    GetDegreeCentr(PUNGraph Graph, int NId) -> double
    Parameters:
       Graph: PUNGraph const & value
       NId: int const & value

       Graph: PUNGraph const & value
       NId: int const & value

    """
  return _snap.GetDegreeCentr(*args)

def GetGroupDegreeCentr(*args):
  """
    GetGroupDegreeCentr(PUNGraph Graph, TIntH GroupNodes) -> double
    Parameters:
       Graph: PUNGraph const & value
       GroupNodes: TIntH const & value

       Graph: PUNGraph const & value
       GroupNodes: TIntH const & value

    """
  return _snap.GetGroupDegreeCentr(*args)

def GetGroupClosenessCentr(*args):
  """
    GetGroupClosenessCentr(PUNGraph Graph, TIntH GroupNodes) -> double
    Parameters:
       Graph: PUNGraph const & value
       GroupNodes: TIntH const & value

       Graph: PUNGraph const & value
       GroupNodes: TIntH const & value

    """
  return _snap.GetGroupClosenessCentr(*args)

def MaxCPGreedyBetter(*args):
  """
    MaxCPGreedyBetter(PUNGraph Graph, int k) -> TIntH
    Parameters:
       Graph: PUNGraph const & value
       k: int const value

       Graph: PUNGraph const & value
       k: int const value

    """
  return _snap.MaxCPGreedyBetter(*args)

def MaxCPGreedyBetter1(*args):
  """
    MaxCPGreedyBetter1(PUNGraph Graph, int k) -> TIntH
    Parameters:
       Graph: PUNGraph const & value
       k: int const value

       Graph: PUNGraph const & value
       k: int const value

    """
  return _snap.MaxCPGreedyBetter1(*args)

def MaxCPGreedyBetter2(*args):
  """
    MaxCPGreedyBetter2(PUNGraph Graph, int k) -> TIntH
    Parameters:
       Graph: PUNGraph const & value
       k: int const value

       Graph: PUNGraph const & value
       k: int const value

    """
  return _snap.MaxCPGreedyBetter2(*args)

def MaxCPGreedyBetter3(*args):
  """
    MaxCPGreedyBetter3(PUNGraph Graph, int k) -> TIntH
    Parameters:
       Graph: PUNGraph const & value
       k: int const value

       Graph: PUNGraph const & value
       k: int const value

    """
  return _snap.MaxCPGreedyBetter3(*args)

def EventImportance(*args):
  """
    EventImportance(PNGraph Graph, int k) -> TIntFltH
    Parameters:
       Graph: PNGraph const & value
       k: int const value

       Graph: PNGraph const & value
       k: int const value

    """
  return _snap.EventImportance(*args)

def Intersect1(*args):
  """
    Intersect1(TNodeI Node, TStr NNodes) -> int
    Parameters:
       Node: TUNGraph::TNodeI value
       NNodes: TStr value

       Node: TUNGraph::TNodeI value
       NNodes: TStr value

    """
  return _snap.Intersect1(*args)

def LoadNodeList(*args):
  """
    LoadNodeList(TStr InFNmNodes) -> TIntH
    Parameters:
       InFNmNodes: TStr value

       InFNmNodes: TStr value

    """
  return _snap.LoadNodeList(*args)

def CommunityGirvanNewman(*args):
  """
    CommunityGirvanNewman(PUNGraph Graph, TCnComV CmtyV) -> double
    Parameters:
       Graph: PUNGraph & value
       CmtyV: TCnComV & value

       Graph: PUNGraph & value
       CmtyV: TCnComV & value

    """
  return _snap.CommunityGirvanNewman(*args)

def CommunityCNM(*args):
  """
    CommunityCNM(PUNGraph Graph, TCnComV CmtyV) -> double
    Parameters:
       Graph: PUNGraph const & value
       CmtyV: TCnComV & value

       Graph: PUNGraph const & value
       CmtyV: TCnComV & value

    """
  return _snap.CommunityCNM(*args)

def Infomap(*args):
  """
    Infomap(PUNGraph Graph, TCnComV CmtyV) -> double
    Parameters:
       Graph: PUNGraph & value
       CmtyV: TCnComV & value

       Graph: PUNGraph & value
       CmtyV: TCnComV & value

    """
  return _snap.Infomap(*args)

def InfomapOnline(*args):
  """
    InfomapOnline(PUNGraph Graph, int n1, int n2, TIntFltH PAlpha, double SumPAlphaLogPAlpha, 
        TIntFltH Qi, TIntH Module, 
        int Br, TCnComV CmtyV) -> double
    Parameters:
       Graph: PUNGraph & value
       n1: int value
       n2: int value
       PAlpha: TIntFltH & value
       SumPAlphaLogPAlpha: double & value
       Qi: TIntFltH & value
       Module: TIntH & value
       Br: int & value
       CmtyV: TCnComV & value

       Graph: PUNGraph & value
       n1: int value
       n2: int value
       PAlpha: TIntFltH & value
       SumPAlphaLogPAlpha: double & value
       Qi: TIntFltH & value
       Module: TIntH & value
       Br: int & value
       CmtyV: TCnComV & value

    """
  return _snap.InfomapOnline(*args)

def CmtyEvolutionFileBatch(*args):
  """
    CmtyEvolutionFileBatch(TStr InFNm, TIntIntHH sizesCont, TIntIntHH cCont, TIntIntVH edges, 
        double alpha, double beta, int CmtyAlg)
    Parameters:
       InFNm: TStr value
       sizesCont: TIntIntHH & value
       cCont: TIntIntHH & value
       edges: TIntIntVH & value
       alpha: double value
       beta: double value
       CmtyAlg: int value

       InFNm: TStr value
       sizesCont: TIntIntHH & value
       cCont: TIntIntHH & value
       edges: TIntIntVH & value
       alpha: double value
       beta: double value
       CmtyAlg: int value

    """
  return _snap.CmtyEvolutionFileBatch(*args)

def CmtyEvolutionFileBatchV(*args):
  """
    CmtyEvolutionFileBatchV(TStr InFNm, TIntIntVH sizesContV, TIntIntVH cContV, 
        TIntIntVH edges, double alpha, double beta, 
        int CmtyAlg)
    Parameters:
       InFNm: TStr value
       sizesContV: TIntIntVH & value
       cContV: TIntIntVH & value
       edges: TIntIntVH & value
       alpha: double value
       beta: double value
       CmtyAlg: int value

       InFNm: TStr value
       sizesContV: TIntIntVH & value
       cContV: TIntIntVH & value
       edges: TIntIntVH & value
       alpha: double value
       beta: double value
       CmtyAlg: int value

    """
  return _snap.CmtyEvolutionFileBatchV(*args)

def CmtyEvolutionJson(*args):
  """
    CmtyEvolutionJson(TStr Json, TIntIntVH sizesContV, TIntIntVH cContV, 
        TIntIntVH edges)
    Parameters:
       Json: TStr & value
       sizesContV: TIntIntVH & value
       cContV: TIntIntVH & value
       edges: TIntIntVH & value

       Json: TStr & value
       sizesContV: TIntIntVH & value
       cContV: TIntIntVH & value
       edges: TIntIntVH & value

    """
  return _snap.CmtyEvolutionJson(*args)

def CmtyTest(*args):
  """
    CmtyTest(TStr t, int CmtyAlg) -> TStr
    Parameters:
       t: TStr value
       CmtyAlg: int value

       t: TStr value
       CmtyAlg: int value

    """
  return _snap.CmtyTest(*args)

def ReebSimplify(*args):
  """
    ReebSimplify(PNGraph Graph, TIntH t, int e, PNGraph gFinal, TIntH tFinal, 
        bool collapse)
    Parameters:
       Graph: PNGraph & value
       t: TIntH & value
       e: int value
       gFinal: PNGraph & value
       tFinal: TIntH & value
       collapse: bool value

       Graph: PNGraph & value
       t: TIntH & value
       e: int value
       gFinal: PNGraph & value
       tFinal: TIntH & value
       collapse: bool value

    """
  return _snap.ReebSimplify(*args)

def ReebRefine(*args):
  """
    ReebRefine(PNGraph Graph, TIntH t, int e, PNGraph gFinal, TIntH tFinal, 
        bool collapse)
    Parameters:
       Graph: PNGraph & value
       t: TIntH & value
       e: int value
       gFinal: PNGraph & value
       tFinal: TIntH & value
       collapse: bool value

       Graph: PNGraph & value
       t: TIntH & value
       e: int value
       gFinal: PNGraph & value
       tFinal: TIntH & value
       collapse: bool value

    """
  return _snap.ReebRefine(*args)

def CmtyGirvanNewmanStep(*args):
  """
    CmtyGirvanNewmanStep(PUNGraph Graph, TIntV Cmty1, TIntV Cmty2)
    Parameters:
       Graph: PUNGraph & value
       Cmty1: TIntV & value
       Cmty2: TIntV & value

       Graph: PUNGraph & value
       Cmty1: TIntV & value
       Cmty2: TIntV & value

    """
  return _snap.CmtyGirvanNewmanStep(*args)

def GetBiConSzCnt(*args):
  """
    GetBiConSzCnt(PUNGraph Graph, TIntPrV SzCntV)
    Parameters:
       Graph: PUNGraph const & value
       SzCntV: TIntPrV & value

       Graph: PUNGraph const & value
       SzCntV: TIntPrV & value

    """
  return _snap.GetBiConSzCnt(*args)

def GetBiCon(*args):
  """
    GetBiCon(PUNGraph Graph, TCnComV BiCnComV)
    Parameters:
       Graph: PUNGraph const & value
       BiCnComV: TCnComV & value

       Graph: PUNGraph const & value
       BiCnComV: TCnComV & value

    """
  return _snap.GetBiCon(*args)

def GetArtPoints(*args):
  """
    GetArtPoints(PUNGraph Graph, TIntV ArtNIdV)
    Parameters:
       Graph: PUNGraph const & value
       ArtNIdV: TIntV & value

       Graph: PUNGraph const & value
       ArtNIdV: TIntV & value

    """
  return _snap.GetArtPoints(*args)

def GetEdgeBridges(*args):
  """
    GetEdgeBridges(PUNGraph Graph, TIntPrV EdgeV)
    Parameters:
       Graph: PUNGraph const & value
       EdgeV: TIntPrV & value

       Graph: PUNGraph const & value
       EdgeV: TIntPrV & value

    """
  return _snap.GetEdgeBridges(*args)

def Get1CnComSzCnt(*args):
  """
    Get1CnComSzCnt(PUNGraph Graph, TIntPrV SzCntV)
    Parameters:
       Graph: PUNGraph const & value
       SzCntV: TIntPrV & value

       Graph: PUNGraph const & value
       SzCntV: TIntPrV & value

    """
  return _snap.Get1CnComSzCnt(*args)

def Get1CnCom(*args):
  """
    Get1CnCom(PUNGraph Graph, TCnComV Cn1ComV)
    Parameters:
       Graph: PUNGraph const & value
       Cn1ComV: TCnComV & value

       Graph: PUNGraph const & value
       Cn1ComV: TCnComV & value

    """
  return _snap.Get1CnCom(*args)
class TCnCom(object):
    """Proxy of C++ TCnCom class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NIdV = _swig_property(_snap.TCnCom_NIdV_get, _snap.TCnCom_NIdV_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TCnCom
        __init__(self, TIntV NodeIdV) -> TCnCom
        Parameters:
           NodeIdV: TIntV const & value

           NodeIdV: TIntV const & value

        __init__(self, TCnCom CC) -> TCnCom
        Parameters:
           CC: TCnCom const & value

           CC: TCnCom const & value

        __init__(self, TSIn SIn) -> TCnCom
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TCnCom_swiginit(self,_snap.new_TCnCom(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TCnCom const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TCnCom_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TCnCom CC) -> bool
        Parameters:
           self: TCnCom const * value
           CC: TCnCom const & value

           CC: TCnCom const & value

        """
        return _snap.TCnCom___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TCnCom CC) -> bool
        Parameters:
           self: TCnCom const * value
           CC: TCnCom const & value

           CC: TCnCom const & value

        """
        return _snap.TCnCom___lt__(self, *args)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TCnCom const * value




        """
        return _snap.TCnCom_Len(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TCnCom const * value




        """
        return _snap.TCnCom_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TCnCom * value




        """
        return _snap.TCnCom_Clr(self)

    def Add(self, *args):
        """
        Add(self, int NodeId)
        Parameters:
           self: TCnCom * value
           NodeId: int const & value

           NodeId: int const & value

        """
        return _snap.TCnCom_Add(self, *args)

    def __call__(self, *args):
        """
        __call__(self) -> TIntV
        __call__(self) -> TIntV
        Parameters:
           self: TCnCom * value


        """
        return _snap.TCnCom___call__(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int NIdN) -> TInt
        Parameters:
           self: TCnCom const * value
           NIdN: int const & value

           NIdN: int const & value

        """
        return _snap.TCnCom_GetVal(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TCnCom * value


        """
        return _snap.TCnCom_Sort(self, Asc)

    def IsNIdIn(self, *args):
        """
        IsNIdIn(self, int NId) -> bool
        Parameters:
           self: TCnCom const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TCnCom_IsNIdIn(self, *args)

    def GetRndNId(self):
        """
        GetRndNId(self) -> TInt
        Parameters:
           self: TCnCom const * value




        """
        return _snap.TCnCom_GetRndNId(self)

    def Dump(*args):
        """
        Dump(TCnComV CnComV, TStr Desc = TStr())
        Parameters:
           CnComV: TCnComV const & value
           Desc: TStr const & value

           CnComV: TCnComV const & value
           Desc: TStr const & value

           CnComV: TCnComV const & value
           Desc: TStr const & value

        Dump(TCnComV CnComV)
        Parameters:
           CnComV: TCnComV const & value

           CnComV: TCnComV const & value

           CnComV: TCnComV const & value

        """
        return _snap.TCnCom_Dump(*args)

    Dump = staticmethod(Dump)
    def SaveTxt(*args):
        """
        SaveTxt(TCnComV CnComV, TStr FNm, TStr Desc = TStr())
        Parameters:
           CnComV: TCnComV const & value
           FNm: TStr const & value
           Desc: TStr const & value

           CnComV: TCnComV const & value
           FNm: TStr const & value
           Desc: TStr const & value

           CnComV: TCnComV const & value
           FNm: TStr const & value
           Desc: TStr const & value

        SaveTxt(TCnComV CnComV, TStr FNm)
        Parameters:
           CnComV: TCnComV const & value
           FNm: TStr const & value

           CnComV: TCnComV const & value
           FNm: TStr const & value

           CnComV: TCnComV const & value
           FNm: TStr const & value

        """
        return _snap.TCnCom_SaveTxt(*args)

    SaveTxt = staticmethod(SaveTxt)
    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TCnCom const * value




        """
        return _snap.TCnCom_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TCnCom const * value




        """
        return _snap.TCnCom_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TCnCom
TCnCom.Save = new_instancemethod(_snap.TCnCom_Save,None,TCnCom)
TCnCom.__eq__ = new_instancemethod(_snap.TCnCom___eq__,None,TCnCom)
TCnCom.__lt__ = new_instancemethod(_snap.TCnCom___lt__,None,TCnCom)
TCnCom.Len = new_instancemethod(_snap.TCnCom_Len,None,TCnCom)
TCnCom.Empty = new_instancemethod(_snap.TCnCom_Empty,None,TCnCom)
TCnCom.Clr = new_instancemethod(_snap.TCnCom_Clr,None,TCnCom)
TCnCom.Add = new_instancemethod(_snap.TCnCom_Add,None,TCnCom)
TCnCom.__call__ = new_instancemethod(_snap.TCnCom___call__,None,TCnCom)
TCnCom.GetVal = new_instancemethod(_snap.TCnCom_GetVal,None,TCnCom)
TCnCom.Sort = new_instancemethod(_snap.TCnCom_Sort,None,TCnCom)
TCnCom.IsNIdIn = new_instancemethod(_snap.TCnCom_IsNIdIn,None,TCnCom)
TCnCom.GetRndNId = new_instancemethod(_snap.TCnCom_GetRndNId,None,TCnCom)
TCnCom.GetPrimHashCd = new_instancemethod(_snap.TCnCom_GetPrimHashCd,None,TCnCom)
TCnCom.GetSecHashCd = new_instancemethod(_snap.TCnCom_GetSecHashCd,None,TCnCom)
TCnCom_swigregister = _snap.TCnCom_swigregister
TCnCom_swigregister(TCnCom)

def CalcEffDiam(*args):
  """
    CalcEffDiam(TIntFltKdV DistNbrsCdfV, double Percentile = 0.9) -> double
    Parameters:
       DistNbrsCdfV: TIntFltKdV const & value
       Percentile: double const & value

       DistNbrsCdfV: TIntFltKdV const & value
       Percentile: double const & value

    CalcEffDiam(TIntFltKdV DistNbrsCdfV) -> double
    Parameters:
       DistNbrsCdfV: TIntFltKdV const & value

       DistNbrsCdfV: TIntFltKdV const & value

    CalcEffDiam(TFltPrV DistNbrsCdfV, double Percentile = 0.9) -> double
    Parameters:
       DistNbrsCdfV: TFltPrV const & value
       Percentile: double const & value

       DistNbrsCdfV: TFltPrV const & value
       Percentile: double const & value

    CalcEffDiam(TFltPrV DistNbrsCdfV) -> double
    Parameters:
       DistNbrsCdfV: TFltPrV const & value

       DistNbrsCdfV: TFltPrV const & value

    """
  return _snap.CalcEffDiam(*args)

def CalcEffDiamPdf(*args):
  """
    CalcEffDiamPdf(TIntFltKdV DistNbrsPdfV, double Percentile = 0.9) -> double
    Parameters:
       DistNbrsPdfV: TIntFltKdV const & value
       Percentile: double const & value

       DistNbrsPdfV: TIntFltKdV const & value
       Percentile: double const & value

    CalcEffDiamPdf(TIntFltKdV DistNbrsPdfV) -> double
    Parameters:
       DistNbrsPdfV: TIntFltKdV const & value

       DistNbrsPdfV: TIntFltKdV const & value

    CalcEffDiamPdf(TFltPrV DistNbrsPdfV, double Percentile = 0.9) -> double
    Parameters:
       DistNbrsPdfV: TFltPrV const & value
       Percentile: double const & value

       DistNbrsPdfV: TFltPrV const & value
       Percentile: double const & value

    CalcEffDiamPdf(TFltPrV DistNbrsPdfV) -> double
    Parameters:
       DistNbrsPdfV: TFltPrV const & value

       DistNbrsPdfV: TFltPrV const & value

    """
  return _snap.CalcEffDiamPdf(*args)

def CalcAvgDiamPdf(*args):
  """
    CalcAvgDiamPdf(TIntFltKdV DistNbrsPdfV) -> double
    Parameters:
       DistNbrsPdfV: TIntFltKdV const & value

       DistNbrsPdfV: TIntFltKdV const & value

    CalcAvgDiamPdf(TFltPrV DistNbrsPdfV) -> double
    Parameters:
       DistNbrsPdfV: TFltPrV const & value

       DistNbrsPdfV: TFltPrV const & value

    """
  return _snap.CalcAvgDiamPdf(*args)

def Intersect(*args):
  """
    Intersect(TNodeI Node, TIntH NNodes) -> int
    Parameters:
       Node: TUNGraph::TNodeI value
       NNodes: TIntH value

       Node: TUNGraph::TNodeI value
       NNodes: TIntH value

    Intersect(TNodeI Node, TStr NNodes) -> int
    Parameters:
       Node: TUNGraph::TNodeI value
       NNodes: TStr value

       Node: TUNGraph::TNodeI value
       NNodes: TStr value

    Intersect(TNodeI Node, int NNodes, int NNodes_br) -> int
    Parameters:
       Node: TUNGraph::TNodeI value
       NNodes: int * value
       NNodes_br: int value

       Node: TUNGraph::TNodeI value
       NNodes: int * value
       NNodes_br: int value

    """
  return _snap.Intersect(*args)

def GetEigenVectorCentr(*args):
  """
    GetEigenVectorCentr(PUNGraph Graph, TIntFltH NIdEigenH, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: PUNGraph const & value
       NIdEigenH: TIntFltH & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: PUNGraph const & value
       NIdEigenH: TIntFltH & value
       Eps: double const & value
       MaxIter: int const & value

    GetEigenVectorCentr(PUNGraph Graph, TIntFltH NIdEigenH, double Eps = 1e-4)
    Parameters:
       Graph: PUNGraph const & value
       NIdEigenH: TIntFltH & value
       Eps: double const & value

       Graph: PUNGraph const & value
       NIdEigenH: TIntFltH & value
       Eps: double const & value

    GetEigenVectorCentr(PUNGraph Graph, TIntFltH NIdEigenH)
    Parameters:
       Graph: PUNGraph const & value
       NIdEigenH: TIntFltH & value

       Graph: PUNGraph const & value
       NIdEigenH: TIntFltH & value

    """
  return _snap.GetEigenVectorCentr(*args)

def GetWeightedPageRank(*args):
  """
    GetWeightedPageRank(PNEANet Graph, TIntFltH PRankH, TStr Attr, double C = 0.85, 
        double Eps = 1e-4, int MaxIter = 100) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetWeightedPageRank(PNEANet Graph, TIntFltH PRankH, TStr Attr, double C = 0.85, 
        double Eps = 1e-4) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value

    GetWeightedPageRank(PNEANet Graph, TIntFltH PRankH, TStr Attr, double C = 0.85) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value

    GetWeightedPageRank(PNEANet Graph, TIntFltH PRankH, TStr Attr) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value

    """
  return _snap.GetWeightedPageRank(*args)

def GetWeightedPageRankMP(*args):
  """
    GetWeightedPageRankMP(PNEANet Graph, TIntFltH PRankH, TStr Attr, double C = 0.85, 
        double Eps = 1e-4, int MaxIter = 100) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetWeightedPageRankMP(PNEANet Graph, TIntFltH PRankH, TStr Attr, double C = 0.85, 
        double Eps = 1e-4) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value
       Eps: double const & value

    GetWeightedPageRankMP(PNEANet Graph, TIntFltH PRankH, TStr Attr, double C = 0.85) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value
       C: double const & value

    GetWeightedPageRankMP(PNEANet Graph, TIntFltH PRankH, TStr Attr) -> int
    Parameters:
       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value

       Graph: PNEANet const value
       PRankH: TIntFltH & value
       Attr: TStr const & value

    """
  return _snap.GetWeightedPageRankMP(*args)

def GetMxBiCon(*args):
  """
    GetMxBiCon(PUNGraph Graph, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value
       RenumberNodes: bool const & value

       Graph: PUNGraph const & value
       RenumberNodes: bool const & value

    GetMxBiCon(PUNGraph Graph) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value

       Graph: PUNGraph const & value

    """
  return _snap.GetMxBiCon(*args)

def TCnCom_Dump(*args):
  """
    Dump(TCnComV CnComV, TStr Desc = TStr())
    Parameters:
       CnComV: TCnComV const & value
       Desc: TStr const & value

       CnComV: TCnComV const & value
       Desc: TStr const & value

    TCnCom_Dump(TCnComV CnComV)
    Parameters:
       CnComV: TCnComV const & value

       CnComV: TCnComV const & value

    """
  return _snap.TCnCom_Dump(*args)

def TCnCom_SaveTxt(*args):
  """
    SaveTxt(TCnComV CnComV, TStr FNm, TStr Desc = TStr())
    Parameters:
       CnComV: TCnComV const & value
       FNm: TStr const & value
       Desc: TStr const & value

       CnComV: TCnComV const & value
       FNm: TStr const & value
       Desc: TStr const & value

    TCnCom_SaveTxt(TCnComV CnComV, TStr FNm)
    Parameters:
       CnComV: TCnComV const & value
       FNm: TStr const & value

       CnComV: TCnComV const & value
       FNm: TStr const & value

    """
  return _snap.TCnCom_SaveTxt(*args)

class TArtPointVisitor(object):
    """Proxy of C++ TArtPointVisitor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = _swig_property(_snap.TArtPointVisitor_VnLowH_get, _snap.TArtPointVisitor_VnLowH_set)
    ParentH = _swig_property(_snap.TArtPointVisitor_ParentH_get, _snap.TArtPointVisitor_ParentH_set)
    ArtSet = _swig_property(_snap.TArtPointVisitor_ArtSet_get, _snap.TArtPointVisitor_ArtSet_set)
    Time = _swig_property(_snap.TArtPointVisitor_Time_get, _snap.TArtPointVisitor_Time_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TArtPointVisitor
        __init__(self, int Nodes) -> TArtPointVisitor
        Parameters:
           Nodes: int const & value

           Nodes: int const & value

        """
        _snap.TArtPointVisitor_swiginit(self,_snap.new_TArtPointVisitor(*args))
    def DiscoverNode(self, *args):
        """
        DiscoverNode(self, int NId)
        Parameters:
           self: TArtPointVisitor * value
           NId: int value

           NId: int value

        """
        return _snap.TArtPointVisitor_DiscoverNode(self, *args)

    def FinishNode(self, *args):
        """
        FinishNode(self, int NId)
        Parameters:
           self: TArtPointVisitor * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TArtPointVisitor_FinishNode(self, *args)

    def ExamineEdge(self, *args):
        """
        ExamineEdge(self, int NId1, int NId2)
        Parameters:
           self: TArtPointVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TArtPointVisitor_ExamineEdge(self, *args)

    def TreeEdge(self, *args):
        """
        TreeEdge(self, int NId1, int NId2)
        Parameters:
           self: TArtPointVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TArtPointVisitor_TreeEdge(self, *args)

    def BackEdge(self, *args):
        """
        BackEdge(self, int NId1, int NId2)
        Parameters:
           self: TArtPointVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TArtPointVisitor_BackEdge(self, *args)

    def FwdEdge(self, *args):
        """
        FwdEdge(self, int NId1, int NId2)
        Parameters:
           self: TArtPointVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TArtPointVisitor_FwdEdge(self, *args)

    __swig_destroy__ = _snap.delete_TArtPointVisitor
TArtPointVisitor.DiscoverNode = new_instancemethod(_snap.TArtPointVisitor_DiscoverNode,None,TArtPointVisitor)
TArtPointVisitor.FinishNode = new_instancemethod(_snap.TArtPointVisitor_FinishNode,None,TArtPointVisitor)
TArtPointVisitor.ExamineEdge = new_instancemethod(_snap.TArtPointVisitor_ExamineEdge,None,TArtPointVisitor)
TArtPointVisitor.TreeEdge = new_instancemethod(_snap.TArtPointVisitor_TreeEdge,None,TArtPointVisitor)
TArtPointVisitor.BackEdge = new_instancemethod(_snap.TArtPointVisitor_BackEdge,None,TArtPointVisitor)
TArtPointVisitor.FwdEdge = new_instancemethod(_snap.TArtPointVisitor_FwdEdge,None,TArtPointVisitor)
TArtPointVisitor_swigregister = _snap.TArtPointVisitor_swigregister
TArtPointVisitor_swigregister(TArtPointVisitor)

class TBiConVisitor(object):
    """Proxy of C++ TBiConVisitor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    VnLowH = _swig_property(_snap.TBiConVisitor_VnLowH_get, _snap.TBiConVisitor_VnLowH_set)
    ParentH = _swig_property(_snap.TBiConVisitor_ParentH_get, _snap.TBiConVisitor_ParentH_set)
    Stack = _swig_property(_snap.TBiConVisitor_Stack_get, _snap.TBiConVisitor_Stack_set)
    CnComV = _swig_property(_snap.TBiConVisitor_CnComV_get, _snap.TBiConVisitor_CnComV_set)
    NSet = _swig_property(_snap.TBiConVisitor_NSet_get, _snap.TBiConVisitor_NSet_set)
    Time = _swig_property(_snap.TBiConVisitor_Time_get, _snap.TBiConVisitor_Time_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TBiConVisitor
        __init__(self, int Nodes) -> TBiConVisitor
        Parameters:
           Nodes: int const & value

           Nodes: int const & value

        """
        _snap.TBiConVisitor_swiginit(self,_snap.new_TBiConVisitor(*args))
    def DiscoverNode(self, *args):
        """
        DiscoverNode(self, int NId)
        Parameters:
           self: TBiConVisitor * value
           NId: int value

           NId: int value

        """
        return _snap.TBiConVisitor_DiscoverNode(self, *args)

    def FinishNode(self, *args):
        """
        FinishNode(self, int NId)
        Parameters:
           self: TBiConVisitor * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TBiConVisitor_FinishNode(self, *args)

    def ExamineEdge(self, *args):
        """
        ExamineEdge(self, int NId1, int NId2)
        Parameters:
           self: TBiConVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TBiConVisitor_ExamineEdge(self, *args)

    def TreeEdge(self, *args):
        """
        TreeEdge(self, int NId1, int NId2)
        Parameters:
           self: TBiConVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TBiConVisitor_TreeEdge(self, *args)

    def BackEdge(self, *args):
        """
        BackEdge(self, int NId1, int NId2)
        Parameters:
           self: TBiConVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TBiConVisitor_BackEdge(self, *args)

    def FwdEdge(self, *args):
        """
        FwdEdge(self, int NId1, int NId2)
        Parameters:
           self: TBiConVisitor * value
           NId1: int const & value
           NId2: int const & value

           NId1: int const & value
           NId2: int const & value

        """
        return _snap.TBiConVisitor_FwdEdge(self, *args)

    __swig_destroy__ = _snap.delete_TBiConVisitor
TBiConVisitor.DiscoverNode = new_instancemethod(_snap.TBiConVisitor_DiscoverNode,None,TBiConVisitor)
TBiConVisitor.FinishNode = new_instancemethod(_snap.TBiConVisitor_FinishNode,None,TBiConVisitor)
TBiConVisitor.ExamineEdge = new_instancemethod(_snap.TBiConVisitor_ExamineEdge,None,TBiConVisitor)
TBiConVisitor.TreeEdge = new_instancemethod(_snap.TBiConVisitor_TreeEdge,None,TBiConVisitor)
TBiConVisitor.BackEdge = new_instancemethod(_snap.TBiConVisitor_BackEdge,None,TBiConVisitor)
TBiConVisitor.FwdEdge = new_instancemethod(_snap.TBiConVisitor_FwdEdge,None,TBiConVisitor)
TBiConVisitor_swigregister = _snap.TBiConVisitor_swigregister
TBiConVisitor_swigregister(TBiConVisitor)


def FastCorePeriphery(*args):
  """
    FastCorePeriphery(PUNGraph Graph, TIntIntH out) -> int
    Parameters:
       Graph: PUNGraph & value
       out: TIntIntH & value

       Graph: PUNGraph & value
       out: TIntIntH & value

    """
  return _snap.FastCorePeriphery(*args)

def FastCorePeripheryGC(*args):
  """
    FastCorePeripheryGC(PUNGraph Graph, TIntIntH out) -> int
    Parameters:
       Graph: PUNGraph & value
       out: TIntIntH & value

       Graph: PUNGraph & value
       out: TIntIntH & value

    """
  return _snap.FastCorePeripheryGC(*args)

def BorgattiEverettMeasure(*args):
  """
    BorgattiEverettMeasure(PUNGraph Graph, TIntIntH out, double coresize, int type) -> double
    Parameters:
       Graph: PUNGraph & value
       out: TIntIntH & value
       coresize: double value
       type: int value

       Graph: PUNGraph & value
       out: TIntIntH & value
       coresize: double value
       type: int value

    """
  return _snap.BorgattiEverettMeasure(*args)

def PearsonCorrelation(*args):
  """
    PearsonCorrelation(PUNGraph Graph, TIntIntH out, int coresize) -> double
    Parameters:
       Graph: PUNGraph & value
       out: TIntIntH & value
       coresize: int value

       Graph: PUNGraph & value
       out: TIntIntH & value
       coresize: int value

    """
  return _snap.PearsonCorrelation(*args)

def GetMaxFlowIntEK(*args):
  """
    GetMaxFlowIntEK(PNEANet Net, int SrcNId, int SnkNId) -> int
    Parameters:
       Net: PNEANet & value
       SrcNId: int const & value
       SnkNId: int const & value

       Net: PNEANet & value
       SrcNId: int const & value
       SnkNId: int const & value

    """
  return _snap.GetMaxFlowIntEK(*args)

def GetMaxFlowIntPR(*args):
  """
    GetMaxFlowIntPR(PNEANet Net, int SrcNId, int SnkNId) -> int
    Parameters:
       Net: PNEANet & value
       SrcNId: int const & value
       SnkNId: int const & value

       Net: PNEANet & value
       SrcNId: int const & value
       SnkNId: int const & value

    """
  return _snap.GetMaxFlowIntPR(*args)
gsvNone = _snap.gsvNone
gsvIndex = _snap.gsvIndex
gsvTime = _snap.gsvTime
gsvNodes = _snap.gsvNodes
gsvZeroNodes = _snap.gsvZeroNodes
gsvNonZNodes = _snap.gsvNonZNodes
gsvSrcNodes = _snap.gsvSrcNodes
gsvDstNodes = _snap.gsvDstNodes
gsvEdges = _snap.gsvEdges
gsvUniqEdges = _snap.gsvUniqEdges
gsvBiDirEdges = _snap.gsvBiDirEdges
gsvWccNodes = _snap.gsvWccNodes
gsvWccSrcNodes = _snap.gsvWccSrcNodes
gsvWccDstNodes = _snap.gsvWccDstNodes
gsvWccEdges = _snap.gsvWccEdges
gsvWccUniqEdges = _snap.gsvWccUniqEdges
gsvWccBiDirEdges = _snap.gsvWccBiDirEdges
gsvSccNodes = _snap.gsvSccNodes
gsvSccEdges = _snap.gsvSccEdges
gsvBccNodes = _snap.gsvBccNodes
gsvBccEdges = _snap.gsvBccEdges
gsvFullDiam = _snap.gsvFullDiam
gsvEffDiam = _snap.gsvEffDiam
gsvEffWccDiam = _snap.gsvEffWccDiam
gsvFullWccDiam = _snap.gsvFullWccDiam
gsvFullDiamDev = _snap.gsvFullDiamDev
gsvEffDiamDev = _snap.gsvEffDiamDev
gsvEffWccDiamDev = _snap.gsvEffWccDiamDev
gsvFullWccDiamDev = _snap.gsvFullWccDiamDev
gsvClustCf = _snap.gsvClustCf
gsvOpenTriads = _snap.gsvOpenTriads
gsvClosedTriads = _snap.gsvClosedTriads
gsvWccSize = _snap.gsvWccSize
gsvSccSize = _snap.gsvSccSize
gsvBccSize = _snap.gsvBccSize
gsvMx = _snap.gsvMx
gsdUndef = _snap.gsdUndef
gsdInDeg = _snap.gsdInDeg
gsdOutDeg = _snap.gsdOutDeg
gsdWcc = _snap.gsdWcc
gsdScc = _snap.gsdScc
gsdHops = _snap.gsdHops
gsdWccHops = _snap.gsdWccHops
gsdSngVal = _snap.gsdSngVal
gsdSngVec = _snap.gsdSngVec
gsdClustCf = _snap.gsdClustCf
gsdTriadPart = _snap.gsdTriadPart
gsdMx = _snap.gsdMx
class TGStat(object):
    """Proxy of C++ TGStat class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NDiamRuns = _swig_property(_snap.TGStat_NDiamRuns_get, _snap.TGStat_NDiamRuns_set)
    TakeSngVals = _swig_property(_snap.TGStat_TakeSngVals_get, _snap.TGStat_TakeSngVals_set)
    Time = _swig_property(_snap.TGStat_Time_get, _snap.TGStat_Time_set)
    GraphNm = _swig_property(_snap.TGStat_GraphNm_get, _snap.TGStat_GraphNm_set)
    ValStatH = _swig_property(_snap.TGStat_ValStatH_get, _snap.TGStat_ValStatH_set)
    DistrStatH = _swig_property(_snap.TGStat_DistrStatH_get, _snap.TGStat_DistrStatH_set)
    def __init__(self, *args): 
        """
        __init__(self, TSecTm GraphTm = TSecTm(), TStr GraphName = TStr()) -> TGStat
        Parameters:
           GraphTm: TSecTm const & value
           GraphName: TStr const & value

           GraphTm: TSecTm const & value
           GraphName: TStr const & value

        __init__(self, TSecTm GraphTm = TSecTm()) -> TGStat
        Parameters:
           GraphTm: TSecTm const & value

           GraphTm: TSecTm const & value

        __init__(self) -> TGStat
        __init__(self, PNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
            TStr GraphName = TStr()) -> TGStat
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

        __init__(self, PNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> TGStat
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

        __init__(self, PNGraph Graph, TSecTm Time) -> TGStat
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value

        __init__(self, PUNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
            TStr GraphName = TStr()) -> TGStat
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

        __init__(self, PUNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> TGStat
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

        __init__(self, PUNGraph Graph, TSecTm Time) -> TGStat
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value

        __init__(self, PNEGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
            TStr GraphName = TStr()) -> TGStat
        Parameters:
           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

        __init__(self, PNEGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> TGStat
        Parameters:
           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

        __init__(self, PNEGraph Graph, TSecTm Time) -> TGStat
        Parameters:
           Graph: PNEGraph const & value
           Time: TSecTm const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value

        __init__(self, TGStat GStat) -> TGStat
        Parameters:
           GStat: TGStat const & value

           GStat: TGStat const & value

        __init__(self, TSIn SIn) -> TGStat
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TGStat_swiginit(self,_snap.new_TGStat(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TGStat const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TGStat_Save(self, *args)

    def New(*args):
        """
        New(TSecTm Time = TSecTm(), TStr GraphName = TStr()) -> PGStat
        Parameters:
           Time: TSecTm const & value
           GraphName: TStr const & value

           Time: TSecTm const & value
           GraphName: TStr const & value

           Time: TSecTm const & value
           GraphName: TStr const & value

        New(TSecTm Time = TSecTm()) -> PGStat
        Parameters:
           Time: TSecTm const & value

           Time: TSecTm const & value

           Time: TSecTm const & value

        New() -> PGStat
        New(PNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
            TStr GraphNm = TStr()) -> PGStat
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

        New(PNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> PGStat
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

        New(PNGraph Graph, TSecTm Time) -> PGStat
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value

        New(PUNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
            TStr GraphNm = TStr()) -> PGStat
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

        New(PUNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> PGStat
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

        New(PUNGraph Graph, TSecTm Time) -> PGStat
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value

        New(PNEGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
            TStr GraphNm = TStr()) -> PGStat
        Parameters:
           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphNm: TStr const & value

        New(PNEGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> PGStat
        Parameters:
           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

           Graph: PNEGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value

        New(PNEGraph Graph, TSecTm Time) -> PGStat
        Parameters:
           Graph: PNEGraph const & value
           Time: TSecTm const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value

        """
        return _snap.TGStat_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PGStat
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TGStat_Load(*args)

    Load = staticmethod(Load)
    def Clone(self):
        """
        Clone(self) -> PGStat
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_Clone(self)

    def __eq__(self, *args):
        """
        __eq__(self, TGStat GStat) -> bool
        Parameters:
           self: TGStat const * value
           GStat: TGStat const & value

           GStat: TGStat const & value

        """
        return _snap.TGStat___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TGStat GStat) -> bool
        Parameters:
           self: TGStat const * value
           GStat: TGStat const & value

           GStat: TGStat const & value

        """
        return _snap.TGStat___lt__(self, *args)

    def GetYear(self):
        """
        GetYear(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetYear(self)

    def GetMonth(self):
        """
        GetMonth(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetMonth(self)

    def GetDay(self):
        """
        GetDay(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetDay(self)

    def GetHour(self):
        """
        GetHour(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetHour(self)

    def GetMin(self):
        """
        GetMin(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetMin(self)

    def GetSec(self):
        """
        GetSec(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetSec(self)

    def GetTmStr(self):
        """
        GetTmStr(self) -> TStr
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetTmStr(self)

    def SetTm(self, *args):
        """
        SetTm(self, TSecTm GraphTm)
        Parameters:
           self: TGStat * value
           GraphTm: TSecTm const & value

           GraphTm: TSecTm const & value

        """
        return _snap.TGStat_SetTm(self, *args)

    def GetNm(self):
        """
        GetNm(self) -> TStr
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetNm(self)

    def SetNm(self, *args):
        """
        SetNm(self, TStr GraphName)
        Parameters:
           self: TGStat * value
           GraphName: TStr const & value

           GraphName: TStr const & value

        """
        return _snap.TGStat_SetNm(self, *args)

    def GetTime(self, *args):
        """
        GetTime(self, TTmUnit TimeUnit) -> int
        Parameters:
           self: TGStat const * value
           TimeUnit: TTmUnit const & value

           TimeUnit: TTmUnit const & value

        """
        return _snap.TGStat_GetTime(self, *args)

    def GetVals(self):
        """
        GetVals(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetVals(self)

    def HasVal(self, *args):
        """
        HasVal(self,  StatVal) -> bool
        Parameters:
           self: TGStat const * value
           StatVal: TGStatVal const & value

           StatVal: TGStatVal const & value

        """
        return _snap.TGStat_HasVal(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self,  StatVal) -> double
        Parameters:
           self: TGStat const * value
           StatVal: TGStatVal const & value

           StatVal: TGStatVal const & value

        """
        return _snap.TGStat_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self,  StatVal, double Val)
        Parameters:
           self: TGStat * value
           StatVal: TGStatVal const & value
           Val: double const & value

           StatVal: TGStatVal const & value
           Val: double const & value

        """
        return _snap.TGStat_SetVal(self, *args)

    def GetDistrs(self):
        """
        GetDistrs(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetDistrs(self)

    def HasDistr(self, *args):
        """
        HasDistr(self,  Distr) -> bool
        Parameters:
           self: TGStat const * value
           Distr: TGStatDistr const & value

           Distr: TGStatDistr const & value

        """
        return _snap.TGStat_HasDistr(self, *args)

    def GetDistr(self, *args):
        """
        GetDistr(self,  Distr) -> TFltPrV
        Parameters:
           Distr: TGStatDistr const & value

           Distr: TGStatDistr const & value

        GetDistr(self,  Distr, TFltPrV FltPrV)
        Parameters:
           self: TGStat const * value
           Distr: TGStatDistr const & value
           FltPrV: TFltPrV & value

           Distr: TGStatDistr const & value
           FltPrV: TFltPrV & value

        """
        return _snap.TGStat_GetDistr(self, *args)

    def SetDistr(self, *args):
        """
        SetDistr(self,  Distr, TFltPrV FltPrV)
        Parameters:
           self: TGStat * value
           Distr: TGStatDistr const & value
           FltPrV: TFltPrV const & value

           Distr: TGStatDistr const & value
           FltPrV: TFltPrV const & value

        """
        return _snap.TGStat_SetDistr(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetNodes(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TGStat const * value




        """
        return _snap.TGStat_GetEdges(self)

    def TakeStat(self, *args):
        """
        TakeStat(self, PNGraph Graph, TSecTm Time, TFSet StatFSet, TStr GraphName)
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

        TakeStat(self, PUNGraph Graph, TSecTm Time, TFSet StatFSet, TStr GraphName)
        Parameters:
           self: TGStat * value
           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           StatFSet: TFSet value
           GraphName: TStr const & value

        """
        return _snap.TGStat_TakeStat(self, *args)

    def TakeSpectral(self, *args):
        """
        TakeSpectral(self, PNGraph Graph, int _TakeSngVals = -1)
        Parameters:
           Graph: PNGraph const & value
           _TakeSngVals: int const value

           Graph: PNGraph const & value
           _TakeSngVals: int const value

        TakeSpectral(self, PNGraph Graph)
        Parameters:
           Graph: PNGraph const & value

           Graph: PNGraph const & value

        TakeSpectral(self, PNGraph Graph, TFSet StatFSet, int _TakeSngVals = -1)
        Parameters:
           Graph: PNGraph const & value
           StatFSet: TFSet value
           _TakeSngVals: int value

           Graph: PNGraph const & value
           StatFSet: TFSet value
           _TakeSngVals: int value

        TakeSpectral(self, PNGraph Graph, TFSet StatFSet)
        Parameters:
           self: TGStat * value
           Graph: PNGraph const & value
           StatFSet: TFSet value

           Graph: PNGraph const & value
           StatFSet: TFSet value

        """
        return _snap.TGStat_TakeSpectral(self, *args)

    def Plot(self, *args):
        """
        Plot(self,  Distr, TStr FNmPref, TStr Desc = TStr(), bool PowerFit = False)
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           PowerFit: bool value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           PowerFit: bool value

        Plot(self,  Distr, TStr FNmPref, TStr Desc = TStr())
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value

        Plot(self,  Distr, TStr FNmPref)
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value

        Plot(self, TFSet FSet, TStr FNmPref, TStr Desc = TStr(), bool PowerFit = False)
        Parameters:
           FSet: TFSet const & value
           FNmPref: TStr const & value
           Desc: TStr const & value
           PowerFit: bool value

           FSet: TFSet const & value
           FNmPref: TStr const & value
           Desc: TStr const & value
           PowerFit: bool value

        Plot(self, TFSet FSet, TStr FNmPref, TStr Desc = TStr())
        Parameters:
           FSet: TFSet const & value
           FNmPref: TStr const & value
           Desc: TStr const & value

           FSet: TFSet const & value
           FNmPref: TStr const & value
           Desc: TStr const & value

        Plot(self, TFSet FSet, TStr FNmPref)
        Parameters:
           self: TGStat const * value
           FSet: TFSet const & value
           FNmPref: TStr const & value

           FSet: TFSet const & value
           FNmPref: TStr const & value

        """
        return _snap.TGStat_Plot(self, *args)

    def PlotAll(self, *args):
        """
        PlotAll(self, TStr FNmPref, TStr Desc = TStr(), bool PowerFit = False)
        Parameters:
           FNmPref: TStr const & value
           Desc: TStr value
           PowerFit: bool value

           FNmPref: TStr const & value
           Desc: TStr value
           PowerFit: bool value

        PlotAll(self, TStr FNmPref, TStr Desc = TStr())
        Parameters:
           FNmPref: TStr const & value
           Desc: TStr value

           FNmPref: TStr const & value
           Desc: TStr value

        PlotAll(self, TStr FNmPref)
        Parameters:
           self: TGStat const * value
           FNmPref: TStr const & value

           FNmPref: TStr const & value

        """
        return _snap.TGStat_PlotAll(self, *args)

    def DumpValStat(self):
        """
        DumpValStat(self)
        Parameters:
           self: TGStat * value




        """
        return _snap.TGStat_DumpValStat(self)

    def AvgGStat(self, *args):
        """
        AvgGStat(self, PGStatVec GStatVec, bool ClipAt1 = False)
        Parameters:
           GStatVec: PGStatVec const & value
           ClipAt1: bool const & value

           GStatVec: PGStatVec const & value
           ClipAt1: bool const & value

        AvgGStat(self, PGStatVec GStatVec)
        Parameters:
           GStatVec: PGStatVec const & value

           GStatVec: PGStatVec const & value

        AvgGStat(self, TGStatV GStatV, bool ClipAt1 = False)
        Parameters:
           GStatV: TGStatV const & value
           ClipAt1: bool const & value

           GStatV: TGStatV const & value
           ClipAt1: bool const & value

        AvgGStat(self, TGStatV GStatV)
        Parameters:
           self: TGStat * value
           GStatV: TGStatV const & value

           GStatV: TGStatV const & value

        """
        return _snap.TGStat_AvgGStat(self, *args)

    def GetDistrStr(*args):
        """
        GetDistrStr( Distr) -> TStr
        Parameters:
           Distr: TGStatDistr const & value

           Distr: TGStatDistr const & value

           Distr: TGStatDistr const & value

        """
        return _snap.TGStat_GetDistrStr(*args)

    GetDistrStr = staticmethod(GetDistrStr)
    def GetValStr(*args):
        """
        GetValStr( Val) -> TStr
        Parameters:
           Val: TGStatVal const & value

           Val: TGStatVal const & value

           Val: TGStatVal const & value

        """
        return _snap.TGStat_GetValStr(*args)

    GetValStr = staticmethod(GetValStr)
    def GetPlotInfo(*args):
        """
        GetPlotInfo( Val) -> TPlotInfo
        Parameters:
           Val: TGStatVal const & value

           Val: TGStatVal const & value

           Val: TGStatVal const & value

        GetPlotInfo( Distr) -> TPlotInfo
        Parameters:
           Distr: TGStatDistr const & value

           Distr: TGStatDistr const & value

           Distr: TGStatDistr const & value

        """
        return _snap.TGStat_GetPlotInfo(*args)

    GetPlotInfo = staticmethod(GetPlotInfo)
    def NoStat():
        """NoStat() -> TFSet"""
        return _snap.TGStat_NoStat()

    NoStat = staticmethod(NoStat)
    def BasicStat():
        """BasicStat() -> TFSet"""
        return _snap.TGStat_BasicStat()

    BasicStat = staticmethod(BasicStat)
    def DegDStat():
        """DegDStat() -> TFSet"""
        return _snap.TGStat_DegDStat()

    DegDStat = staticmethod(DegDStat)
    def NoDiamStat():
        """NoDiamStat() -> TFSet"""
        return _snap.TGStat_NoDiamStat()

    NoDiamStat = staticmethod(NoDiamStat)
    def NoDistrStat():
        """NoDistrStat() -> TFSet"""
        return _snap.TGStat_NoDistrStat()

    NoDistrStat = staticmethod(NoDistrStat)
    def NoSvdStat():
        """NoSvdStat() -> TFSet"""
        return _snap.TGStat_NoSvdStat()

    NoSvdStat = staticmethod(NoSvdStat)
    def AllStat():
        """AllStat() -> TFSet"""
        return _snap.TGStat_AllStat()

    AllStat = staticmethod(AllStat)
    __swig_destroy__ = _snap.delete_TGStat
TGStat.Save = new_instancemethod(_snap.TGStat_Save,None,TGStat)
TGStat.Clone = new_instancemethod(_snap.TGStat_Clone,None,TGStat)
TGStat.__eq__ = new_instancemethod(_snap.TGStat___eq__,None,TGStat)
TGStat.__lt__ = new_instancemethod(_snap.TGStat___lt__,None,TGStat)
TGStat.GetYear = new_instancemethod(_snap.TGStat_GetYear,None,TGStat)
TGStat.GetMonth = new_instancemethod(_snap.TGStat_GetMonth,None,TGStat)
TGStat.GetDay = new_instancemethod(_snap.TGStat_GetDay,None,TGStat)
TGStat.GetHour = new_instancemethod(_snap.TGStat_GetHour,None,TGStat)
TGStat.GetMin = new_instancemethod(_snap.TGStat_GetMin,None,TGStat)
TGStat.GetSec = new_instancemethod(_snap.TGStat_GetSec,None,TGStat)
TGStat.GetTmStr = new_instancemethod(_snap.TGStat_GetTmStr,None,TGStat)
TGStat.SetTm = new_instancemethod(_snap.TGStat_SetTm,None,TGStat)
TGStat.GetNm = new_instancemethod(_snap.TGStat_GetNm,None,TGStat)
TGStat.SetNm = new_instancemethod(_snap.TGStat_SetNm,None,TGStat)
TGStat.GetTime = new_instancemethod(_snap.TGStat_GetTime,None,TGStat)
TGStat.GetVals = new_instancemethod(_snap.TGStat_GetVals,None,TGStat)
TGStat.HasVal = new_instancemethod(_snap.TGStat_HasVal,None,TGStat)
TGStat.GetVal = new_instancemethod(_snap.TGStat_GetVal,None,TGStat)
TGStat.SetVal = new_instancemethod(_snap.TGStat_SetVal,None,TGStat)
TGStat.GetDistrs = new_instancemethod(_snap.TGStat_GetDistrs,None,TGStat)
TGStat.HasDistr = new_instancemethod(_snap.TGStat_HasDistr,None,TGStat)
TGStat.GetDistr = new_instancemethod(_snap.TGStat_GetDistr,None,TGStat)
TGStat.SetDistr = new_instancemethod(_snap.TGStat_SetDistr,None,TGStat)
TGStat.GetNodes = new_instancemethod(_snap.TGStat_GetNodes,None,TGStat)
TGStat.GetEdges = new_instancemethod(_snap.TGStat_GetEdges,None,TGStat)
TGStat.TakeStat = new_instancemethod(_snap.TGStat_TakeStat,None,TGStat)
TGStat.TakeSpectral = new_instancemethod(_snap.TGStat_TakeSpectral,None,TGStat)
TGStat.Plot = new_instancemethod(_snap.TGStat_Plot,None,TGStat)
TGStat.PlotAll = new_instancemethod(_snap.TGStat_PlotAll,None,TGStat)
TGStat.DumpValStat = new_instancemethod(_snap.TGStat_DumpValStat,None,TGStat)
TGStat.AvgGStat = new_instancemethod(_snap.TGStat_AvgGStat,None,TGStat)
TGStat_swigregister = _snap.TGStat_swigregister
TGStat_swigregister(TGStat)
CapAttrName = cvar.CapAttrName

def TGStat_New(*args):
  """
    New(TSecTm Time = TSecTm(), TStr GraphName = TStr()) -> PGStat
    Parameters:
       Time: TSecTm const & value
       GraphName: TStr const & value

       Time: TSecTm const & value
       GraphName: TStr const & value

    New(TSecTm Time = TSecTm()) -> PGStat
    Parameters:
       Time: TSecTm const & value

       Time: TSecTm const & value

    New() -> PGStat
    New(PNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
        TStr GraphNm = TStr()) -> PGStat
    Parameters:
       Graph: PNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value
       GraphNm: TStr const & value

       Graph: PNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value
       GraphNm: TStr const & value

    New(PNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> PGStat
    Parameters:
       Graph: PNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value

       Graph: PNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value

    New(PNGraph Graph, TSecTm Time) -> PGStat
    Parameters:
       Graph: PNGraph const & value
       Time: TSecTm const & value

       Graph: PNGraph const & value
       Time: TSecTm const & value

    New(PUNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
        TStr GraphNm = TStr()) -> PGStat
    Parameters:
       Graph: PUNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value
       GraphNm: TStr const & value

       Graph: PUNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value
       GraphNm: TStr const & value

    New(PUNGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> PGStat
    Parameters:
       Graph: PUNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value

       Graph: PUNGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value

    New(PUNGraph Graph, TSecTm Time) -> PGStat
    Parameters:
       Graph: PUNGraph const & value
       Time: TSecTm const & value

       Graph: PUNGraph const & value
       Time: TSecTm const & value

    New(PNEGraph Graph, TSecTm Time, TFSet StatFSet = TFSet(), 
        TStr GraphNm = TStr()) -> PGStat
    Parameters:
       Graph: PNEGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value
       GraphNm: TStr const & value

       Graph: PNEGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value
       GraphNm: TStr const & value

    New(PNEGraph Graph, TSecTm Time, TFSet StatFSet = TFSet()) -> PGStat
    Parameters:
       Graph: PNEGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value

       Graph: PNEGraph const & value
       Time: TSecTm const & value
       StatFSet: TFSet value

    TGStat_New(PNEGraph Graph, TSecTm Time) -> PGStat
    Parameters:
       Graph: PNEGraph const & value
       Time: TSecTm const & value

       Graph: PNEGraph const & value
       Time: TSecTm const & value

    """
  return _snap.TGStat_New(*args)

def TGStat_Load(*args):
  """
    TGStat_Load(TSIn SIn) -> PGStat
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TGStat_Load(*args)

def TGStat_GetDistrStr(*args):
  """
    TGStat_GetDistrStr( Distr) -> TStr
    Parameters:
       Distr: TGStatDistr const & value

       Distr: TGStatDistr const & value

    """
  return _snap.TGStat_GetDistrStr(*args)

def TGStat_GetValStr(*args):
  """
    TGStat_GetValStr( Val) -> TStr
    Parameters:
       Val: TGStatVal const & value

       Val: TGStatVal const & value

    """
  return _snap.TGStat_GetValStr(*args)

def TGStat_GetPlotInfo(*args):
  """
    GetPlotInfo( Val) -> TPlotInfo
    Parameters:
       Val: TGStatVal const & value

       Val: TGStatVal const & value

    TGStat_GetPlotInfo( Distr) -> TPlotInfo
    Parameters:
       Distr: TGStatDistr const & value

       Distr: TGStatDistr const & value

    """
  return _snap.TGStat_GetPlotInfo(*args)

def TGStat_NoStat():
  """TGStat_NoStat() -> TFSet"""
  return _snap.TGStat_NoStat()

def TGStat_BasicStat():
  """TGStat_BasicStat() -> TFSet"""
  return _snap.TGStat_BasicStat()

def TGStat_DegDStat():
  """TGStat_DegDStat() -> TFSet"""
  return _snap.TGStat_DegDStat()

def TGStat_NoDiamStat():
  """TGStat_NoDiamStat() -> TFSet"""
  return _snap.TGStat_NoDiamStat()

def TGStat_NoDistrStat():
  """TGStat_NoDistrStat() -> TFSet"""
  return _snap.TGStat_NoDistrStat()

def TGStat_NoSvdStat():
  """TGStat_NoSvdStat() -> TFSet"""
  return _snap.TGStat_NoSvdStat()

def TGStat_AllStat():
  """TGStat_AllStat() -> TFSet"""
  return _snap.TGStat_AllStat()

class TGStatVec(object):
    """Proxy of C++ TGStatVec class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MinNodesEdges = _swig_property(_snap.TGStatVec_MinNodesEdges_get, _snap.TGStatVec_MinNodesEdges_set)
    def New(*args):
        """
        New(TTmUnit _TmUnit = tmu1Sec) -> PGStatVec
        Parameters:
           _TmUnit: TTmUnit const & value

           _TmUnit: TTmUnit const & value

           _TmUnit: TTmUnit const & value

        New() -> PGStatVec
        New(TTmUnit _TmUnit, TFSet TakeGrowthStat) -> PGStatVec
        Parameters:
           _TmUnit: TTmUnit const & value
           TakeGrowthStat: TFSet const & value

           _TmUnit: TTmUnit const & value
           TakeGrowthStat: TFSet const & value

           _TmUnit: TTmUnit const & value
           TakeGrowthStat: TFSet const & value

        """
        return _snap.TGStatVec_New(*args)

    New = staticmethod(New)
    def Load(*args):
        """
        Load(TSIn SIn) -> PGStatVec
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TGStatVec_Load(*args)

    Load = staticmethod(Load)
    def __init__(self, *args): 
        """
        __init__(self, TTmUnit _TmUnit = tmu1Sec) -> TGStatVec
        Parameters:
           _TmUnit: TTmUnit const & value

           _TmUnit: TTmUnit const & value

        __init__(self) -> TGStatVec
        __init__(self, TTmUnit _TmUnit, TFSet TakeGrowthStat) -> TGStatVec
        Parameters:
           _TmUnit: TTmUnit const & value
           TakeGrowthStat: TFSet const & value

           _TmUnit: TTmUnit const & value
           TakeGrowthStat: TFSet const & value

        __init__(self, TGStatVec GStat) -> TGStatVec
        Parameters:
           GStat: TGStatVec const & value

           GStat: TGStatVec const & value

        __init__(self, TSIn SIn) -> TGStatVec
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TGStatVec_swiginit(self,_snap.new_TGStatVec(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TGStatVec const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TGStatVec_Save(self, *args)

    def Add(self, *args):
        """
        Add(self) -> PGStat
        Add(self, TSecTm Time, TStr GraphNm = TStr()) -> PGStat
        Parameters:
           Time: TSecTm const & value
           GraphNm: TStr const & value

           Time: TSecTm const & value
           GraphNm: TStr const & value

        Add(self, TSecTm Time) -> PGStat
        Parameters:
           Time: TSecTm const & value

           Time: TSecTm const & value

        Add(self, PGStat Growth)
        Parameters:
           Growth: PGStat const & value

           Growth: PGStat const & value

        Add(self, PNGraph Graph, TSecTm Time, TStr GraphNm = TStr())
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value
           GraphNm: TStr const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value
           GraphNm: TStr const & value

        Add(self, PNGraph Graph, TSecTm Time)
        Parameters:
           Graph: PNGraph const & value
           Time: TSecTm const & value

           Graph: PNGraph const & value
           Time: TSecTm const & value

        Add(self, PUNGraph Graph, TSecTm Time, TStr GraphNm = TStr())
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value
           GraphNm: TStr const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value
           GraphNm: TStr const & value

        Add(self, PUNGraph Graph, TSecTm Time)
        Parameters:
           Graph: PUNGraph const & value
           Time: TSecTm const & value

           Graph: PUNGraph const & value
           Time: TSecTm const & value

        Add(self, PNEGraph Graph, TSecTm Time, TStr GraphNm = TStr())
        Parameters:
           Graph: PNEGraph const & value
           Time: TSecTm const & value
           GraphNm: TStr const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value
           GraphNm: TStr const & value

        Add(self, PNEGraph Graph, TSecTm Time)
        Parameters:
           self: TGStatVec * value
           Graph: PNEGraph const & value
           Time: TSecTm const & value

           Graph: PNEGraph const & value
           Time: TSecTm const & value

        """
        return _snap.TGStatVec_Add(self, *args)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TGStatVec * value




        """
        return _snap.TGStatVec_Clr(self)

    def Sort(self, *args):
        """
        Sort(self,  SortBy = gsvNodes, bool Asc = True)
        Parameters:
           SortBy: TGStatVal const & value
           Asc: bool const & value

           SortBy: TGStatVal const & value
           Asc: bool const & value

        Sort(self,  SortBy = gsvNodes)
        Parameters:
           SortBy: TGStatVal const & value

           SortBy: TGStatVal const & value

        Sort(self)
        Parameters:
           self: TGStatVec * value


        """
        return _snap.TGStatVec_Sort(self, *args)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TGStatVec const * value




        """
        return _snap.TGStatVec_Len(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TGStatVec const * value




        """
        return _snap.TGStatVec_Empty(self)

    def At(self, *args):
        """
        At(self, int ValN) -> PGStat
        Parameters:
           self: TGStatVec const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TGStatVec_At(self, *args)

    def Last(self):
        """
        Last(self) -> PGStat
        Parameters:
           self: TGStatVec const * value




        """
        return _snap.TGStatVec_Last(self)

    def GetGStatV(self):
        """
        GetGStatV(self) -> TGStatV
        Parameters:
           self: TGStatVec const * value




        """
        return _snap.TGStatVec_GetGStatV(self)

    def GetTime(self, *args):
        """
        GetTime(self, int ValN) -> int
        Parameters:
           self: TGStatVec const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TGStatVec_GetTime(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           self: TGStatVec * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TGStatVec_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TGStatVec * value




        """
        return _snap.TGStatVec_DelLast(self)

    def DelBefore(self, *args):
        """
        DelBefore(self, TSecTm Tm)
        Parameters:
           self: TGStatVec * value
           Tm: TSecTm const & value

           Tm: TSecTm const & value

        """
        return _snap.TGStatVec_DelBefore(self, *args)

    def DelAfter(self, *args):
        """
        DelAfter(self, TSecTm Tm)
        Parameters:
           self: TGStatVec * value
           Tm: TSecTm const & value

           Tm: TSecTm const & value

        """
        return _snap.TGStatVec_DelAfter(self, *args)

    def DelSmallNodes(self, *args):
        """
        DelSmallNodes(self, int MinNodes)
        Parameters:
           self: TGStatVec * value
           MinNodes: int const & value

           MinNodes: int const & value

        """
        return _snap.TGStatVec_DelSmallNodes(self, *args)

    def SetTmUnit(self, *args):
        """
        SetTmUnit(self, TTmUnit TimeUnit)
        Parameters:
           self: TGStatVec * value
           TimeUnit: TTmUnit const & value

           TimeUnit: TTmUnit const & value

        """
        return _snap.TGStatVec_SetTmUnit(self, *args)

    def GetTmUnit(self):
        """
        GetTmUnit(self) -> TTmUnit
        Parameters:
           self: TGStatVec const * value




        """
        return _snap.TGStatVec_GetTmUnit(self)

    def SetTakeStat(self, *args):
        """
        SetTakeStat(self, TFSet TakeStatSet)
        Parameters:
           self: TGStatVec * value
           TakeStatSet: TFSet const & value

           TakeStatSet: TFSet const & value

        """
        return _snap.TGStatVec_SetTakeStat(self, *args)

    def HasVal(self, *args):
        """
        HasVal(self,  Stat) -> bool
        Parameters:
           self: TGStatVec const * value
           Stat: TGStatVal const & value

           Stat: TGStatVal const & value

        """
        return _snap.TGStatVec_HasVal(self, *args)

    def HasDistr(self, *args):
        """
        HasDistr(self,  Stat) -> bool
        Parameters:
           self: TGStatVec const * value
           Stat: TGStatDistr const & value

           Stat: TGStatDistr const & value

        """
        return _snap.TGStatVec_HasDistr(self, *args)

    def GetValV(self, *args):
        """
        GetValV(self,  XVal,  YVal, TFltPrV ValV)
        Parameters:
           self: TGStatVec const * value
           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           ValV: TFltPrV & value

           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           ValV: TFltPrV & value

        """
        return _snap.TGStatVec_GetValV(self, *args)

    def GetAvgGStat(self, ClipAt1 = False):
        """
        GetAvgGStat(self, bool ClipAt1 = False) -> PGStat
        Parameters:
           ClipAt1: bool const & value

           ClipAt1: bool const & value

           ClipAt1: bool const & value

           ClipAt1: bool const & value

        GetAvgGStat(self) -> PGStat
        Parameters:
           self: TGStatVec * value


        """
        return _snap.TGStatVec_GetAvgGStat(self, ClipAt1)

    def Plot(self, *args):
        """
        Plot(self,  XVal,  YVal, TStr OutFNm, TStr Desc, TGpScaleTy Scale = gpsAuto, 
            bool PowerFit = False)
        Parameters:
           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr & value
           Scale: TGpScaleTy const & value
           PowerFit: bool const & value

           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr & value
           Scale: TGpScaleTy const & value
           PowerFit: bool const & value

        Plot(self,  XVal,  YVal, TStr OutFNm, TStr Desc, TGpScaleTy Scale = gpsAuto)
        Parameters:
           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr & value
           Scale: TGpScaleTy const & value

           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr & value
           Scale: TGpScaleTy const & value

        Plot(self,  XVal,  YVal, TStr OutFNm, TStr Desc)
        Parameters:
           self: TGStatVec const * value
           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr & value

           XVal: TGStatVal const & value
           YVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr & value

        """
        return _snap.TGStatVec_Plot(self, *args)

    def PlotAllVsX(self, *args):
        """
        PlotAllVsX(self,  XVal, TStr OutFNm, TStr Desc = TStr(), TGpScaleTy Scale = gpsAuto, 
            bool PowerFit = False)
        Parameters:
           XVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr value
           Scale: TGpScaleTy const & value
           PowerFit: bool const & value

           XVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr value
           Scale: TGpScaleTy const & value
           PowerFit: bool const & value

        PlotAllVsX(self,  XVal, TStr OutFNm, TStr Desc = TStr(), TGpScaleTy Scale = gpsAuto)
        Parameters:
           XVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr value
           Scale: TGpScaleTy const & value

           XVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr value
           Scale: TGpScaleTy const & value

        PlotAllVsX(self,  XVal, TStr OutFNm, TStr Desc = TStr())
        Parameters:
           XVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr value

           XVal: TGStatVal const & value
           OutFNm: TStr const & value
           Desc: TStr value

        PlotAllVsX(self,  XVal, TStr OutFNm)
        Parameters:
           self: TGStatVec const * value
           XVal: TGStatVal const & value
           OutFNm: TStr const & value

           XVal: TGStatVal const & value
           OutFNm: TStr const & value

        """
        return _snap.TGStatVec_PlotAllVsX(self, *args)

    def ImposeDistr(self, *args):
        """
        ImposeDistr(self,  Distr, TStr FNmPref, TStr Desc = TStr(), bool ExpBin = False, 
            bool PowerFit = False, TGpSeriesTy PlotWith = gpwLinesPoints, 
            TStr Style = "")
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value
           PowerFit: bool const & value
           PlotWith: TGpSeriesTy const & value
           Style: TStr const & value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value
           PowerFit: bool const & value
           PlotWith: TGpSeriesTy const & value
           Style: TStr const & value

        ImposeDistr(self,  Distr, TStr FNmPref, TStr Desc = TStr(), bool ExpBin = False, 
            bool PowerFit = False, TGpSeriesTy PlotWith = gpwLinesPoints)
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value
           PowerFit: bool const & value
           PlotWith: TGpSeriesTy const & value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value
           PowerFit: bool const & value
           PlotWith: TGpSeriesTy const & value

        ImposeDistr(self,  Distr, TStr FNmPref, TStr Desc = TStr(), bool ExpBin = False, 
            bool PowerFit = False)
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value
           PowerFit: bool const & value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value
           PowerFit: bool const & value

        ImposeDistr(self,  Distr, TStr FNmPref, TStr Desc = TStr(), bool ExpBin = False)
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value
           ExpBin: bool const & value

        ImposeDistr(self,  Distr, TStr FNmPref, TStr Desc = TStr())
        Parameters:
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value
           Desc: TStr value

        ImposeDistr(self,  Distr, TStr FNmPref)
        Parameters:
           self: TGStatVec const * value
           Distr: TGStatDistr const & value
           FNmPref: TStr const & value

           Distr: TGStatDistr const & value
           FNmPref: TStr const & value

        """
        return _snap.TGStatVec_ImposeDistr(self, *args)

    def SaveTxt(self, *args):
        """
        SaveTxt(self, TStr FNmPref, TStr Desc)
        Parameters:
           self: TGStatVec const * value
           FNmPref: TStr const & value
           Desc: TStr const & value

           FNmPref: TStr const & value
           Desc: TStr const & value

        """
        return _snap.TGStatVec_SaveTxt(self, *args)

    __swig_destroy__ = _snap.delete_TGStatVec
TGStatVec.Save = new_instancemethod(_snap.TGStatVec_Save,None,TGStatVec)
TGStatVec.Add = new_instancemethod(_snap.TGStatVec_Add,None,TGStatVec)
TGStatVec.Clr = new_instancemethod(_snap.TGStatVec_Clr,None,TGStatVec)
TGStatVec.Sort = new_instancemethod(_snap.TGStatVec_Sort,None,TGStatVec)
TGStatVec.Len = new_instancemethod(_snap.TGStatVec_Len,None,TGStatVec)
TGStatVec.Empty = new_instancemethod(_snap.TGStatVec_Empty,None,TGStatVec)
TGStatVec.At = new_instancemethod(_snap.TGStatVec_At,None,TGStatVec)
TGStatVec.Last = new_instancemethod(_snap.TGStatVec_Last,None,TGStatVec)
TGStatVec.GetGStatV = new_instancemethod(_snap.TGStatVec_GetGStatV,None,TGStatVec)
TGStatVec.GetTime = new_instancemethod(_snap.TGStatVec_GetTime,None,TGStatVec)
TGStatVec.Del = new_instancemethod(_snap.TGStatVec_Del,None,TGStatVec)
TGStatVec.DelLast = new_instancemethod(_snap.TGStatVec_DelLast,None,TGStatVec)
TGStatVec.DelBefore = new_instancemethod(_snap.TGStatVec_DelBefore,None,TGStatVec)
TGStatVec.DelAfter = new_instancemethod(_snap.TGStatVec_DelAfter,None,TGStatVec)
TGStatVec.DelSmallNodes = new_instancemethod(_snap.TGStatVec_DelSmallNodes,None,TGStatVec)
TGStatVec.SetTmUnit = new_instancemethod(_snap.TGStatVec_SetTmUnit,None,TGStatVec)
TGStatVec.GetTmUnit = new_instancemethod(_snap.TGStatVec_GetTmUnit,None,TGStatVec)
TGStatVec.SetTakeStat = new_instancemethod(_snap.TGStatVec_SetTakeStat,None,TGStatVec)
TGStatVec.HasVal = new_instancemethod(_snap.TGStatVec_HasVal,None,TGStatVec)
TGStatVec.HasDistr = new_instancemethod(_snap.TGStatVec_HasDistr,None,TGStatVec)
TGStatVec.GetValV = new_instancemethod(_snap.TGStatVec_GetValV,None,TGStatVec)
TGStatVec.GetAvgGStat = new_instancemethod(_snap.TGStatVec_GetAvgGStat,None,TGStatVec)
TGStatVec.Plot = new_instancemethod(_snap.TGStatVec_Plot,None,TGStatVec)
TGStatVec.PlotAllVsX = new_instancemethod(_snap.TGStatVec_PlotAllVsX,None,TGStatVec)
TGStatVec.ImposeDistr = new_instancemethod(_snap.TGStatVec_ImposeDistr,None,TGStatVec)
TGStatVec.SaveTxt = new_instancemethod(_snap.TGStatVec_SaveTxt,None,TGStatVec)
TGStatVec_swigregister = _snap.TGStatVec_swigregister
TGStatVec_swigregister(TGStatVec)

def TGStatVec_New(*args):
  """
    New(TTmUnit _TmUnit = tmu1Sec) -> PGStatVec
    Parameters:
       _TmUnit: TTmUnit const & value

       _TmUnit: TTmUnit const & value

    New() -> PGStatVec
    TGStatVec_New(TTmUnit _TmUnit, TFSet TakeGrowthStat) -> PGStatVec
    Parameters:
       _TmUnit: TTmUnit const & value
       TakeGrowthStat: TFSet const & value

       _TmUnit: TTmUnit const & value
       TakeGrowthStat: TFSet const & value

    """
  return _snap.TGStatVec_New(*args)

def TGStatVec_Load(*args):
  """
    TGStatVec_Load(TSIn SIn) -> PGStatVec
    Parameters:
       SIn: TSIn & value

       SIn: TSIn & value

    """
  return _snap.TGStatVec_Load(*args)

class TNGraphMtx(object):
    """Proxy of C++ TNGraphMtx class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PNGraph GraphPt) -> TNGraphMtx
        Parameters:
           GraphPt: PNGraph const & value

           GraphPt: PNGraph const & value

        __init__(self, TNGraphMtx GraphMtx) -> TNGraphMtx
        Parameters:
           GraphMtx: TNGraphMtx const & value

           GraphMtx: TNGraphMtx const & value

        """
        _snap.TNGraphMtx_swiginit(self,_snap.new_TNGraphMtx(*args))
    def PGetRows(self):
        """
        PGetRows(self) -> int
        Parameters:
           self: TNGraphMtx const * value




        """
        return _snap.TNGraphMtx_PGetRows(self)

    def PGetCols(self):
        """
        PGetCols(self) -> int
        Parameters:
           self: TNGraphMtx const * value




        """
        return _snap.TNGraphMtx_PGetCols(self)

    def PMultiply(self, *args):
        """
        PMultiply(self, TFltVV B, int ColId, TFltV Result)
        Parameters:
           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

        PMultiply(self, TFltV Vec, TFltV Result)
        Parameters:
           self: TNGraphMtx const * value
           Vec: TFltV const & value
           Result: TFltV & value

           Vec: TFltV const & value
           Result: TFltV & value

        """
        return _snap.TNGraphMtx_PMultiply(self, *args)

    def PMultiplyT(self, *args):
        """
        PMultiplyT(self, TFltVV B, int ColId, TFltV Result)
        Parameters:
           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

        PMultiplyT(self, TFltV Vec, TFltV Result)
        Parameters:
           self: TNGraphMtx const * value
           Vec: TFltV const & value
           Result: TFltV & value

           Vec: TFltV const & value
           Result: TFltV & value

        """
        return _snap.TNGraphMtx_PMultiplyT(self, *args)

    __swig_destroy__ = _snap.delete_TNGraphMtx
TNGraphMtx.PGetRows = new_instancemethod(_snap.TNGraphMtx_PGetRows,None,TNGraphMtx)
TNGraphMtx.PGetCols = new_instancemethod(_snap.TNGraphMtx_PGetCols,None,TNGraphMtx)
TNGraphMtx.PMultiply = new_instancemethod(_snap.TNGraphMtx_PMultiply,None,TNGraphMtx)
TNGraphMtx.PMultiplyT = new_instancemethod(_snap.TNGraphMtx_PMultiplyT,None,TNGraphMtx)
TNGraphMtx_swigregister = _snap.TNGraphMtx_swigregister
TNGraphMtx_swigregister(TNGraphMtx)

class TUNGraphMtx(object):
    """Proxy of C++ TUNGraphMtx class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, PUNGraph GraphPt) -> TUNGraphMtx
        Parameters:
           GraphPt: PUNGraph const & value

           GraphPt: PUNGraph const & value

        __init__(self, TUNGraphMtx GraphMtx) -> TUNGraphMtx
        Parameters:
           GraphMtx: TUNGraphMtx const & value

           GraphMtx: TUNGraphMtx const & value

        """
        _snap.TUNGraphMtx_swiginit(self,_snap.new_TUNGraphMtx(*args))
    def PGetRows(self):
        """
        PGetRows(self) -> int
        Parameters:
           self: TUNGraphMtx const * value




        """
        return _snap.TUNGraphMtx_PGetRows(self)

    def PGetCols(self):
        """
        PGetCols(self) -> int
        Parameters:
           self: TUNGraphMtx const * value




        """
        return _snap.TUNGraphMtx_PGetCols(self)

    def PMultiply(self, *args):
        """
        PMultiply(self, TFltVV B, int ColId, TFltV Result)
        Parameters:
           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

        PMultiply(self, TFltV Vec, TFltV Result)
        Parameters:
           self: TUNGraphMtx const * value
           Vec: TFltV const & value
           Result: TFltV & value

           Vec: TFltV const & value
           Result: TFltV & value

        """
        return _snap.TUNGraphMtx_PMultiply(self, *args)

    def PMultiplyT(self, *args):
        """
        PMultiplyT(self, TFltVV B, int ColId, TFltV Result)
        Parameters:
           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

           B: TFltVV const & value
           ColId: int value
           Result: TFltV & value

        PMultiplyT(self, TFltV Vec, TFltV Result)
        Parameters:
           self: TUNGraphMtx const * value
           Vec: TFltV const & value
           Result: TFltV & value

           Vec: TFltV const & value
           Result: TFltV & value

        """
        return _snap.TUNGraphMtx_PMultiplyT(self, *args)

    __swig_destroy__ = _snap.delete_TUNGraphMtx
TUNGraphMtx.PGetRows = new_instancemethod(_snap.TUNGraphMtx_PGetRows,None,TUNGraphMtx)
TUNGraphMtx.PGetCols = new_instancemethod(_snap.TUNGraphMtx_PGetCols,None,TUNGraphMtx)
TUNGraphMtx.PMultiply = new_instancemethod(_snap.TUNGraphMtx_PMultiply,None,TUNGraphMtx)
TUNGraphMtx.PMultiplyT = new_instancemethod(_snap.TUNGraphMtx_PMultiplyT,None,TUNGraphMtx)
TUNGraphMtx_swigregister = _snap.TUNGraphMtx_swigregister
TUNGraphMtx_swigregister(TUNGraphMtx)


def GetSngVals(*args):
  """
    GetSngVals(PNGraph Graph, int SngVals, TFltV SngValV)
    Parameters:
       Graph: PNGraph const & value
       SngVals: int const & value
       SngValV: TFltV & value

       Graph: PNGraph const & value
       SngVals: int const & value
       SngValV: TFltV & value

    """
  return _snap.GetSngVals(*args)

def GetEigVals(*args):
  """
    GetEigVals(PUNGraph Graph, int EigVals, TFltV EigValV)
    Parameters:
       Graph: PUNGraph const & value
       EigVals: int const & value
       EigValV: TFltV & value

       Graph: PUNGraph const & value
       EigVals: int const & value
       EigValV: TFltV & value

    """
  return _snap.GetEigVals(*args)

def GetInvParticipRat(*args):
  """
    GetInvParticipRat(PUNGraph Graph, int MaxEigVecs, int TimeLimit, TFltPrV EigValIprV)
    Parameters:
       Graph: PUNGraph const & value
       MaxEigVecs: int value
       TimeLimit: int value
       EigValIprV: TFltPrV & value

       Graph: PUNGraph const & value
       MaxEigVecs: int value
       TimeLimit: int value
       EigValIprV: TFltPrV & value

    """
  return _snap.GetInvParticipRat(*args)

def GetInvParticipRatEig(*args):
  """
    GetInvParticipRatEig(TFltV EigVec) -> double
    Parameters:
       EigVec: TFltV const & value

       EigVec: TFltV const & value

    """
  return _snap.GetInvParticipRatEig(*args)
gvlDot = _snap.gvlDot
gvlNeato = _snap.gvlNeato
gvlTwopi = _snap.gvlTwopi
gvlCirco = _snap.gvlCirco
gvlSfdp = _snap.gvlSfdp

def GVizDoLayout(*args):
  """
    GVizDoLayout(TStr GraphInFNm, TStr OutFNm,  Layout)
    Parameters:
       GraphInFNm: TStr const & value
       OutFNm: TStr value
       Layout: TGVizLayout const & value

       GraphInFNm: TStr const & value
       OutFNm: TStr value
       Layout: TGVizLayout const & value

    """
  return _snap.GVizDoLayout(*args)

def GVizGetLayoutStr(*args):
  """
    GVizGetLayoutStr( Layout) -> TStr
    Parameters:
       Layout: TGVizLayout const & value

       Layout: TGVizLayout const & value

    """
  return _snap.GVizGetLayoutStr(*args)

def GetMergeSortedV(*args):
  """
    GetMergeSortedV(TIntV NeighbourV, TNodeI NI)
    Parameters:
       NeighbourV: TIntV & value
       NI: TNGraph::TNodeI value

       NeighbourV: TIntV & value
       NI: TNGraph::TNodeI value

    """
  return _snap.GetMergeSortedV(*args)

def GetCommon(*args):
  """
    GetCommon(TIntV A, TIntV B) -> int
    Parameters:
       A: TIntV & value
       B: TIntV & value

       A: TIntV & value
       B: TIntV & value

    """
  return _snap.GetCommon(*args)

def GenForestFire(*args):
  """
    GenForestFire(int Nodes, double FwdProb, double BckProb) -> PNGraph
    Parameters:
       Nodes: int const & value
       FwdProb: double const & value
       BckProb: double const & value

       Nodes: int const & value
       FwdProb: double const & value
       BckProb: double const & value

    """
  return _snap.GenForestFire(*args)

def GenRMatEpinions():
  """GenRMatEpinions() -> PNGraph"""
  return _snap.GenRMatEpinions()
class TForestFire(object):
    """Proxy of C++ TForestFire class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TForestFire
        __init__(self, PNGraph GraphPt, double ForwBurnProb, double BackBurnProb, 
            double DecayProb = 1.0, int RndSeed = 1) -> TForestFire
        Parameters:
           GraphPt: PNGraph const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value
           DecayProb: double const & value
           RndSeed: int const & value

           GraphPt: PNGraph const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value
           DecayProb: double const & value
           RndSeed: int const & value

        __init__(self, PNGraph GraphPt, double ForwBurnProb, double BackBurnProb, 
            double DecayProb = 1.0) -> TForestFire
        Parameters:
           GraphPt: PNGraph const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value
           DecayProb: double const & value

           GraphPt: PNGraph const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value
           DecayProb: double const & value

        __init__(self, PNGraph GraphPt, double ForwBurnProb, double BackBurnProb) -> TForestFire
        Parameters:
           GraphPt: PNGraph const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value

           GraphPt: PNGraph const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value

        """
        _snap.TForestFire_swiginit(self,_snap.new_TForestFire(*args))
    def SetGraph(self, *args):
        """
        SetGraph(self, PNGraph GraphPt)
        Parameters:
           self: TForestFire * value
           GraphPt: PNGraph const & value

           GraphPt: PNGraph const & value

        """
        return _snap.TForestFire_SetGraph(self, *args)

    def GetGraph(self):
        """
        GetGraph(self) -> PNGraph
        Parameters:
           self: TForestFire const * value




        """
        return _snap.TForestFire_GetGraph(self)

    def SetBurnProb(self, *args):
        """
        SetBurnProb(self, double ForwBurnProb, double BackBurnProb)
        Parameters:
           self: TForestFire * value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value

           ForwBurnProb: double const & value
           BackBurnProb: double const & value

        """
        return _snap.TForestFire_SetBurnProb(self, *args)

    def SetProbDecay(self, *args):
        """
        SetProbDecay(self, double DecayProb)
        Parameters:
           self: TForestFire * value
           DecayProb: double const & value

           DecayProb: double const & value

        """
        return _snap.TForestFire_SetProbDecay(self, *args)

    def Infect(self, *args):
        """
        Infect(self, int NodeId)
        Parameters:
           NodeId: int const & value

           NodeId: int const & value

        Infect(self, TIntV InfectedNIdV)
        Parameters:
           self: TForestFire * value
           InfectedNIdV: TIntV const & value

           InfectedNIdV: TIntV const & value

        """
        return _snap.TForestFire_Infect(self, *args)

    def InfectAll(self):
        """
        InfectAll(self)
        Parameters:
           self: TForestFire * value




        """
        return _snap.TForestFire_InfectAll(self)

    def InfectRnd(self, *args):
        """
        InfectRnd(self, int NInfect)
        Parameters:
           self: TForestFire * value
           NInfect: int const & value

           NInfect: int const & value

        """
        return _snap.TForestFire_InfectRnd(self, *args)

    def BurnExpFire(self):
        """
        BurnExpFire(self)
        Parameters:
           self: TForestFire * value




        """
        return _snap.TForestFire_BurnExpFire(self)

    def BurnGeoFire(self):
        """
        BurnGeoFire(self)
        Parameters:
           self: TForestFire * value




        """
        return _snap.TForestFire_BurnGeoFire(self)

    def GetFireTm(self):
        """
        GetFireTm(self) -> int
        Parameters:
           self: TForestFire const * value




        """
        return _snap.TForestFire_GetFireTm(self)

    def GetBurned(self):
        """
        GetBurned(self) -> int
        Parameters:
           self: TForestFire const * value




        """
        return _snap.TForestFire_GetBurned(self)

    def GetBurnedNId(self, *args):
        """
        GetBurnedNId(self, int NIdN) -> int
        Parameters:
           self: TForestFire const * value
           NIdN: int const & value

           NIdN: int const & value

        """
        return _snap.TForestFire_GetBurnedNId(self, *args)

    def GetBurnedNIdV(self, *args):
        """
        GetBurnedNIdV(self) -> TIntV
        GetBurnedNIdV(self, TIntV NIdV)
        Parameters:
           self: TForestFire const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.TForestFire_GetBurnedNIdV(self, *args)

    def PlotFire(self, *args):
        """
        PlotFire(self, TStr FNmPref, TStr Desc, bool PlotAllBurned = False)
        Parameters:
           FNmPref: TStr const & value
           Desc: TStr const & value
           PlotAllBurned: bool const & value

           FNmPref: TStr const & value
           Desc: TStr const & value
           PlotAllBurned: bool const & value

        PlotFire(self, TStr FNmPref, TStr Desc)
        Parameters:
           self: TForestFire * value
           FNmPref: TStr const & value
           Desc: TStr const & value

           FNmPref: TStr const & value
           Desc: TStr const & value

        """
        return _snap.TForestFire_PlotFire(self, *args)

    def GenGraph(*args):
        """
        GenGraph(int Nodes, double FwdProb, double BckProb) -> PNGraph
        Parameters:
           Nodes: int const & value
           FwdProb: double const & value
           BckProb: double const & value

           Nodes: int const & value
           FwdProb: double const & value
           BckProb: double const & value

           Nodes: int const & value
           FwdProb: double const & value
           BckProb: double const & value

        """
        return _snap.TForestFire_GenGraph(*args)

    GenGraph = staticmethod(GenGraph)
    __swig_destroy__ = _snap.delete_TForestFire
TForestFire.SetGraph = new_instancemethod(_snap.TForestFire_SetGraph,None,TForestFire)
TForestFire.GetGraph = new_instancemethod(_snap.TForestFire_GetGraph,None,TForestFire)
TForestFire.SetBurnProb = new_instancemethod(_snap.TForestFire_SetBurnProb,None,TForestFire)
TForestFire.SetProbDecay = new_instancemethod(_snap.TForestFire_SetProbDecay,None,TForestFire)
TForestFire.Infect = new_instancemethod(_snap.TForestFire_Infect,None,TForestFire)
TForestFire.InfectAll = new_instancemethod(_snap.TForestFire_InfectAll,None,TForestFire)
TForestFire.InfectRnd = new_instancemethod(_snap.TForestFire_InfectRnd,None,TForestFire)
TForestFire.BurnExpFire = new_instancemethod(_snap.TForestFire_BurnExpFire,None,TForestFire)
TForestFire.BurnGeoFire = new_instancemethod(_snap.TForestFire_BurnGeoFire,None,TForestFire)
TForestFire.GetFireTm = new_instancemethod(_snap.TForestFire_GetFireTm,None,TForestFire)
TForestFire.GetBurned = new_instancemethod(_snap.TForestFire_GetBurned,None,TForestFire)
TForestFire.GetBurnedNId = new_instancemethod(_snap.TForestFire_GetBurnedNId,None,TForestFire)
TForestFire.GetBurnedNIdV = new_instancemethod(_snap.TForestFire_GetBurnedNIdV,None,TForestFire)
TForestFire.PlotFire = new_instancemethod(_snap.TForestFire_PlotFire,None,TForestFire)
TForestFire_swigregister = _snap.TForestFire_swigregister
TForestFire_swigregister(TForestFire)

def GetSngVec(*args):
  """
    GetSngVec(PNGraph Graph, TFltV LeftSV, TFltV RightSV)
    Parameters:
       Graph: PNGraph const & value
       LeftSV: TFltV & value
       RightSV: TFltV & value

       Graph: PNGraph const & value
       LeftSV: TFltV & value
       RightSV: TFltV & value

    GetSngVec(PNGraph Graph, int SngVecs, TFltV SngValV, TVec<(TFltV)> LeftSV, 
        TVec<(TFltV)> RightSV)
    Parameters:
       Graph: PNGraph const & value
       SngVecs: int const & value
       SngValV: TFltV & value
       LeftSV: TVec< TFltV > & value
       RightSV: TVec< TFltV > & value

       Graph: PNGraph const & value
       SngVecs: int const & value
       SngValV: TFltV & value
       LeftSV: TVec< TFltV > & value
       RightSV: TVec< TFltV > & value

    """
  return _snap.GetSngVec(*args)

def GetEigVec(*args):
  """
    GetEigVec(PUNGraph Graph, TFltV EigVecV)
    Parameters:
       Graph: PUNGraph const & value
       EigVecV: TFltV & value

       Graph: PUNGraph const & value
       EigVecV: TFltV & value

    GetEigVec(PUNGraph Graph, int EigVecs, TFltV EigValV, TVec<(TFltV)> EigVecV)
    Parameters:
       Graph: PUNGraph const & value
       EigVecs: int const & value
       EigValV: TFltV & value
       EigVecV: TVec< TFltV > & value

       Graph: PUNGraph const & value
       EigVecs: int const & value
       EigValV: TFltV & value
       EigVecV: TVec< TFltV > & value

    """
  return _snap.GetEigVec(*args)

def PlotEigValRank(*args):
  """
    PlotEigValRank(PUNGraph Graph, int EigVals, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotEigValRank(PUNGraph Graph, int EigVals, TStr FNmPref)
    Parameters:
       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value

       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotEigValRank(*args)

def PlotEigValDistr(*args):
  """
    PlotEigValDistr(PUNGraph Graph, int EigVals, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotEigValDistr(PUNGraph Graph, int EigVals, TStr FNmPref)
    Parameters:
       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value

       Graph: PUNGraph const & value
       EigVals: int const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotEigValDistr(*args)

def PlotInvParticipRat(*args):
  """
    PlotInvParticipRat(PUNGraph Graph, int MaxEigVecs, int TimeLimit, TStr FNmPref, 
        TStr DescStr = TStr())
    Parameters:
       Graph: PUNGraph const & value
       MaxEigVecs: int const & value
       TimeLimit: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: PUNGraph const & value
       MaxEigVecs: int const & value
       TimeLimit: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotInvParticipRat(PUNGraph Graph, int MaxEigVecs, int TimeLimit, TStr FNmPref)
    Parameters:
       Graph: PUNGraph const & value
       MaxEigVecs: int const & value
       TimeLimit: int const & value
       FNmPref: TStr const & value

       Graph: PUNGraph const & value
       MaxEigVecs: int const & value
       TimeLimit: int const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotInvParticipRat(*args)

def PlotSngValRank(*args):
  """
    PlotSngValRank(PNGraph Graph, int SngVals, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotSngValRank(PNGraph Graph, int SngVals, TStr FNmPref)
    Parameters:
       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value

       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotSngValRank(*args)

def PlotSngValDistr(*args):
  """
    PlotSngValDistr(PNGraph Graph, int SngVals, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotSngValDistr(PNGraph Graph, int SngVals, TStr FNmPref)
    Parameters:
       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value

       Graph: PNGraph const & value
       SngVals: int const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotSngValDistr(*args)

def PlotSngVec(*args):
  """
    PlotSngVec(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: PNGraph const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: PNGraph const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotSngVec(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: PNGraph const & value
       FNmPref: TStr const & value

       Graph: PNGraph const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotSngVec(*args)

def GetSubGraph(*args):
  """
    GetSubGraph(PUNGraph Graph, TIntV NIdV, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       Graph: PUNGraph const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    GetSubGraph(PUNGraph Graph, TIntV NIdV) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value
       NIdV: TIntV const & value

       Graph: PUNGraph const & value
       NIdV: TIntV const & value

    GetSubGraph(PNGraph Graph, TIntV NIdV, bool RenumberNodes = False) -> PNGraph
    Parameters:
       Graph: PNGraph const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       Graph: PNGraph const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    GetSubGraph(PNGraph Graph, TIntV NIdV) -> PNGraph
    Parameters:
       Graph: PNGraph const & value
       NIdV: TIntV const & value

       Graph: PNGraph const & value
       NIdV: TIntV const & value

    """
  return _snap.GetSubGraph(*args)

def GetEgonet(*args):
  """
    GetEgonet(PUNGraph Graph, int CtrNId, int ArndEdges) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value
       CtrNId: int const value
       ArndEdges: int & value

       Graph: PUNGraph const & value
       CtrNId: int const value
       ArndEdges: int & value

    GetEgonet(PNGraph Graph, int CtrNId, int InEdges, int OutEdges) -> PNGraph
    Parameters:
       Graph: PNGraph const & value
       CtrNId: int const value
       InEdges: int & value
       OutEdges: int & value

       Graph: PNGraph const & value
       CtrNId: int const value
       InEdges: int & value
       OutEdges: int & value

    """
  return _snap.GetEgonet(*args)

def GenRndBipart(*args):
  """
    GenRndBipart(int LeftNodes, int RightNodes, int Edges, TRnd Rnd = Rnd) -> PBPGraph
    Parameters:
       LeftNodes: int const & value
       RightNodes: int const & value
       Edges: int const & value
       Rnd: TRnd & value

       LeftNodes: int const & value
       RightNodes: int const & value
       Edges: int const & value
       Rnd: TRnd & value

    GenRndBipart(int LeftNodes, int RightNodes, int Edges) -> PBPGraph
    Parameters:
       LeftNodes: int const & value
       RightNodes: int const & value
       Edges: int const & value

       LeftNodes: int const & value
       RightNodes: int const & value
       Edges: int const & value

    """
  return _snap.GenRndBipart(*args)

def GenRndDegK(*args):
  """
    GenRndDegK(int Nodes, int NodeDeg, int NSwitch = 100, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeDeg: int const & value
       NSwitch: int const & value
       Rnd: TRnd & value

       Nodes: int const & value
       NodeDeg: int const & value
       NSwitch: int const & value
       Rnd: TRnd & value

    GenRndDegK(int Nodes, int NodeDeg, int NSwitch = 100) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeDeg: int const & value
       NSwitch: int const & value

       Nodes: int const & value
       NodeDeg: int const & value
       NSwitch: int const & value

    GenRndDegK(int Nodes, int NodeDeg) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeDeg: int const & value

       Nodes: int const & value
       NodeDeg: int const & value

    """
  return _snap.GenRndDegK(*args)

def GenRndPowerLaw(*args):
  """
    GenRndPowerLaw(int Nodes, double PowerExp, bool ConfModel = True, 
        TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       Nodes: int const & value
       PowerExp: double const & value
       ConfModel: bool const & value
       Rnd: TRnd & value

       Nodes: int const & value
       PowerExp: double const & value
       ConfModel: bool const & value
       Rnd: TRnd & value

    GenRndPowerLaw(int Nodes, double PowerExp, bool ConfModel = True) -> PUNGraph
    Parameters:
       Nodes: int const & value
       PowerExp: double const & value
       ConfModel: bool const & value

       Nodes: int const & value
       PowerExp: double const & value
       ConfModel: bool const & value

    GenRndPowerLaw(int Nodes, double PowerExp) -> PUNGraph
    Parameters:
       Nodes: int const & value
       PowerExp: double const & value

       Nodes: int const & value
       PowerExp: double const & value

    """
  return _snap.GenRndPowerLaw(*args)

def GenDegSeq(*args):
  """
    GenDegSeq(TIntV DegSeqV, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       DegSeqV: TIntV const & value
       Rnd: TRnd & value

       DegSeqV: TIntV const & value
       Rnd: TRnd & value

    GenDegSeq(TIntV DegSeqV) -> PUNGraph
    Parameters:
       DegSeqV: TIntV const & value

       DegSeqV: TIntV const & value

    """
  return _snap.GenDegSeq(*args)

def GenPrefAttach(*args):
  """
    GenPrefAttach(int Nodes, int NodeOutDeg, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value
       Rnd: TRnd & value

       Nodes: int const & value
       NodeOutDeg: int const & value
       Rnd: TRnd & value

    GenPrefAttach(int Nodes, int NodeOutDeg) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value

       Nodes: int const & value
       NodeOutDeg: int const & value

    """
  return _snap.GenPrefAttach(*args)

def GenGeoPrefAttach(*args):
  """
    GenGeoPrefAttach(int Nodes, int OutDeg, double Beta, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       Nodes: int const & value
       OutDeg: int const & value
       Beta: double const & value
       Rnd: TRnd & value

       Nodes: int const & value
       OutDeg: int const & value
       Beta: double const & value
       Rnd: TRnd & value

    GenGeoPrefAttach(int Nodes, int OutDeg, double Beta) -> PUNGraph
    Parameters:
       Nodes: int const & value
       OutDeg: int const & value
       Beta: double const & value

       Nodes: int const & value
       OutDeg: int const & value
       Beta: double const & value

    """
  return _snap.GenGeoPrefAttach(*args)

def GenSmallWorld(*args):
  """
    GenSmallWorld(int Nodes, int NodeOutDeg, double RewireProb, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value
       RewireProb: double const & value
       Rnd: TRnd & value

       Nodes: int const & value
       NodeOutDeg: int const & value
       RewireProb: double const & value
       Rnd: TRnd & value

    GenSmallWorld(int Nodes, int NodeOutDeg, double RewireProb) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value
       RewireProb: double const & value

       Nodes: int const & value
       NodeOutDeg: int const & value
       RewireProb: double const & value

    """
  return _snap.GenSmallWorld(*args)

def GenCopyModel(*args):
  """
    GenCopyModel(int Nodes, double Beta, TRnd Rnd = Rnd) -> PNGraph
    Parameters:
       Nodes: int const & value
       Beta: double const & value
       Rnd: TRnd & value

       Nodes: int const & value
       Beta: double const & value
       Rnd: TRnd & value

    GenCopyModel(int Nodes, double Beta) -> PNGraph
    Parameters:
       Nodes: int const & value
       Beta: double const & value

       Nodes: int const & value
       Beta: double const & value

    """
  return _snap.GenCopyModel(*args)

def GenRMat(*args):
  """
    GenRMat(int Nodes, int Edges, double A, double B, double C, 
        TRnd Rnd = Rnd) -> PNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       A: double const & value
       B: double const & value
       C: double const & value
       Rnd: TRnd & value

       Nodes: int const & value
       Edges: int const & value
       A: double const & value
       B: double const & value
       C: double const & value
       Rnd: TRnd & value

    GenRMat(int Nodes, int Edges, double A, double B, double C) -> PNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       A: double const & value
       B: double const & value
       C: double const & value

       Nodes: int const & value
       Edges: int const & value
       A: double const & value
       B: double const & value
       C: double const & value

    """
  return _snap.GenRMat(*args)

def GenRewire(*args):
  """
    GenRewire(PUNGraph Graph, int NSwitch = 100, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value
       NSwitch: int const & value
       Rnd: TRnd & value

       Graph: PUNGraph const & value
       NSwitch: int const & value
       Rnd: TRnd & value

    GenRewire(PUNGraph Graph, int NSwitch = 100) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value
       NSwitch: int const & value

       Graph: PUNGraph const & value
       NSwitch: int const & value

    GenRewire(PUNGraph Graph) -> PUNGraph
    Parameters:
       Graph: PUNGraph const & value

       Graph: PUNGraph const & value

    GenRewire(PNGraph Graph, int NSwitch = 100, TRnd Rnd = Rnd) -> PNGraph
    Parameters:
       Graph: PNGraph const & value
       NSwitch: int const & value
       Rnd: TRnd & value

       Graph: PNGraph const & value
       NSwitch: int const & value
       Rnd: TRnd & value

    GenRewire(PNGraph Graph, int NSwitch = 100) -> PNGraph
    Parameters:
       Graph: PNGraph const & value
       NSwitch: int const & value

       Graph: PNGraph const & value
       NSwitch: int const & value

    GenRewire(PNGraph Graph) -> PNGraph
    Parameters:
       Graph: PNGraph const & value

       Graph: PNGraph const & value

    GenRewire(PBPGraph Graph, int NSwitch = 100, TRnd Rnd = Rnd) -> PBPGraph
    Parameters:
       Graph: PBPGraph const & value
       NSwitch: int const & value
       Rnd: TRnd & value

       Graph: PBPGraph const & value
       NSwitch: int const & value
       Rnd: TRnd & value

    GenRewire(PBPGraph Graph, int NSwitch = 100) -> PBPGraph
    Parameters:
       Graph: PBPGraph const & value
       NSwitch: int const & value

       Graph: PBPGraph const & value
       NSwitch: int const & value

    GenRewire(PBPGraph Graph) -> PBPGraph
    Parameters:
       Graph: PBPGraph const & value

       Graph: PBPGraph const & value

    """
  return _snap.GenRewire(*args)

def GenConfModel(*args):
  """
    GenConfModel(TIntV DegSeqV, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       DegSeqV: TIntV const & value
       Rnd: TRnd & value

       DegSeqV: TIntV const & value
       Rnd: TRnd & value

    GenConfModel(TIntV DegSeqV) -> PUNGraph
    Parameters:
       DegSeqV: TIntV const & value

       DegSeqV: TIntV const & value

    GenConfModel(PUNGraph G) -> PUNGraph
    Parameters:
       G: PUNGraph const & value

       G: PUNGraph const & value

    """
  return _snap.GenConfModel(*args)

def TForestFire_GenGraph(*args):
  """
    TForestFire_GenGraph(int Nodes, double FwdProb, double BckProb) -> PNGraph
    Parameters:
       Nodes: int const & value
       FwdProb: double const & value
       BckProb: double const & value

       Nodes: int const & value
       FwdProb: double const & value
       BckProb: double const & value

    """
  return _snap.TForestFire_GenGraph(*args)

class TFfGGen(object):
    """Proxy of C++ TFfGGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    srUndef = _snap.TFfGGen_srUndef
    srOk = _snap.TFfGGen_srOk
    srFlood = _snap.TFfGGen_srFlood
    srTimeLimit = _snap.TFfGGen_srTimeLimit
    TimeLimitSec = _swig_property(_snap.TFfGGen_TimeLimitSec_get, _snap.TFfGGen_TimeLimitSec_set)
    def __init__(self, *args): 
        """
        __init__(self, bool BurnExpFireP, int StartNNodes, double ForwBurnProb, 
            double BackBurnProb, double DecayProb, 
            double Take2AmbasPrb, double OrphanPrb) -> TFfGGen
        Parameters:
           BurnExpFireP: bool const & value
           StartNNodes: int const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value
           DecayProb: double const & value
           Take2AmbasPrb: double const & value
           OrphanPrb: double const & value

           BurnExpFireP: bool const & value
           StartNNodes: int const & value
           ForwBurnProb: double const & value
           BackBurnProb: double const & value
           DecayProb: double const & value
           Take2AmbasPrb: double const & value
           OrphanPrb: double const & value

        """
        _snap.TFfGGen_swiginit(self,_snap.new_TFfGGen(*args))
    def GetGraph(self):
        """
        GetGraph(self) -> PNGraph
        Parameters:
           self: TFfGGen const * value




        """
        return _snap.TFfGGen_GetGraph(self)

    def SetGraph(self, *args):
        """
        SetGraph(self, PNGraph NGraph)
        Parameters:
           self: TFfGGen * value
           NGraph: PNGraph const & value

           NGraph: PNGraph const & value

        """
        return _snap.TFfGGen_SetGraph(self, *args)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TFfGGen * value




        """
        return _snap.TFfGGen_Clr(self)

    def GetParamStr(self):
        """
        GetParamStr(self) -> TStr
        Parameters:
           self: TFfGGen const * value




        """
        return _snap.TFfGGen_GetParamStr(self)

    def AddNodes(self, *args):
        """
        AddNodes(self, int GraphNodes, bool FloodStop = True) -> TStopReason
        Parameters:
           GraphNodes: int const & value
           FloodStop: bool const & value

           GraphNodes: int const & value
           FloodStop: bool const & value

        AddNodes(self, int GraphNodes) -> TStopReason
        Parameters:
           self: TFfGGen * value
           GraphNodes: int const & value

           GraphNodes: int const & value

        """
        return _snap.TFfGGen_AddNodes(self, *args)

    def GenGraph(self, *args):
        """
        GenGraph(self, int GraphNodes, bool FloodStop = True) -> TStopReason
        Parameters:
           GraphNodes: int const & value
           FloodStop: bool const & value

           GraphNodes: int const & value
           FloodStop: bool const & value

        GenGraph(self, int GraphNodes) -> TStopReason
        Parameters:
           GraphNodes: int const & value

           GraphNodes: int const & value

        GenGraph(self, int GraphNodes, PGStatVec EvolStat, bool FloodStop = True) -> TStopReason
        Parameters:
           GraphNodes: int const & value
           EvolStat: PGStatVec & value
           FloodStop: bool const & value

           GraphNodes: int const & value
           EvolStat: PGStatVec & value
           FloodStop: bool const & value

        GenGraph(self, int GraphNodes, PGStatVec EvolStat) -> TStopReason
        Parameters:
           self: TFfGGen * value
           GraphNodes: int const & value
           EvolStat: PGStatVec & value

           GraphNodes: int const & value
           EvolStat: PGStatVec & value

        """
        return _snap.TFfGGen_GenGraph(self, *args)

    def PlotFireSize(self, *args):
        """
        PlotFireSize(self, TStr FNmPref, TStr DescStr)
        Parameters:
           self: TFfGGen * value
           FNmPref: TStr const & value
           DescStr: TStr const & value

           FNmPref: TStr const & value
           DescStr: TStr const & value

        """
        return _snap.TFfGGen_PlotFireSize(self, *args)

    def GenFFGraphs(*args):
        """
        GenFFGraphs(double FProb, double BProb, TStr FNm)
        Parameters:
           FProb: double const & value
           BProb: double const & value
           FNm: TStr const & value

           FProb: double const & value
           BProb: double const & value
           FNm: TStr const & value

           FProb: double const & value
           BProb: double const & value
           FNm: TStr const & value

        """
        return _snap.TFfGGen_GenFFGraphs(*args)

    GenFFGraphs = staticmethod(GenFFGraphs)
    __swig_destroy__ = _snap.delete_TFfGGen
TFfGGen.GetGraph = new_instancemethod(_snap.TFfGGen_GetGraph,None,TFfGGen)
TFfGGen.SetGraph = new_instancemethod(_snap.TFfGGen_SetGraph,None,TFfGGen)
TFfGGen.Clr = new_instancemethod(_snap.TFfGGen_Clr,None,TFfGGen)
TFfGGen.GetParamStr = new_instancemethod(_snap.TFfGGen_GetParamStr,None,TFfGGen)
TFfGGen.AddNodes = new_instancemethod(_snap.TFfGGen_AddNodes,None,TFfGGen)
TFfGGen.GenGraph = new_instancemethod(_snap.TFfGGen_GenGraph,None,TFfGGen)
TFfGGen.PlotFireSize = new_instancemethod(_snap.TFfGGen_PlotFireSize,None,TFfGGen)
TFfGGen_swigregister = _snap.TFfGGen_swigregister
TFfGGen_swigregister(TFfGGen)

def TFfGGen_GenFFGraphs(*args):
  """
    TFfGGen_GenFFGraphs(double FProb, double BProb, TStr FNm)
    Parameters:
       FProb: double const & value
       BProb: double const & value
       FNm: TStr const & value

       FProb: double const & value
       BProb: double const & value
       FNm: TStr const & value

    """
  return _snap.TFfGGen_GenFFGraphs(*args)

class TUndirFFire(object):
    """Proxy of C++ TUndirFFire class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, _BurnProb = 0.3): 
        """
        __init__(self, double _BurnProb = 0.3) -> TUndirFFire
        Parameters:
           _BurnProb: double const & value

           _BurnProb: double const & value

           _BurnProb: double const & value

           _BurnProb: double const & value

        __init__(self) -> TUndirFFire
        """
        _snap.TUndirFFire_swiginit(self,_snap.new_TUndirFFire(_BurnProb))
    def SetGraph(self, *args):
        """
        SetGraph(self, PUNGraph GraphPt)
        Parameters:
           self: TUndirFFire * value
           GraphPt: PUNGraph const & value

           GraphPt: PUNGraph const & value

        """
        return _snap.TUndirFFire_SetGraph(self, *args)

    def GetGraph(self):
        """
        GetGraph(self) -> PUNGraph
        Parameters:
           self: TUndirFFire const * value




        """
        return _snap.TUndirFFire_GetGraph(self)

    def GetNBurned(self):
        """
        GetNBurned(self) -> int
        Parameters:
           self: TUndirFFire const * value




        """
        return _snap.TUndirFFire_GetNBurned(self)

    def GetBurnedNId(self, *args):
        """
        GetBurnedNId(self, int n) -> int
        Parameters:
           self: TUndirFFire const * value
           n: int const & value

           n: int const & value

        """
        return _snap.TUndirFFire_GetBurnedNId(self, *args)

    def BurnGeoFire(self, *args):
        """
        BurnGeoFire(self, int StartNId) -> int
        Parameters:
           self: TUndirFFire * value
           StartNId: int const & value

           StartNId: int const & value

        """
        return _snap.TUndirFFire_BurnGeoFire(self, *args)

    def AddNodes(self, *args):
        """
        AddNodes(self, int GraphNodes, bool FloodStop = True) -> TStopReason
        Parameters:
           GraphNodes: int const & value
           FloodStop: bool const & value

           GraphNodes: int const & value
           FloodStop: bool const & value

        AddNodes(self, int GraphNodes) -> TStopReason
        Parameters:
           self: TUndirFFire * value
           GraphNodes: int const & value

           GraphNodes: int const & value

        """
        return _snap.TUndirFFire_AddNodes(self, *args)

    __swig_destroy__ = _snap.delete_TUndirFFire
TUndirFFire.SetGraph = new_instancemethod(_snap.TUndirFFire_SetGraph,None,TUndirFFire)
TUndirFFire.GetGraph = new_instancemethod(_snap.TUndirFFire_GetGraph,None,TUndirFFire)
TUndirFFire.GetNBurned = new_instancemethod(_snap.TUndirFFire_GetNBurned,None,TUndirFFire)
TUndirFFire.GetBurnedNId = new_instancemethod(_snap.TUndirFFire_GetBurnedNId,None,TUndirFFire)
TUndirFFire.BurnGeoFire = new_instancemethod(_snap.TUndirFFire_BurnGeoFire,None,TUndirFFire)
TUndirFFire.AddNodes = new_instancemethod(_snap.TUndirFFire_AddNodes,None,TUndirFFire)
TUndirFFire_swigregister = _snap.TUndirFFire_swigregister
TUndirFFire_swigregister(TUndirFFire)


def LoadEdgeListNet(*args):
  """
    LoadEdgeListNet(TStr InFNm, char Separator) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       Separator: char const & value

       InFNm: TStr const & value
       Separator: char const & value

    """
  return _snap.LoadEdgeListNet(*args)

def LoadDyNet(*args):
  """
    LoadDyNet(TStr FNm) -> PNGraph
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    """
  return _snap.LoadDyNet(*args)

def LoadDyNetGraphV(*args):
  """
    LoadDyNetGraphV(TStr FNm) -> TVec<(PNGraph)>
    Parameters:
       FNm: TStr const & value

       FNm: TStr const & value

    """
  return _snap.LoadDyNetGraphV(*args)

def SaveEdgeListNet(*args):
  """
    SaveEdgeListNet(PNEANet Graph, TStr OutFNm, TStr Desc)
    Parameters:
       Graph: PNEANet const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

       Graph: PNEANet const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

    """
  return _snap.SaveEdgeListNet(*args)
class TIntPr(object):
    """Proxy of C++ TPair<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TIntPr_Val1_get, _snap.TIntPr_Val1_set)
    Val2 = _swig_property(_snap.TIntPr_Val2_get, _snap.TIntPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPr
        __init__(self, TIntPr Pair) -> TIntPr
        Parameters:
           Pair: TPair< TInt,TInt > const & value

           Pair: TPair< TInt,TInt > const & value

        __init__(self, TInt _Val1, TInt _Val2) -> TIntPr
        Parameters:
           _Val1: TInt const & value
           _Val2: TInt const & value

           _Val1: TInt const & value
           _Val2: TInt const & value

        __init__(self, TSIn SIn) -> TIntPr
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntPr_swiginit(self,_snap.new_TIntPr(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPair< TInt,TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntPr_Save(self, *args)

    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TPair< TInt,TInt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntPr_Load(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntPr Pair) -> bool
        Parameters:
           self: TPair< TInt,TInt > const * value
           Pair: TPair< TInt,TInt > const & value

           Pair: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPr Pair) -> bool
        Parameters:
           self: TPair< TInt,TInt > const * value
           Pair: TPair< TInt,TInt > const & value

           Pair: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TPair< TInt,TInt > const * value




        """
        return _snap.TIntPr_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TPair< TInt,TInt > const * value




        """
        return _snap.TIntPr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TPair< TInt,TInt > const * value




        """
        return _snap.TIntPr_GetSecHashCd(self)

    def GetVal(self, *args):
        """
        GetVal(self, TInt _Val1, TInt _Val2)
        Parameters:
           self: TPair< TInt,TInt > const * value
           _Val1: TInt & value
           _Val2: TInt & value

           _Val1: TInt & value
           _Val2: TInt & value

        """
        return _snap.TIntPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(self) -> TInt
        Parameters:
           self: TPair< TInt,TInt > const * value




        """
        return _snap.TIntPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(self) -> TInt
        Parameters:
           self: TPair< TInt,TInt > const * value




        """
        return _snap.TIntPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TIntPr
TIntPr.Save = new_instancemethod(_snap.TIntPr_Save,None,TIntPr)
TIntPr.Load = new_instancemethod(_snap.TIntPr_Load,None,TIntPr)
TIntPr.__eq__ = new_instancemethod(_snap.TIntPr___eq__,None,TIntPr)
TIntPr.__lt__ = new_instancemethod(_snap.TIntPr___lt__,None,TIntPr)
TIntPr.GetMemUsed = new_instancemethod(_snap.TIntPr_GetMemUsed,None,TIntPr)
TIntPr.GetPrimHashCd = new_instancemethod(_snap.TIntPr_GetPrimHashCd,None,TIntPr)
TIntPr.GetSecHashCd = new_instancemethod(_snap.TIntPr_GetSecHashCd,None,TIntPr)
TIntPr.GetVal = new_instancemethod(_snap.TIntPr_GetVal,None,TIntPr)
TIntPr.GetVal1 = new_instancemethod(_snap.TIntPr_GetVal1,None,TIntPr)
TIntPr.GetVal2 = new_instancemethod(_snap.TIntPr_GetVal2,None,TIntPr)
TIntPr_swigregister = _snap.TIntPr_swigregister
TIntPr_swigregister(TIntPr)
EDGES_START = cvar.EDGES_START
NODES_START = cvar.NODES_START
END_SENTINEL = cvar.END_SENTINEL
SRC_ID_NAME = cvar.SRC_ID_NAME
DST_ID_NAME = cvar.DST_ID_NAME
NID_NAME = cvar.NID_NAME
INT_TYPE_PREFIX = cvar.INT_TYPE_PREFIX
FLT_TYPE_PREFIX = cvar.FLT_TYPE_PREFIX
STR_TYPE_PREFIX = cvar.STR_TYPE_PREFIX
NULL_VAL = cvar.NULL_VAL

class TFltPr(object):
    """Proxy of C++ TPair<(TFlt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TFltPr_Val1_get, _snap.TFltPr_Val1_set)
    Val2 = _swig_property(_snap.TFltPr_Val2_get, _snap.TFltPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TFltPr
        __init__(self, TFltPr Pair) -> TFltPr
        Parameters:
           Pair: TPair< TFlt,TFlt > const & value

           Pair: TPair< TFlt,TFlt > const & value

        __init__(self, TFlt _Val1, TFlt _Val2) -> TFltPr
        Parameters:
           _Val1: TFlt const & value
           _Val2: TFlt const & value

           _Val1: TFlt const & value
           _Val2: TFlt const & value

        __init__(self, TSIn SIn) -> TFltPr
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TFltPr_swiginit(self,_snap.new_TFltPr(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPair< TFlt,TFlt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TFltPr_Save(self, *args)

    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TPair< TFlt,TFlt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TFltPr_Load(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TFltPr Pair) -> bool
        Parameters:
           self: TPair< TFlt,TFlt > const * value
           Pair: TPair< TFlt,TFlt > const & value

           Pair: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TFltPr Pair) -> bool
        Parameters:
           self: TPair< TFlt,TFlt > const * value
           Pair: TPair< TFlt,TFlt > const & value

           Pair: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TPair< TFlt,TFlt > const * value




        """
        return _snap.TFltPr_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TPair< TFlt,TFlt > const * value




        """
        return _snap.TFltPr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TPair< TFlt,TFlt > const * value




        """
        return _snap.TFltPr_GetSecHashCd(self)

    def GetVal(self, *args):
        """
        GetVal(self, TFlt _Val1, TFlt _Val2)
        Parameters:
           self: TPair< TFlt,TFlt > const * value
           _Val1: TFlt & value
           _Val2: TFlt & value

           _Val1: TFlt & value
           _Val2: TFlt & value

        """
        return _snap.TFltPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(self) -> TFlt
        Parameters:
           self: TPair< TFlt,TFlt > const * value




        """
        return _snap.TFltPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(self) -> TFlt
        Parameters:
           self: TPair< TFlt,TFlt > const * value




        """
        return _snap.TFltPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TFltPr
TFltPr.Save = new_instancemethod(_snap.TFltPr_Save,None,TFltPr)
TFltPr.Load = new_instancemethod(_snap.TFltPr_Load,None,TFltPr)
TFltPr.__eq__ = new_instancemethod(_snap.TFltPr___eq__,None,TFltPr)
TFltPr.__lt__ = new_instancemethod(_snap.TFltPr___lt__,None,TFltPr)
TFltPr.GetMemUsed = new_instancemethod(_snap.TFltPr_GetMemUsed,None,TFltPr)
TFltPr.GetPrimHashCd = new_instancemethod(_snap.TFltPr_GetPrimHashCd,None,TFltPr)
TFltPr.GetSecHashCd = new_instancemethod(_snap.TFltPr_GetSecHashCd,None,TFltPr)
TFltPr.GetVal = new_instancemethod(_snap.TFltPr_GetVal,None,TFltPr)
TFltPr.GetVal1 = new_instancemethod(_snap.TFltPr_GetVal1,None,TFltPr)
TFltPr.GetVal2 = new_instancemethod(_snap.TFltPr_GetVal2,None,TFltPr)
TFltPr_swigregister = _snap.TFltPr_swigregister
TFltPr_swigregister(TFltPr)

class TStrIntPr(object):
    """Proxy of C++ TPair<(TStr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TStrIntPr_Val1_get, _snap.TStrIntPr_Val1_set)
    Val2 = _swig_property(_snap.TStrIntPr_Val2_get, _snap.TStrIntPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntPr
        __init__(self, TStrIntPr Pair) -> TStrIntPr
        Parameters:
           Pair: TPair< TStr,TInt > const & value

           Pair: TPair< TStr,TInt > const & value

        __init__(self, TStr _Val1, TInt _Val2) -> TStrIntPr
        Parameters:
           _Val1: TStr const & value
           _Val2: TInt const & value

           _Val1: TStr const & value
           _Val2: TInt const & value

        __init__(self, TSIn SIn) -> TStrIntPr
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TStrIntPr_swiginit(self,_snap.new_TStrIntPr(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPair< TStr,TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TStrIntPr_Save(self, *args)

    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TPair< TStr,TInt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TStrIntPr_Load(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TStrIntPr Pair) -> bool
        Parameters:
           self: TPair< TStr,TInt > const * value
           Pair: TPair< TStr,TInt > const & value

           Pair: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrIntPr Pair) -> bool
        Parameters:
           self: TPair< TStr,TInt > const * value
           Pair: TPair< TStr,TInt > const & value

           Pair: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TPair< TStr,TInt > const * value




        """
        return _snap.TStrIntPr_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TPair< TStr,TInt > const * value




        """
        return _snap.TStrIntPr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TPair< TStr,TInt > const * value




        """
        return _snap.TStrIntPr_GetSecHashCd(self)

    def GetVal(self, *args):
        """
        GetVal(self, TStr _Val1, TInt _Val2)
        Parameters:
           self: TPair< TStr,TInt > const * value
           _Val1: TStr & value
           _Val2: TInt & value

           _Val1: TStr & value
           _Val2: TInt & value

        """
        return _snap.TStrIntPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(self) -> TStr
        Parameters:
           self: TPair< TStr,TInt > const * value




        """
        return _snap.TStrIntPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(self) -> TInt
        Parameters:
           self: TPair< TStr,TInt > const * value




        """
        return _snap.TStrIntPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TStrIntPr
TStrIntPr.Save = new_instancemethod(_snap.TStrIntPr_Save,None,TStrIntPr)
TStrIntPr.Load = new_instancemethod(_snap.TStrIntPr_Load,None,TStrIntPr)
TStrIntPr.__eq__ = new_instancemethod(_snap.TStrIntPr___eq__,None,TStrIntPr)
TStrIntPr.__lt__ = new_instancemethod(_snap.TStrIntPr___lt__,None,TStrIntPr)
TStrIntPr.GetMemUsed = new_instancemethod(_snap.TStrIntPr_GetMemUsed,None,TStrIntPr)
TStrIntPr.GetPrimHashCd = new_instancemethod(_snap.TStrIntPr_GetPrimHashCd,None,TStrIntPr)
TStrIntPr.GetSecHashCd = new_instancemethod(_snap.TStrIntPr_GetSecHashCd,None,TStrIntPr)
TStrIntPr.GetVal = new_instancemethod(_snap.TStrIntPr_GetVal,None,TStrIntPr)
TStrIntPr.GetVal1 = new_instancemethod(_snap.TStrIntPr_GetVal1,None,TStrIntPr)
TStrIntPr.GetVal2 = new_instancemethod(_snap.TStrIntPr_GetVal2,None,TStrIntPr)
TStrIntPr_swigregister = _snap.TStrIntPr_swigregister
TStrIntPr_swigregister(TStrIntPr)

class TIntTr(object):
    """Proxy of C++ TTriple<(TInt,TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TIntTr_Val1_get, _snap.TIntTr_Val1_set)
    Val2 = _swig_property(_snap.TIntTr_Val2_get, _snap.TIntTr_Val2_set)
    Val3 = _swig_property(_snap.TIntTr_Val3_get, _snap.TIntTr_Val3_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TIntTr
        __init__(self, TIntTr Triple) -> TIntTr
        Parameters:
           Triple: TTriple< TInt,TInt,TInt > const & value

           Triple: TTriple< TInt,TInt,TInt > const & value

        __init__(self, TInt _Val1, TInt _Val2, TInt _Val3) -> TIntTr
        Parameters:
           _Val1: TInt const & value
           _Val2: TInt const & value
           _Val3: TInt const & value

           _Val1: TInt const & value
           _Val2: TInt const & value
           _Val3: TInt const & value

        __init__(self, TSIn SIn) -> TIntTr
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntTr_swiginit(self,_snap.new_TIntTr(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntTr_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntTr Triple) -> bool
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value
           Triple: TTriple< TInt,TInt,TInt > const & value

           Triple: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntTr Triple) -> bool
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value
           Triple: TTriple< TInt,TInt,TInt > const & value

           Triple: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTr___lt__(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value




        """
        return _snap.TIntTr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value




        """
        return _snap.TIntTr_GetSecHashCd(self)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value




        """
        return _snap.TIntTr_GetMemUsed(self)

    def GetVal(self, *args):
        """
        GetVal(self, TInt _Val1, TInt _Val2, TInt _Val3)
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value
           _Val1: TInt & value
           _Val2: TInt & value
           _Val3: TInt & value

           _Val1: TInt & value
           _Val2: TInt & value
           _Val3: TInt & value

        """
        return _snap.TIntTr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(self) -> TInt
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value




        """
        return _snap.TIntTr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(self) -> TInt
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value




        """
        return _snap.TIntTr_GetVal2(self)

    def GetVal3(self):
        """
        GetVal3(self) -> TInt
        Parameters:
           self: TTriple< TInt,TInt,TInt > const * value




        """
        return _snap.TIntTr_GetVal3(self)

    __swig_destroy__ = _snap.delete_TIntTr
TIntTr.Save = new_instancemethod(_snap.TIntTr_Save,None,TIntTr)
TIntTr.__eq__ = new_instancemethod(_snap.TIntTr___eq__,None,TIntTr)
TIntTr.__lt__ = new_instancemethod(_snap.TIntTr___lt__,None,TIntTr)
TIntTr.GetPrimHashCd = new_instancemethod(_snap.TIntTr_GetPrimHashCd,None,TIntTr)
TIntTr.GetSecHashCd = new_instancemethod(_snap.TIntTr_GetSecHashCd,None,TIntTr)
TIntTr.GetMemUsed = new_instancemethod(_snap.TIntTr_GetMemUsed,None,TIntTr)
TIntTr.GetVal = new_instancemethod(_snap.TIntTr_GetVal,None,TIntTr)
TIntTr.GetVal1 = new_instancemethod(_snap.TIntTr_GetVal1,None,TIntTr)
TIntTr.GetVal2 = new_instancemethod(_snap.TIntTr_GetVal2,None,TIntTr)
TIntTr.GetVal3 = new_instancemethod(_snap.TIntTr_GetVal3,None,TIntTr)
TIntTr_swigregister = _snap.TIntTr_swigregister
TIntTr_swigregister(TIntTr)

class TIntFltKd(object):
    """Proxy of C++ TKeyDat<(TInt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Key = _swig_property(_snap.TIntFltKd_Key_get, _snap.TIntFltKd_Key_set)
    Dat = _swig_property(_snap.TIntFltKd_Dat_get, _snap.TIntFltKd_Dat_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TIntFltKd
        __init__(self, TIntFltKd KeyDat) -> TIntFltKd
        Parameters:
           KeyDat: TKeyDat< TInt,TFlt > const & value

           KeyDat: TKeyDat< TInt,TFlt > const & value

        __init__(self, TInt _Key) -> TIntFltKd
        Parameters:
           _Key: TInt const & value

           _Key: TInt const & value

        __init__(self, TInt _Key, TFlt _Dat) -> TIntFltKd
        Parameters:
           _Key: TInt const & value
           _Dat: TFlt const & value

           _Key: TInt const & value
           _Dat: TFlt const & value

        __init__(self, TSIn SIn) -> TIntFltKd
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntFltKd_swiginit(self,_snap.new_TIntFltKd(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TKeyDat< TInt,TFlt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntFltKd_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntFltKd KeyDat) -> bool
        Parameters:
           self: TKeyDat< TInt,TFlt > const * value
           KeyDat: TKeyDat< TInt,TFlt > const & value

           KeyDat: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKd___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntFltKd KeyDat) -> bool
        Parameters:
           self: TKeyDat< TInt,TFlt > const * value
           KeyDat: TKeyDat< TInt,TFlt > const & value

           KeyDat: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKd___lt__(self, *args)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TKeyDat< TInt,TFlt > const * value




        """
        return _snap.TIntFltKd_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TKeyDat< TInt,TFlt > const * value




        """
        return _snap.TIntFltKd_GetSecHashCd(self)

    __swig_destroy__ = _snap.delete_TIntFltKd
TIntFltKd.Save = new_instancemethod(_snap.TIntFltKd_Save,None,TIntFltKd)
TIntFltKd.__eq__ = new_instancemethod(_snap.TIntFltKd___eq__,None,TIntFltKd)
TIntFltKd.__lt__ = new_instancemethod(_snap.TIntFltKd___lt__,None,TIntFltKd)
TIntFltKd.GetPrimHashCd = new_instancemethod(_snap.TIntFltKd_GetPrimHashCd,None,TIntFltKd)
TIntFltKd.GetSecHashCd = new_instancemethod(_snap.TIntFltKd_GetSecHashCd,None,TIntFltKd)
TIntFltKd_swigregister = _snap.TIntFltKd_swigregister
TIntFltKd_swigregister(TIntFltKd)

class TIntV(object):
    """Proxy of C++ TVec<(TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntV
    def __init__(self, *args): 
        """
        __init__(self) -> TIntV
        __init__(self, TIntV Vec) -> TIntV
        Parameters:
           Vec: TVec< TInt,int > const & value

           Vec: TVec< TInt,int > const & value

        __init__(self, int _Vals) -> TIntV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TIntV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TInt _ValT, int _Vals) -> TIntV
        Parameters:
           _ValT: TInt * value
           _Vals: int const & value

           _ValT: TInt * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TIntV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntV_swiginit(self,_snap.new_TIntV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TInt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TInt Val) -> TIntV
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntV Vec) -> bool
        Parameters:
           self: TVec< TInt > const * value
           Vec: TVec< TInt,int > const & value

           Vec: TVec< TInt,int > const & value

        """
        return _snap.TIntV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntV Vec) -> bool
        Parameters:
           self: TVec< TInt > const * value
           Vec: TVec< TInt,int > const & value

           Vec: TVec< TInt,int > const & value

        """
        return _snap.TIntV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TInt > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TInt _ValT, int _Vals)
        Parameters:
           self: TVec< TInt > * value
           _ValT: TInt * value
           _Vals: int const & value

           _ValT: TInt * value
           _Vals: int const & value

        """
        return _snap.TIntV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TInt > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TInt > * value


        """
        return _snap.TIntV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TInt > * value


        """
        return _snap.TIntV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TInt > * value


        """
        return _snap.TIntV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TInt > * value




        """
        return _snap.TIntV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TIntV Vec)
        Parameters:
           self: TVec< TInt > * value
           Vec: TVec< TInt,int > & value

           Vec: TVec< TInt,int > & value

        """
        return _snap.TIntV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TIntV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TInt > * value
           Vec: TVec< TInt,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TInt,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TIntV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TInt
        Last(self) -> TInt
        Parameters:
           self: TVec< TInt > * value


        """
        return _snap.TIntV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TInt
        LastLast(self) -> TInt
        Parameters:
           self: TVec< TInt > * value


        """
        return _snap.TIntV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TInt
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TInt
        GetRndVal(self, TRnd Rnd = Rnd) -> TInt
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TInt
        Parameters:
           self: TVec< TInt > * value


        """
        return _snap.TIntV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TIter
        Parameters:
           self: TVec< TInt > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TInt Val) -> int
        Parameters:
           Val: TInt const & value

           Val: TInt const & value

        Add(self, TInt Val) -> int
        Parameters:
           Val: TInt & value

           Val: TInt & value

        Add(self, TInt Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value
           ResizeLen: int const & value

           Val: TInt const & value
           ResizeLen: int const & value

        """
        return _snap.TIntV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TIntV ValV) -> int
        Parameters:
           self: TVec< TInt > * value
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        """
        return _snap.TIntV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TInt Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TInt const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TInt const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TInt Val, bool Asc = True) -> int
        Parameters:
           Val: TInt const & value
           Asc: bool const & value

           Val: TInt const & value
           Asc: bool const & value

        AddSorted(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TInt Val, bool Asc) -> int
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value
           Asc: bool const & value

           Val: TInt const & value
           Asc: bool const & value

        """
        return _snap.TIntV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TIntV ValV) -> int
        Parameters:
           self: TVec< TInt > * value
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        """
        return _snap.TIntV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TInt
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TInt
        Parameters:
           self: TVec< TInt > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TInt Val)
        Parameters:
           self: TVec< TInt > * value
           ValN: int const & value
           Val: TInt const & value

           ValN: int const & value
           Val: TInt const & value

        """
        return _snap.TIntV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TIntV ValV)
        Parameters:
           self: TVec< TInt > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TInt,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TInt,int > & value

        """
        return _snap.TIntV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TInt Val)
        Parameters:
           self: TVec< TInt > * value
           ValN: int const & value
           Val: TInt const & value

           ValN: int const & value
           Val: TInt const & value

        """
        return _snap.TIntV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TInt > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TIntV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TInt > * value




        """
        return _snap.TIntV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TInt Val) -> bool
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TInt Val)
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TInt Val)
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntV Vec)
        Parameters:
           Vec: TVec< TInt,int > & value

           Vec: TVec< TInt,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TInt > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TIntV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIter LVal, TIter RVal)
        Parameters:
           LVal: TVec< TInt >::TIter value
           RVal: TVec< TInt >::TIter value

           LVal: TVec< TInt >::TIter value
           RVal: TVec< TInt >::TIter value

           LVal: TVec< TInt >::TIter value
           RVal: TVec< TInt >::TIter value

        """
        return _snap.TIntV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TInt > * value




        """
        return _snap.TIntV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TInt > * value




        """
        return _snap.TIntV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TInt > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TIntV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TInt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TInt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TInt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TInt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TInt > * value


        """
        return _snap.TIntV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TInt > const * value


        """
        return _snap.TIntV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TInt > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TIntV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TInt > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TIntV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TInt > * value




        """
        return _snap.TIntV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TIntV ValV)
        Parameters:
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        Intrs(self, TIntV ValV, TIntV DstValV)
        Parameters:
           self: TVec< TInt > const * value
           ValV: TVec< TInt,int > const & value
           DstValV: TVec< TInt,int > & value

           ValV: TVec< TInt,int > const & value
           DstValV: TVec< TInt,int > & value

        """
        return _snap.TIntV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TIntV ValV)
        Parameters:
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        Union(self, TIntV ValV, TIntV DstValV)
        Parameters:
           self: TVec< TInt > const * value
           ValV: TVec< TInt,int > const & value
           DstValV: TVec< TInt,int > & value

           ValV: TVec< TInt,int > const & value
           DstValV: TVec< TInt,int > & value

        """
        return _snap.TIntV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TIntV ValV)
        Parameters:
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        Diff(self, TIntV ValV, TIntV DstValV)
        Parameters:
           self: TVec< TInt > const * value
           ValV: TVec< TInt,int > const & value
           DstValV: TVec< TInt,int > & value

           ValV: TVec< TInt,int > const & value
           DstValV: TVec< TInt,int > & value

        """
        return _snap.TIntV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TIntV ValV) -> int
        Parameters:
           self: TVec< TInt > const * value
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        """
        return _snap.TIntV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TIntV ValV) -> int
        Parameters:
           self: TVec< TInt > const * value
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        """
        return _snap.TIntV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TInt Val) -> int
        Parameters:
           Val: TInt const & value

           Val: TInt const & value

        SearchBin(self, TInt Val, int InsValN) -> int
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value
           InsValN: int & value

           Val: TInt const & value
           InsValN: int & value

        """
        return _snap.TIntV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TInt Val, int InsValN) -> int
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value
           InsValN: int & value

           Val: TInt const & value
           InsValN: int & value

        """
        return _snap.TIntV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TInt Val, int BValN = 0) -> int
        Parameters:
           Val: TInt const & value
           BValN: int const & value

           Val: TInt const & value
           BValN: int const & value

        SearchForw(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TInt Val) -> int
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TIntV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TInt,int > const & value
           BValN: int const & value

           ValV: TVec< TInt,int > const & value
           BValN: int const & value

        SearchVForw(self, TIntV ValV) -> int
        Parameters:
           self: TVec< TInt > const * value
           ValV: TVec< TInt,int > const & value

           ValV: TVec< TInt,int > const & value

        """
        return _snap.TIntV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TInt Val) -> bool
        Parameters:
           Val: TInt const & value

           Val: TInt const & value

        IsIn(self, TInt Val, int ValN) -> bool
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value
           ValN: int & value

           Val: TInt const & value
           ValN: int & value

        """
        return _snap.TIntV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TInt Val) -> bool
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TInt Val) -> TInt
        Parameters:
           self: TVec< TInt > const * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TInt Val) -> TInt
        Parameters:
           self: TVec< TInt > * value
           Val: TInt const & value

           Val: TInt const & value

        """
        return _snap.TIntV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TInt > const * value




        """
        return _snap.TIntV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TInt Val1) -> TIntV
        Parameters:
           Val1: TInt const & value

           Val1: TInt const & value

           Val1: TInt const & value

        GetV(TInt Val1, TInt Val2) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value

        GetV(TInt Val1, TInt Val2, TInt Val3) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
            TInt Val6) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
            TInt Val6, TInt Val7) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
            TInt Val6, TInt Val7, TInt Val8) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value
           Val8: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value
           Val8: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value
           Val8: TInt const & value

        GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
            TInt Val6, TInt Val7, TInt Val8, TInt Val9) -> TIntV
        Parameters:
           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value
           Val8: TInt const & value
           Val9: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value
           Val8: TInt const & value
           Val9: TInt const & value

           Val1: TInt const & value
           Val2: TInt const & value
           Val3: TInt const & value
           Val4: TInt const & value
           Val5: TInt const & value
           Val6: TInt const & value
           Val7: TInt const & value
           Val8: TInt const & value
           Val9: TInt const & value

        """
        return _snap.TIntV_GetV(*args)

    GetV = staticmethod(GetV)
TIntV.Load = new_instancemethod(_snap.TIntV_Load,None,TIntV)
TIntV.Save = new_instancemethod(_snap.TIntV_Save,None,TIntV)
TIntV.__add__ = new_instancemethod(_snap.TIntV___add__,None,TIntV)
TIntV.__eq__ = new_instancemethod(_snap.TIntV___eq__,None,TIntV)
TIntV.__lt__ = new_instancemethod(_snap.TIntV___lt__,None,TIntV)
TIntV.GetMemUsed = new_instancemethod(_snap.TIntV_GetMemUsed,None,TIntV)
TIntV.GetMemSize = new_instancemethod(_snap.TIntV_GetMemSize,None,TIntV)
TIntV.GetPrimHashCd = new_instancemethod(_snap.TIntV_GetPrimHashCd,None,TIntV)
TIntV.GetSecHashCd = new_instancemethod(_snap.TIntV_GetSecHashCd,None,TIntV)
TIntV.Gen = new_instancemethod(_snap.TIntV_Gen,None,TIntV)
TIntV.GenExt = new_instancemethod(_snap.TIntV_GenExt,None,TIntV)
TIntV.IsExt = new_instancemethod(_snap.TIntV_IsExt,None,TIntV)
TIntV.Reserve = new_instancemethod(_snap.TIntV_Reserve,None,TIntV)
TIntV.Clr = new_instancemethod(_snap.TIntV_Clr,None,TIntV)
TIntV.Trunc = new_instancemethod(_snap.TIntV_Trunc,None,TIntV)
TIntV.Reduce = new_instancemethod(_snap.TIntV_Reduce,None,TIntV)
TIntV.Pack = new_instancemethod(_snap.TIntV_Pack,None,TIntV)
TIntV.MoveFrom = new_instancemethod(_snap.TIntV_MoveFrom,None,TIntV)
TIntV.CopyUniqueFrom = new_instancemethod(_snap.TIntV_CopyUniqueFrom,None,TIntV)
TIntV.Empty = new_instancemethod(_snap.TIntV_Empty,None,TIntV)
TIntV.Len = new_instancemethod(_snap.TIntV_Len,None,TIntV)
TIntV.Reserved = new_instancemethod(_snap.TIntV_Reserved,None,TIntV)
TIntV.Last = new_instancemethod(_snap.TIntV_Last,None,TIntV)
TIntV.LastValN = new_instancemethod(_snap.TIntV_LastValN,None,TIntV)
TIntV.LastLast = new_instancemethod(_snap.TIntV_LastLast,None,TIntV)
TIntV.GetRndVal = new_instancemethod(_snap.TIntV_GetRndVal,None,TIntV)
TIntV.BegI = new_instancemethod(_snap.TIntV_BegI,None,TIntV)
TIntV.EndI = new_instancemethod(_snap.TIntV_EndI,None,TIntV)
TIntV.GetI = new_instancemethod(_snap.TIntV_GetI,None,TIntV)
TIntV.AddAtm = new_instancemethod(_snap.TIntV_AddAtm,None,TIntV)
TIntV.Add = new_instancemethod(_snap.TIntV_Add,None,TIntV)
TIntV.AddMP = new_instancemethod(_snap.TIntV_AddMP,None,TIntV)
TIntV.AddV = new_instancemethod(_snap.TIntV_AddV,None,TIntV)
TIntV.AddSorted = new_instancemethod(_snap.TIntV_AddSorted,None,TIntV)
TIntV.AddBackSorted = new_instancemethod(_snap.TIntV_AddBackSorted,None,TIntV)
TIntV.AddMerged = new_instancemethod(_snap.TIntV_AddMerged,None,TIntV)
TIntV.AddVMerged = new_instancemethod(_snap.TIntV_AddVMerged,None,TIntV)
TIntV.AddUnique = new_instancemethod(_snap.TIntV_AddUnique,None,TIntV)
TIntV.GetVal = new_instancemethod(_snap.TIntV_GetVal,None,TIntV)
TIntV.SetVal = new_instancemethod(_snap.TIntV_SetVal,None,TIntV)
TIntV.GetSubValV = new_instancemethod(_snap.TIntV_GetSubValV,None,TIntV)
TIntV.Ins = new_instancemethod(_snap.TIntV_Ins,None,TIntV)
TIntV.Del = new_instancemethod(_snap.TIntV_Del,None,TIntV)
TIntV.DelLast = new_instancemethod(_snap.TIntV_DelLast,None,TIntV)
TIntV.DelIfIn = new_instancemethod(_snap.TIntV_DelIfIn,None,TIntV)
TIntV.DelAll = new_instancemethod(_snap.TIntV_DelAll,None,TIntV)
TIntV.PutAll = new_instancemethod(_snap.TIntV_PutAll,None,TIntV)
TIntV.Swap = new_instancemethod(_snap.TIntV_Swap,None,TIntV)
TIntV.NextPerm = new_instancemethod(_snap.TIntV_NextPerm,None,TIntV)
TIntV.PrevPerm = new_instancemethod(_snap.TIntV_PrevPerm,None,TIntV)
TIntV.GetPivotValN = new_instancemethod(_snap.TIntV_GetPivotValN,None,TIntV)
TIntV.BSort = new_instancemethod(_snap.TIntV_BSort,None,TIntV)
TIntV.ISort = new_instancemethod(_snap.TIntV_ISort,None,TIntV)
TIntV.Partition = new_instancemethod(_snap.TIntV_Partition,None,TIntV)
TIntV.QSort = new_instancemethod(_snap.TIntV_QSort,None,TIntV)
TIntV.Sort = new_instancemethod(_snap.TIntV_Sort,None,TIntV)
TIntV.IsSorted = new_instancemethod(_snap.TIntV_IsSorted,None,TIntV)
TIntV.Shuffle = new_instancemethod(_snap.TIntV_Shuffle,None,TIntV)
TIntV.Reverse = new_instancemethod(_snap.TIntV_Reverse,None,TIntV)
TIntV.Merge = new_instancemethod(_snap.TIntV_Merge,None,TIntV)
TIntV.Intrs = new_instancemethod(_snap.TIntV_Intrs,None,TIntV)
TIntV.Union = new_instancemethod(_snap.TIntV_Union,None,TIntV)
TIntV.Diff = new_instancemethod(_snap.TIntV_Diff,None,TIntV)
TIntV.IntrsLen = new_instancemethod(_snap.TIntV_IntrsLen,None,TIntV)
TIntV.UnionLen = new_instancemethod(_snap.TIntV_UnionLen,None,TIntV)
TIntV.Count = new_instancemethod(_snap.TIntV_Count,None,TIntV)
TIntV.SearchBin = new_instancemethod(_snap.TIntV_SearchBin,None,TIntV)
TIntV.SearchBinLeft = new_instancemethod(_snap.TIntV_SearchBinLeft,None,TIntV)
TIntV.SearchForw = new_instancemethod(_snap.TIntV_SearchForw,None,TIntV)
TIntV.SearchBack = new_instancemethod(_snap.TIntV_SearchBack,None,TIntV)
TIntV.SearchVForw = new_instancemethod(_snap.TIntV_SearchVForw,None,TIntV)
TIntV.IsIn = new_instancemethod(_snap.TIntV_IsIn,None,TIntV)
TIntV.IsInBin = new_instancemethod(_snap.TIntV_IsInBin,None,TIntV)
TIntV.GetDat = new_instancemethod(_snap.TIntV_GetDat,None,TIntV)
TIntV.GetAddDat = new_instancemethod(_snap.TIntV_GetAddDat,None,TIntV)
TIntV.GetMxValN = new_instancemethod(_snap.TIntV_GetMxValN,None,TIntV)
TIntV_swigregister = _snap.TIntV_swigregister
TIntV_swigregister(TIntV)

def TIntV_SwapI(*args):
  """
    TIntV_SwapI(TIter LVal, TIter RVal)
    Parameters:
       LVal: TVec< TInt >::TIter value
       RVal: TVec< TInt >::TIter value

       LVal: TVec< TInt >::TIter value
       RVal: TVec< TInt >::TIter value

    """
  return _snap.TIntV_SwapI(*args)

def TIntV_GetV(*args):
  """
    GetV(TInt Val1) -> TIntV
    Parameters:
       Val1: TInt const & value

       Val1: TInt const & value

    GetV(TInt Val1, TInt Val2) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value

    GetV(TInt Val1, TInt Val2, TInt Val3) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
        TInt Val6) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
        TInt Val6, TInt Val7) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value
       Val7: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value
       Val7: TInt const & value

    GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
        TInt Val6, TInt Val7, TInt Val8) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value
       Val7: TInt const & value
       Val8: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value
       Val7: TInt const & value
       Val8: TInt const & value

    TIntV_GetV(TInt Val1, TInt Val2, TInt Val3, TInt Val4, TInt Val5, 
        TInt Val6, TInt Val7, TInt Val8, TInt Val9) -> TIntV
    Parameters:
       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value
       Val7: TInt const & value
       Val8: TInt const & value
       Val9: TInt const & value

       Val1: TInt const & value
       Val2: TInt const & value
       Val3: TInt const & value
       Val4: TInt const & value
       Val5: TInt const & value
       Val6: TInt const & value
       Val7: TInt const & value
       Val8: TInt const & value
       Val9: TInt const & value

    """
  return _snap.TIntV_GetV(*args)

class TFltV(object):
    """Proxy of C++ TVec<(TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltV
    def __init__(self, *args): 
        """
        __init__(self) -> TFltV
        __init__(self, TFltV Vec) -> TFltV
        Parameters:
           Vec: TVec< TFlt,int > const & value

           Vec: TVec< TFlt,int > const & value

        __init__(self, int _Vals) -> TFltV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TFltV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TFlt _ValT, int _Vals) -> TFltV
        Parameters:
           _ValT: TFlt * value
           _Vals: int const & value

           _ValT: TFlt * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TFltV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TFltV_swiginit(self,_snap.new_TFltV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TFlt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TFltV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TFlt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TFltV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TFlt Val) -> TFltV
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TFltV Vec) -> bool
        Parameters:
           self: TVec< TFlt > const * value
           Vec: TVec< TFlt,int > const & value

           Vec: TVec< TFlt,int > const & value

        """
        return _snap.TFltV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TFltV Vec) -> bool
        Parameters:
           self: TVec< TFlt > const * value
           Vec: TVec< TFlt,int > const & value

           Vec: TVec< TFlt,int > const & value

        """
        return _snap.TFltV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TFlt > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TFltV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TFlt _ValT, int _Vals)
        Parameters:
           self: TVec< TFlt > * value
           _ValT: TFlt * value
           _Vals: int const & value

           _ValT: TFlt * value
           _Vals: int const & value

        """
        return _snap.TFltV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TFlt > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TFltV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TFlt > * value


        """
        return _snap.TFltV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TFlt > * value


        """
        return _snap.TFltV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TFlt > * value


        """
        return _snap.TFltV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TFlt > * value




        """
        return _snap.TFltV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TFltV Vec)
        Parameters:
           self: TVec< TFlt > * value
           Vec: TVec< TFlt,int > & value

           Vec: TVec< TFlt,int > & value

        """
        return _snap.TFltV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TFltV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TFlt > * value
           Vec: TVec< TFlt,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TFlt,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TFltV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TFlt
        Last(self) -> TFlt
        Parameters:
           self: TVec< TFlt > * value


        """
        return _snap.TFltV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TFlt
        LastLast(self) -> TFlt
        Parameters:
           self: TVec< TFlt > * value


        """
        return _snap.TFltV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TFlt
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TFlt
        GetRndVal(self, TRnd Rnd = Rnd) -> TFlt
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TFlt
        Parameters:
           self: TVec< TFlt > * value


        """
        return _snap.TFltV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TIter
        Parameters:
           self: TVec< TFlt > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TFltV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TFlt Val) -> int
        Parameters:
           Val: TFlt const & value

           Val: TFlt const & value

        Add(self, TFlt Val) -> int
        Parameters:
           Val: TFlt & value

           Val: TFlt & value

        Add(self, TFlt Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value
           ResizeLen: int const & value

           Val: TFlt const & value
           ResizeLen: int const & value

        """
        return _snap.TFltV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TFltV ValV) -> int
        Parameters:
           self: TVec< TFlt > * value
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        """
        return _snap.TFltV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TFlt Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TFlt const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TFlt const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TFlt Val, bool Asc = True) -> int
        Parameters:
           Val: TFlt const & value
           Asc: bool const & value

           Val: TFlt const & value
           Asc: bool const & value

        AddSorted(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TFlt Val, bool Asc) -> int
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value
           Asc: bool const & value

           Val: TFlt const & value
           Asc: bool const & value

        """
        return _snap.TFltV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TFltV ValV) -> int
        Parameters:
           self: TVec< TFlt > * value
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        """
        return _snap.TFltV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TFlt
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TFlt
        Parameters:
           self: TVec< TFlt > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TFltV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TFlt Val)
        Parameters:
           self: TVec< TFlt > * value
           ValN: int const & value
           Val: TFlt const & value

           ValN: int const & value
           Val: TFlt const & value

        """
        return _snap.TFltV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TFltV ValV)
        Parameters:
           self: TVec< TFlt > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TFlt,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TFlt,int > & value

        """
        return _snap.TFltV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TFlt Val)
        Parameters:
           self: TVec< TFlt > * value
           ValN: int const & value
           Val: TFlt const & value

           ValN: int const & value
           Val: TFlt const & value

        """
        return _snap.TFltV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TFlt > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TFltV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TFlt > * value




        """
        return _snap.TFltV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TFlt Val) -> bool
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TFlt Val)
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TFlt Val)
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TFltV Vec)
        Parameters:
           Vec: TVec< TFlt,int > & value

           Vec: TVec< TFlt,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TFlt > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TFltV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIter LVal, TIter RVal)
        Parameters:
           LVal: TVec< TFlt >::TIter value
           RVal: TVec< TFlt >::TIter value

           LVal: TVec< TFlt >::TIter value
           RVal: TVec< TFlt >::TIter value

           LVal: TVec< TFlt >::TIter value
           RVal: TVec< TFlt >::TIter value

        """
        return _snap.TFltV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TFlt > * value




        """
        return _snap.TFltV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TFlt > * value




        """
        return _snap.TFltV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TFlt > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TFltV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TFlt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TFlt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TFlt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TFlt > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TFlt > * value


        """
        return _snap.TFltV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TFlt > const * value


        """
        return _snap.TFltV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TFlt > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TFltV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TFlt > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TFltV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TFlt > * value




        """
        return _snap.TFltV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TFltV ValV)
        Parameters:
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        Intrs(self, TFltV ValV, TFltV DstValV)
        Parameters:
           self: TVec< TFlt > const * value
           ValV: TVec< TFlt,int > const & value
           DstValV: TVec< TFlt,int > & value

           ValV: TVec< TFlt,int > const & value
           DstValV: TVec< TFlt,int > & value

        """
        return _snap.TFltV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TFltV ValV)
        Parameters:
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        Union(self, TFltV ValV, TFltV DstValV)
        Parameters:
           self: TVec< TFlt > const * value
           ValV: TVec< TFlt,int > const & value
           DstValV: TVec< TFlt,int > & value

           ValV: TVec< TFlt,int > const & value
           DstValV: TVec< TFlt,int > & value

        """
        return _snap.TFltV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TFltV ValV)
        Parameters:
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        Diff(self, TFltV ValV, TFltV DstValV)
        Parameters:
           self: TVec< TFlt > const * value
           ValV: TVec< TFlt,int > const & value
           DstValV: TVec< TFlt,int > & value

           ValV: TVec< TFlt,int > const & value
           DstValV: TVec< TFlt,int > & value

        """
        return _snap.TFltV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TFltV ValV) -> int
        Parameters:
           self: TVec< TFlt > const * value
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        """
        return _snap.TFltV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TFltV ValV) -> int
        Parameters:
           self: TVec< TFlt > const * value
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        """
        return _snap.TFltV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TFlt Val) -> int
        Parameters:
           Val: TFlt const & value

           Val: TFlt const & value

        SearchBin(self, TFlt Val, int InsValN) -> int
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value
           InsValN: int & value

           Val: TFlt const & value
           InsValN: int & value

        """
        return _snap.TFltV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TFlt Val, int InsValN) -> int
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value
           InsValN: int & value

           Val: TFlt const & value
           InsValN: int & value

        """
        return _snap.TFltV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TFlt Val, int BValN = 0) -> int
        Parameters:
           Val: TFlt const & value
           BValN: int const & value

           Val: TFlt const & value
           BValN: int const & value

        SearchForw(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TFlt Val) -> int
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TFltV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TFlt,int > const & value
           BValN: int const & value

           ValV: TVec< TFlt,int > const & value
           BValN: int const & value

        SearchVForw(self, TFltV ValV) -> int
        Parameters:
           self: TVec< TFlt > const * value
           ValV: TVec< TFlt,int > const & value

           ValV: TVec< TFlt,int > const & value

        """
        return _snap.TFltV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TFlt Val) -> bool
        Parameters:
           Val: TFlt const & value

           Val: TFlt const & value

        IsIn(self, TFlt Val, int ValN) -> bool
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value
           ValN: int & value

           Val: TFlt const & value
           ValN: int & value

        """
        return _snap.TFltV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TFlt Val) -> bool
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TFlt Val) -> TFlt
        Parameters:
           self: TVec< TFlt > const * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TFlt Val) -> TFlt
        Parameters:
           self: TVec< TFlt > * value
           Val: TFlt const & value

           Val: TFlt const & value

        """
        return _snap.TFltV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TFlt > const * value




        """
        return _snap.TFltV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TFlt Val1) -> TFltV
        Parameters:
           Val1: TFlt const & value

           Val1: TFlt const & value

           Val1: TFlt const & value

        GetV(TFlt Val1, TFlt Val2) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value

        GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
            TFlt Val6) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
            TFlt Val6, TFlt Val7) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
            TFlt Val6, TFlt Val7, TFlt Val8) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value
           Val8: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value
           Val8: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value
           Val8: TFlt const & value

        GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
            TFlt Val6, TFlt Val7, TFlt Val8, TFlt Val9) -> TFltV
        Parameters:
           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value
           Val8: TFlt const & value
           Val9: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value
           Val8: TFlt const & value
           Val9: TFlt const & value

           Val1: TFlt const & value
           Val2: TFlt const & value
           Val3: TFlt const & value
           Val4: TFlt const & value
           Val5: TFlt const & value
           Val6: TFlt const & value
           Val7: TFlt const & value
           Val8: TFlt const & value
           Val9: TFlt const & value

        """
        return _snap.TFltV_GetV(*args)

    GetV = staticmethod(GetV)
TFltV.Load = new_instancemethod(_snap.TFltV_Load,None,TFltV)
TFltV.Save = new_instancemethod(_snap.TFltV_Save,None,TFltV)
TFltV.__add__ = new_instancemethod(_snap.TFltV___add__,None,TFltV)
TFltV.__eq__ = new_instancemethod(_snap.TFltV___eq__,None,TFltV)
TFltV.__lt__ = new_instancemethod(_snap.TFltV___lt__,None,TFltV)
TFltV.GetMemUsed = new_instancemethod(_snap.TFltV_GetMemUsed,None,TFltV)
TFltV.GetMemSize = new_instancemethod(_snap.TFltV_GetMemSize,None,TFltV)
TFltV.GetPrimHashCd = new_instancemethod(_snap.TFltV_GetPrimHashCd,None,TFltV)
TFltV.GetSecHashCd = new_instancemethod(_snap.TFltV_GetSecHashCd,None,TFltV)
TFltV.Gen = new_instancemethod(_snap.TFltV_Gen,None,TFltV)
TFltV.GenExt = new_instancemethod(_snap.TFltV_GenExt,None,TFltV)
TFltV.IsExt = new_instancemethod(_snap.TFltV_IsExt,None,TFltV)
TFltV.Reserve = new_instancemethod(_snap.TFltV_Reserve,None,TFltV)
TFltV.Clr = new_instancemethod(_snap.TFltV_Clr,None,TFltV)
TFltV.Trunc = new_instancemethod(_snap.TFltV_Trunc,None,TFltV)
TFltV.Reduce = new_instancemethod(_snap.TFltV_Reduce,None,TFltV)
TFltV.Pack = new_instancemethod(_snap.TFltV_Pack,None,TFltV)
TFltV.MoveFrom = new_instancemethod(_snap.TFltV_MoveFrom,None,TFltV)
TFltV.CopyUniqueFrom = new_instancemethod(_snap.TFltV_CopyUniqueFrom,None,TFltV)
TFltV.Empty = new_instancemethod(_snap.TFltV_Empty,None,TFltV)
TFltV.Len = new_instancemethod(_snap.TFltV_Len,None,TFltV)
TFltV.Reserved = new_instancemethod(_snap.TFltV_Reserved,None,TFltV)
TFltV.Last = new_instancemethod(_snap.TFltV_Last,None,TFltV)
TFltV.LastValN = new_instancemethod(_snap.TFltV_LastValN,None,TFltV)
TFltV.LastLast = new_instancemethod(_snap.TFltV_LastLast,None,TFltV)
TFltV.GetRndVal = new_instancemethod(_snap.TFltV_GetRndVal,None,TFltV)
TFltV.BegI = new_instancemethod(_snap.TFltV_BegI,None,TFltV)
TFltV.EndI = new_instancemethod(_snap.TFltV_EndI,None,TFltV)
TFltV.GetI = new_instancemethod(_snap.TFltV_GetI,None,TFltV)
TFltV.AddAtm = new_instancemethod(_snap.TFltV_AddAtm,None,TFltV)
TFltV.Add = new_instancemethod(_snap.TFltV_Add,None,TFltV)
TFltV.AddMP = new_instancemethod(_snap.TFltV_AddMP,None,TFltV)
TFltV.AddV = new_instancemethod(_snap.TFltV_AddV,None,TFltV)
TFltV.AddSorted = new_instancemethod(_snap.TFltV_AddSorted,None,TFltV)
TFltV.AddBackSorted = new_instancemethod(_snap.TFltV_AddBackSorted,None,TFltV)
TFltV.AddMerged = new_instancemethod(_snap.TFltV_AddMerged,None,TFltV)
TFltV.AddVMerged = new_instancemethod(_snap.TFltV_AddVMerged,None,TFltV)
TFltV.AddUnique = new_instancemethod(_snap.TFltV_AddUnique,None,TFltV)
TFltV.GetVal = new_instancemethod(_snap.TFltV_GetVal,None,TFltV)
TFltV.SetVal = new_instancemethod(_snap.TFltV_SetVal,None,TFltV)
TFltV.GetSubValV = new_instancemethod(_snap.TFltV_GetSubValV,None,TFltV)
TFltV.Ins = new_instancemethod(_snap.TFltV_Ins,None,TFltV)
TFltV.Del = new_instancemethod(_snap.TFltV_Del,None,TFltV)
TFltV.DelLast = new_instancemethod(_snap.TFltV_DelLast,None,TFltV)
TFltV.DelIfIn = new_instancemethod(_snap.TFltV_DelIfIn,None,TFltV)
TFltV.DelAll = new_instancemethod(_snap.TFltV_DelAll,None,TFltV)
TFltV.PutAll = new_instancemethod(_snap.TFltV_PutAll,None,TFltV)
TFltV.Swap = new_instancemethod(_snap.TFltV_Swap,None,TFltV)
TFltV.NextPerm = new_instancemethod(_snap.TFltV_NextPerm,None,TFltV)
TFltV.PrevPerm = new_instancemethod(_snap.TFltV_PrevPerm,None,TFltV)
TFltV.GetPivotValN = new_instancemethod(_snap.TFltV_GetPivotValN,None,TFltV)
TFltV.BSort = new_instancemethod(_snap.TFltV_BSort,None,TFltV)
TFltV.ISort = new_instancemethod(_snap.TFltV_ISort,None,TFltV)
TFltV.Partition = new_instancemethod(_snap.TFltV_Partition,None,TFltV)
TFltV.QSort = new_instancemethod(_snap.TFltV_QSort,None,TFltV)
TFltV.Sort = new_instancemethod(_snap.TFltV_Sort,None,TFltV)
TFltV.IsSorted = new_instancemethod(_snap.TFltV_IsSorted,None,TFltV)
TFltV.Shuffle = new_instancemethod(_snap.TFltV_Shuffle,None,TFltV)
TFltV.Reverse = new_instancemethod(_snap.TFltV_Reverse,None,TFltV)
TFltV.Merge = new_instancemethod(_snap.TFltV_Merge,None,TFltV)
TFltV.Intrs = new_instancemethod(_snap.TFltV_Intrs,None,TFltV)
TFltV.Union = new_instancemethod(_snap.TFltV_Union,None,TFltV)
TFltV.Diff = new_instancemethod(_snap.TFltV_Diff,None,TFltV)
TFltV.IntrsLen = new_instancemethod(_snap.TFltV_IntrsLen,None,TFltV)
TFltV.UnionLen = new_instancemethod(_snap.TFltV_UnionLen,None,TFltV)
TFltV.Count = new_instancemethod(_snap.TFltV_Count,None,TFltV)
TFltV.SearchBin = new_instancemethod(_snap.TFltV_SearchBin,None,TFltV)
TFltV.SearchBinLeft = new_instancemethod(_snap.TFltV_SearchBinLeft,None,TFltV)
TFltV.SearchForw = new_instancemethod(_snap.TFltV_SearchForw,None,TFltV)
TFltV.SearchBack = new_instancemethod(_snap.TFltV_SearchBack,None,TFltV)
TFltV.SearchVForw = new_instancemethod(_snap.TFltV_SearchVForw,None,TFltV)
TFltV.IsIn = new_instancemethod(_snap.TFltV_IsIn,None,TFltV)
TFltV.IsInBin = new_instancemethod(_snap.TFltV_IsInBin,None,TFltV)
TFltV.GetDat = new_instancemethod(_snap.TFltV_GetDat,None,TFltV)
TFltV.GetAddDat = new_instancemethod(_snap.TFltV_GetAddDat,None,TFltV)
TFltV.GetMxValN = new_instancemethod(_snap.TFltV_GetMxValN,None,TFltV)
TFltV_swigregister = _snap.TFltV_swigregister
TFltV_swigregister(TFltV)

def TFltV_SwapI(*args):
  """
    TFltV_SwapI(TIter LVal, TIter RVal)
    Parameters:
       LVal: TVec< TFlt >::TIter value
       RVal: TVec< TFlt >::TIter value

       LVal: TVec< TFlt >::TIter value
       RVal: TVec< TFlt >::TIter value

    """
  return _snap.TFltV_SwapI(*args)

def TFltV_GetV(*args):
  """
    GetV(TFlt Val1) -> TFltV
    Parameters:
       Val1: TFlt const & value

       Val1: TFlt const & value

    GetV(TFlt Val1, TFlt Val2) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value

    GetV(TFlt Val1, TFlt Val2, TFlt Val3) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
        TFlt Val6) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
        TFlt Val6, TFlt Val7) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value
       Val7: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value
       Val7: TFlt const & value

    GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
        TFlt Val6, TFlt Val7, TFlt Val8) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value
       Val7: TFlt const & value
       Val8: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value
       Val7: TFlt const & value
       Val8: TFlt const & value

    TFltV_GetV(TFlt Val1, TFlt Val2, TFlt Val3, TFlt Val4, TFlt Val5, 
        TFlt Val6, TFlt Val7, TFlt Val8, TFlt Val9) -> TFltV
    Parameters:
       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value
       Val7: TFlt const & value
       Val8: TFlt const & value
       Val9: TFlt const & value

       Val1: TFlt const & value
       Val2: TFlt const & value
       Val3: TFlt const & value
       Val4: TFlt const & value
       Val5: TFlt const & value
       Val6: TFlt const & value
       Val7: TFlt const & value
       Val8: TFlt const & value
       Val9: TFlt const & value

    """
  return _snap.TFltV_GetV(*args)

class TStrV(object):
    """Proxy of C++ TVec<(TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrV
    def __init__(self, *args): 
        """
        __init__(self) -> TStrV
        __init__(self, TStrV Vec) -> TStrV
        Parameters:
           Vec: TVec< TStr,int > const & value

           Vec: TVec< TStr,int > const & value

        __init__(self, int _Vals) -> TStrV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TStrV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TStr _ValT, int _Vals) -> TStrV
        Parameters:
           _ValT: TStr * value
           _Vals: int const & value

           _ValT: TStr * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TStrV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TStrV_swiginit(self,_snap.new_TStrV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TStr > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TStrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TStr > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TStrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TStr Val) -> TStrV
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TStrV Vec) -> bool
        Parameters:
           self: TVec< TStr > const * value
           Vec: TVec< TStr,int > const & value

           Vec: TVec< TStr,int > const & value

        """
        return _snap.TStrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrV Vec) -> bool
        Parameters:
           self: TVec< TStr > const * value
           Vec: TVec< TStr,int > const & value

           Vec: TVec< TStr,int > const & value

        """
        return _snap.TStrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TStr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TStrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TStr _ValT, int _Vals)
        Parameters:
           self: TVec< TStr > * value
           _ValT: TStr * value
           _Vals: int const & value

           _ValT: TStr * value
           _Vals: int const & value

        """
        return _snap.TStrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TStr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TStrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TStr > * value


        """
        return _snap.TStrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TStr > * value


        """
        return _snap.TStrV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TStr > * value


        """
        return _snap.TStrV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TStr > * value




        """
        return _snap.TStrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TStrV Vec)
        Parameters:
           self: TVec< TStr > * value
           Vec: TVec< TStr,int > & value

           Vec: TVec< TStr,int > & value

        """
        return _snap.TStrV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TStrV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TStr > * value
           Vec: TVec< TStr,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TStr,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TStrV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TStr
        Last(self) -> TStr
        Parameters:
           self: TVec< TStr > * value


        """
        return _snap.TStrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TStr
        LastLast(self) -> TStr
        Parameters:
           self: TVec< TStr > * value


        """
        return _snap.TStrV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TStr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TStr
        GetRndVal(self, TRnd Rnd = Rnd) -> TStr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TStr
        Parameters:
           self: TVec< TStr > * value


        """
        return _snap.TStrV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TIter
        Parameters:
           self: TVec< TStr > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TStrV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TStr Val) -> int
        Parameters:
           Val: TStr const & value

           Val: TStr const & value

        Add(self, TStr Val) -> int
        Parameters:
           Val: TStr & value

           Val: TStr & value

        Add(self, TStr Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value
           ResizeLen: int const & value

           Val: TStr const & value
           ResizeLen: int const & value

        """
        return _snap.TStrV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TStrV ValV) -> int
        Parameters:
           self: TVec< TStr > * value
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        """
        return _snap.TStrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TStr Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TStr const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TStr const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TStr Val, bool Asc = True) -> int
        Parameters:
           Val: TStr const & value
           Asc: bool const & value

           Val: TStr const & value
           Asc: bool const & value

        AddSorted(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TStr Val, bool Asc) -> int
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value
           Asc: bool const & value

           Val: TStr const & value
           Asc: bool const & value

        """
        return _snap.TStrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TStrV ValV) -> int
        Parameters:
           self: TVec< TStr > * value
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        """
        return _snap.TStrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TStr
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TStr
        Parameters:
           self: TVec< TStr > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TStrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TStr Val)
        Parameters:
           self: TVec< TStr > * value
           ValN: int const & value
           Val: TStr const & value

           ValN: int const & value
           Val: TStr const & value

        """
        return _snap.TStrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TStrV ValV)
        Parameters:
           self: TVec< TStr > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TStr,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TStr,int > & value

        """
        return _snap.TStrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TStr Val)
        Parameters:
           self: TVec< TStr > * value
           ValN: int const & value
           Val: TStr const & value

           ValN: int const & value
           Val: TStr const & value

        """
        return _snap.TStrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TStr > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TStrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TStr > * value




        """
        return _snap.TStrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TStr Val) -> bool
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TStr Val)
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TStr Val)
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TStrV Vec)
        Parameters:
           Vec: TVec< TStr,int > & value

           Vec: TVec< TStr,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TStr > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TStrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIter LVal, TIter RVal)
        Parameters:
           LVal: TVec< TStr >::TIter value
           RVal: TVec< TStr >::TIter value

           LVal: TVec< TStr >::TIter value
           RVal: TVec< TStr >::TIter value

           LVal: TVec< TStr >::TIter value
           RVal: TVec< TStr >::TIter value

        """
        return _snap.TStrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TStr > * value




        """
        return _snap.TStrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TStr > * value




        """
        return _snap.TStrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TStr > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TStrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TStr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TStr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TStr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TStr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TStr > * value


        """
        return _snap.TStrV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TStr > const * value


        """
        return _snap.TStrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TStr > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TStrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TStr > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TStrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TStr > * value




        """
        return _snap.TStrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TStrV ValV)
        Parameters:
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        Intrs(self, TStrV ValV, TStrV DstValV)
        Parameters:
           self: TVec< TStr > const * value
           ValV: TVec< TStr,int > const & value
           DstValV: TVec< TStr,int > & value

           ValV: TVec< TStr,int > const & value
           DstValV: TVec< TStr,int > & value

        """
        return _snap.TStrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TStrV ValV)
        Parameters:
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        Union(self, TStrV ValV, TStrV DstValV)
        Parameters:
           self: TVec< TStr > const * value
           ValV: TVec< TStr,int > const & value
           DstValV: TVec< TStr,int > & value

           ValV: TVec< TStr,int > const & value
           DstValV: TVec< TStr,int > & value

        """
        return _snap.TStrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TStrV ValV)
        Parameters:
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        Diff(self, TStrV ValV, TStrV DstValV)
        Parameters:
           self: TVec< TStr > const * value
           ValV: TVec< TStr,int > const & value
           DstValV: TVec< TStr,int > & value

           ValV: TVec< TStr,int > const & value
           DstValV: TVec< TStr,int > & value

        """
        return _snap.TStrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TStrV ValV) -> int
        Parameters:
           self: TVec< TStr > const * value
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        """
        return _snap.TStrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TStrV ValV) -> int
        Parameters:
           self: TVec< TStr > const * value
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        """
        return _snap.TStrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TStr Val) -> int
        Parameters:
           Val: TStr const & value

           Val: TStr const & value

        SearchBin(self, TStr Val, int InsValN) -> int
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value
           InsValN: int & value

           Val: TStr const & value
           InsValN: int & value

        """
        return _snap.TStrV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TStr Val, int InsValN) -> int
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value
           InsValN: int & value

           Val: TStr const & value
           InsValN: int & value

        """
        return _snap.TStrV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TStr Val, int BValN = 0) -> int
        Parameters:
           Val: TStr const & value
           BValN: int const & value

           Val: TStr const & value
           BValN: int const & value

        SearchForw(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TStr Val) -> int
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TStrV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TStr,int > const & value
           BValN: int const & value

           ValV: TVec< TStr,int > const & value
           BValN: int const & value

        SearchVForw(self, TStrV ValV) -> int
        Parameters:
           self: TVec< TStr > const * value
           ValV: TVec< TStr,int > const & value

           ValV: TVec< TStr,int > const & value

        """
        return _snap.TStrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TStr Val) -> bool
        Parameters:
           Val: TStr const & value

           Val: TStr const & value

        IsIn(self, TStr Val, int ValN) -> bool
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value
           ValN: int & value

           Val: TStr const & value
           ValN: int & value

        """
        return _snap.TStrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TStr Val) -> bool
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TStr Val) -> TStr
        Parameters:
           self: TVec< TStr > const * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TStr Val) -> TStr
        Parameters:
           self: TVec< TStr > * value
           Val: TStr const & value

           Val: TStr const & value

        """
        return _snap.TStrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TStr > const * value




        """
        return _snap.TStrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TStr Val1) -> TStrV
        Parameters:
           Val1: TStr const & value

           Val1: TStr const & value

           Val1: TStr const & value

        GetV(TStr Val1, TStr Val2) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value

        GetV(TStr Val1, TStr Val2, TStr Val3) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
            TStr Val6) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
            TStr Val6, TStr Val7) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
            TStr Val6, TStr Val7, TStr Val8) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value
           Val8: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value
           Val8: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value
           Val8: TStr const & value

        GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
            TStr Val6, TStr Val7, TStr Val8, TStr Val9) -> TStrV
        Parameters:
           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value
           Val8: TStr const & value
           Val9: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value
           Val8: TStr const & value
           Val9: TStr const & value

           Val1: TStr const & value
           Val2: TStr const & value
           Val3: TStr const & value
           Val4: TStr const & value
           Val5: TStr const & value
           Val6: TStr const & value
           Val7: TStr const & value
           Val8: TStr const & value
           Val9: TStr const & value

        """
        return _snap.TStrV_GetV(*args)

    GetV = staticmethod(GetV)
TStrV.Load = new_instancemethod(_snap.TStrV_Load,None,TStrV)
TStrV.Save = new_instancemethod(_snap.TStrV_Save,None,TStrV)
TStrV.__add__ = new_instancemethod(_snap.TStrV___add__,None,TStrV)
TStrV.__eq__ = new_instancemethod(_snap.TStrV___eq__,None,TStrV)
TStrV.__lt__ = new_instancemethod(_snap.TStrV___lt__,None,TStrV)
TStrV.GetMemUsed = new_instancemethod(_snap.TStrV_GetMemUsed,None,TStrV)
TStrV.GetMemSize = new_instancemethod(_snap.TStrV_GetMemSize,None,TStrV)
TStrV.GetPrimHashCd = new_instancemethod(_snap.TStrV_GetPrimHashCd,None,TStrV)
TStrV.GetSecHashCd = new_instancemethod(_snap.TStrV_GetSecHashCd,None,TStrV)
TStrV.Gen = new_instancemethod(_snap.TStrV_Gen,None,TStrV)
TStrV.GenExt = new_instancemethod(_snap.TStrV_GenExt,None,TStrV)
TStrV.IsExt = new_instancemethod(_snap.TStrV_IsExt,None,TStrV)
TStrV.Reserve = new_instancemethod(_snap.TStrV_Reserve,None,TStrV)
TStrV.Clr = new_instancemethod(_snap.TStrV_Clr,None,TStrV)
TStrV.Trunc = new_instancemethod(_snap.TStrV_Trunc,None,TStrV)
TStrV.Reduce = new_instancemethod(_snap.TStrV_Reduce,None,TStrV)
TStrV.Pack = new_instancemethod(_snap.TStrV_Pack,None,TStrV)
TStrV.MoveFrom = new_instancemethod(_snap.TStrV_MoveFrom,None,TStrV)
TStrV.CopyUniqueFrom = new_instancemethod(_snap.TStrV_CopyUniqueFrom,None,TStrV)
TStrV.Empty = new_instancemethod(_snap.TStrV_Empty,None,TStrV)
TStrV.Len = new_instancemethod(_snap.TStrV_Len,None,TStrV)
TStrV.Reserved = new_instancemethod(_snap.TStrV_Reserved,None,TStrV)
TStrV.Last = new_instancemethod(_snap.TStrV_Last,None,TStrV)
TStrV.LastValN = new_instancemethod(_snap.TStrV_LastValN,None,TStrV)
TStrV.LastLast = new_instancemethod(_snap.TStrV_LastLast,None,TStrV)
TStrV.GetRndVal = new_instancemethod(_snap.TStrV_GetRndVal,None,TStrV)
TStrV.BegI = new_instancemethod(_snap.TStrV_BegI,None,TStrV)
TStrV.EndI = new_instancemethod(_snap.TStrV_EndI,None,TStrV)
TStrV.GetI = new_instancemethod(_snap.TStrV_GetI,None,TStrV)
TStrV.AddAtm = new_instancemethod(_snap.TStrV_AddAtm,None,TStrV)
TStrV.Add = new_instancemethod(_snap.TStrV_Add,None,TStrV)
TStrV.AddMP = new_instancemethod(_snap.TStrV_AddMP,None,TStrV)
TStrV.AddV = new_instancemethod(_snap.TStrV_AddV,None,TStrV)
TStrV.AddSorted = new_instancemethod(_snap.TStrV_AddSorted,None,TStrV)
TStrV.AddBackSorted = new_instancemethod(_snap.TStrV_AddBackSorted,None,TStrV)
TStrV.AddMerged = new_instancemethod(_snap.TStrV_AddMerged,None,TStrV)
TStrV.AddVMerged = new_instancemethod(_snap.TStrV_AddVMerged,None,TStrV)
TStrV.AddUnique = new_instancemethod(_snap.TStrV_AddUnique,None,TStrV)
TStrV.GetVal = new_instancemethod(_snap.TStrV_GetVal,None,TStrV)
TStrV.SetVal = new_instancemethod(_snap.TStrV_SetVal,None,TStrV)
TStrV.GetSubValV = new_instancemethod(_snap.TStrV_GetSubValV,None,TStrV)
TStrV.Ins = new_instancemethod(_snap.TStrV_Ins,None,TStrV)
TStrV.Del = new_instancemethod(_snap.TStrV_Del,None,TStrV)
TStrV.DelLast = new_instancemethod(_snap.TStrV_DelLast,None,TStrV)
TStrV.DelIfIn = new_instancemethod(_snap.TStrV_DelIfIn,None,TStrV)
TStrV.DelAll = new_instancemethod(_snap.TStrV_DelAll,None,TStrV)
TStrV.PutAll = new_instancemethod(_snap.TStrV_PutAll,None,TStrV)
TStrV.Swap = new_instancemethod(_snap.TStrV_Swap,None,TStrV)
TStrV.NextPerm = new_instancemethod(_snap.TStrV_NextPerm,None,TStrV)
TStrV.PrevPerm = new_instancemethod(_snap.TStrV_PrevPerm,None,TStrV)
TStrV.GetPivotValN = new_instancemethod(_snap.TStrV_GetPivotValN,None,TStrV)
TStrV.BSort = new_instancemethod(_snap.TStrV_BSort,None,TStrV)
TStrV.ISort = new_instancemethod(_snap.TStrV_ISort,None,TStrV)
TStrV.Partition = new_instancemethod(_snap.TStrV_Partition,None,TStrV)
TStrV.QSort = new_instancemethod(_snap.TStrV_QSort,None,TStrV)
TStrV.Sort = new_instancemethod(_snap.TStrV_Sort,None,TStrV)
TStrV.IsSorted = new_instancemethod(_snap.TStrV_IsSorted,None,TStrV)
TStrV.Shuffle = new_instancemethod(_snap.TStrV_Shuffle,None,TStrV)
TStrV.Reverse = new_instancemethod(_snap.TStrV_Reverse,None,TStrV)
TStrV.Merge = new_instancemethod(_snap.TStrV_Merge,None,TStrV)
TStrV.Intrs = new_instancemethod(_snap.TStrV_Intrs,None,TStrV)
TStrV.Union = new_instancemethod(_snap.TStrV_Union,None,TStrV)
TStrV.Diff = new_instancemethod(_snap.TStrV_Diff,None,TStrV)
TStrV.IntrsLen = new_instancemethod(_snap.TStrV_IntrsLen,None,TStrV)
TStrV.UnionLen = new_instancemethod(_snap.TStrV_UnionLen,None,TStrV)
TStrV.Count = new_instancemethod(_snap.TStrV_Count,None,TStrV)
TStrV.SearchBin = new_instancemethod(_snap.TStrV_SearchBin,None,TStrV)
TStrV.SearchBinLeft = new_instancemethod(_snap.TStrV_SearchBinLeft,None,TStrV)
TStrV.SearchForw = new_instancemethod(_snap.TStrV_SearchForw,None,TStrV)
TStrV.SearchBack = new_instancemethod(_snap.TStrV_SearchBack,None,TStrV)
TStrV.SearchVForw = new_instancemethod(_snap.TStrV_SearchVForw,None,TStrV)
TStrV.IsIn = new_instancemethod(_snap.TStrV_IsIn,None,TStrV)
TStrV.IsInBin = new_instancemethod(_snap.TStrV_IsInBin,None,TStrV)
TStrV.GetDat = new_instancemethod(_snap.TStrV_GetDat,None,TStrV)
TStrV.GetAddDat = new_instancemethod(_snap.TStrV_GetAddDat,None,TStrV)
TStrV.GetMxValN = new_instancemethod(_snap.TStrV_GetMxValN,None,TStrV)
TStrV_swigregister = _snap.TStrV_swigregister
TStrV_swigregister(TStrV)

def TStrV_SwapI(*args):
  """
    TStrV_SwapI(TIter LVal, TIter RVal)
    Parameters:
       LVal: TVec< TStr >::TIter value
       RVal: TVec< TStr >::TIter value

       LVal: TVec< TStr >::TIter value
       RVal: TVec< TStr >::TIter value

    """
  return _snap.TStrV_SwapI(*args)

def TStrV_GetV(*args):
  """
    GetV(TStr Val1) -> TStrV
    Parameters:
       Val1: TStr const & value

       Val1: TStr const & value

    GetV(TStr Val1, TStr Val2) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value

    GetV(TStr Val1, TStr Val2, TStr Val3) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
        TStr Val6) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
        TStr Val6, TStr Val7) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value
       Val7: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value
       Val7: TStr const & value

    GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
        TStr Val6, TStr Val7, TStr Val8) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value
       Val7: TStr const & value
       Val8: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value
       Val7: TStr const & value
       Val8: TStr const & value

    TStrV_GetV(TStr Val1, TStr Val2, TStr Val3, TStr Val4, TStr Val5, 
        TStr Val6, TStr Val7, TStr Val8, TStr Val9) -> TStrV
    Parameters:
       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value
       Val7: TStr const & value
       Val8: TStr const & value
       Val9: TStr const & value

       Val1: TStr const & value
       Val2: TStr const & value
       Val3: TStr const & value
       Val4: TStr const & value
       Val5: TStr const & value
       Val6: TStr const & value
       Val7: TStr const & value
       Val8: TStr const & value
       Val9: TStr const & value

    """
  return _snap.TStrV_GetV(*args)

class TIntPrV(object):
    """Proxy of C++ TVec<(TIntPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntPrV
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrV
        __init__(self, TIntPrV Vec) -> TIntPrV
        Parameters:
           Vec: TVec< TPair< TInt,TInt >,int > const & value

           Vec: TVec< TPair< TInt,TInt >,int > const & value

        __init__(self, int _Vals) -> TIntPrV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TIntPrV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TIntPr _ValT, int _Vals) -> TIntPrV
        Parameters:
           _ValT: TPair< TInt,TInt > * value
           _Vals: int const & value

           _ValT: TPair< TInt,TInt > * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TIntPrV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntPrV_swiginit(self,_snap.new_TIntPrV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TIntPr > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntPrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TIntPr > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntPrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TIntPr Val) -> TIntPrV
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntPrV Vec) -> bool
        Parameters:
           self: TVec< TIntPr > const * value
           Vec: TVec< TPair< TInt,TInt >,int > const & value

           Vec: TVec< TPair< TInt,TInt >,int > const & value

        """
        return _snap.TIntPrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrV Vec) -> bool
        Parameters:
           self: TVec< TIntPr > const * value
           Vec: TVec< TPair< TInt,TInt >,int > const & value

           Vec: TVec< TPair< TInt,TInt >,int > const & value

        """
        return _snap.TIntPrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TIntPr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntPrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TIntPr _ValT, int _Vals)
        Parameters:
           self: TVec< TIntPr > * value
           _ValT: TPair< TInt,TInt > * value
           _Vals: int const & value

           _ValT: TPair< TInt,TInt > * value
           _Vals: int const & value

        """
        return _snap.TIntPrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TIntPr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntPrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TIntPr > * value


        """
        return _snap.TIntPrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TIntPr > * value


        """
        return _snap.TIntPrV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TIntPr > * value


        """
        return _snap.TIntPrV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TIntPr > * value




        """
        return _snap.TIntPrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TIntPrV Vec)
        Parameters:
           self: TVec< TIntPr > * value
           Vec: TVec< TPair< TInt,TInt >,int > & value

           Vec: TVec< TPair< TInt,TInt >,int > & value

        """
        return _snap.TIntPrV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TIntPrV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TIntPr > * value
           Vec: TVec< TPair< TInt,TInt >,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TPair< TInt,TInt >,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TIntPrV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TIntPr
        Last(self) -> TIntPr
        Parameters:
           self: TVec< TIntPr > * value


        """
        return _snap.TIntPrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TIntPr
        LastLast(self) -> TIntPr
        Parameters:
           self: TVec< TIntPr > * value


        """
        return _snap.TIntPrV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntPr
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntPr
        Parameters:
           self: TVec< TIntPr > * value


        """
        return _snap.TIntPrV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TVec<(TPair<(TInt,TInt)>)>::TIter
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TVec<(TPair<(TInt,TInt)>)>::TIter
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TVec<(TPair<(TInt,TInt)>)>::TIter
        Parameters:
           self: TVec< TIntPr > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntPrV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TIntPr Val) -> int
        Parameters:
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        Add(self, TIntPr Val) -> int
        Parameters:
           Val: TPair< TInt,TInt > & value

           Val: TPair< TInt,TInt > & value

        Add(self, TIntPr Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value
           ResizeLen: int const & value

           Val: TPair< TInt,TInt > const & value
           ResizeLen: int const & value

        """
        return _snap.TIntPrV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TIntPrV ValV) -> int
        Parameters:
           self: TVec< TIntPr > * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        """
        return _snap.TIntPrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TIntPr Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TPair< TInt,TInt > const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TPair< TInt,TInt > const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TIntPr Val, bool Asc = True) -> int
        Parameters:
           Val: TPair< TInt,TInt > const & value
           Asc: bool const & value

           Val: TPair< TInt,TInt > const & value
           Asc: bool const & value

        AddSorted(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TIntPr Val, bool Asc) -> int
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value
           Asc: bool const & value

           Val: TPair< TInt,TInt > const & value
           Asc: bool const & value

        """
        return _snap.TIntPrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TIntPrV ValV) -> int
        Parameters:
           self: TVec< TIntPr > * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        """
        return _snap.TIntPrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TIntPr
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TIntPr
        Parameters:
           self: TVec< TIntPr > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntPrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TIntPr Val)
        Parameters:
           self: TVec< TIntPr > * value
           ValN: int const & value
           Val: TPair< TInt,TInt > const & value

           ValN: int const & value
           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TIntPrV ValV)
        Parameters:
           self: TVec< TIntPr > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TInt,TInt >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TInt,TInt >,int > & value

        """
        return _snap.TIntPrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TIntPr Val)
        Parameters:
           self: TVec< TIntPr > * value
           ValN: int const & value
           Val: TPair< TInt,TInt > const & value

           ValN: int const & value
           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TIntPr > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TIntPrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TIntPr > * value




        """
        return _snap.TIntPrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TIntPr Val) -> bool
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TIntPr Val)
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TIntPr Val)
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntPrV Vec)
        Parameters:
           Vec: TVec< TPair< TInt,TInt >,int > & value

           Vec: TVec< TPair< TInt,TInt >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TIntPr > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TIntPrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TVec<(TPair<(TInt,TInt)>)>::TIter LVal, TVec<(TPair<(TInt,TInt)>)>::TIter RVal)
        Parameters:
           LVal: TVec< TPair< TInt,TInt > >::TIter value
           RVal: TVec< TPair< TInt,TInt > >::TIter value

           LVal: TVec< TPair< TInt,TInt > >::TIter value
           RVal: TVec< TPair< TInt,TInt > >::TIter value

           LVal: TVec< TPair< TInt,TInt > >::TIter value
           RVal: TVec< TPair< TInt,TInt > >::TIter value

        """
        return _snap.TIntPrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TIntPr > * value




        """
        return _snap.TIntPrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TIntPr > * value




        """
        return _snap.TIntPrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TIntPrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntPrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntPrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntPrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntPrV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TIntPr > * value


        """
        return _snap.TIntPrV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TIntPr > const * value


        """
        return _snap.TIntPrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TIntPr > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TIntPrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TIntPr > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TIntPrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TIntPr > * value




        """
        return _snap.TIntPrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TIntPrV ValV)
        Parameters:
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        Intrs(self, TIntPrV ValV, TIntPrV DstValV)
        Parameters:
           self: TVec< TIntPr > const * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value
           DstValV: TVec< TPair< TInt,TInt >,int > & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value
           DstValV: TVec< TPair< TInt,TInt >,int > & value

        """
        return _snap.TIntPrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TIntPrV ValV)
        Parameters:
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        Union(self, TIntPrV ValV, TIntPrV DstValV)
        Parameters:
           self: TVec< TIntPr > const * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value
           DstValV: TVec< TPair< TInt,TInt >,int > & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value
           DstValV: TVec< TPair< TInt,TInt >,int > & value

        """
        return _snap.TIntPrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TIntPrV ValV)
        Parameters:
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        Diff(self, TIntPrV ValV, TIntPrV DstValV)
        Parameters:
           self: TVec< TIntPr > const * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value
           DstValV: TVec< TPair< TInt,TInt >,int > & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value
           DstValV: TVec< TPair< TInt,TInt >,int > & value

        """
        return _snap.TIntPrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TIntPrV ValV) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        """
        return _snap.TIntPrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TIntPrV ValV) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        """
        return _snap.TIntPrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TIntPr Val) -> int
        Parameters:
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        SearchBin(self, TIntPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value
           InsValN: int & value

           Val: TPair< TInt,TInt > const & value
           InsValN: int & value

        """
        return _snap.TIntPrV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TIntPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value
           InsValN: int & value

           Val: TPair< TInt,TInt > const & value
           InsValN: int & value

        """
        return _snap.TIntPrV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TIntPr Val, int BValN = 0) -> int
        Parameters:
           Val: TPair< TInt,TInt > const & value
           BValN: int const & value

           Val: TPair< TInt,TInt > const & value
           BValN: int const & value

        SearchForw(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TIntPr Val) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TIntPrV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TPair< TInt,TInt >,int > const & value
           BValN: int const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value
           BValN: int const & value

        SearchVForw(self, TIntPrV ValV) -> int
        Parameters:
           self: TVec< TIntPr > const * value
           ValV: TVec< TPair< TInt,TInt >,int > const & value

           ValV: TVec< TPair< TInt,TInt >,int > const & value

        """
        return _snap.TIntPrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TIntPr Val) -> bool
        Parameters:
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        IsIn(self, TIntPr Val, int ValN) -> bool
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value
           ValN: int & value

           Val: TPair< TInt,TInt > const & value
           ValN: int & value

        """
        return _snap.TIntPrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TIntPr Val) -> bool
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TIntPr Val) -> TIntPr
        Parameters:
           self: TVec< TIntPr > const * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TIntPr Val) -> TIntPr
        Parameters:
           self: TVec< TIntPr > * value
           Val: TPair< TInt,TInt > const & value

           Val: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TIntPr > const * value




        """
        return _snap.TIntPrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntPr Val1) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
            TIntPr Val5) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
            TIntPr Val5, TIntPr Val6) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
            TIntPr Val5, TIntPr Val6, TIntPr Val7) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
            TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value
           Val8: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value
           Val8: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value
           Val8: TPair< TInt,TInt > const & value

        GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
            TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8, 
            TIntPr Val9) -> TIntPrV
        Parameters:
           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value
           Val8: TPair< TInt,TInt > const & value
           Val9: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value
           Val8: TPair< TInt,TInt > const & value
           Val9: TPair< TInt,TInt > const & value

           Val1: TPair< TInt,TInt > const & value
           Val2: TPair< TInt,TInt > const & value
           Val3: TPair< TInt,TInt > const & value
           Val4: TPair< TInt,TInt > const & value
           Val5: TPair< TInt,TInt > const & value
           Val6: TPair< TInt,TInt > const & value
           Val7: TPair< TInt,TInt > const & value
           Val8: TPair< TInt,TInt > const & value
           Val9: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrV_GetV(*args)

    GetV = staticmethod(GetV)
TIntPrV.Load = new_instancemethod(_snap.TIntPrV_Load,None,TIntPrV)
TIntPrV.Save = new_instancemethod(_snap.TIntPrV_Save,None,TIntPrV)
TIntPrV.__add__ = new_instancemethod(_snap.TIntPrV___add__,None,TIntPrV)
TIntPrV.__eq__ = new_instancemethod(_snap.TIntPrV___eq__,None,TIntPrV)
TIntPrV.__lt__ = new_instancemethod(_snap.TIntPrV___lt__,None,TIntPrV)
TIntPrV.GetMemUsed = new_instancemethod(_snap.TIntPrV_GetMemUsed,None,TIntPrV)
TIntPrV.GetMemSize = new_instancemethod(_snap.TIntPrV_GetMemSize,None,TIntPrV)
TIntPrV.GetPrimHashCd = new_instancemethod(_snap.TIntPrV_GetPrimHashCd,None,TIntPrV)
TIntPrV.GetSecHashCd = new_instancemethod(_snap.TIntPrV_GetSecHashCd,None,TIntPrV)
TIntPrV.Gen = new_instancemethod(_snap.TIntPrV_Gen,None,TIntPrV)
TIntPrV.GenExt = new_instancemethod(_snap.TIntPrV_GenExt,None,TIntPrV)
TIntPrV.IsExt = new_instancemethod(_snap.TIntPrV_IsExt,None,TIntPrV)
TIntPrV.Reserve = new_instancemethod(_snap.TIntPrV_Reserve,None,TIntPrV)
TIntPrV.Clr = new_instancemethod(_snap.TIntPrV_Clr,None,TIntPrV)
TIntPrV.Trunc = new_instancemethod(_snap.TIntPrV_Trunc,None,TIntPrV)
TIntPrV.Reduce = new_instancemethod(_snap.TIntPrV_Reduce,None,TIntPrV)
TIntPrV.Pack = new_instancemethod(_snap.TIntPrV_Pack,None,TIntPrV)
TIntPrV.MoveFrom = new_instancemethod(_snap.TIntPrV_MoveFrom,None,TIntPrV)
TIntPrV.CopyUniqueFrom = new_instancemethod(_snap.TIntPrV_CopyUniqueFrom,None,TIntPrV)
TIntPrV.Empty = new_instancemethod(_snap.TIntPrV_Empty,None,TIntPrV)
TIntPrV.Len = new_instancemethod(_snap.TIntPrV_Len,None,TIntPrV)
TIntPrV.Reserved = new_instancemethod(_snap.TIntPrV_Reserved,None,TIntPrV)
TIntPrV.Last = new_instancemethod(_snap.TIntPrV_Last,None,TIntPrV)
TIntPrV.LastValN = new_instancemethod(_snap.TIntPrV_LastValN,None,TIntPrV)
TIntPrV.LastLast = new_instancemethod(_snap.TIntPrV_LastLast,None,TIntPrV)
TIntPrV.GetRndVal = new_instancemethod(_snap.TIntPrV_GetRndVal,None,TIntPrV)
TIntPrV.BegI = new_instancemethod(_snap.TIntPrV_BegI,None,TIntPrV)
TIntPrV.EndI = new_instancemethod(_snap.TIntPrV_EndI,None,TIntPrV)
TIntPrV.GetI = new_instancemethod(_snap.TIntPrV_GetI,None,TIntPrV)
TIntPrV.AddAtm = new_instancemethod(_snap.TIntPrV_AddAtm,None,TIntPrV)
TIntPrV.Add = new_instancemethod(_snap.TIntPrV_Add,None,TIntPrV)
TIntPrV.AddMP = new_instancemethod(_snap.TIntPrV_AddMP,None,TIntPrV)
TIntPrV.AddV = new_instancemethod(_snap.TIntPrV_AddV,None,TIntPrV)
TIntPrV.AddSorted = new_instancemethod(_snap.TIntPrV_AddSorted,None,TIntPrV)
TIntPrV.AddBackSorted = new_instancemethod(_snap.TIntPrV_AddBackSorted,None,TIntPrV)
TIntPrV.AddMerged = new_instancemethod(_snap.TIntPrV_AddMerged,None,TIntPrV)
TIntPrV.AddVMerged = new_instancemethod(_snap.TIntPrV_AddVMerged,None,TIntPrV)
TIntPrV.AddUnique = new_instancemethod(_snap.TIntPrV_AddUnique,None,TIntPrV)
TIntPrV.GetVal = new_instancemethod(_snap.TIntPrV_GetVal,None,TIntPrV)
TIntPrV.SetVal = new_instancemethod(_snap.TIntPrV_SetVal,None,TIntPrV)
TIntPrV.GetSubValV = new_instancemethod(_snap.TIntPrV_GetSubValV,None,TIntPrV)
TIntPrV.Ins = new_instancemethod(_snap.TIntPrV_Ins,None,TIntPrV)
TIntPrV.Del = new_instancemethod(_snap.TIntPrV_Del,None,TIntPrV)
TIntPrV.DelLast = new_instancemethod(_snap.TIntPrV_DelLast,None,TIntPrV)
TIntPrV.DelIfIn = new_instancemethod(_snap.TIntPrV_DelIfIn,None,TIntPrV)
TIntPrV.DelAll = new_instancemethod(_snap.TIntPrV_DelAll,None,TIntPrV)
TIntPrV.PutAll = new_instancemethod(_snap.TIntPrV_PutAll,None,TIntPrV)
TIntPrV.Swap = new_instancemethod(_snap.TIntPrV_Swap,None,TIntPrV)
TIntPrV.NextPerm = new_instancemethod(_snap.TIntPrV_NextPerm,None,TIntPrV)
TIntPrV.PrevPerm = new_instancemethod(_snap.TIntPrV_PrevPerm,None,TIntPrV)
TIntPrV.GetPivotValN = new_instancemethod(_snap.TIntPrV_GetPivotValN,None,TIntPrV)
TIntPrV.BSort = new_instancemethod(_snap.TIntPrV_BSort,None,TIntPrV)
TIntPrV.ISort = new_instancemethod(_snap.TIntPrV_ISort,None,TIntPrV)
TIntPrV.Partition = new_instancemethod(_snap.TIntPrV_Partition,None,TIntPrV)
TIntPrV.QSort = new_instancemethod(_snap.TIntPrV_QSort,None,TIntPrV)
TIntPrV.Sort = new_instancemethod(_snap.TIntPrV_Sort,None,TIntPrV)
TIntPrV.IsSorted = new_instancemethod(_snap.TIntPrV_IsSorted,None,TIntPrV)
TIntPrV.Shuffle = new_instancemethod(_snap.TIntPrV_Shuffle,None,TIntPrV)
TIntPrV.Reverse = new_instancemethod(_snap.TIntPrV_Reverse,None,TIntPrV)
TIntPrV.Merge = new_instancemethod(_snap.TIntPrV_Merge,None,TIntPrV)
TIntPrV.Intrs = new_instancemethod(_snap.TIntPrV_Intrs,None,TIntPrV)
TIntPrV.Union = new_instancemethod(_snap.TIntPrV_Union,None,TIntPrV)
TIntPrV.Diff = new_instancemethod(_snap.TIntPrV_Diff,None,TIntPrV)
TIntPrV.IntrsLen = new_instancemethod(_snap.TIntPrV_IntrsLen,None,TIntPrV)
TIntPrV.UnionLen = new_instancemethod(_snap.TIntPrV_UnionLen,None,TIntPrV)
TIntPrV.Count = new_instancemethod(_snap.TIntPrV_Count,None,TIntPrV)
TIntPrV.SearchBin = new_instancemethod(_snap.TIntPrV_SearchBin,None,TIntPrV)
TIntPrV.SearchBinLeft = new_instancemethod(_snap.TIntPrV_SearchBinLeft,None,TIntPrV)
TIntPrV.SearchForw = new_instancemethod(_snap.TIntPrV_SearchForw,None,TIntPrV)
TIntPrV.SearchBack = new_instancemethod(_snap.TIntPrV_SearchBack,None,TIntPrV)
TIntPrV.SearchVForw = new_instancemethod(_snap.TIntPrV_SearchVForw,None,TIntPrV)
TIntPrV.IsIn = new_instancemethod(_snap.TIntPrV_IsIn,None,TIntPrV)
TIntPrV.IsInBin = new_instancemethod(_snap.TIntPrV_IsInBin,None,TIntPrV)
TIntPrV.GetDat = new_instancemethod(_snap.TIntPrV_GetDat,None,TIntPrV)
TIntPrV.GetAddDat = new_instancemethod(_snap.TIntPrV_GetAddDat,None,TIntPrV)
TIntPrV.GetMxValN = new_instancemethod(_snap.TIntPrV_GetMxValN,None,TIntPrV)
TIntPrV_swigregister = _snap.TIntPrV_swigregister
TIntPrV_swigregister(TIntPrV)

def TIntPrV_SwapI(*args):
  """
    TIntPrV_SwapI(TVec<(TPair<(TInt,TInt)>)>::TIter LVal, TVec<(TPair<(TInt,TInt)>)>::TIter RVal)
    Parameters:
       LVal: TVec< TPair< TInt,TInt > >::TIter value
       RVal: TVec< TPair< TInt,TInt > >::TIter value

       LVal: TVec< TPair< TInt,TInt > >::TIter value
       RVal: TVec< TPair< TInt,TInt > >::TIter value

    """
  return _snap.TIntPrV_SwapI(*args)

def TIntPrV_GetV(*args):
  """
    GetV(TIntPr Val1) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value

    GetV(TIntPr Val1, TIntPr Val2) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
        TIntPr Val5) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
        TIntPr Val5, TIntPr Val6) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
        TIntPr Val5, TIntPr Val6, TIntPr Val7) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value
       Val7: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value
       Val7: TPair< TInt,TInt > const & value

    GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
        TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value
       Val7: TPair< TInt,TInt > const & value
       Val8: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value
       Val7: TPair< TInt,TInt > const & value
       Val8: TPair< TInt,TInt > const & value

    TIntPrV_GetV(TIntPr Val1, TIntPr Val2, TIntPr Val3, TIntPr Val4, 
        TIntPr Val5, TIntPr Val6, TIntPr Val7, TIntPr Val8, 
        TIntPr Val9) -> TIntPrV
    Parameters:
       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value
       Val7: TPair< TInt,TInt > const & value
       Val8: TPair< TInt,TInt > const & value
       Val9: TPair< TInt,TInt > const & value

       Val1: TPair< TInt,TInt > const & value
       Val2: TPair< TInt,TInt > const & value
       Val3: TPair< TInt,TInt > const & value
       Val4: TPair< TInt,TInt > const & value
       Val5: TPair< TInt,TInt > const & value
       Val6: TPair< TInt,TInt > const & value
       Val7: TPair< TInt,TInt > const & value
       Val8: TPair< TInt,TInt > const & value
       Val9: TPair< TInt,TInt > const & value

    """
  return _snap.TIntPrV_GetV(*args)

class TFltPrV(object):
    """Proxy of C++ TVec<(TFltPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TFltPrV
    def __init__(self, *args): 
        """
        __init__(self) -> TFltPrV
        __init__(self, TFltPrV Vec) -> TFltPrV
        Parameters:
           Vec: TVec< TPair< TFlt,TFlt >,int > const & value

           Vec: TVec< TPair< TFlt,TFlt >,int > const & value

        __init__(self, int _Vals) -> TFltPrV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TFltPrV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TFltPr _ValT, int _Vals) -> TFltPrV
        Parameters:
           _ValT: TPair< TFlt,TFlt > * value
           _Vals: int const & value

           _ValT: TPair< TFlt,TFlt > * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TFltPrV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TFltPrV_swiginit(self,_snap.new_TFltPrV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TFltPr > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TFltPrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TFltPr > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TFltPrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TFltPr Val) -> TFltPrV
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TFltPrV Vec) -> bool
        Parameters:
           self: TVec< TFltPr > const * value
           Vec: TVec< TPair< TFlt,TFlt >,int > const & value

           Vec: TVec< TPair< TFlt,TFlt >,int > const & value

        """
        return _snap.TFltPrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TFltPrV Vec) -> bool
        Parameters:
           self: TVec< TFltPr > const * value
           Vec: TVec< TPair< TFlt,TFlt >,int > const & value

           Vec: TVec< TPair< TFlt,TFlt >,int > const & value

        """
        return _snap.TFltPrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TFltPr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TFltPrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TFltPr _ValT, int _Vals)
        Parameters:
           self: TVec< TFltPr > * value
           _ValT: TPair< TFlt,TFlt > * value
           _Vals: int const & value

           _ValT: TPair< TFlt,TFlt > * value
           _Vals: int const & value

        """
        return _snap.TFltPrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TFltPr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TFltPrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TFltPr > * value


        """
        return _snap.TFltPrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TFltPr > * value


        """
        return _snap.TFltPrV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TFltPr > * value


        """
        return _snap.TFltPrV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TFltPr > * value




        """
        return _snap.TFltPrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TFltPrV Vec)
        Parameters:
           self: TVec< TFltPr > * value
           Vec: TVec< TPair< TFlt,TFlt >,int > & value

           Vec: TVec< TPair< TFlt,TFlt >,int > & value

        """
        return _snap.TFltPrV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TFltPrV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TFltPr > * value
           Vec: TVec< TPair< TFlt,TFlt >,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TPair< TFlt,TFlt >,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TFltPrV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TFltPr
        Last(self) -> TFltPr
        Parameters:
           self: TVec< TFltPr > * value


        """
        return _snap.TFltPrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TFltPr
        LastLast(self) -> TFltPr
        Parameters:
           self: TVec< TFltPr > * value


        """
        return _snap.TFltPrV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TFltPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TFltPr
        GetRndVal(self, TRnd Rnd = Rnd) -> TFltPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TFltPr
        Parameters:
           self: TVec< TFltPr > * value


        """
        return _snap.TFltPrV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TVec<(TPair<(TFlt,TFlt)>)>::TIter
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TVec<(TPair<(TFlt,TFlt)>)>::TIter
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TVec<(TPair<(TFlt,TFlt)>)>::TIter
        Parameters:
           self: TVec< TFltPr > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TFltPrV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TFltPr Val) -> int
        Parameters:
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        Add(self, TFltPr Val) -> int
        Parameters:
           Val: TPair< TFlt,TFlt > & value

           Val: TPair< TFlt,TFlt > & value

        Add(self, TFltPr Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value
           ResizeLen: int const & value

           Val: TPair< TFlt,TFlt > const & value
           ResizeLen: int const & value

        """
        return _snap.TFltPrV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TFltPrV ValV) -> int
        Parameters:
           self: TVec< TFltPr > * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        """
        return _snap.TFltPrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TFltPr Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TPair< TFlt,TFlt > const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TPair< TFlt,TFlt > const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TFltPr Val, bool Asc = True) -> int
        Parameters:
           Val: TPair< TFlt,TFlt > const & value
           Asc: bool const & value

           Val: TPair< TFlt,TFlt > const & value
           Asc: bool const & value

        AddSorted(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TFltPr Val, bool Asc) -> int
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value
           Asc: bool const & value

           Val: TPair< TFlt,TFlt > const & value
           Asc: bool const & value

        """
        return _snap.TFltPrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TFltPrV ValV) -> int
        Parameters:
           self: TVec< TFltPr > * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        """
        return _snap.TFltPrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TFltPr
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TFltPr
        Parameters:
           self: TVec< TFltPr > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TFltPrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TFltPr Val)
        Parameters:
           self: TVec< TFltPr > * value
           ValN: int const & value
           Val: TPair< TFlt,TFlt > const & value

           ValN: int const & value
           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TFltPrV ValV)
        Parameters:
           self: TVec< TFltPr > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TFlt,TFlt >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TFlt,TFlt >,int > & value

        """
        return _snap.TFltPrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TFltPr Val)
        Parameters:
           self: TVec< TFltPr > * value
           ValN: int const & value
           Val: TPair< TFlt,TFlt > const & value

           ValN: int const & value
           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TFltPr > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TFltPrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TFltPr > * value




        """
        return _snap.TFltPrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TFltPr Val) -> bool
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TFltPr Val)
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TFltPr Val)
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TFltPrV Vec)
        Parameters:
           Vec: TVec< TPair< TFlt,TFlt >,int > & value

           Vec: TVec< TPair< TFlt,TFlt >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TFltPr > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TFltPrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TVec<(TPair<(TFlt,TFlt)>)>::TIter LVal, TVec<(TPair<(TFlt,TFlt)>)>::TIter RVal)
        Parameters:
           LVal: TVec< TPair< TFlt,TFlt > >::TIter value
           RVal: TVec< TPair< TFlt,TFlt > >::TIter value

           LVal: TVec< TPair< TFlt,TFlt > >::TIter value
           RVal: TVec< TPair< TFlt,TFlt > >::TIter value

           LVal: TVec< TPair< TFlt,TFlt > >::TIter value
           RVal: TVec< TPair< TFlt,TFlt > >::TIter value

        """
        return _snap.TFltPrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TFltPr > * value




        """
        return _snap.TFltPrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TFltPr > * value




        """
        return _snap.TFltPrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TFltPrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TFltPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltPrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TFltPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltPrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TFltPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltPrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TFltPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TFltPrV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TFltPr > * value


        """
        return _snap.TFltPrV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TFltPr > const * value


        """
        return _snap.TFltPrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TFltPr > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TFltPrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TFltPr > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TFltPrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TFltPr > * value




        """
        return _snap.TFltPrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TFltPrV ValV)
        Parameters:
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        Intrs(self, TFltPrV ValV, TFltPrV DstValV)
        Parameters:
           self: TVec< TFltPr > const * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           DstValV: TVec< TPair< TFlt,TFlt >,int > & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           DstValV: TVec< TPair< TFlt,TFlt >,int > & value

        """
        return _snap.TFltPrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TFltPrV ValV)
        Parameters:
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        Union(self, TFltPrV ValV, TFltPrV DstValV)
        Parameters:
           self: TVec< TFltPr > const * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           DstValV: TVec< TPair< TFlt,TFlt >,int > & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           DstValV: TVec< TPair< TFlt,TFlt >,int > & value

        """
        return _snap.TFltPrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TFltPrV ValV)
        Parameters:
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        Diff(self, TFltPrV ValV, TFltPrV DstValV)
        Parameters:
           self: TVec< TFltPr > const * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           DstValV: TVec< TPair< TFlt,TFlt >,int > & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           DstValV: TVec< TPair< TFlt,TFlt >,int > & value

        """
        return _snap.TFltPrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TFltPrV ValV) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        """
        return _snap.TFltPrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TFltPrV ValV) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        """
        return _snap.TFltPrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TFltPr Val) -> int
        Parameters:
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        SearchBin(self, TFltPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value
           InsValN: int & value

           Val: TPair< TFlt,TFlt > const & value
           InsValN: int & value

        """
        return _snap.TFltPrV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TFltPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value
           InsValN: int & value

           Val: TPair< TFlt,TFlt > const & value
           InsValN: int & value

        """
        return _snap.TFltPrV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TFltPr Val, int BValN = 0) -> int
        Parameters:
           Val: TPair< TFlt,TFlt > const & value
           BValN: int const & value

           Val: TPair< TFlt,TFlt > const & value
           BValN: int const & value

        SearchForw(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TFltPr Val) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TFltPrV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           BValN: int const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value
           BValN: int const & value

        SearchVForw(self, TFltPrV ValV) -> int
        Parameters:
           self: TVec< TFltPr > const * value
           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

           ValV: TVec< TPair< TFlt,TFlt >,int > const & value

        """
        return _snap.TFltPrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TFltPr Val) -> bool
        Parameters:
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        IsIn(self, TFltPr Val, int ValN) -> bool
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value
           ValN: int & value

           Val: TPair< TFlt,TFlt > const & value
           ValN: int & value

        """
        return _snap.TFltPrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TFltPr Val) -> bool
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TFltPr Val) -> TFltPr
        Parameters:
           self: TVec< TFltPr > const * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TFltPr Val) -> TFltPr
        Parameters:
           self: TVec< TFltPr > * value
           Val: TPair< TFlt,TFlt > const & value

           Val: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TFltPr > const * value




        """
        return _snap.TFltPrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TFltPr Val1) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
            TFltPr Val5) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
            TFltPr Val5, TFltPr Val6) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
            TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
            TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value
           Val8: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value
           Val8: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value
           Val8: TPair< TFlt,TFlt > const & value

        GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
            TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8, 
            TFltPr Val9) -> TFltPrV
        Parameters:
           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value
           Val8: TPair< TFlt,TFlt > const & value
           Val9: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value
           Val8: TPair< TFlt,TFlt > const & value
           Val9: TPair< TFlt,TFlt > const & value

           Val1: TPair< TFlt,TFlt > const & value
           Val2: TPair< TFlt,TFlt > const & value
           Val3: TPair< TFlt,TFlt > const & value
           Val4: TPair< TFlt,TFlt > const & value
           Val5: TPair< TFlt,TFlt > const & value
           Val6: TPair< TFlt,TFlt > const & value
           Val7: TPair< TFlt,TFlt > const & value
           Val8: TPair< TFlt,TFlt > const & value
           Val9: TPair< TFlt,TFlt > const & value

        """
        return _snap.TFltPrV_GetV(*args)

    GetV = staticmethod(GetV)
TFltPrV.Load = new_instancemethod(_snap.TFltPrV_Load,None,TFltPrV)
TFltPrV.Save = new_instancemethod(_snap.TFltPrV_Save,None,TFltPrV)
TFltPrV.__add__ = new_instancemethod(_snap.TFltPrV___add__,None,TFltPrV)
TFltPrV.__eq__ = new_instancemethod(_snap.TFltPrV___eq__,None,TFltPrV)
TFltPrV.__lt__ = new_instancemethod(_snap.TFltPrV___lt__,None,TFltPrV)
TFltPrV.GetMemUsed = new_instancemethod(_snap.TFltPrV_GetMemUsed,None,TFltPrV)
TFltPrV.GetMemSize = new_instancemethod(_snap.TFltPrV_GetMemSize,None,TFltPrV)
TFltPrV.GetPrimHashCd = new_instancemethod(_snap.TFltPrV_GetPrimHashCd,None,TFltPrV)
TFltPrV.GetSecHashCd = new_instancemethod(_snap.TFltPrV_GetSecHashCd,None,TFltPrV)
TFltPrV.Gen = new_instancemethod(_snap.TFltPrV_Gen,None,TFltPrV)
TFltPrV.GenExt = new_instancemethod(_snap.TFltPrV_GenExt,None,TFltPrV)
TFltPrV.IsExt = new_instancemethod(_snap.TFltPrV_IsExt,None,TFltPrV)
TFltPrV.Reserve = new_instancemethod(_snap.TFltPrV_Reserve,None,TFltPrV)
TFltPrV.Clr = new_instancemethod(_snap.TFltPrV_Clr,None,TFltPrV)
TFltPrV.Trunc = new_instancemethod(_snap.TFltPrV_Trunc,None,TFltPrV)
TFltPrV.Reduce = new_instancemethod(_snap.TFltPrV_Reduce,None,TFltPrV)
TFltPrV.Pack = new_instancemethod(_snap.TFltPrV_Pack,None,TFltPrV)
TFltPrV.MoveFrom = new_instancemethod(_snap.TFltPrV_MoveFrom,None,TFltPrV)
TFltPrV.CopyUniqueFrom = new_instancemethod(_snap.TFltPrV_CopyUniqueFrom,None,TFltPrV)
TFltPrV.Empty = new_instancemethod(_snap.TFltPrV_Empty,None,TFltPrV)
TFltPrV.Len = new_instancemethod(_snap.TFltPrV_Len,None,TFltPrV)
TFltPrV.Reserved = new_instancemethod(_snap.TFltPrV_Reserved,None,TFltPrV)
TFltPrV.Last = new_instancemethod(_snap.TFltPrV_Last,None,TFltPrV)
TFltPrV.LastValN = new_instancemethod(_snap.TFltPrV_LastValN,None,TFltPrV)
TFltPrV.LastLast = new_instancemethod(_snap.TFltPrV_LastLast,None,TFltPrV)
TFltPrV.GetRndVal = new_instancemethod(_snap.TFltPrV_GetRndVal,None,TFltPrV)
TFltPrV.BegI = new_instancemethod(_snap.TFltPrV_BegI,None,TFltPrV)
TFltPrV.EndI = new_instancemethod(_snap.TFltPrV_EndI,None,TFltPrV)
TFltPrV.GetI = new_instancemethod(_snap.TFltPrV_GetI,None,TFltPrV)
TFltPrV.AddAtm = new_instancemethod(_snap.TFltPrV_AddAtm,None,TFltPrV)
TFltPrV.Add = new_instancemethod(_snap.TFltPrV_Add,None,TFltPrV)
TFltPrV.AddMP = new_instancemethod(_snap.TFltPrV_AddMP,None,TFltPrV)
TFltPrV.AddV = new_instancemethod(_snap.TFltPrV_AddV,None,TFltPrV)
TFltPrV.AddSorted = new_instancemethod(_snap.TFltPrV_AddSorted,None,TFltPrV)
TFltPrV.AddBackSorted = new_instancemethod(_snap.TFltPrV_AddBackSorted,None,TFltPrV)
TFltPrV.AddMerged = new_instancemethod(_snap.TFltPrV_AddMerged,None,TFltPrV)
TFltPrV.AddVMerged = new_instancemethod(_snap.TFltPrV_AddVMerged,None,TFltPrV)
TFltPrV.AddUnique = new_instancemethod(_snap.TFltPrV_AddUnique,None,TFltPrV)
TFltPrV.GetVal = new_instancemethod(_snap.TFltPrV_GetVal,None,TFltPrV)
TFltPrV.SetVal = new_instancemethod(_snap.TFltPrV_SetVal,None,TFltPrV)
TFltPrV.GetSubValV = new_instancemethod(_snap.TFltPrV_GetSubValV,None,TFltPrV)
TFltPrV.Ins = new_instancemethod(_snap.TFltPrV_Ins,None,TFltPrV)
TFltPrV.Del = new_instancemethod(_snap.TFltPrV_Del,None,TFltPrV)
TFltPrV.DelLast = new_instancemethod(_snap.TFltPrV_DelLast,None,TFltPrV)
TFltPrV.DelIfIn = new_instancemethod(_snap.TFltPrV_DelIfIn,None,TFltPrV)
TFltPrV.DelAll = new_instancemethod(_snap.TFltPrV_DelAll,None,TFltPrV)
TFltPrV.PutAll = new_instancemethod(_snap.TFltPrV_PutAll,None,TFltPrV)
TFltPrV.Swap = new_instancemethod(_snap.TFltPrV_Swap,None,TFltPrV)
TFltPrV.NextPerm = new_instancemethod(_snap.TFltPrV_NextPerm,None,TFltPrV)
TFltPrV.PrevPerm = new_instancemethod(_snap.TFltPrV_PrevPerm,None,TFltPrV)
TFltPrV.GetPivotValN = new_instancemethod(_snap.TFltPrV_GetPivotValN,None,TFltPrV)
TFltPrV.BSort = new_instancemethod(_snap.TFltPrV_BSort,None,TFltPrV)
TFltPrV.ISort = new_instancemethod(_snap.TFltPrV_ISort,None,TFltPrV)
TFltPrV.Partition = new_instancemethod(_snap.TFltPrV_Partition,None,TFltPrV)
TFltPrV.QSort = new_instancemethod(_snap.TFltPrV_QSort,None,TFltPrV)
TFltPrV.Sort = new_instancemethod(_snap.TFltPrV_Sort,None,TFltPrV)
TFltPrV.IsSorted = new_instancemethod(_snap.TFltPrV_IsSorted,None,TFltPrV)
TFltPrV.Shuffle = new_instancemethod(_snap.TFltPrV_Shuffle,None,TFltPrV)
TFltPrV.Reverse = new_instancemethod(_snap.TFltPrV_Reverse,None,TFltPrV)
TFltPrV.Merge = new_instancemethod(_snap.TFltPrV_Merge,None,TFltPrV)
TFltPrV.Intrs = new_instancemethod(_snap.TFltPrV_Intrs,None,TFltPrV)
TFltPrV.Union = new_instancemethod(_snap.TFltPrV_Union,None,TFltPrV)
TFltPrV.Diff = new_instancemethod(_snap.TFltPrV_Diff,None,TFltPrV)
TFltPrV.IntrsLen = new_instancemethod(_snap.TFltPrV_IntrsLen,None,TFltPrV)
TFltPrV.UnionLen = new_instancemethod(_snap.TFltPrV_UnionLen,None,TFltPrV)
TFltPrV.Count = new_instancemethod(_snap.TFltPrV_Count,None,TFltPrV)
TFltPrV.SearchBin = new_instancemethod(_snap.TFltPrV_SearchBin,None,TFltPrV)
TFltPrV.SearchBinLeft = new_instancemethod(_snap.TFltPrV_SearchBinLeft,None,TFltPrV)
TFltPrV.SearchForw = new_instancemethod(_snap.TFltPrV_SearchForw,None,TFltPrV)
TFltPrV.SearchBack = new_instancemethod(_snap.TFltPrV_SearchBack,None,TFltPrV)
TFltPrV.SearchVForw = new_instancemethod(_snap.TFltPrV_SearchVForw,None,TFltPrV)
TFltPrV.IsIn = new_instancemethod(_snap.TFltPrV_IsIn,None,TFltPrV)
TFltPrV.IsInBin = new_instancemethod(_snap.TFltPrV_IsInBin,None,TFltPrV)
TFltPrV.GetDat = new_instancemethod(_snap.TFltPrV_GetDat,None,TFltPrV)
TFltPrV.GetAddDat = new_instancemethod(_snap.TFltPrV_GetAddDat,None,TFltPrV)
TFltPrV.GetMxValN = new_instancemethod(_snap.TFltPrV_GetMxValN,None,TFltPrV)
TFltPrV_swigregister = _snap.TFltPrV_swigregister
TFltPrV_swigregister(TFltPrV)

def TFltPrV_SwapI(*args):
  """
    TFltPrV_SwapI(TVec<(TPair<(TFlt,TFlt)>)>::TIter LVal, TVec<(TPair<(TFlt,TFlt)>)>::TIter RVal)
    Parameters:
       LVal: TVec< TPair< TFlt,TFlt > >::TIter value
       RVal: TVec< TPair< TFlt,TFlt > >::TIter value

       LVal: TVec< TPair< TFlt,TFlt > >::TIter value
       RVal: TVec< TPair< TFlt,TFlt > >::TIter value

    """
  return _snap.TFltPrV_SwapI(*args)

def TFltPrV_GetV(*args):
  """
    GetV(TFltPr Val1) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value

    GetV(TFltPr Val1, TFltPr Val2) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
        TFltPr Val5) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
        TFltPr Val5, TFltPr Val6) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
        TFltPr Val5, TFltPr Val6, TFltPr Val7) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value
       Val7: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value
       Val7: TPair< TFlt,TFlt > const & value

    GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
        TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value
       Val7: TPair< TFlt,TFlt > const & value
       Val8: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value
       Val7: TPair< TFlt,TFlt > const & value
       Val8: TPair< TFlt,TFlt > const & value

    TFltPrV_GetV(TFltPr Val1, TFltPr Val2, TFltPr Val3, TFltPr Val4, 
        TFltPr Val5, TFltPr Val6, TFltPr Val7, TFltPr Val8, 
        TFltPr Val9) -> TFltPrV
    Parameters:
       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value
       Val7: TPair< TFlt,TFlt > const & value
       Val8: TPair< TFlt,TFlt > const & value
       Val9: TPair< TFlt,TFlt > const & value

       Val1: TPair< TFlt,TFlt > const & value
       Val2: TPair< TFlt,TFlt > const & value
       Val3: TPair< TFlt,TFlt > const & value
       Val4: TPair< TFlt,TFlt > const & value
       Val5: TPair< TFlt,TFlt > const & value
       Val6: TPair< TFlt,TFlt > const & value
       Val7: TPair< TFlt,TFlt > const & value
       Val8: TPair< TFlt,TFlt > const & value
       Val9: TPair< TFlt,TFlt > const & value

    """
  return _snap.TFltPrV_GetV(*args)

class TStrIntPrV(object):
    """Proxy of C++ TVec<(TStrIntPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TStrIntPrV
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntPrV
        __init__(self, TStrIntPrV Vec) -> TStrIntPrV
        Parameters:
           Vec: TVec< TPair< TStr,TInt >,int > const & value

           Vec: TVec< TPair< TStr,TInt >,int > const & value

        __init__(self, int _Vals) -> TStrIntPrV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TStrIntPrV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TStrIntPr _ValT, int _Vals) -> TStrIntPrV
        Parameters:
           _ValT: TPair< TStr,TInt > * value
           _Vals: int const & value

           _ValT: TPair< TStr,TInt > * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TStrIntPrV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TStrIntPrV_swiginit(self,_snap.new_TStrIntPrV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TStrIntPr > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TStrIntPrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TStrIntPr > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TStrIntPrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TStrIntPr Val) -> TStrIntPrV
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TStrIntPrV Vec) -> bool
        Parameters:
           self: TVec< TStrIntPr > const * value
           Vec: TVec< TPair< TStr,TInt >,int > const & value

           Vec: TVec< TPair< TStr,TInt >,int > const & value

        """
        return _snap.TStrIntPrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrIntPrV Vec) -> bool
        Parameters:
           self: TVec< TStrIntPr > const * value
           Vec: TVec< TPair< TStr,TInt >,int > const & value

           Vec: TVec< TPair< TStr,TInt >,int > const & value

        """
        return _snap.TStrIntPrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TStrIntPr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TStrIntPrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TStrIntPr _ValT, int _Vals)
        Parameters:
           self: TVec< TStrIntPr > * value
           _ValT: TPair< TStr,TInt > * value
           _Vals: int const & value

           _ValT: TPair< TStr,TInt > * value
           _Vals: int const & value

        """
        return _snap.TStrIntPrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TStrIntPr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TStrIntPrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TStrIntPr > * value


        """
        return _snap.TStrIntPrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TStrIntPr > * value


        """
        return _snap.TStrIntPrV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TStrIntPr > * value


        """
        return _snap.TStrIntPrV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TStrIntPr > * value




        """
        return _snap.TStrIntPrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TStrIntPrV Vec)
        Parameters:
           self: TVec< TStrIntPr > * value
           Vec: TVec< TPair< TStr,TInt >,int > & value

           Vec: TVec< TPair< TStr,TInt >,int > & value

        """
        return _snap.TStrIntPrV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TStrIntPrV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TStrIntPr > * value
           Vec: TVec< TPair< TStr,TInt >,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TPair< TStr,TInt >,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TStrIntPrV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TStrIntPr
        Last(self) -> TStrIntPr
        Parameters:
           self: TVec< TStrIntPr > * value


        """
        return _snap.TStrIntPrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TStrIntPr
        LastLast(self) -> TStrIntPr
        Parameters:
           self: TVec< TStrIntPr > * value


        """
        return _snap.TStrIntPrV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TStrIntPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TStrIntPr
        GetRndVal(self, TRnd Rnd = Rnd) -> TStrIntPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TStrIntPr
        Parameters:
           self: TVec< TStrIntPr > * value


        """
        return _snap.TStrIntPrV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TVec<(TPair<(TStr,TInt)>)>::TIter
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TVec<(TPair<(TStr,TInt)>)>::TIter
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TVec<(TPair<(TStr,TInt)>)>::TIter
        Parameters:
           self: TVec< TStrIntPr > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TStrIntPrV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TStrIntPr Val) -> int
        Parameters:
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        Add(self, TStrIntPr Val) -> int
        Parameters:
           Val: TPair< TStr,TInt > & value

           Val: TPair< TStr,TInt > & value

        Add(self, TStrIntPr Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value
           ResizeLen: int const & value

           Val: TPair< TStr,TInt > const & value
           ResizeLen: int const & value

        """
        return _snap.TStrIntPrV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TStrIntPrV ValV) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        """
        return _snap.TStrIntPrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TStrIntPr Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TPair< TStr,TInt > const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TPair< TStr,TInt > const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TStrIntPr Val, bool Asc = True) -> int
        Parameters:
           Val: TPair< TStr,TInt > const & value
           Asc: bool const & value

           Val: TPair< TStr,TInt > const & value
           Asc: bool const & value

        AddSorted(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TStrIntPr Val, bool Asc) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value
           Asc: bool const & value

           Val: TPair< TStr,TInt > const & value
           Asc: bool const & value

        """
        return _snap.TStrIntPrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TStrIntPrV ValV) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        """
        return _snap.TStrIntPrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TStrIntPr
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TStrIntPr
        Parameters:
           self: TVec< TStrIntPr > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TStrIntPrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TStrIntPr Val)
        Parameters:
           self: TVec< TStrIntPr > * value
           ValN: int const & value
           Val: TPair< TStr,TInt > const & value

           ValN: int const & value
           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TStrIntPrV ValV)
        Parameters:
           self: TVec< TStrIntPr > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TStr,TInt >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TStr,TInt >,int > & value

        """
        return _snap.TStrIntPrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TStrIntPr Val)
        Parameters:
           self: TVec< TStrIntPr > * value
           ValN: int const & value
           Val: TPair< TStr,TInt > const & value

           ValN: int const & value
           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TStrIntPr > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TStrIntPrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TStrIntPr > * value




        """
        return _snap.TStrIntPrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TStrIntPr Val) -> bool
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TStrIntPr Val)
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TStrIntPr Val)
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TStrIntPrV Vec)
        Parameters:
           Vec: TVec< TPair< TStr,TInt >,int > & value

           Vec: TVec< TPair< TStr,TInt >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TStrIntPr > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TStrIntPrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TVec<(TPair<(TStr,TInt)>)>::TIter LVal, TVec<(TPair<(TStr,TInt)>)>::TIter RVal)
        Parameters:
           LVal: TVec< TPair< TStr,TInt > >::TIter value
           RVal: TVec< TPair< TStr,TInt > >::TIter value

           LVal: TVec< TPair< TStr,TInt > >::TIter value
           RVal: TVec< TPair< TStr,TInt > >::TIter value

           LVal: TVec< TPair< TStr,TInt > >::TIter value
           RVal: TVec< TPair< TStr,TInt > >::TIter value

        """
        return _snap.TStrIntPrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TStrIntPr > * value




        """
        return _snap.TStrIntPrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TStrIntPr > * value




        """
        return _snap.TStrIntPrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TStrIntPrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TStrIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrIntPrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TStrIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrIntPrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TStrIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrIntPrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TStrIntPr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TStrIntPrV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TStrIntPr > * value


        """
        return _snap.TStrIntPrV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TStrIntPr > const * value


        """
        return _snap.TStrIntPrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TStrIntPr > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TStrIntPrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TStrIntPr > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TStrIntPrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TStrIntPr > * value




        """
        return _snap.TStrIntPrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TStrIntPrV ValV)
        Parameters:
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        Intrs(self, TStrIntPrV ValV, TStrIntPrV DstValV)
        Parameters:
           self: TVec< TStrIntPr > const * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value
           DstValV: TVec< TPair< TStr,TInt >,int > & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value
           DstValV: TVec< TPair< TStr,TInt >,int > & value

        """
        return _snap.TStrIntPrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TStrIntPrV ValV)
        Parameters:
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        Union(self, TStrIntPrV ValV, TStrIntPrV DstValV)
        Parameters:
           self: TVec< TStrIntPr > const * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value
           DstValV: TVec< TPair< TStr,TInt >,int > & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value
           DstValV: TVec< TPair< TStr,TInt >,int > & value

        """
        return _snap.TStrIntPrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TStrIntPrV ValV)
        Parameters:
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        Diff(self, TStrIntPrV ValV, TStrIntPrV DstValV)
        Parameters:
           self: TVec< TStrIntPr > const * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value
           DstValV: TVec< TPair< TStr,TInt >,int > & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value
           DstValV: TVec< TPair< TStr,TInt >,int > & value

        """
        return _snap.TStrIntPrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TStrIntPrV ValV) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        """
        return _snap.TStrIntPrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TStrIntPrV ValV) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        """
        return _snap.TStrIntPrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TStrIntPr Val) -> int
        Parameters:
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        SearchBin(self, TStrIntPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value
           InsValN: int & value

           Val: TPair< TStr,TInt > const & value
           InsValN: int & value

        """
        return _snap.TStrIntPrV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TStrIntPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value
           InsValN: int & value

           Val: TPair< TStr,TInt > const & value
           InsValN: int & value

        """
        return _snap.TStrIntPrV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TStrIntPr Val, int BValN = 0) -> int
        Parameters:
           Val: TPair< TStr,TInt > const & value
           BValN: int const & value

           Val: TPair< TStr,TInt > const & value
           BValN: int const & value

        SearchForw(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TStrIntPr Val) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TStrIntPrV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TPair< TStr,TInt >,int > const & value
           BValN: int const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value
           BValN: int const & value

        SearchVForw(self, TStrIntPrV ValV) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value
           ValV: TVec< TPair< TStr,TInt >,int > const & value

           ValV: TVec< TPair< TStr,TInt >,int > const & value

        """
        return _snap.TStrIntPrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TStrIntPr Val) -> bool
        Parameters:
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        IsIn(self, TStrIntPr Val, int ValN) -> bool
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value
           ValN: int & value

           Val: TPair< TStr,TInt > const & value
           ValN: int & value

        """
        return _snap.TStrIntPrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TStrIntPr Val) -> bool
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TStrIntPr Val) -> TStrIntPr
        Parameters:
           self: TVec< TStrIntPr > const * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TStrIntPr Val) -> TStrIntPr
        Parameters:
           self: TVec< TStrIntPr > * value
           Val: TPair< TStr,TInt > const & value

           Val: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TStrIntPr > const * value




        """
        return _snap.TStrIntPrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TStrIntPr Val1) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
            TStrIntPr Val5) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
            TStrIntPr Val5, TStrIntPr Val6) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
            TStrIntPr Val5, TStrIntPr Val6, 
            TStrIntPr Val7) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
            TStrIntPr Val5, TStrIntPr Val6, 
            TStrIntPr Val7, TStrIntPr Val8) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value
           Val8: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value
           Val8: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value
           Val8: TPair< TStr,TInt > const & value

        GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
            TStrIntPr Val5, TStrIntPr Val6, 
            TStrIntPr Val7, TStrIntPr Val8, TStrIntPr Val9) -> TStrIntPrV
        Parameters:
           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value
           Val8: TPair< TStr,TInt > const & value
           Val9: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value
           Val8: TPair< TStr,TInt > const & value
           Val9: TPair< TStr,TInt > const & value

           Val1: TPair< TStr,TInt > const & value
           Val2: TPair< TStr,TInt > const & value
           Val3: TPair< TStr,TInt > const & value
           Val4: TPair< TStr,TInt > const & value
           Val5: TPair< TStr,TInt > const & value
           Val6: TPair< TStr,TInt > const & value
           Val7: TPair< TStr,TInt > const & value
           Val8: TPair< TStr,TInt > const & value
           Val9: TPair< TStr,TInt > const & value

        """
        return _snap.TStrIntPrV_GetV(*args)

    GetV = staticmethod(GetV)
TStrIntPrV.Load = new_instancemethod(_snap.TStrIntPrV_Load,None,TStrIntPrV)
TStrIntPrV.Save = new_instancemethod(_snap.TStrIntPrV_Save,None,TStrIntPrV)
TStrIntPrV.__add__ = new_instancemethod(_snap.TStrIntPrV___add__,None,TStrIntPrV)
TStrIntPrV.__eq__ = new_instancemethod(_snap.TStrIntPrV___eq__,None,TStrIntPrV)
TStrIntPrV.__lt__ = new_instancemethod(_snap.TStrIntPrV___lt__,None,TStrIntPrV)
TStrIntPrV.GetMemUsed = new_instancemethod(_snap.TStrIntPrV_GetMemUsed,None,TStrIntPrV)
TStrIntPrV.GetMemSize = new_instancemethod(_snap.TStrIntPrV_GetMemSize,None,TStrIntPrV)
TStrIntPrV.GetPrimHashCd = new_instancemethod(_snap.TStrIntPrV_GetPrimHashCd,None,TStrIntPrV)
TStrIntPrV.GetSecHashCd = new_instancemethod(_snap.TStrIntPrV_GetSecHashCd,None,TStrIntPrV)
TStrIntPrV.Gen = new_instancemethod(_snap.TStrIntPrV_Gen,None,TStrIntPrV)
TStrIntPrV.GenExt = new_instancemethod(_snap.TStrIntPrV_GenExt,None,TStrIntPrV)
TStrIntPrV.IsExt = new_instancemethod(_snap.TStrIntPrV_IsExt,None,TStrIntPrV)
TStrIntPrV.Reserve = new_instancemethod(_snap.TStrIntPrV_Reserve,None,TStrIntPrV)
TStrIntPrV.Clr = new_instancemethod(_snap.TStrIntPrV_Clr,None,TStrIntPrV)
TStrIntPrV.Trunc = new_instancemethod(_snap.TStrIntPrV_Trunc,None,TStrIntPrV)
TStrIntPrV.Reduce = new_instancemethod(_snap.TStrIntPrV_Reduce,None,TStrIntPrV)
TStrIntPrV.Pack = new_instancemethod(_snap.TStrIntPrV_Pack,None,TStrIntPrV)
TStrIntPrV.MoveFrom = new_instancemethod(_snap.TStrIntPrV_MoveFrom,None,TStrIntPrV)
TStrIntPrV.CopyUniqueFrom = new_instancemethod(_snap.TStrIntPrV_CopyUniqueFrom,None,TStrIntPrV)
TStrIntPrV.Empty = new_instancemethod(_snap.TStrIntPrV_Empty,None,TStrIntPrV)
TStrIntPrV.Len = new_instancemethod(_snap.TStrIntPrV_Len,None,TStrIntPrV)
TStrIntPrV.Reserved = new_instancemethod(_snap.TStrIntPrV_Reserved,None,TStrIntPrV)
TStrIntPrV.Last = new_instancemethod(_snap.TStrIntPrV_Last,None,TStrIntPrV)
TStrIntPrV.LastValN = new_instancemethod(_snap.TStrIntPrV_LastValN,None,TStrIntPrV)
TStrIntPrV.LastLast = new_instancemethod(_snap.TStrIntPrV_LastLast,None,TStrIntPrV)
TStrIntPrV.GetRndVal = new_instancemethod(_snap.TStrIntPrV_GetRndVal,None,TStrIntPrV)
TStrIntPrV.BegI = new_instancemethod(_snap.TStrIntPrV_BegI,None,TStrIntPrV)
TStrIntPrV.EndI = new_instancemethod(_snap.TStrIntPrV_EndI,None,TStrIntPrV)
TStrIntPrV.GetI = new_instancemethod(_snap.TStrIntPrV_GetI,None,TStrIntPrV)
TStrIntPrV.AddAtm = new_instancemethod(_snap.TStrIntPrV_AddAtm,None,TStrIntPrV)
TStrIntPrV.Add = new_instancemethod(_snap.TStrIntPrV_Add,None,TStrIntPrV)
TStrIntPrV.AddMP = new_instancemethod(_snap.TStrIntPrV_AddMP,None,TStrIntPrV)
TStrIntPrV.AddV = new_instancemethod(_snap.TStrIntPrV_AddV,None,TStrIntPrV)
TStrIntPrV.AddSorted = new_instancemethod(_snap.TStrIntPrV_AddSorted,None,TStrIntPrV)
TStrIntPrV.AddBackSorted = new_instancemethod(_snap.TStrIntPrV_AddBackSorted,None,TStrIntPrV)
TStrIntPrV.AddMerged = new_instancemethod(_snap.TStrIntPrV_AddMerged,None,TStrIntPrV)
TStrIntPrV.AddVMerged = new_instancemethod(_snap.TStrIntPrV_AddVMerged,None,TStrIntPrV)
TStrIntPrV.AddUnique = new_instancemethod(_snap.TStrIntPrV_AddUnique,None,TStrIntPrV)
TStrIntPrV.GetVal = new_instancemethod(_snap.TStrIntPrV_GetVal,None,TStrIntPrV)
TStrIntPrV.SetVal = new_instancemethod(_snap.TStrIntPrV_SetVal,None,TStrIntPrV)
TStrIntPrV.GetSubValV = new_instancemethod(_snap.TStrIntPrV_GetSubValV,None,TStrIntPrV)
TStrIntPrV.Ins = new_instancemethod(_snap.TStrIntPrV_Ins,None,TStrIntPrV)
TStrIntPrV.Del = new_instancemethod(_snap.TStrIntPrV_Del,None,TStrIntPrV)
TStrIntPrV.DelLast = new_instancemethod(_snap.TStrIntPrV_DelLast,None,TStrIntPrV)
TStrIntPrV.DelIfIn = new_instancemethod(_snap.TStrIntPrV_DelIfIn,None,TStrIntPrV)
TStrIntPrV.DelAll = new_instancemethod(_snap.TStrIntPrV_DelAll,None,TStrIntPrV)
TStrIntPrV.PutAll = new_instancemethod(_snap.TStrIntPrV_PutAll,None,TStrIntPrV)
TStrIntPrV.Swap = new_instancemethod(_snap.TStrIntPrV_Swap,None,TStrIntPrV)
TStrIntPrV.NextPerm = new_instancemethod(_snap.TStrIntPrV_NextPerm,None,TStrIntPrV)
TStrIntPrV.PrevPerm = new_instancemethod(_snap.TStrIntPrV_PrevPerm,None,TStrIntPrV)
TStrIntPrV.GetPivotValN = new_instancemethod(_snap.TStrIntPrV_GetPivotValN,None,TStrIntPrV)
TStrIntPrV.BSort = new_instancemethod(_snap.TStrIntPrV_BSort,None,TStrIntPrV)
TStrIntPrV.ISort = new_instancemethod(_snap.TStrIntPrV_ISort,None,TStrIntPrV)
TStrIntPrV.Partition = new_instancemethod(_snap.TStrIntPrV_Partition,None,TStrIntPrV)
TStrIntPrV.QSort = new_instancemethod(_snap.TStrIntPrV_QSort,None,TStrIntPrV)
TStrIntPrV.Sort = new_instancemethod(_snap.TStrIntPrV_Sort,None,TStrIntPrV)
TStrIntPrV.IsSorted = new_instancemethod(_snap.TStrIntPrV_IsSorted,None,TStrIntPrV)
TStrIntPrV.Shuffle = new_instancemethod(_snap.TStrIntPrV_Shuffle,None,TStrIntPrV)
TStrIntPrV.Reverse = new_instancemethod(_snap.TStrIntPrV_Reverse,None,TStrIntPrV)
TStrIntPrV.Merge = new_instancemethod(_snap.TStrIntPrV_Merge,None,TStrIntPrV)
TStrIntPrV.Intrs = new_instancemethod(_snap.TStrIntPrV_Intrs,None,TStrIntPrV)
TStrIntPrV.Union = new_instancemethod(_snap.TStrIntPrV_Union,None,TStrIntPrV)
TStrIntPrV.Diff = new_instancemethod(_snap.TStrIntPrV_Diff,None,TStrIntPrV)
TStrIntPrV.IntrsLen = new_instancemethod(_snap.TStrIntPrV_IntrsLen,None,TStrIntPrV)
TStrIntPrV.UnionLen = new_instancemethod(_snap.TStrIntPrV_UnionLen,None,TStrIntPrV)
TStrIntPrV.Count = new_instancemethod(_snap.TStrIntPrV_Count,None,TStrIntPrV)
TStrIntPrV.SearchBin = new_instancemethod(_snap.TStrIntPrV_SearchBin,None,TStrIntPrV)
TStrIntPrV.SearchBinLeft = new_instancemethod(_snap.TStrIntPrV_SearchBinLeft,None,TStrIntPrV)
TStrIntPrV.SearchForw = new_instancemethod(_snap.TStrIntPrV_SearchForw,None,TStrIntPrV)
TStrIntPrV.SearchBack = new_instancemethod(_snap.TStrIntPrV_SearchBack,None,TStrIntPrV)
TStrIntPrV.SearchVForw = new_instancemethod(_snap.TStrIntPrV_SearchVForw,None,TStrIntPrV)
TStrIntPrV.IsIn = new_instancemethod(_snap.TStrIntPrV_IsIn,None,TStrIntPrV)
TStrIntPrV.IsInBin = new_instancemethod(_snap.TStrIntPrV_IsInBin,None,TStrIntPrV)
TStrIntPrV.GetDat = new_instancemethod(_snap.TStrIntPrV_GetDat,None,TStrIntPrV)
TStrIntPrV.GetAddDat = new_instancemethod(_snap.TStrIntPrV_GetAddDat,None,TStrIntPrV)
TStrIntPrV.GetMxValN = new_instancemethod(_snap.TStrIntPrV_GetMxValN,None,TStrIntPrV)
TStrIntPrV_swigregister = _snap.TStrIntPrV_swigregister
TStrIntPrV_swigregister(TStrIntPrV)

def TStrIntPrV_SwapI(*args):
  """
    TStrIntPrV_SwapI(TVec<(TPair<(TStr,TInt)>)>::TIter LVal, TVec<(TPair<(TStr,TInt)>)>::TIter RVal)
    Parameters:
       LVal: TVec< TPair< TStr,TInt > >::TIter value
       RVal: TVec< TPair< TStr,TInt > >::TIter value

       LVal: TVec< TPair< TStr,TInt > >::TIter value
       RVal: TVec< TPair< TStr,TInt > >::TIter value

    """
  return _snap.TStrIntPrV_SwapI(*args)

def TStrIntPrV_GetV(*args):
  """
    GetV(TStrIntPr Val1) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value

    GetV(TStrIntPr Val1, TStrIntPr Val2) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
        TStrIntPr Val5) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
        TStrIntPr Val5, TStrIntPr Val6) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
        TStrIntPr Val5, TStrIntPr Val6, 
        TStrIntPr Val7) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value
       Val7: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value
       Val7: TPair< TStr,TInt > const & value

    GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
        TStrIntPr Val5, TStrIntPr Val6, 
        TStrIntPr Val7, TStrIntPr Val8) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value
       Val7: TPair< TStr,TInt > const & value
       Val8: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value
       Val7: TPair< TStr,TInt > const & value
       Val8: TPair< TStr,TInt > const & value

    TStrIntPrV_GetV(TStrIntPr Val1, TStrIntPr Val2, TStrIntPr Val3, TStrIntPr Val4, 
        TStrIntPr Val5, TStrIntPr Val6, 
        TStrIntPr Val7, TStrIntPr Val8, TStrIntPr Val9) -> TStrIntPrV
    Parameters:
       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value
       Val7: TPair< TStr,TInt > const & value
       Val8: TPair< TStr,TInt > const & value
       Val9: TPair< TStr,TInt > const & value

       Val1: TPair< TStr,TInt > const & value
       Val2: TPair< TStr,TInt > const & value
       Val3: TPair< TStr,TInt > const & value
       Val4: TPair< TStr,TInt > const & value
       Val5: TPair< TStr,TInt > const & value
       Val6: TPair< TStr,TInt > const & value
       Val7: TPair< TStr,TInt > const & value
       Val8: TPair< TStr,TInt > const & value
       Val9: TPair< TStr,TInt > const & value

    """
  return _snap.TStrIntPrV_GetV(*args)

class TIntTrV(object):
    """Proxy of C++ TVec<(TIntTr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntTrV
    def __init__(self, *args): 
        """
        __init__(self) -> TIntTrV
        __init__(self, TIntTrV Vec) -> TIntTrV
        Parameters:
           Vec: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           Vec: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        __init__(self, int _Vals) -> TIntTrV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TIntTrV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TIntTr _ValT, int _Vals) -> TIntTrV
        Parameters:
           _ValT: TTriple< TInt,TInt,TInt > * value
           _Vals: int const & value

           _ValT: TTriple< TInt,TInt,TInt > * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TIntTrV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntTrV_swiginit(self,_snap.new_TIntTrV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TIntTr > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntTrV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TIntTr > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntTrV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TIntTr Val) -> TIntTrV
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntTrV Vec) -> bool
        Parameters:
           self: TVec< TIntTr > const * value
           Vec: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           Vec: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        """
        return _snap.TIntTrV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntTrV Vec) -> bool
        Parameters:
           self: TVec< TIntTr > const * value
           Vec: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           Vec: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        """
        return _snap.TIntTrV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TIntTr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntTrV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TIntTr _ValT, int _Vals)
        Parameters:
           self: TVec< TIntTr > * value
           _ValT: TTriple< TInt,TInt,TInt > * value
           _Vals: int const & value

           _ValT: TTriple< TInt,TInt,TInt > * value
           _Vals: int const & value

        """
        return _snap.TIntTrV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TIntTr > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntTrV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TIntTr > * value


        """
        return _snap.TIntTrV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TIntTr > * value


        """
        return _snap.TIntTrV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TIntTr > * value


        """
        return _snap.TIntTrV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TIntTr > * value




        """
        return _snap.TIntTrV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TIntTrV Vec)
        Parameters:
           self: TVec< TIntTr > * value
           Vec: TVec< TTriple< TInt,TInt,TInt >,int > & value

           Vec: TVec< TTriple< TInt,TInt,TInt >,int > & value

        """
        return _snap.TIntTrV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TIntTrV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TIntTr > * value
           Vec: TVec< TTriple< TInt,TInt,TInt >,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TTriple< TInt,TInt,TInt >,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TIntTrV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TIntTr
        Last(self) -> TIntTr
        Parameters:
           self: TVec< TIntTr > * value


        """
        return _snap.TIntTrV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TIntTr
        LastLast(self) -> TIntTr
        Parameters:
           self: TVec< TIntTr > * value


        """
        return _snap.TIntTrV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntTr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntTr
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntTr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntTr
        Parameters:
           self: TVec< TIntTr > * value


        """
        return _snap.TIntTrV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TVec<(TTriple<(TInt,TInt,TInt)>)>::TIter
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TVec<(TTriple<(TInt,TInt,TInt)>)>::TIter
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TVec<(TTriple<(TInt,TInt,TInt)>)>::TIter
        Parameters:
           self: TVec< TIntTr > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntTrV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TIntTr Val) -> int
        Parameters:
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        Add(self, TIntTr Val) -> int
        Parameters:
           Val: TTriple< TInt,TInt,TInt > & value

           Val: TTriple< TInt,TInt,TInt > & value

        Add(self, TIntTr Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value
           ResizeLen: int const & value

           Val: TTriple< TInt,TInt,TInt > const & value
           ResizeLen: int const & value

        """
        return _snap.TIntTrV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TIntTrV ValV) -> int
        Parameters:
           self: TVec< TIntTr > * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        """
        return _snap.TIntTrV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TIntTr Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TTriple< TInt,TInt,TInt > const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TTriple< TInt,TInt,TInt > const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TIntTr Val, bool Asc = True) -> int
        Parameters:
           Val: TTriple< TInt,TInt,TInt > const & value
           Asc: bool const & value

           Val: TTriple< TInt,TInt,TInt > const & value
           Asc: bool const & value

        AddSorted(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TIntTr Val, bool Asc) -> int
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value
           Asc: bool const & value

           Val: TTriple< TInt,TInt,TInt > const & value
           Asc: bool const & value

        """
        return _snap.TIntTrV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TIntTrV ValV) -> int
        Parameters:
           self: TVec< TIntTr > * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        """
        return _snap.TIntTrV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TIntTr
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TIntTr
        Parameters:
           self: TVec< TIntTr > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntTrV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TIntTr Val)
        Parameters:
           self: TVec< TIntTr > * value
           ValN: int const & value
           Val: TTriple< TInt,TInt,TInt > const & value

           ValN: int const & value
           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TIntTrV ValV)
        Parameters:
           self: TVec< TIntTr > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

        """
        return _snap.TIntTrV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TIntTr Val)
        Parameters:
           self: TVec< TIntTr > * value
           ValN: int const & value
           Val: TTriple< TInt,TInt,TInt > const & value

           ValN: int const & value
           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TIntTr > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TIntTrV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TIntTr > * value




        """
        return _snap.TIntTrV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TIntTr Val) -> bool
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TIntTr Val)
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TIntTr Val)
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntTrV Vec)
        Parameters:
           Vec: TVec< TTriple< TInt,TInt,TInt >,int > & value

           Vec: TVec< TTriple< TInt,TInt,TInt >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TIntTr > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TIntTrV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TVec<(TTriple<(TInt,TInt,TInt)>)>::TIter LVal, TVec<(TTriple<(TInt,TInt,TInt)>)>::TIter RVal)
        Parameters:
           LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value
           RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value

           LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value
           RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value

           LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value
           RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value

        """
        return _snap.TIntTrV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TIntTr > * value




        """
        return _snap.TIntTrV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TIntTr > * value




        """
        return _snap.TIntTrV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TIntTrV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntTr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntTrV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntTr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntTrV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TIntTr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntTrV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntTr > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntTrV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TIntTr > * value


        """
        return _snap.TIntTrV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TIntTr > const * value


        """
        return _snap.TIntTrV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TIntTr > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TIntTrV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TIntTr > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TIntTrV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TIntTr > * value




        """
        return _snap.TIntTrV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TIntTrV ValV)
        Parameters:
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        Intrs(self, TIntTrV ValV, TIntTrV DstValV)
        Parameters:
           self: TVec< TIntTr > const * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           DstValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           DstValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

        """
        return _snap.TIntTrV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TIntTrV ValV)
        Parameters:
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        Union(self, TIntTrV ValV, TIntTrV DstValV)
        Parameters:
           self: TVec< TIntTr > const * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           DstValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           DstValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

        """
        return _snap.TIntTrV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TIntTrV ValV)
        Parameters:
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        Diff(self, TIntTrV ValV, TIntTrV DstValV)
        Parameters:
           self: TVec< TIntTr > const * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           DstValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           DstValV: TVec< TTriple< TInt,TInt,TInt >,int > & value

        """
        return _snap.TIntTrV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TIntTrV ValV) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        """
        return _snap.TIntTrV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TIntTrV ValV) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        """
        return _snap.TIntTrV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TIntTr Val) -> int
        Parameters:
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        SearchBin(self, TIntTr Val, int InsValN) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value
           InsValN: int & value

           Val: TTriple< TInt,TInt,TInt > const & value
           InsValN: int & value

        """
        return _snap.TIntTrV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TIntTr Val, int InsValN) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value
           InsValN: int & value

           Val: TTriple< TInt,TInt,TInt > const & value
           InsValN: int & value

        """
        return _snap.TIntTrV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TIntTr Val, int BValN = 0) -> int
        Parameters:
           Val: TTriple< TInt,TInt,TInt > const & value
           BValN: int const & value

           Val: TTriple< TInt,TInt,TInt > const & value
           BValN: int const & value

        SearchForw(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TIntTr Val) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TIntTrV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           BValN: int const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value
           BValN: int const & value

        SearchVForw(self, TIntTrV ValV) -> int
        Parameters:
           self: TVec< TIntTr > const * value
           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

           ValV: TVec< TTriple< TInt,TInt,TInt >,int > const & value

        """
        return _snap.TIntTrV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TIntTr Val) -> bool
        Parameters:
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        IsIn(self, TIntTr Val, int ValN) -> bool
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value
           ValN: int & value

           Val: TTriple< TInt,TInt,TInt > const & value
           ValN: int & value

        """
        return _snap.TIntTrV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TIntTr Val) -> bool
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TIntTr Val) -> TIntTr
        Parameters:
           self: TVec< TIntTr > const * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TIntTr Val) -> TIntTr
        Parameters:
           self: TVec< TIntTr > * value
           Val: TTriple< TInt,TInt,TInt > const & value

           Val: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TIntTr > const * value




        """
        return _snap.TIntTrV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntTr Val1) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
            TIntTr Val5) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
            TIntTr Val5, TIntTr Val6) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
            TIntTr Val5, TIntTr Val6, TIntTr Val7) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
            TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value
           Val8: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value
           Val8: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value
           Val8: TTriple< TInt,TInt,TInt > const & value

        GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
            TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8, 
            TIntTr Val9) -> TIntTrV
        Parameters:
           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value
           Val8: TTriple< TInt,TInt,TInt > const & value
           Val9: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value
           Val8: TTriple< TInt,TInt,TInt > const & value
           Val9: TTriple< TInt,TInt,TInt > const & value

           Val1: TTriple< TInt,TInt,TInt > const & value
           Val2: TTriple< TInt,TInt,TInt > const & value
           Val3: TTriple< TInt,TInt,TInt > const & value
           Val4: TTriple< TInt,TInt,TInt > const & value
           Val5: TTriple< TInt,TInt,TInt > const & value
           Val6: TTriple< TInt,TInt,TInt > const & value
           Val7: TTriple< TInt,TInt,TInt > const & value
           Val8: TTriple< TInt,TInt,TInt > const & value
           Val9: TTriple< TInt,TInt,TInt > const & value

        """
        return _snap.TIntTrV_GetV(*args)

    GetV = staticmethod(GetV)
TIntTrV.Load = new_instancemethod(_snap.TIntTrV_Load,None,TIntTrV)
TIntTrV.Save = new_instancemethod(_snap.TIntTrV_Save,None,TIntTrV)
TIntTrV.__add__ = new_instancemethod(_snap.TIntTrV___add__,None,TIntTrV)
TIntTrV.__eq__ = new_instancemethod(_snap.TIntTrV___eq__,None,TIntTrV)
TIntTrV.__lt__ = new_instancemethod(_snap.TIntTrV___lt__,None,TIntTrV)
TIntTrV.GetMemUsed = new_instancemethod(_snap.TIntTrV_GetMemUsed,None,TIntTrV)
TIntTrV.GetMemSize = new_instancemethod(_snap.TIntTrV_GetMemSize,None,TIntTrV)
TIntTrV.GetPrimHashCd = new_instancemethod(_snap.TIntTrV_GetPrimHashCd,None,TIntTrV)
TIntTrV.GetSecHashCd = new_instancemethod(_snap.TIntTrV_GetSecHashCd,None,TIntTrV)
TIntTrV.Gen = new_instancemethod(_snap.TIntTrV_Gen,None,TIntTrV)
TIntTrV.GenExt = new_instancemethod(_snap.TIntTrV_GenExt,None,TIntTrV)
TIntTrV.IsExt = new_instancemethod(_snap.TIntTrV_IsExt,None,TIntTrV)
TIntTrV.Reserve = new_instancemethod(_snap.TIntTrV_Reserve,None,TIntTrV)
TIntTrV.Clr = new_instancemethod(_snap.TIntTrV_Clr,None,TIntTrV)
TIntTrV.Trunc = new_instancemethod(_snap.TIntTrV_Trunc,None,TIntTrV)
TIntTrV.Reduce = new_instancemethod(_snap.TIntTrV_Reduce,None,TIntTrV)
TIntTrV.Pack = new_instancemethod(_snap.TIntTrV_Pack,None,TIntTrV)
TIntTrV.MoveFrom = new_instancemethod(_snap.TIntTrV_MoveFrom,None,TIntTrV)
TIntTrV.CopyUniqueFrom = new_instancemethod(_snap.TIntTrV_CopyUniqueFrom,None,TIntTrV)
TIntTrV.Empty = new_instancemethod(_snap.TIntTrV_Empty,None,TIntTrV)
TIntTrV.Len = new_instancemethod(_snap.TIntTrV_Len,None,TIntTrV)
TIntTrV.Reserved = new_instancemethod(_snap.TIntTrV_Reserved,None,TIntTrV)
TIntTrV.Last = new_instancemethod(_snap.TIntTrV_Last,None,TIntTrV)
TIntTrV.LastValN = new_instancemethod(_snap.TIntTrV_LastValN,None,TIntTrV)
TIntTrV.LastLast = new_instancemethod(_snap.TIntTrV_LastLast,None,TIntTrV)
TIntTrV.GetRndVal = new_instancemethod(_snap.TIntTrV_GetRndVal,None,TIntTrV)
TIntTrV.BegI = new_instancemethod(_snap.TIntTrV_BegI,None,TIntTrV)
TIntTrV.EndI = new_instancemethod(_snap.TIntTrV_EndI,None,TIntTrV)
TIntTrV.GetI = new_instancemethod(_snap.TIntTrV_GetI,None,TIntTrV)
TIntTrV.AddAtm = new_instancemethod(_snap.TIntTrV_AddAtm,None,TIntTrV)
TIntTrV.Add = new_instancemethod(_snap.TIntTrV_Add,None,TIntTrV)
TIntTrV.AddMP = new_instancemethod(_snap.TIntTrV_AddMP,None,TIntTrV)
TIntTrV.AddV = new_instancemethod(_snap.TIntTrV_AddV,None,TIntTrV)
TIntTrV.AddSorted = new_instancemethod(_snap.TIntTrV_AddSorted,None,TIntTrV)
TIntTrV.AddBackSorted = new_instancemethod(_snap.TIntTrV_AddBackSorted,None,TIntTrV)
TIntTrV.AddMerged = new_instancemethod(_snap.TIntTrV_AddMerged,None,TIntTrV)
TIntTrV.AddVMerged = new_instancemethod(_snap.TIntTrV_AddVMerged,None,TIntTrV)
TIntTrV.AddUnique = new_instancemethod(_snap.TIntTrV_AddUnique,None,TIntTrV)
TIntTrV.GetVal = new_instancemethod(_snap.TIntTrV_GetVal,None,TIntTrV)
TIntTrV.SetVal = new_instancemethod(_snap.TIntTrV_SetVal,None,TIntTrV)
TIntTrV.GetSubValV = new_instancemethod(_snap.TIntTrV_GetSubValV,None,TIntTrV)
TIntTrV.Ins = new_instancemethod(_snap.TIntTrV_Ins,None,TIntTrV)
TIntTrV.Del = new_instancemethod(_snap.TIntTrV_Del,None,TIntTrV)
TIntTrV.DelLast = new_instancemethod(_snap.TIntTrV_DelLast,None,TIntTrV)
TIntTrV.DelIfIn = new_instancemethod(_snap.TIntTrV_DelIfIn,None,TIntTrV)
TIntTrV.DelAll = new_instancemethod(_snap.TIntTrV_DelAll,None,TIntTrV)
TIntTrV.PutAll = new_instancemethod(_snap.TIntTrV_PutAll,None,TIntTrV)
TIntTrV.Swap = new_instancemethod(_snap.TIntTrV_Swap,None,TIntTrV)
TIntTrV.NextPerm = new_instancemethod(_snap.TIntTrV_NextPerm,None,TIntTrV)
TIntTrV.PrevPerm = new_instancemethod(_snap.TIntTrV_PrevPerm,None,TIntTrV)
TIntTrV.GetPivotValN = new_instancemethod(_snap.TIntTrV_GetPivotValN,None,TIntTrV)
TIntTrV.BSort = new_instancemethod(_snap.TIntTrV_BSort,None,TIntTrV)
TIntTrV.ISort = new_instancemethod(_snap.TIntTrV_ISort,None,TIntTrV)
TIntTrV.Partition = new_instancemethod(_snap.TIntTrV_Partition,None,TIntTrV)
TIntTrV.QSort = new_instancemethod(_snap.TIntTrV_QSort,None,TIntTrV)
TIntTrV.Sort = new_instancemethod(_snap.TIntTrV_Sort,None,TIntTrV)
TIntTrV.IsSorted = new_instancemethod(_snap.TIntTrV_IsSorted,None,TIntTrV)
TIntTrV.Shuffle = new_instancemethod(_snap.TIntTrV_Shuffle,None,TIntTrV)
TIntTrV.Reverse = new_instancemethod(_snap.TIntTrV_Reverse,None,TIntTrV)
TIntTrV.Merge = new_instancemethod(_snap.TIntTrV_Merge,None,TIntTrV)
TIntTrV.Intrs = new_instancemethod(_snap.TIntTrV_Intrs,None,TIntTrV)
TIntTrV.Union = new_instancemethod(_snap.TIntTrV_Union,None,TIntTrV)
TIntTrV.Diff = new_instancemethod(_snap.TIntTrV_Diff,None,TIntTrV)
TIntTrV.IntrsLen = new_instancemethod(_snap.TIntTrV_IntrsLen,None,TIntTrV)
TIntTrV.UnionLen = new_instancemethod(_snap.TIntTrV_UnionLen,None,TIntTrV)
TIntTrV.Count = new_instancemethod(_snap.TIntTrV_Count,None,TIntTrV)
TIntTrV.SearchBin = new_instancemethod(_snap.TIntTrV_SearchBin,None,TIntTrV)
TIntTrV.SearchBinLeft = new_instancemethod(_snap.TIntTrV_SearchBinLeft,None,TIntTrV)
TIntTrV.SearchForw = new_instancemethod(_snap.TIntTrV_SearchForw,None,TIntTrV)
TIntTrV.SearchBack = new_instancemethod(_snap.TIntTrV_SearchBack,None,TIntTrV)
TIntTrV.SearchVForw = new_instancemethod(_snap.TIntTrV_SearchVForw,None,TIntTrV)
TIntTrV.IsIn = new_instancemethod(_snap.TIntTrV_IsIn,None,TIntTrV)
TIntTrV.IsInBin = new_instancemethod(_snap.TIntTrV_IsInBin,None,TIntTrV)
TIntTrV.GetDat = new_instancemethod(_snap.TIntTrV_GetDat,None,TIntTrV)
TIntTrV.GetAddDat = new_instancemethod(_snap.TIntTrV_GetAddDat,None,TIntTrV)
TIntTrV.GetMxValN = new_instancemethod(_snap.TIntTrV_GetMxValN,None,TIntTrV)
TIntTrV_swigregister = _snap.TIntTrV_swigregister
TIntTrV_swigregister(TIntTrV)

def TIntTrV_SwapI(*args):
  """
    TIntTrV_SwapI(TVec<(TTriple<(TInt,TInt,TInt)>)>::TIter LVal, TVec<(TTriple<(TInt,TInt,TInt)>)>::TIter RVal)
    Parameters:
       LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value
       RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value

       LVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value
       RVal: TVec< TTriple< TInt,TInt,TInt > >::TIter value

    """
  return _snap.TIntTrV_SwapI(*args)

def TIntTrV_GetV(*args):
  """
    GetV(TIntTr Val1) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value

    GetV(TIntTr Val1, TIntTr Val2) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
        TIntTr Val5) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
        TIntTr Val5, TIntTr Val6) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
        TIntTr Val5, TIntTr Val6, TIntTr Val7) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value
       Val7: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value
       Val7: TTriple< TInt,TInt,TInt > const & value

    GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
        TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value
       Val7: TTriple< TInt,TInt,TInt > const & value
       Val8: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value
       Val7: TTriple< TInt,TInt,TInt > const & value
       Val8: TTriple< TInt,TInt,TInt > const & value

    TIntTrV_GetV(TIntTr Val1, TIntTr Val2, TIntTr Val3, TIntTr Val4, 
        TIntTr Val5, TIntTr Val6, TIntTr Val7, TIntTr Val8, 
        TIntTr Val9) -> TIntTrV
    Parameters:
       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value
       Val7: TTriple< TInt,TInt,TInt > const & value
       Val8: TTriple< TInt,TInt,TInt > const & value
       Val9: TTriple< TInt,TInt,TInt > const & value

       Val1: TTriple< TInt,TInt,TInt > const & value
       Val2: TTriple< TInt,TInt,TInt > const & value
       Val3: TTriple< TInt,TInt,TInt > const & value
       Val4: TTriple< TInt,TInt,TInt > const & value
       Val5: TTriple< TInt,TInt,TInt > const & value
       Val6: TTriple< TInt,TInt,TInt > const & value
       Val7: TTriple< TInt,TInt,TInt > const & value
       Val8: TTriple< TInt,TInt,TInt > const & value
       Val9: TTriple< TInt,TInt,TInt > const & value

    """
  return _snap.TIntTrV_GetV(*args)

class TIntFltKdV(object):
    """Proxy of C++ TVec<(TIntFltKd)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntFltKdV
    def __init__(self, *args): 
        """
        __init__(self) -> TIntFltKdV
        __init__(self, TIntFltKdV Vec) -> TIntFltKdV
        Parameters:
           Vec: TVec< TKeyDat< TInt,TFlt >,int > const & value

           Vec: TVec< TKeyDat< TInt,TFlt >,int > const & value

        __init__(self, int _Vals) -> TIntFltKdV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TIntFltKdV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TIntFltKd _ValT, int _Vals) -> TIntFltKdV
        Parameters:
           _ValT: TKeyDat< TInt,TFlt > * value
           _Vals: int const & value

           _ValT: TKeyDat< TInt,TFlt > * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TIntFltKdV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntFltKdV_swiginit(self,_snap.new_TIntFltKdV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TIntFltKd > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntFltKdV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TIntFltKd > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntFltKdV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TIntFltKd Val) -> TIntFltKdV
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntFltKdV Vec) -> bool
        Parameters:
           self: TVec< TIntFltKd > const * value
           Vec: TVec< TKeyDat< TInt,TFlt >,int > const & value

           Vec: TVec< TKeyDat< TInt,TFlt >,int > const & value

        """
        return _snap.TIntFltKdV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntFltKdV Vec) -> bool
        Parameters:
           self: TVec< TIntFltKd > const * value
           Vec: TVec< TKeyDat< TInt,TFlt >,int > const & value

           Vec: TVec< TKeyDat< TInt,TFlt >,int > const & value

        """
        return _snap.TIntFltKdV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TIntFltKd > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntFltKdV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TIntFltKd _ValT, int _Vals)
        Parameters:
           self: TVec< TIntFltKd > * value
           _ValT: TKeyDat< TInt,TFlt > * value
           _Vals: int const & value

           _ValT: TKeyDat< TInt,TFlt > * value
           _Vals: int const & value

        """
        return _snap.TIntFltKdV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TIntFltKd > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntFltKdV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TIntFltKd > * value


        """
        return _snap.TIntFltKdV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TIntFltKd > * value


        """
        return _snap.TIntFltKdV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TIntFltKd > * value


        """
        return _snap.TIntFltKdV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TIntFltKd > * value




        """
        return _snap.TIntFltKdV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TIntFltKdV Vec)
        Parameters:
           self: TVec< TIntFltKd > * value
           Vec: TVec< TKeyDat< TInt,TFlt >,int > & value

           Vec: TVec< TKeyDat< TInt,TFlt >,int > & value

        """
        return _snap.TIntFltKdV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TIntFltKdV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TIntFltKd > * value
           Vec: TVec< TKeyDat< TInt,TFlt >,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TKeyDat< TInt,TFlt >,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TIntFltKdV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TIntFltKd
        Last(self) -> TIntFltKd
        Parameters:
           self: TVec< TIntFltKd > * value


        """
        return _snap.TIntFltKdV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TIntFltKd
        LastLast(self) -> TIntFltKd
        Parameters:
           self: TVec< TIntFltKd > * value


        """
        return _snap.TIntFltKdV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntFltKd
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntFltKd
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntFltKd
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntFltKd
        Parameters:
           self: TVec< TIntFltKd > * value


        """
        return _snap.TIntFltKdV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TVec<(TKeyDat<(TInt,TFlt)>)>::TIter
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TVec<(TKeyDat<(TInt,TFlt)>)>::TIter
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TVec<(TKeyDat<(TInt,TFlt)>)>::TIter
        Parameters:
           self: TVec< TIntFltKd > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntFltKdV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TIntFltKd Val) -> int
        Parameters:
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        Add(self, TIntFltKd Val) -> int
        Parameters:
           Val: TKeyDat< TInt,TFlt > & value

           Val: TKeyDat< TInt,TFlt > & value

        Add(self, TIntFltKd Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value
           ResizeLen: int const & value

           Val: TKeyDat< TInt,TFlt > const & value
           ResizeLen: int const & value

        """
        return _snap.TIntFltKdV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TIntFltKdV ValV) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        """
        return _snap.TIntFltKdV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TIntFltKd Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TKeyDat< TInt,TFlt > const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TKeyDat< TInt,TFlt > const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TIntFltKd Val, bool Asc = True) -> int
        Parameters:
           Val: TKeyDat< TInt,TFlt > const & value
           Asc: bool const & value

           Val: TKeyDat< TInt,TFlt > const & value
           Asc: bool const & value

        AddSorted(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TIntFltKd Val, bool Asc) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value
           Asc: bool const & value

           Val: TKeyDat< TInt,TFlt > const & value
           Asc: bool const & value

        """
        return _snap.TIntFltKdV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TIntFltKdV ValV) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        """
        return _snap.TIntFltKdV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TIntFltKd
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TIntFltKd
        Parameters:
           self: TVec< TIntFltKd > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntFltKdV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TIntFltKd Val)
        Parameters:
           self: TVec< TIntFltKd > * value
           ValN: int const & value
           Val: TKeyDat< TInt,TFlt > const & value

           ValN: int const & value
           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TIntFltKdV ValV)
        Parameters:
           self: TVec< TIntFltKd > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > & value

        """
        return _snap.TIntFltKdV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TIntFltKd Val)
        Parameters:
           self: TVec< TIntFltKd > * value
           ValN: int const & value
           Val: TKeyDat< TInt,TFlt > const & value

           ValN: int const & value
           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TIntFltKd > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TIntFltKdV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TIntFltKd > * value




        """
        return _snap.TIntFltKdV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TIntFltKd Val) -> bool
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TIntFltKd Val)
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TIntFltKd Val)
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntFltKdV Vec)
        Parameters:
           Vec: TVec< TKeyDat< TInt,TFlt >,int > & value

           Vec: TVec< TKeyDat< TInt,TFlt >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TIntFltKd > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TIntFltKdV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TVec<(TKeyDat<(TInt,TFlt)>)>::TIter LVal, TVec<(TKeyDat<(TInt,TFlt)>)>::TIter RVal)
        Parameters:
           LVal: TVec< TKeyDat< TInt,TFlt > >::TIter value
           RVal: TVec< TKeyDat< TInt,TFlt > >::TIter value

           LVal: TVec< TKeyDat< TInt,TFlt > >::TIter value
           RVal: TVec< TKeyDat< TInt,TFlt > >::TIter value

           LVal: TVec< TKeyDat< TInt,TFlt > >::TIter value
           RVal: TVec< TKeyDat< TInt,TFlt > >::TIter value

        """
        return _snap.TIntFltKdV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TIntFltKd > * value




        """
        return _snap.TIntFltKdV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TIntFltKd > * value




        """
        return _snap.TIntFltKdV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TIntFltKdV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntFltKd > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntFltKdV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntFltKd > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntFltKdV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TIntFltKd > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntFltKdV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TIntFltKd > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntFltKdV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TIntFltKd > * value


        """
        return _snap.TIntFltKdV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TIntFltKd > const * value


        """
        return _snap.TIntFltKdV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TIntFltKd > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TIntFltKdV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TIntFltKd > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TIntFltKdV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TIntFltKd > * value




        """
        return _snap.TIntFltKdV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TIntFltKdV ValV)
        Parameters:
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        Intrs(self, TIntFltKdV ValV, TIntFltKdV DstValV)
        Parameters:
           self: TVec< TIntFltKd > const * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           DstValV: TVec< TKeyDat< TInt,TFlt >,int > & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           DstValV: TVec< TKeyDat< TInt,TFlt >,int > & value

        """
        return _snap.TIntFltKdV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TIntFltKdV ValV)
        Parameters:
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        Union(self, TIntFltKdV ValV, TIntFltKdV DstValV)
        Parameters:
           self: TVec< TIntFltKd > const * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           DstValV: TVec< TKeyDat< TInt,TFlt >,int > & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           DstValV: TVec< TKeyDat< TInt,TFlt >,int > & value

        """
        return _snap.TIntFltKdV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TIntFltKdV ValV)
        Parameters:
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        Diff(self, TIntFltKdV ValV, TIntFltKdV DstValV)
        Parameters:
           self: TVec< TIntFltKd > const * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           DstValV: TVec< TKeyDat< TInt,TFlt >,int > & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           DstValV: TVec< TKeyDat< TInt,TFlt >,int > & value

        """
        return _snap.TIntFltKdV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TIntFltKdV ValV) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        """
        return _snap.TIntFltKdV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TIntFltKdV ValV) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        """
        return _snap.TIntFltKdV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TIntFltKd Val) -> int
        Parameters:
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        SearchBin(self, TIntFltKd Val, int InsValN) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value
           InsValN: int & value

           Val: TKeyDat< TInt,TFlt > const & value
           InsValN: int & value

        """
        return _snap.TIntFltKdV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TIntFltKd Val, int InsValN) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value
           InsValN: int & value

           Val: TKeyDat< TInt,TFlt > const & value
           InsValN: int & value

        """
        return _snap.TIntFltKdV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TIntFltKd Val, int BValN = 0) -> int
        Parameters:
           Val: TKeyDat< TInt,TFlt > const & value
           BValN: int const & value

           Val: TKeyDat< TInt,TFlt > const & value
           BValN: int const & value

        SearchForw(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TIntFltKd Val) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TIntFltKdV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           BValN: int const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value
           BValN: int const & value

        SearchVForw(self, TIntFltKdV ValV) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value
           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

           ValV: TVec< TKeyDat< TInt,TFlt >,int > const & value

        """
        return _snap.TIntFltKdV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TIntFltKd Val) -> bool
        Parameters:
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        IsIn(self, TIntFltKd Val, int ValN) -> bool
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value
           ValN: int & value

           Val: TKeyDat< TInt,TFlt > const & value
           ValN: int & value

        """
        return _snap.TIntFltKdV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TIntFltKd Val) -> bool
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TIntFltKd Val) -> TIntFltKd
        Parameters:
           self: TVec< TIntFltKd > const * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TIntFltKd Val) -> TIntFltKd
        Parameters:
           self: TVec< TIntFltKd > * value
           Val: TKeyDat< TInt,TFlt > const & value

           Val: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TIntFltKd > const * value




        """
        return _snap.TIntFltKdV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntFltKd Val1) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
            TIntFltKd Val5) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
            TIntFltKd Val5, TIntFltKd Val6) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
            TIntFltKd Val5, TIntFltKd Val6, 
            TIntFltKd Val7) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
            TIntFltKd Val5, TIntFltKd Val6, 
            TIntFltKd Val7, TIntFltKd Val8) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value
           Val8: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value
           Val8: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value
           Val8: TKeyDat< TInt,TFlt > const & value

        GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
            TIntFltKd Val5, TIntFltKd Val6, 
            TIntFltKd Val7, TIntFltKd Val8, TIntFltKd Val9) -> TIntFltKdV
        Parameters:
           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value
           Val8: TKeyDat< TInt,TFlt > const & value
           Val9: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value
           Val8: TKeyDat< TInt,TFlt > const & value
           Val9: TKeyDat< TInt,TFlt > const & value

           Val1: TKeyDat< TInt,TFlt > const & value
           Val2: TKeyDat< TInt,TFlt > const & value
           Val3: TKeyDat< TInt,TFlt > const & value
           Val4: TKeyDat< TInt,TFlt > const & value
           Val5: TKeyDat< TInt,TFlt > const & value
           Val6: TKeyDat< TInt,TFlt > const & value
           Val7: TKeyDat< TInt,TFlt > const & value
           Val8: TKeyDat< TInt,TFlt > const & value
           Val9: TKeyDat< TInt,TFlt > const & value

        """
        return _snap.TIntFltKdV_GetV(*args)

    GetV = staticmethod(GetV)
TIntFltKdV.Load = new_instancemethod(_snap.TIntFltKdV_Load,None,TIntFltKdV)
TIntFltKdV.Save = new_instancemethod(_snap.TIntFltKdV_Save,None,TIntFltKdV)
TIntFltKdV.__add__ = new_instancemethod(_snap.TIntFltKdV___add__,None,TIntFltKdV)
TIntFltKdV.__eq__ = new_instancemethod(_snap.TIntFltKdV___eq__,None,TIntFltKdV)
TIntFltKdV.__lt__ = new_instancemethod(_snap.TIntFltKdV___lt__,None,TIntFltKdV)
TIntFltKdV.GetMemUsed = new_instancemethod(_snap.TIntFltKdV_GetMemUsed,None,TIntFltKdV)
TIntFltKdV.GetMemSize = new_instancemethod(_snap.TIntFltKdV_GetMemSize,None,TIntFltKdV)
TIntFltKdV.GetPrimHashCd = new_instancemethod(_snap.TIntFltKdV_GetPrimHashCd,None,TIntFltKdV)
TIntFltKdV.GetSecHashCd = new_instancemethod(_snap.TIntFltKdV_GetSecHashCd,None,TIntFltKdV)
TIntFltKdV.Gen = new_instancemethod(_snap.TIntFltKdV_Gen,None,TIntFltKdV)
TIntFltKdV.GenExt = new_instancemethod(_snap.TIntFltKdV_GenExt,None,TIntFltKdV)
TIntFltKdV.IsExt = new_instancemethod(_snap.TIntFltKdV_IsExt,None,TIntFltKdV)
TIntFltKdV.Reserve = new_instancemethod(_snap.TIntFltKdV_Reserve,None,TIntFltKdV)
TIntFltKdV.Clr = new_instancemethod(_snap.TIntFltKdV_Clr,None,TIntFltKdV)
TIntFltKdV.Trunc = new_instancemethod(_snap.TIntFltKdV_Trunc,None,TIntFltKdV)
TIntFltKdV.Reduce = new_instancemethod(_snap.TIntFltKdV_Reduce,None,TIntFltKdV)
TIntFltKdV.Pack = new_instancemethod(_snap.TIntFltKdV_Pack,None,TIntFltKdV)
TIntFltKdV.MoveFrom = new_instancemethod(_snap.TIntFltKdV_MoveFrom,None,TIntFltKdV)
TIntFltKdV.CopyUniqueFrom = new_instancemethod(_snap.TIntFltKdV_CopyUniqueFrom,None,TIntFltKdV)
TIntFltKdV.Empty = new_instancemethod(_snap.TIntFltKdV_Empty,None,TIntFltKdV)
TIntFltKdV.Len = new_instancemethod(_snap.TIntFltKdV_Len,None,TIntFltKdV)
TIntFltKdV.Reserved = new_instancemethod(_snap.TIntFltKdV_Reserved,None,TIntFltKdV)
TIntFltKdV.Last = new_instancemethod(_snap.TIntFltKdV_Last,None,TIntFltKdV)
TIntFltKdV.LastValN = new_instancemethod(_snap.TIntFltKdV_LastValN,None,TIntFltKdV)
TIntFltKdV.LastLast = new_instancemethod(_snap.TIntFltKdV_LastLast,None,TIntFltKdV)
TIntFltKdV.GetRndVal = new_instancemethod(_snap.TIntFltKdV_GetRndVal,None,TIntFltKdV)
TIntFltKdV.BegI = new_instancemethod(_snap.TIntFltKdV_BegI,None,TIntFltKdV)
TIntFltKdV.EndI = new_instancemethod(_snap.TIntFltKdV_EndI,None,TIntFltKdV)
TIntFltKdV.GetI = new_instancemethod(_snap.TIntFltKdV_GetI,None,TIntFltKdV)
TIntFltKdV.AddAtm = new_instancemethod(_snap.TIntFltKdV_AddAtm,None,TIntFltKdV)
TIntFltKdV.Add = new_instancemethod(_snap.TIntFltKdV_Add,None,TIntFltKdV)
TIntFltKdV.AddMP = new_instancemethod(_snap.TIntFltKdV_AddMP,None,TIntFltKdV)
TIntFltKdV.AddV = new_instancemethod(_snap.TIntFltKdV_AddV,None,TIntFltKdV)
TIntFltKdV.AddSorted = new_instancemethod(_snap.TIntFltKdV_AddSorted,None,TIntFltKdV)
TIntFltKdV.AddBackSorted = new_instancemethod(_snap.TIntFltKdV_AddBackSorted,None,TIntFltKdV)
TIntFltKdV.AddMerged = new_instancemethod(_snap.TIntFltKdV_AddMerged,None,TIntFltKdV)
TIntFltKdV.AddVMerged = new_instancemethod(_snap.TIntFltKdV_AddVMerged,None,TIntFltKdV)
TIntFltKdV.AddUnique = new_instancemethod(_snap.TIntFltKdV_AddUnique,None,TIntFltKdV)
TIntFltKdV.GetVal = new_instancemethod(_snap.TIntFltKdV_GetVal,None,TIntFltKdV)
TIntFltKdV.SetVal = new_instancemethod(_snap.TIntFltKdV_SetVal,None,TIntFltKdV)
TIntFltKdV.GetSubValV = new_instancemethod(_snap.TIntFltKdV_GetSubValV,None,TIntFltKdV)
TIntFltKdV.Ins = new_instancemethod(_snap.TIntFltKdV_Ins,None,TIntFltKdV)
TIntFltKdV.Del = new_instancemethod(_snap.TIntFltKdV_Del,None,TIntFltKdV)
TIntFltKdV.DelLast = new_instancemethod(_snap.TIntFltKdV_DelLast,None,TIntFltKdV)
TIntFltKdV.DelIfIn = new_instancemethod(_snap.TIntFltKdV_DelIfIn,None,TIntFltKdV)
TIntFltKdV.DelAll = new_instancemethod(_snap.TIntFltKdV_DelAll,None,TIntFltKdV)
TIntFltKdV.PutAll = new_instancemethod(_snap.TIntFltKdV_PutAll,None,TIntFltKdV)
TIntFltKdV.Swap = new_instancemethod(_snap.TIntFltKdV_Swap,None,TIntFltKdV)
TIntFltKdV.NextPerm = new_instancemethod(_snap.TIntFltKdV_NextPerm,None,TIntFltKdV)
TIntFltKdV.PrevPerm = new_instancemethod(_snap.TIntFltKdV_PrevPerm,None,TIntFltKdV)
TIntFltKdV.GetPivotValN = new_instancemethod(_snap.TIntFltKdV_GetPivotValN,None,TIntFltKdV)
TIntFltKdV.BSort = new_instancemethod(_snap.TIntFltKdV_BSort,None,TIntFltKdV)
TIntFltKdV.ISort = new_instancemethod(_snap.TIntFltKdV_ISort,None,TIntFltKdV)
TIntFltKdV.Partition = new_instancemethod(_snap.TIntFltKdV_Partition,None,TIntFltKdV)
TIntFltKdV.QSort = new_instancemethod(_snap.TIntFltKdV_QSort,None,TIntFltKdV)
TIntFltKdV.Sort = new_instancemethod(_snap.TIntFltKdV_Sort,None,TIntFltKdV)
TIntFltKdV.IsSorted = new_instancemethod(_snap.TIntFltKdV_IsSorted,None,TIntFltKdV)
TIntFltKdV.Shuffle = new_instancemethod(_snap.TIntFltKdV_Shuffle,None,TIntFltKdV)
TIntFltKdV.Reverse = new_instancemethod(_snap.TIntFltKdV_Reverse,None,TIntFltKdV)
TIntFltKdV.Merge = new_instancemethod(_snap.TIntFltKdV_Merge,None,TIntFltKdV)
TIntFltKdV.Intrs = new_instancemethod(_snap.TIntFltKdV_Intrs,None,TIntFltKdV)
TIntFltKdV.Union = new_instancemethod(_snap.TIntFltKdV_Union,None,TIntFltKdV)
TIntFltKdV.Diff = new_instancemethod(_snap.TIntFltKdV_Diff,None,TIntFltKdV)
TIntFltKdV.IntrsLen = new_instancemethod(_snap.TIntFltKdV_IntrsLen,None,TIntFltKdV)
TIntFltKdV.UnionLen = new_instancemethod(_snap.TIntFltKdV_UnionLen,None,TIntFltKdV)
TIntFltKdV.Count = new_instancemethod(_snap.TIntFltKdV_Count,None,TIntFltKdV)
TIntFltKdV.SearchBin = new_instancemethod(_snap.TIntFltKdV_SearchBin,None,TIntFltKdV)
TIntFltKdV.SearchBinLeft = new_instancemethod(_snap.TIntFltKdV_SearchBinLeft,None,TIntFltKdV)
TIntFltKdV.SearchForw = new_instancemethod(_snap.TIntFltKdV_SearchForw,None,TIntFltKdV)
TIntFltKdV.SearchBack = new_instancemethod(_snap.TIntFltKdV_SearchBack,None,TIntFltKdV)
TIntFltKdV.SearchVForw = new_instancemethod(_snap.TIntFltKdV_SearchVForw,None,TIntFltKdV)
TIntFltKdV.IsIn = new_instancemethod(_snap.TIntFltKdV_IsIn,None,TIntFltKdV)
TIntFltKdV.IsInBin = new_instancemethod(_snap.TIntFltKdV_IsInBin,None,TIntFltKdV)
TIntFltKdV.GetDat = new_instancemethod(_snap.TIntFltKdV_GetDat,None,TIntFltKdV)
TIntFltKdV.GetAddDat = new_instancemethod(_snap.TIntFltKdV_GetAddDat,None,TIntFltKdV)
TIntFltKdV.GetMxValN = new_instancemethod(_snap.TIntFltKdV_GetMxValN,None,TIntFltKdV)
TIntFltKdV_swigregister = _snap.TIntFltKdV_swigregister
TIntFltKdV_swigregister(TIntFltKdV)

def TIntFltKdV_SwapI(*args):
  """
    TIntFltKdV_SwapI(TVec<(TKeyDat<(TInt,TFlt)>)>::TIter LVal, TVec<(TKeyDat<(TInt,TFlt)>)>::TIter RVal)
    Parameters:
       LVal: TVec< TKeyDat< TInt,TFlt > >::TIter value
       RVal: TVec< TKeyDat< TInt,TFlt > >::TIter value

       LVal: TVec< TKeyDat< TInt,TFlt > >::TIter value
       RVal: TVec< TKeyDat< TInt,TFlt > >::TIter value

    """
  return _snap.TIntFltKdV_SwapI(*args)

def TIntFltKdV_GetV(*args):
  """
    GetV(TIntFltKd Val1) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value

    GetV(TIntFltKd Val1, TIntFltKd Val2) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
        TIntFltKd Val5) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
        TIntFltKd Val5, TIntFltKd Val6) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
        TIntFltKd Val5, TIntFltKd Val6, 
        TIntFltKd Val7) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value
       Val7: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value
       Val7: TKeyDat< TInt,TFlt > const & value

    GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
        TIntFltKd Val5, TIntFltKd Val6, 
        TIntFltKd Val7, TIntFltKd Val8) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value
       Val7: TKeyDat< TInt,TFlt > const & value
       Val8: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value
       Val7: TKeyDat< TInt,TFlt > const & value
       Val8: TKeyDat< TInt,TFlt > const & value

    TIntFltKdV_GetV(TIntFltKd Val1, TIntFltKd Val2, TIntFltKd Val3, TIntFltKd Val4, 
        TIntFltKd Val5, TIntFltKd Val6, 
        TIntFltKd Val7, TIntFltKd Val8, TIntFltKd Val9) -> TIntFltKdV
    Parameters:
       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value
       Val7: TKeyDat< TInt,TFlt > const & value
       Val8: TKeyDat< TInt,TFlt > const & value
       Val9: TKeyDat< TInt,TFlt > const & value

       Val1: TKeyDat< TInt,TFlt > const & value
       Val2: TKeyDat< TInt,TFlt > const & value
       Val3: TKeyDat< TInt,TFlt > const & value
       Val4: TKeyDat< TInt,TFlt > const & value
       Val5: TKeyDat< TInt,TFlt > const & value
       Val6: TKeyDat< TInt,TFlt > const & value
       Val7: TKeyDat< TInt,TFlt > const & value
       Val8: TKeyDat< TInt,TFlt > const & value
       Val9: TKeyDat< TInt,TFlt > const & value

    """
  return _snap.TIntFltKdV_GetV(*args)

class TIntStrPr(object):
    """Proxy of C++ TPair<(TInt,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TIntStrPr_Val1_get, _snap.TIntStrPr_Val1_set)
    Val2 = _swig_property(_snap.TIntStrPr_Val2_get, _snap.TIntStrPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TIntStrPr
        __init__(self, TIntStrPr Pair) -> TIntStrPr
        Parameters:
           Pair: TPair< TInt,TStr > const & value

           Pair: TPair< TInt,TStr > const & value

        __init__(self, TInt _Val1, TStr _Val2) -> TIntStrPr
        Parameters:
           _Val1: TInt const & value
           _Val2: TStr const & value

           _Val1: TInt const & value
           _Val2: TStr const & value

        __init__(self, TSIn SIn) -> TIntStrPr
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntStrPr_swiginit(self,_snap.new_TIntStrPr(*args))
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPair< TInt,TStr > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntStrPr_Save(self, *args)

    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TPair< TInt,TStr > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntStrPr_Load(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntStrPr Pair) -> bool
        Parameters:
           self: TPair< TInt,TStr > const * value
           Pair: TPair< TInt,TStr > const & value

           Pair: TPair< TInt,TStr > const & value

        """
        return _snap.TIntStrPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntStrPr Pair) -> bool
        Parameters:
           self: TPair< TInt,TStr > const * value
           Pair: TPair< TInt,TStr > const & value

           Pair: TPair< TInt,TStr > const & value

        """
        return _snap.TIntStrPr___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TPair< TInt,TStr > const * value




        """
        return _snap.TIntStrPr_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TPair< TInt,TStr > const * value




        """
        return _snap.TIntStrPr_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TPair< TInt,TStr > const * value




        """
        return _snap.TIntStrPr_GetSecHashCd(self)

    def GetVal(self, *args):
        """
        GetVal(self, TInt _Val1, TStr _Val2)
        Parameters:
           self: TPair< TInt,TStr > const * value
           _Val1: TInt & value
           _Val2: TStr & value

           _Val1: TInt & value
           _Val2: TStr & value

        """
        return _snap.TIntStrPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(self) -> TInt
        Parameters:
           self: TPair< TInt,TStr > const * value




        """
        return _snap.TIntStrPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(self) -> TStr
        Parameters:
           self: TPair< TInt,TStr > const * value




        """
        return _snap.TIntStrPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TIntStrPr
TIntStrPr.Save = new_instancemethod(_snap.TIntStrPr_Save,None,TIntStrPr)
TIntStrPr.Load = new_instancemethod(_snap.TIntStrPr_Load,None,TIntStrPr)
TIntStrPr.__eq__ = new_instancemethod(_snap.TIntStrPr___eq__,None,TIntStrPr)
TIntStrPr.__lt__ = new_instancemethod(_snap.TIntStrPr___lt__,None,TIntStrPr)
TIntStrPr.GetMemUsed = new_instancemethod(_snap.TIntStrPr_GetMemUsed,None,TIntStrPr)
TIntStrPr.GetPrimHashCd = new_instancemethod(_snap.TIntStrPr_GetPrimHashCd,None,TIntStrPr)
TIntStrPr.GetSecHashCd = new_instancemethod(_snap.TIntStrPr_GetSecHashCd,None,TIntStrPr)
TIntStrPr.GetVal = new_instancemethod(_snap.TIntStrPr_GetVal,None,TIntStrPr)
TIntStrPr.GetVal1 = new_instancemethod(_snap.TIntStrPr_GetVal1,None,TIntStrPr)
TIntStrPr.GetVal2 = new_instancemethod(_snap.TIntStrPr_GetVal2,None,TIntStrPr)
TIntStrPr_swigregister = _snap.TIntStrPr_swigregister
TIntStrPr_swigregister(TIntStrPr)

class TIntIntVV(object):
    """Proxy of C++ TVec<(TVec<(TInt)>,int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TIntIntVV
    def __init__(self, *args): 
        """
        __init__(self) -> TIntIntVV
        __init__(self, TIntIntVV Vec) -> TIntIntVV
        Parameters:
           Vec: TVec< TVec< TInt,int >,int > const & value

           Vec: TVec< TVec< TInt,int >,int > const & value

        __init__(self, int _Vals) -> TIntIntVV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TIntIntVV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TIntV _ValT, int _Vals) -> TIntIntVV
        Parameters:
           _ValT: TVec< TInt,int > * value
           _Vals: int const & value

           _ValT: TVec< TInt,int > * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TIntIntVV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntIntVV_swiginit(self,_snap.new_TIntIntVV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntIntVV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntIntVV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TIntV Val) -> TIntIntVV
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntIntVV Vec) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Vec: TVec< TVec< TInt,int >,int > const & value

           Vec: TVec< TVec< TInt,int >,int > const & value

        """
        return _snap.TIntIntVV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntIntVV Vec) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Vec: TVec< TVec< TInt,int >,int > const & value

           Vec: TVec< TVec< TInt,int >,int > const & value

        """
        return _snap.TIntIntVV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntIntVV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TIntV _ValT, int _Vals)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           _ValT: TVec< TInt,int > * value
           _Vals: int const & value

           _ValT: TVec< TInt,int > * value
           _Vals: int const & value

        """
        return _snap.TIntIntVV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TIntIntVV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TVec< TInt >,int > * value


        """
        return _snap.TIntIntVV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TVec< TInt >,int > * value


        """
        return _snap.TIntIntVV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TVec< TInt >,int > * value


        """
        return _snap.TIntIntVV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TVec< TInt >,int > * value




        """
        return _snap.TIntIntVV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TIntIntVV Vec)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Vec: TVec< TVec< TInt,int >,int > & value

           Vec: TVec< TVec< TInt,int >,int > & value

        """
        return _snap.TIntIntVV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TIntIntVV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Vec: TVec< TVec< TInt,int >,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TVec< TInt,int >,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TIntIntVV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TIntV
        Last(self) -> TIntV
        Parameters:
           self: TVec< TVec< TInt >,int > * value


        """
        return _snap.TIntIntVV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TIntV
        LastLast(self) -> TIntV
        Parameters:
           self: TVec< TVec< TInt >,int > * value


        """
        return _snap.TIntIntVV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntV
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntV
        GetRndVal(self, TRnd Rnd = Rnd) -> TIntV
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TIntV
        Parameters:
           self: TVec< TVec< TInt >,int > * value


        """
        return _snap.TIntIntVV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TIter
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntIntVV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TIntV Val) -> int
        Parameters:
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        Add(self, TIntV Val) -> int
        Parameters:
           Val: TVec< TInt,int > & value

           Val: TVec< TInt,int > & value

        Add(self, TIntV Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value
           ResizeLen: int const & value

           Val: TVec< TInt,int > const & value
           ResizeLen: int const & value

        """
        return _snap.TIntIntVV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TIntIntVV ValV) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        """
        return _snap.TIntIntVV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TIntV Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TVec< TInt,int > const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TVec< TInt,int > const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TIntV Val, bool Asc = True) -> int
        Parameters:
           Val: TVec< TInt,int > const & value
           Asc: bool const & value

           Val: TVec< TInt,int > const & value
           Asc: bool const & value

        AddSorted(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TIntV Val, bool Asc) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value
           Asc: bool const & value

           Val: TVec< TInt,int > const & value
           Asc: bool const & value

        """
        return _snap.TIntIntVV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TIntIntVV ValV) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        """
        return _snap.TIntIntVV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TIntV
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TIntV
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TIntIntVV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TIntV Val)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           ValN: int const & value
           Val: TVec< TInt,int > const & value

           ValN: int const & value
           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TIntIntVV ValV)
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TVec< TInt,int >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TVec< TInt,int >,int > & value

        """
        return _snap.TIntIntVV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TIntV Val)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           ValN: int const & value
           Val: TVec< TInt,int > const & value

           ValN: int const & value
           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TIntIntVV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TVec< TInt >,int > * value




        """
        return _snap.TIntIntVV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TIntV Val) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TIntV Val)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TIntV Val)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntIntVV Vec)
        Parameters:
           Vec: TVec< TVec< TInt,int >,int > & value

           Vec: TVec< TVec< TInt,int >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TIntIntVV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIter LVal, TIter RVal)
        Parameters:
           LVal: TVec< TVec< TInt >,int >::TIter value
           RVal: TVec< TVec< TInt >,int >::TIter value

           LVal: TVec< TVec< TInt >,int >::TIter value
           RVal: TVec< TVec< TInt >,int >::TIter value

           LVal: TVec< TVec< TInt >,int >::TIter value
           RVal: TVec< TVec< TInt >,int >::TIter value

        """
        return _snap.TIntIntVV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > * value




        """
        return _snap.TIntIntVV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > * value




        """
        return _snap.TIntIntVV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TIntIntVV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntIntVV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntIntVV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntIntVV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TIntIntVV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TVec< TInt >,int > * value


        """
        return _snap.TIntIntVV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > const * value


        """
        return _snap.TIntIntVV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TIntIntVV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TIntIntVV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TVec< TInt >,int > * value




        """
        return _snap.TIntIntVV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TIntIntVV ValV)
        Parameters:
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        Intrs(self, TIntIntVV ValV, TIntIntVV DstValV)
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           ValV: TVec< TVec< TInt,int >,int > const & value
           DstValV: TVec< TVec< TInt,int >,int > & value

           ValV: TVec< TVec< TInt,int >,int > const & value
           DstValV: TVec< TVec< TInt,int >,int > & value

        """
        return _snap.TIntIntVV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TIntIntVV ValV)
        Parameters:
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        Union(self, TIntIntVV ValV, TIntIntVV DstValV)
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           ValV: TVec< TVec< TInt,int >,int > const & value
           DstValV: TVec< TVec< TInt,int >,int > & value

           ValV: TVec< TVec< TInt,int >,int > const & value
           DstValV: TVec< TVec< TInt,int >,int > & value

        """
        return _snap.TIntIntVV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TIntIntVV ValV)
        Parameters:
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        Diff(self, TIntIntVV ValV, TIntIntVV DstValV)
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           ValV: TVec< TVec< TInt,int >,int > const & value
           DstValV: TVec< TVec< TInt,int >,int > & value

           ValV: TVec< TVec< TInt,int >,int > const & value
           DstValV: TVec< TVec< TInt,int >,int > & value

        """
        return _snap.TIntIntVV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TIntIntVV ValV) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        """
        return _snap.TIntIntVV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TIntIntVV ValV) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        """
        return _snap.TIntIntVV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TIntV Val) -> int
        Parameters:
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        SearchBin(self, TIntV Val, int InsValN) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value
           InsValN: int & value

           Val: TVec< TInt,int > const & value
           InsValN: int & value

        """
        return _snap.TIntIntVV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TIntV Val, int InsValN) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value
           InsValN: int & value

           Val: TVec< TInt,int > const & value
           InsValN: int & value

        """
        return _snap.TIntIntVV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TIntV Val, int BValN = 0) -> int
        Parameters:
           Val: TVec< TInt,int > const & value
           BValN: int const & value

           Val: TVec< TInt,int > const & value
           BValN: int const & value

        SearchForw(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TIntV Val) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TIntIntVV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TVec< TInt,int >,int > const & value
           BValN: int const & value

           ValV: TVec< TVec< TInt,int >,int > const & value
           BValN: int const & value

        SearchVForw(self, TIntIntVV ValV) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           ValV: TVec< TVec< TInt,int >,int > const & value

           ValV: TVec< TVec< TInt,int >,int > const & value

        """
        return _snap.TIntIntVV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TIntV Val) -> bool
        Parameters:
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        IsIn(self, TIntV Val, int ValN) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value
           ValN: int & value

           Val: TVec< TInt,int > const & value
           ValN: int & value

        """
        return _snap.TIntIntVV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TIntV Val) -> bool
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TIntV Val) -> TIntV
        Parameters:
           self: TVec< TVec< TInt >,int > const * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TIntV Val) -> TIntV
        Parameters:
           self: TVec< TVec< TInt >,int > * value
           Val: TVec< TInt,int > const & value

           Val: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TVec< TInt >,int > const * value




        """
        return _snap.TIntIntVV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TIntV Val1) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2, TIntV Val3) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
            TIntV Val6) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
            TIntV Val6, TIntV Val7) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
            TIntV Val6, TIntV Val7, TIntV Val8) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value
           Val8: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value
           Val8: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value
           Val8: TVec< TInt,int > const & value

        GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
            TIntV Val6, TIntV Val7, TIntV Val8, 
            TIntV Val9) -> TIntIntVV
        Parameters:
           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value
           Val8: TVec< TInt,int > const & value
           Val9: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value
           Val8: TVec< TInt,int > const & value
           Val9: TVec< TInt,int > const & value

           Val1: TVec< TInt,int > const & value
           Val2: TVec< TInt,int > const & value
           Val3: TVec< TInt,int > const & value
           Val4: TVec< TInt,int > const & value
           Val5: TVec< TInt,int > const & value
           Val6: TVec< TInt,int > const & value
           Val7: TVec< TInt,int > const & value
           Val8: TVec< TInt,int > const & value
           Val9: TVec< TInt,int > const & value

        """
        return _snap.TIntIntVV_GetV(*args)

    GetV = staticmethod(GetV)
TIntIntVV.Load = new_instancemethod(_snap.TIntIntVV_Load,None,TIntIntVV)
TIntIntVV.Save = new_instancemethod(_snap.TIntIntVV_Save,None,TIntIntVV)
TIntIntVV.__add__ = new_instancemethod(_snap.TIntIntVV___add__,None,TIntIntVV)
TIntIntVV.__eq__ = new_instancemethod(_snap.TIntIntVV___eq__,None,TIntIntVV)
TIntIntVV.__lt__ = new_instancemethod(_snap.TIntIntVV___lt__,None,TIntIntVV)
TIntIntVV.GetMemUsed = new_instancemethod(_snap.TIntIntVV_GetMemUsed,None,TIntIntVV)
TIntIntVV.GetMemSize = new_instancemethod(_snap.TIntIntVV_GetMemSize,None,TIntIntVV)
TIntIntVV.GetPrimHashCd = new_instancemethod(_snap.TIntIntVV_GetPrimHashCd,None,TIntIntVV)
TIntIntVV.GetSecHashCd = new_instancemethod(_snap.TIntIntVV_GetSecHashCd,None,TIntIntVV)
TIntIntVV.Gen = new_instancemethod(_snap.TIntIntVV_Gen,None,TIntIntVV)
TIntIntVV.GenExt = new_instancemethod(_snap.TIntIntVV_GenExt,None,TIntIntVV)
TIntIntVV.IsExt = new_instancemethod(_snap.TIntIntVV_IsExt,None,TIntIntVV)
TIntIntVV.Reserve = new_instancemethod(_snap.TIntIntVV_Reserve,None,TIntIntVV)
TIntIntVV.Clr = new_instancemethod(_snap.TIntIntVV_Clr,None,TIntIntVV)
TIntIntVV.Trunc = new_instancemethod(_snap.TIntIntVV_Trunc,None,TIntIntVV)
TIntIntVV.Reduce = new_instancemethod(_snap.TIntIntVV_Reduce,None,TIntIntVV)
TIntIntVV.Pack = new_instancemethod(_snap.TIntIntVV_Pack,None,TIntIntVV)
TIntIntVV.MoveFrom = new_instancemethod(_snap.TIntIntVV_MoveFrom,None,TIntIntVV)
TIntIntVV.CopyUniqueFrom = new_instancemethod(_snap.TIntIntVV_CopyUniqueFrom,None,TIntIntVV)
TIntIntVV.Empty = new_instancemethod(_snap.TIntIntVV_Empty,None,TIntIntVV)
TIntIntVV.Len = new_instancemethod(_snap.TIntIntVV_Len,None,TIntIntVV)
TIntIntVV.Reserved = new_instancemethod(_snap.TIntIntVV_Reserved,None,TIntIntVV)
TIntIntVV.Last = new_instancemethod(_snap.TIntIntVV_Last,None,TIntIntVV)
TIntIntVV.LastValN = new_instancemethod(_snap.TIntIntVV_LastValN,None,TIntIntVV)
TIntIntVV.LastLast = new_instancemethod(_snap.TIntIntVV_LastLast,None,TIntIntVV)
TIntIntVV.GetRndVal = new_instancemethod(_snap.TIntIntVV_GetRndVal,None,TIntIntVV)
TIntIntVV.BegI = new_instancemethod(_snap.TIntIntVV_BegI,None,TIntIntVV)
TIntIntVV.EndI = new_instancemethod(_snap.TIntIntVV_EndI,None,TIntIntVV)
TIntIntVV.GetI = new_instancemethod(_snap.TIntIntVV_GetI,None,TIntIntVV)
TIntIntVV.AddAtm = new_instancemethod(_snap.TIntIntVV_AddAtm,None,TIntIntVV)
TIntIntVV.Add = new_instancemethod(_snap.TIntIntVV_Add,None,TIntIntVV)
TIntIntVV.AddMP = new_instancemethod(_snap.TIntIntVV_AddMP,None,TIntIntVV)
TIntIntVV.AddV = new_instancemethod(_snap.TIntIntVV_AddV,None,TIntIntVV)
TIntIntVV.AddSorted = new_instancemethod(_snap.TIntIntVV_AddSorted,None,TIntIntVV)
TIntIntVV.AddBackSorted = new_instancemethod(_snap.TIntIntVV_AddBackSorted,None,TIntIntVV)
TIntIntVV.AddMerged = new_instancemethod(_snap.TIntIntVV_AddMerged,None,TIntIntVV)
TIntIntVV.AddVMerged = new_instancemethod(_snap.TIntIntVV_AddVMerged,None,TIntIntVV)
TIntIntVV.AddUnique = new_instancemethod(_snap.TIntIntVV_AddUnique,None,TIntIntVV)
TIntIntVV.GetVal = new_instancemethod(_snap.TIntIntVV_GetVal,None,TIntIntVV)
TIntIntVV.SetVal = new_instancemethod(_snap.TIntIntVV_SetVal,None,TIntIntVV)
TIntIntVV.GetSubValV = new_instancemethod(_snap.TIntIntVV_GetSubValV,None,TIntIntVV)
TIntIntVV.Ins = new_instancemethod(_snap.TIntIntVV_Ins,None,TIntIntVV)
TIntIntVV.Del = new_instancemethod(_snap.TIntIntVV_Del,None,TIntIntVV)
TIntIntVV.DelLast = new_instancemethod(_snap.TIntIntVV_DelLast,None,TIntIntVV)
TIntIntVV.DelIfIn = new_instancemethod(_snap.TIntIntVV_DelIfIn,None,TIntIntVV)
TIntIntVV.DelAll = new_instancemethod(_snap.TIntIntVV_DelAll,None,TIntIntVV)
TIntIntVV.PutAll = new_instancemethod(_snap.TIntIntVV_PutAll,None,TIntIntVV)
TIntIntVV.Swap = new_instancemethod(_snap.TIntIntVV_Swap,None,TIntIntVV)
TIntIntVV.NextPerm = new_instancemethod(_snap.TIntIntVV_NextPerm,None,TIntIntVV)
TIntIntVV.PrevPerm = new_instancemethod(_snap.TIntIntVV_PrevPerm,None,TIntIntVV)
TIntIntVV.GetPivotValN = new_instancemethod(_snap.TIntIntVV_GetPivotValN,None,TIntIntVV)
TIntIntVV.BSort = new_instancemethod(_snap.TIntIntVV_BSort,None,TIntIntVV)
TIntIntVV.ISort = new_instancemethod(_snap.TIntIntVV_ISort,None,TIntIntVV)
TIntIntVV.Partition = new_instancemethod(_snap.TIntIntVV_Partition,None,TIntIntVV)
TIntIntVV.QSort = new_instancemethod(_snap.TIntIntVV_QSort,None,TIntIntVV)
TIntIntVV.Sort = new_instancemethod(_snap.TIntIntVV_Sort,None,TIntIntVV)
TIntIntVV.IsSorted = new_instancemethod(_snap.TIntIntVV_IsSorted,None,TIntIntVV)
TIntIntVV.Shuffle = new_instancemethod(_snap.TIntIntVV_Shuffle,None,TIntIntVV)
TIntIntVV.Reverse = new_instancemethod(_snap.TIntIntVV_Reverse,None,TIntIntVV)
TIntIntVV.Merge = new_instancemethod(_snap.TIntIntVV_Merge,None,TIntIntVV)
TIntIntVV.Intrs = new_instancemethod(_snap.TIntIntVV_Intrs,None,TIntIntVV)
TIntIntVV.Union = new_instancemethod(_snap.TIntIntVV_Union,None,TIntIntVV)
TIntIntVV.Diff = new_instancemethod(_snap.TIntIntVV_Diff,None,TIntIntVV)
TIntIntVV.IntrsLen = new_instancemethod(_snap.TIntIntVV_IntrsLen,None,TIntIntVV)
TIntIntVV.UnionLen = new_instancemethod(_snap.TIntIntVV_UnionLen,None,TIntIntVV)
TIntIntVV.Count = new_instancemethod(_snap.TIntIntVV_Count,None,TIntIntVV)
TIntIntVV.SearchBin = new_instancemethod(_snap.TIntIntVV_SearchBin,None,TIntIntVV)
TIntIntVV.SearchBinLeft = new_instancemethod(_snap.TIntIntVV_SearchBinLeft,None,TIntIntVV)
TIntIntVV.SearchForw = new_instancemethod(_snap.TIntIntVV_SearchForw,None,TIntIntVV)
TIntIntVV.SearchBack = new_instancemethod(_snap.TIntIntVV_SearchBack,None,TIntIntVV)
TIntIntVV.SearchVForw = new_instancemethod(_snap.TIntIntVV_SearchVForw,None,TIntIntVV)
TIntIntVV.IsIn = new_instancemethod(_snap.TIntIntVV_IsIn,None,TIntIntVV)
TIntIntVV.IsInBin = new_instancemethod(_snap.TIntIntVV_IsInBin,None,TIntIntVV)
TIntIntVV.GetDat = new_instancemethod(_snap.TIntIntVV_GetDat,None,TIntIntVV)
TIntIntVV.GetAddDat = new_instancemethod(_snap.TIntIntVV_GetAddDat,None,TIntIntVV)
TIntIntVV.GetMxValN = new_instancemethod(_snap.TIntIntVV_GetMxValN,None,TIntIntVV)
TIntIntVV_swigregister = _snap.TIntIntVV_swigregister
TIntIntVV_swigregister(TIntIntVV)

def TIntIntVV_SwapI(*args):
  """
    TIntIntVV_SwapI(TIter LVal, TIter RVal)
    Parameters:
       LVal: TVec< TVec< TInt >,int >::TIter value
       RVal: TVec< TVec< TInt >,int >::TIter value

       LVal: TVec< TVec< TInt >,int >::TIter value
       RVal: TVec< TVec< TInt >,int >::TIter value

    """
  return _snap.TIntIntVV_SwapI(*args)

def TIntIntVV_GetV(*args):
  """
    GetV(TIntV Val1) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value

    GetV(TIntV Val1, TIntV Val2) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value

    GetV(TIntV Val1, TIntV Val2, TIntV Val3) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
        TIntV Val6) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
        TIntV Val6, TIntV Val7) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value
       Val7: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value
       Val7: TVec< TInt,int > const & value

    GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
        TIntV Val6, TIntV Val7, TIntV Val8) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value
       Val7: TVec< TInt,int > const & value
       Val8: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value
       Val7: TVec< TInt,int > const & value
       Val8: TVec< TInt,int > const & value

    TIntIntVV_GetV(TIntV Val1, TIntV Val2, TIntV Val3, TIntV Val4, TIntV Val5, 
        TIntV Val6, TIntV Val7, TIntV Val8, 
        TIntV Val9) -> TIntIntVV
    Parameters:
       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value
       Val7: TVec< TInt,int > const & value
       Val8: TVec< TInt,int > const & value
       Val9: TVec< TInt,int > const & value

       Val1: TVec< TInt,int > const & value
       Val2: TVec< TInt,int > const & value
       Val3: TVec< TInt,int > const & value
       Val4: TVec< TInt,int > const & value
       Val5: TVec< TInt,int > const & value
       Val6: TVec< TInt,int > const & value
       Val7: TVec< TInt,int > const & value
       Val8: TVec< TInt,int > const & value
       Val9: TVec< TInt,int > const & value

    """
  return _snap.TIntIntVV_GetV(*args)

class PNEANetV(object):
    """Proxy of C++ TVec<(PNEANet)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_PNEANetV
    def __init__(self, *args): 
        """
        __init__(self) -> PNEANetV
        __init__(self, PNEANetV Vec) -> PNEANetV
        Parameters:
           Vec: TVec< TPt< TNEANet >,int > const & value

           Vec: TVec< TPt< TNEANet >,int > const & value

        __init__(self, int _Vals) -> PNEANetV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> PNEANetV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, PNEANet _ValT, int _Vals) -> PNEANetV
        Parameters:
           _ValT: TPt< TNEANet > * value
           _Vals: int const & value

           _ValT: TPt< TNEANet > * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> PNEANetV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.PNEANetV_swiginit(self,_snap.new_PNEANetV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< PNEANet > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.PNEANetV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< PNEANet > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PNEANetV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, PNEANet Val) -> PNEANetV
        Parameters:
           self: TVec< PNEANet > * value
           Val: TPt< TNEANet > const & value

           Val: TPt< TNEANet > const & value

        """
        return _snap.PNEANetV___add__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_GetMemSize(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< PNEANet > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.PNEANetV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, PNEANet _ValT, int _Vals)
        Parameters:
           self: TVec< PNEANet > * value
           _ValT: TPt< TNEANet > * value
           _Vals: int const & value

           _ValT: TPt< TNEANet > * value
           _Vals: int const & value

        """
        return _snap.PNEANetV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< PNEANet > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.PNEANetV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< PNEANet > * value


        """
        return _snap.PNEANetV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< PNEANet > * value


        """
        return _snap.PNEANetV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< PNEANet > * value


        """
        return _snap.PNEANetV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< PNEANet > * value




        """
        return _snap.PNEANetV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, PNEANetV Vec)
        Parameters:
           self: TVec< PNEANet > * value
           Vec: TVec< TPt< TNEANet >,int > & value

           Vec: TVec< TPt< TNEANet >,int > & value

        """
        return _snap.PNEANetV_MoveFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> PNEANet
        Last(self) -> PNEANet
        Parameters:
           self: TVec< PNEANet > * value


        """
        return _snap.PNEANetV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> PNEANet
        LastLast(self) -> PNEANet
        Parameters:
           self: TVec< PNEANet > * value


        """
        return _snap.PNEANetV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> PNEANet
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> PNEANet
        GetRndVal(self, TRnd Rnd = Rnd) -> PNEANet
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> PNEANet
        Parameters:
           self: TVec< PNEANet > * value


        """
        return _snap.PNEANetV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TVec<(TPt<(TNEANet)>)>::TIter
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TVec<(TPt<(TNEANet)>)>::TIter
        Parameters:
           self: TVec< PNEANet > const * value




        """
        return _snap.PNEANetV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TVec<(TPt<(TNEANet)>)>::TIter
        Parameters:
           self: TVec< PNEANet > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.PNEANetV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, PNEANet Val) -> int
        Parameters:
           self: TVec< PNEANet > * value
           Val: TPt< TNEANet > const & value

           Val: TPt< TNEANet > const & value

        """
        return _snap.PNEANetV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, PNEANet Val) -> int
        Parameters:
           Val: TPt< TNEANet > const & value

           Val: TPt< TNEANet > const & value

        Add(self, PNEANet Val) -> int
        Parameters:
           Val: TPt< TNEANet > & value

           Val: TPt< TNEANet > & value

        Add(self, PNEANet Val, int ResizeLen) -> int
        Parameters:
           self: TVec< PNEANet > * value
           Val: TPt< TNEANet > const & value
           ResizeLen: int const & value

           Val: TPt< TNEANet > const & value
           ResizeLen: int const & value

        """
        return _snap.PNEANetV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, PNEANet Val) -> int
        Parameters:
           self: TVec< PNEANet > * value
           Val: TPt< TNEANet > const & value

           Val: TPt< TNEANet > const & value

        """
        return _snap.PNEANetV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, PNEANetV ValV) -> int
        Parameters:
           self: TVec< PNEANet > * value
           ValV: TVec< TPt< TNEANet >,int > const & value

           ValV: TVec< TPt< TNEANet >,int > const & value

        """
        return _snap.PNEANetV_AddV(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> PNEANet
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> PNEANet
        Parameters:
           self: TVec< PNEANet > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.PNEANetV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, PNEANet Val)
        Parameters:
           self: TVec< PNEANet > * value
           ValN: int const & value
           Val: TPt< TNEANet > const & value

           ValN: int const & value
           Val: TPt< TNEANet > const & value

        """
        return _snap.PNEANetV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, PNEANetV ValV)
        Parameters:
           self: TVec< PNEANet > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPt< TNEANet >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPt< TNEANet >,int > & value

        """
        return _snap.PNEANetV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, PNEANet Val)
        Parameters:
           self: TVec< PNEANet > * value
           ValN: int const & value
           Val: TPt< TNEANet > const & value

           ValN: int const & value
           Val: TPt< TNEANet > const & value

        """
        return _snap.PNEANetV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< PNEANet > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.PNEANetV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< PNEANet > * value




        """
        return _snap.PNEANetV_DelLast(self)

    def PutAll(self, *args):
        """
        PutAll(self, PNEANet Val)
        Parameters:
           self: TVec< PNEANet > * value
           Val: TPt< TNEANet > const & value

           Val: TPt< TNEANet > const & value

        """
        return _snap.PNEANetV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, PNEANetV Vec)
        Parameters:
           Vec: TVec< TPt< TNEANet >,int > & value

           Vec: TVec< TPt< TNEANet >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< PNEANet > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.PNEANetV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TVec<(TPt<(TNEANet)>)>::TIter LVal, TVec<(TPt<(TNEANet)>)>::TIter RVal)
        Parameters:
           LVal: TVec< TPt< TNEANet > >::TIter value
           RVal: TVec< TPt< TNEANet > >::TIter value

           LVal: TVec< TPt< TNEANet > >::TIter value
           RVal: TVec< TPt< TNEANet > >::TIter value

           LVal: TVec< TPt< TNEANet > >::TIter value
           RVal: TVec< TPt< TNEANet > >::TIter value

        """
        return _snap.PNEANetV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< PNEANet > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.PNEANetV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< PNEANet > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.PNEANetV_Reverse(self, *args)

    def GetV(*args):
        """
        GetV(PNEANet Val1) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
            PNEANet Val5) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
            PNEANet Val5, PNEANet Val6) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
            PNEANet Val5, PNEANet Val6, PNEANet Val7) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
            PNEANet Val5, PNEANet Val6, PNEANet Val7, 
            PNEANet Val8) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value
           Val8: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value
           Val8: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value
           Val8: TPt< TNEANet > const & value

        GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
            PNEANet Val5, PNEANet Val6, PNEANet Val7, 
            PNEANet Val8, PNEANet Val9) -> PNEANetV
        Parameters:
           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value
           Val8: TPt< TNEANet > const & value
           Val9: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value
           Val8: TPt< TNEANet > const & value
           Val9: TPt< TNEANet > const & value

           Val1: TPt< TNEANet > const & value
           Val2: TPt< TNEANet > const & value
           Val3: TPt< TNEANet > const & value
           Val4: TPt< TNEANet > const & value
           Val5: TPt< TNEANet > const & value
           Val6: TPt< TNEANet > const & value
           Val7: TPt< TNEANet > const & value
           Val8: TPt< TNEANet > const & value
           Val9: TPt< TNEANet > const & value

        """
        return _snap.PNEANetV_GetV(*args)

    GetV = staticmethod(GetV)
PNEANetV.Load = new_instancemethod(_snap.PNEANetV_Load,None,PNEANetV)
PNEANetV.Save = new_instancemethod(_snap.PNEANetV_Save,None,PNEANetV)
PNEANetV.__add__ = new_instancemethod(_snap.PNEANetV___add__,None,PNEANetV)
PNEANetV.GetMemUsed = new_instancemethod(_snap.PNEANetV_GetMemUsed,None,PNEANetV)
PNEANetV.GetMemSize = new_instancemethod(_snap.PNEANetV_GetMemSize,None,PNEANetV)
PNEANetV.Gen = new_instancemethod(_snap.PNEANetV_Gen,None,PNEANetV)
PNEANetV.GenExt = new_instancemethod(_snap.PNEANetV_GenExt,None,PNEANetV)
PNEANetV.IsExt = new_instancemethod(_snap.PNEANetV_IsExt,None,PNEANetV)
PNEANetV.Reserve = new_instancemethod(_snap.PNEANetV_Reserve,None,PNEANetV)
PNEANetV.Clr = new_instancemethod(_snap.PNEANetV_Clr,None,PNEANetV)
PNEANetV.Trunc = new_instancemethod(_snap.PNEANetV_Trunc,None,PNEANetV)
PNEANetV.Reduce = new_instancemethod(_snap.PNEANetV_Reduce,None,PNEANetV)
PNEANetV.Pack = new_instancemethod(_snap.PNEANetV_Pack,None,PNEANetV)
PNEANetV.MoveFrom = new_instancemethod(_snap.PNEANetV_MoveFrom,None,PNEANetV)
PNEANetV.Empty = new_instancemethod(_snap.PNEANetV_Empty,None,PNEANetV)
PNEANetV.Len = new_instancemethod(_snap.PNEANetV_Len,None,PNEANetV)
PNEANetV.Reserved = new_instancemethod(_snap.PNEANetV_Reserved,None,PNEANetV)
PNEANetV.Last = new_instancemethod(_snap.PNEANetV_Last,None,PNEANetV)
PNEANetV.LastValN = new_instancemethod(_snap.PNEANetV_LastValN,None,PNEANetV)
PNEANetV.LastLast = new_instancemethod(_snap.PNEANetV_LastLast,None,PNEANetV)
PNEANetV.GetRndVal = new_instancemethod(_snap.PNEANetV_GetRndVal,None,PNEANetV)
PNEANetV.BegI = new_instancemethod(_snap.PNEANetV_BegI,None,PNEANetV)
PNEANetV.EndI = new_instancemethod(_snap.PNEANetV_EndI,None,PNEANetV)
PNEANetV.GetI = new_instancemethod(_snap.PNEANetV_GetI,None,PNEANetV)
PNEANetV.AddAtm = new_instancemethod(_snap.PNEANetV_AddAtm,None,PNEANetV)
PNEANetV.Add = new_instancemethod(_snap.PNEANetV_Add,None,PNEANetV)
PNEANetV.AddMP = new_instancemethod(_snap.PNEANetV_AddMP,None,PNEANetV)
PNEANetV.AddV = new_instancemethod(_snap.PNEANetV_AddV,None,PNEANetV)
PNEANetV.GetVal = new_instancemethod(_snap.PNEANetV_GetVal,None,PNEANetV)
PNEANetV.SetVal = new_instancemethod(_snap.PNEANetV_SetVal,None,PNEANetV)
PNEANetV.GetSubValV = new_instancemethod(_snap.PNEANetV_GetSubValV,None,PNEANetV)
PNEANetV.Ins = new_instancemethod(_snap.PNEANetV_Ins,None,PNEANetV)
PNEANetV.Del = new_instancemethod(_snap.PNEANetV_Del,None,PNEANetV)
PNEANetV.DelLast = new_instancemethod(_snap.PNEANetV_DelLast,None,PNEANetV)
PNEANetV.PutAll = new_instancemethod(_snap.PNEANetV_PutAll,None,PNEANetV)
PNEANetV.Swap = new_instancemethod(_snap.PNEANetV_Swap,None,PNEANetV)
PNEANetV.Shuffle = new_instancemethod(_snap.PNEANetV_Shuffle,None,PNEANetV)
PNEANetV.Reverse = new_instancemethod(_snap.PNEANetV_Reverse,None,PNEANetV)
PNEANetV_swigregister = _snap.PNEANetV_swigregister
PNEANetV_swigregister(PNEANetV)

def PNEANetV_SwapI(*args):
  """
    PNEANetV_SwapI(TVec<(TPt<(TNEANet)>)>::TIter LVal, TVec<(TPt<(TNEANet)>)>::TIter RVal)
    Parameters:
       LVal: TVec< TPt< TNEANet > >::TIter value
       RVal: TVec< TPt< TNEANet > >::TIter value

       LVal: TVec< TPt< TNEANet > >::TIter value
       RVal: TVec< TPt< TNEANet > >::TIter value

    """
  return _snap.PNEANetV_SwapI(*args)

def PNEANetV_GetV(*args):
  """
    GetV(PNEANet Val1) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value

    GetV(PNEANet Val1, PNEANet Val2) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
        PNEANet Val5) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
        PNEANet Val5, PNEANet Val6) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
        PNEANet Val5, PNEANet Val6, PNEANet Val7) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value
       Val7: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value
       Val7: TPt< TNEANet > const & value

    GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
        PNEANet Val5, PNEANet Val6, PNEANet Val7, 
        PNEANet Val8) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value
       Val7: TPt< TNEANet > const & value
       Val8: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value
       Val7: TPt< TNEANet > const & value
       Val8: TPt< TNEANet > const & value

    PNEANetV_GetV(PNEANet Val1, PNEANet Val2, PNEANet Val3, PNEANet Val4, 
        PNEANet Val5, PNEANet Val6, PNEANet Val7, 
        PNEANet Val8, PNEANet Val9) -> PNEANetV
    Parameters:
       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value
       Val7: TPt< TNEANet > const & value
       Val8: TPt< TNEANet > const & value
       Val9: TPt< TNEANet > const & value

       Val1: TPt< TNEANet > const & value
       Val2: TPt< TNEANet > const & value
       Val3: TPt< TNEANet > const & value
       Val4: TPt< TNEANet > const & value
       Val5: TPt< TNEANet > const & value
       Val6: TPt< TNEANet > const & value
       Val7: TPt< TNEANet > const & value
       Val8: TPt< TNEANet > const & value
       Val9: TPt< TNEANet > const & value

    """
  return _snap.PNEANetV_GetV(*args)

class TIntH(object):
    """Proxy of C++ THash<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(self) -> TIntH
        __init__(self, TIntH Hash) -> TIntH
        Parameters:
           Hash: THash< TInt,TInt > const & value

           Hash: THash< TInt,TInt > const & value

        __init__(self, int ExpectVals, bool _AutoSizeP = False) -> TIntH
        Parameters:
           ExpectVals: int const & value
           _AutoSizeP: bool const & value

           ExpectVals: int const & value
           _AutoSizeP: bool const & value

        __init__(self, int ExpectVals) -> TIntH
        Parameters:
           ExpectVals: int const & value

           ExpectVals: int const & value

        __init__(self, TSIn SIn) -> TIntH
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntH_swiginit(self,_snap.new_TIntH(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: THash< TInt,TInt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntH_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: THash< TInt,TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntH Hash) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Hash: THash< TInt,TInt > const & value

           Hash: THash< TInt,TInt > const & value

        """
        return _snap.TIntH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntH Hash) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Hash: THash< TInt,TInt > const & value

           Hash: THash< TInt,TInt > const & value

        """
        return _snap.TIntH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(self, TInt Key) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, TInt Key) -> TIter
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(self, int ExpectVals)
        Parameters:
           self: THash< TInt,TInt > * value
           ExpectVals: int const & value

           ExpectVals: int const & value

        """
        return _snap.TIntH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1, bool ResetDat = True)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: THash< TInt,TInt > * value


        """
        return _snap.TIntH_Clr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_Len(self)

    def GetPorts(self):
        """
        GetPorts(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(self) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(self) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(self, TInt Key) -> TInt
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        AddDat(self, TInt Key, TInt Dat) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value
           Dat: TInt const & value

           Key: TInt const & value
           Dat: TInt const & value

        """
        return _snap.TIntH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(self, TInt Key)
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(self, TInt Key) -> bool
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(self, int KeyId)
        Parameters:
           self: THash< TInt,TInt > * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(self, TIntV KeyIdV)
        Parameters:
           self: THash< TInt,TInt > * value
           KeyIdV: TIntV const & value

           KeyIdV: TIntV const & value

        """
        return _snap.TIntH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(self, int KeyId) -> TInt
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(self, TRnd Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndKeyId(self, TRnd Rnd, double EmptyFrac) -> int
        Parameters:
           self: THash< TInt,TInt > * value
           Rnd: TRnd & value
           EmptyFrac: double const & value

           Rnd: TRnd & value
           EmptyFrac: double const & value

        """
        return _snap.TIntH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(self, TInt Key) -> bool
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        IsKey(self, TInt Key, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value
           KeyId: int & value

           Key: TInt const & value
           KeyId: int & value

        """
        return _snap.TIntH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TInt Key) -> TInt
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        GetDat(self, TInt Key) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntH_GetDat(self, *args)

    def GetDatWithDefault(self, *args):
        """
        GetDatWithDefault(self, TInt Key, TInt DefaultValue) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value
           DefaultValue: TInt value

           Key: TInt const & value
           DefaultValue: TInt value

        """
        return _snap.TIntH_GetDatWithDefault(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(self, int KeyId, TInt Key, TInt Dat)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int const & value
           Key: TInt & value
           Dat: TInt & value

           KeyId: int const & value
           Key: TInt & value
           Dat: TInt & value

        """
        return _snap.TIntH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(self, TInt Key, TInt Dat) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value
           Dat: TInt & value

           Key: TInt const & value
           Dat: TInt & value

        """
        return _snap.TIntH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int & value

           KeyId: int & value

        """
        return _snap.TIntH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(self, TIntV KeyV)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyV: TVec< TInt > & value

           KeyV: TVec< TInt > & value

        """
        return _snap.TIntH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(self, TIntV DatV)
        Parameters:
           self: THash< TInt,TInt > const * value
           DatV: TVec< TInt > & value

           DatV: TVec< TInt > & value

        """
        return _snap.TIntH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(self, TIntPrV KeyDatPrV)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyDatPrV: TVec< TPair< TInt,TInt > > & value

           KeyDatPrV: TVec< TPair< TInt,TInt > > & value

        """
        return _snap.TIntH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(self, TIntPrV DatKeyPrV)
        Parameters:
           self: THash< TInt,TInt > const * value
           DatKeyPrV: TVec< TPair< TInt,TInt > > & value

           DatKeyPrV: TVec< TPair< TInt,TInt > > & value

        """
        return _snap.TIntH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(self, TVec<(TKeyDat<(TInt,TInt)>)> KeyDatKdV)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyDatKdV: TVec< TKeyDat< TInt,TInt > > & value

           KeyDatKdV: TVec< TKeyDat< TInt,TInt > > & value

        """
        return _snap.TIntH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(self, TVec<(TKeyDat<(TInt,TInt)>)> DatKeyKdV)
        Parameters:
           self: THash< TInt,TInt > const * value
           DatKeyKdV: TVec< TKeyDat< TInt,TInt > > & value

           DatKeyKdV: TVec< TKeyDat< TInt,TInt > > & value

        """
        return _snap.TIntH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntH Hash)
        Parameters:
           self: THash< TInt,TInt > * value
           Hash: THash< TInt,TInt > & value

           Hash: THash< TInt,TInt > & value

        """
        return _snap.TIntH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: THash< TInt,TInt > * value




        """
        return _snap.TIntH_Defrag(self)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: THash< TInt,TInt > * value




        """
        return _snap.TIntH_Pack(self)

    def Sort(self, *args):
        """
        Sort(self, bool CmpKey, bool Asc)
        Parameters:
           self: THash< TInt,TInt > * value
           CmpKey: bool const & value
           Asc: bool const & value

           CmpKey: bool const & value
           Asc: bool const & value

        """
        return _snap.TIntH_Sort(self, *args)

    def SortByKey(self, Asc = True):
        """
        SortByKey(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByKey(self)
        Parameters:
           self: THash< TInt,TInt > * value


        """
        return _snap.TIntH_SortByKey(self, Asc)

    def SortByDat(self, Asc = True):
        """
        SortByDat(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByDat(self)
        Parameters:
           self: THash< TInt,TInt > * value


        """
        return _snap.TIntH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntH
TIntH.Load = new_instancemethod(_snap.TIntH_Load,None,TIntH)
TIntH.Save = new_instancemethod(_snap.TIntH_Save,None,TIntH)
TIntH.__eq__ = new_instancemethod(_snap.TIntH___eq__,None,TIntH)
TIntH.__lt__ = new_instancemethod(_snap.TIntH___lt__,None,TIntH)
TIntH.__call__ = new_instancemethod(_snap.TIntH___call__,None,TIntH)
TIntH.GetMemUsed = new_instancemethod(_snap.TIntH_GetMemUsed,None,TIntH)
TIntH.BegI = new_instancemethod(_snap.TIntH_BegI,None,TIntH)
TIntH.EndI = new_instancemethod(_snap.TIntH_EndI,None,TIntH)
TIntH.GetI = new_instancemethod(_snap.TIntH_GetI,None,TIntH)
TIntH.Gen = new_instancemethod(_snap.TIntH_Gen,None,TIntH)
TIntH.Clr = new_instancemethod(_snap.TIntH_Clr,None,TIntH)
TIntH.Empty = new_instancemethod(_snap.TIntH_Empty,None,TIntH)
TIntH.Len = new_instancemethod(_snap.TIntH_Len,None,TIntH)
TIntH.GetPorts = new_instancemethod(_snap.TIntH_GetPorts,None,TIntH)
TIntH.IsAutoSize = new_instancemethod(_snap.TIntH_IsAutoSize,None,TIntH)
TIntH.GetMxKeyIds = new_instancemethod(_snap.TIntH_GetMxKeyIds,None,TIntH)
TIntH.GetReservedKeyIds = new_instancemethod(_snap.TIntH_GetReservedKeyIds,None,TIntH)
TIntH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntH_IsKeyIdEqKeyN,None,TIntH)
TIntH.AddKey = new_instancemethod(_snap.TIntH_AddKey,None,TIntH)
TIntH.AddDat = new_instancemethod(_snap.TIntH_AddDat,None,TIntH)
TIntH.DelKey = new_instancemethod(_snap.TIntH_DelKey,None,TIntH)
TIntH.DelIfKey = new_instancemethod(_snap.TIntH_DelIfKey,None,TIntH)
TIntH.DelKeyId = new_instancemethod(_snap.TIntH_DelKeyId,None,TIntH)
TIntH.DelKeyIdV = new_instancemethod(_snap.TIntH_DelKeyIdV,None,TIntH)
TIntH.GetKey = new_instancemethod(_snap.TIntH_GetKey,None,TIntH)
TIntH.GetKeyId = new_instancemethod(_snap.TIntH_GetKeyId,None,TIntH)
TIntH.GetRndKeyId = new_instancemethod(_snap.TIntH_GetRndKeyId,None,TIntH)
TIntH.IsKey = new_instancemethod(_snap.TIntH_IsKey,None,TIntH)
TIntH.IsKeyId = new_instancemethod(_snap.TIntH_IsKeyId,None,TIntH)
TIntH.GetDat = new_instancemethod(_snap.TIntH_GetDat,None,TIntH)
TIntH.GetDatWithDefault = new_instancemethod(_snap.TIntH_GetDatWithDefault,None,TIntH)
TIntH.GetKeyDat = new_instancemethod(_snap.TIntH_GetKeyDat,None,TIntH)
TIntH.IsKeyGetDat = new_instancemethod(_snap.TIntH_IsKeyGetDat,None,TIntH)
TIntH.FFirstKeyId = new_instancemethod(_snap.TIntH_FFirstKeyId,None,TIntH)
TIntH.FNextKeyId = new_instancemethod(_snap.TIntH_FNextKeyId,None,TIntH)
TIntH.GetKeyV = new_instancemethod(_snap.TIntH_GetKeyV,None,TIntH)
TIntH.GetDatV = new_instancemethod(_snap.TIntH_GetDatV,None,TIntH)
TIntH.GetKeyDatPrV = new_instancemethod(_snap.TIntH_GetKeyDatPrV,None,TIntH)
TIntH.GetDatKeyPrV = new_instancemethod(_snap.TIntH_GetDatKeyPrV,None,TIntH)
TIntH.GetKeyDatKdV = new_instancemethod(_snap.TIntH_GetKeyDatKdV,None,TIntH)
TIntH.GetDatKeyKdV = new_instancemethod(_snap.TIntH_GetDatKeyKdV,None,TIntH)
TIntH.Swap = new_instancemethod(_snap.TIntH_Swap,None,TIntH)
TIntH.Defrag = new_instancemethod(_snap.TIntH_Defrag,None,TIntH)
TIntH.Pack = new_instancemethod(_snap.TIntH_Pack,None,TIntH)
TIntH.Sort = new_instancemethod(_snap.TIntH_Sort,None,TIntH)
TIntH.SortByKey = new_instancemethod(_snap.TIntH_SortByKey,None,TIntH)
TIntH.SortByDat = new_instancemethod(_snap.TIntH_SortByDat,None,TIntH)
TIntH_swigregister = _snap.TIntH_swigregister
TIntH_swigregister(TIntH)

class TIntIntH(object):
    """Proxy of C++ THash<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntIntH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(self) -> TIntIntH
        __init__(self, TIntH Hash) -> TIntIntH
        Parameters:
           Hash: THash< TInt,TInt > const & value

           Hash: THash< TInt,TInt > const & value

        __init__(self, int ExpectVals, bool _AutoSizeP = False) -> TIntIntH
        Parameters:
           ExpectVals: int const & value
           _AutoSizeP: bool const & value

           ExpectVals: int const & value
           _AutoSizeP: bool const & value

        __init__(self, int ExpectVals) -> TIntIntH
        Parameters:
           ExpectVals: int const & value

           ExpectVals: int const & value

        __init__(self, TSIn SIn) -> TIntIntH
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntIntH_swiginit(self,_snap.new_TIntIntH(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: THash< TInt,TInt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntIntH_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: THash< TInt,TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntIntH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntH Hash) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Hash: THash< TInt,TInt > const & value

           Hash: THash< TInt,TInt > const & value

        """
        return _snap.TIntIntH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntH Hash) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Hash: THash< TInt,TInt > const & value

           Hash: THash< TInt,TInt > const & value

        """
        return _snap.TIntIntH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(self, TInt Key) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntIntH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, TInt Key) -> TIter
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntIntH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(self, int ExpectVals)
        Parameters:
           self: THash< TInt,TInt > * value
           ExpectVals: int const & value

           ExpectVals: int const & value

        """
        return _snap.TIntIntH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1, bool ResetDat = True)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: THash< TInt,TInt > * value


        """
        return _snap.TIntIntH_Clr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_Len(self)

    def GetPorts(self):
        """
        GetPorts(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(self) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(self) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntIntH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(self, TInt Key) -> TInt
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        AddDat(self, TInt Key, TInt Dat) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value
           Dat: TInt const & value

           Key: TInt const & value
           Dat: TInt const & value

        """
        return _snap.TIntIntH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(self, TInt Key)
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntIntH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(self, TInt Key) -> bool
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntIntH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(self, int KeyId)
        Parameters:
           self: THash< TInt,TInt > * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntIntH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(self, TIntV KeyIdV)
        Parameters:
           self: THash< TInt,TInt > * value
           KeyIdV: TIntV const & value

           KeyIdV: TIntV const & value

        """
        return _snap.TIntIntH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(self, int KeyId) -> TInt
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntIntH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntIntH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(self, TRnd Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndKeyId(self, TRnd Rnd, double EmptyFrac) -> int
        Parameters:
           self: THash< TInt,TInt > * value
           Rnd: TRnd & value
           EmptyFrac: double const & value

           Rnd: TRnd & value
           EmptyFrac: double const & value

        """
        return _snap.TIntIntH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(self, TInt Key) -> bool
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        IsKey(self, TInt Key, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value
           KeyId: int & value

           Key: TInt const & value
           KeyId: int & value

        """
        return _snap.TIntIntH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntIntH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TInt Key) -> TInt
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        GetDat(self, TInt Key) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntIntH_GetDat(self, *args)

    def GetDatWithDefault(self, *args):
        """
        GetDatWithDefault(self, TInt Key, TInt DefaultValue) -> TInt
        Parameters:
           self: THash< TInt,TInt > * value
           Key: TInt const & value
           DefaultValue: TInt value

           Key: TInt const & value
           DefaultValue: TInt value

        """
        return _snap.TIntIntH_GetDatWithDefault(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(self, int KeyId, TInt Key, TInt Dat)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int const & value
           Key: TInt & value
           Dat: TInt & value

           KeyId: int const & value
           Key: TInt & value
           Dat: TInt & value

        """
        return _snap.TIntIntH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(self, TInt Key, TInt Dat) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           Key: TInt const & value
           Dat: TInt & value

           Key: TInt const & value
           Dat: TInt & value

        """
        return _snap.TIntIntH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(self) -> int
        Parameters:
           self: THash< TInt,TInt > const * value




        """
        return _snap.TIntIntH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyId: int & value

           KeyId: int & value

        """
        return _snap.TIntIntH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(self, TIntV KeyV)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyV: TVec< TInt > & value

           KeyV: TVec< TInt > & value

        """
        return _snap.TIntIntH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(self, TIntV DatV)
        Parameters:
           self: THash< TInt,TInt > const * value
           DatV: TVec< TInt > & value

           DatV: TVec< TInt > & value

        """
        return _snap.TIntIntH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(self, TIntPrV KeyDatPrV)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyDatPrV: TVec< TPair< TInt,TInt > > & value

           KeyDatPrV: TVec< TPair< TInt,TInt > > & value

        """
        return _snap.TIntIntH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(self, TIntPrV DatKeyPrV)
        Parameters:
           self: THash< TInt,TInt > const * value
           DatKeyPrV: TVec< TPair< TInt,TInt > > & value

           DatKeyPrV: TVec< TPair< TInt,TInt > > & value

        """
        return _snap.TIntIntH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(self, TVec<(TKeyDat<(TInt,TInt)>)> KeyDatKdV)
        Parameters:
           self: THash< TInt,TInt > const * value
           KeyDatKdV: TVec< TKeyDat< TInt,TInt > > & value

           KeyDatKdV: TVec< TKeyDat< TInt,TInt > > & value

        """
        return _snap.TIntIntH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(self, TVec<(TKeyDat<(TInt,TInt)>)> DatKeyKdV)
        Parameters:
           self: THash< TInt,TInt > const * value
           DatKeyKdV: TVec< TKeyDat< TInt,TInt > > & value

           DatKeyKdV: TVec< TKeyDat< TInt,TInt > > & value

        """
        return _snap.TIntIntH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntH Hash)
        Parameters:
           self: THash< TInt,TInt > * value
           Hash: THash< TInt,TInt > & value

           Hash: THash< TInt,TInt > & value

        """
        return _snap.TIntIntH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: THash< TInt,TInt > * value




        """
        return _snap.TIntIntH_Defrag(self)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: THash< TInt,TInt > * value




        """
        return _snap.TIntIntH_Pack(self)

    def Sort(self, *args):
        """
        Sort(self, bool CmpKey, bool Asc)
        Parameters:
           self: THash< TInt,TInt > * value
           CmpKey: bool const & value
           Asc: bool const & value

           CmpKey: bool const & value
           Asc: bool const & value

        """
        return _snap.TIntIntH_Sort(self, *args)

    def SortByKey(self, Asc = True):
        """
        SortByKey(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByKey(self)
        Parameters:
           self: THash< TInt,TInt > * value


        """
        return _snap.TIntIntH_SortByKey(self, Asc)

    def SortByDat(self, Asc = True):
        """
        SortByDat(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByDat(self)
        Parameters:
           self: THash< TInt,TInt > * value


        """
        return _snap.TIntIntH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntIntH
TIntIntH.Load = new_instancemethod(_snap.TIntIntH_Load,None,TIntIntH)
TIntIntH.Save = new_instancemethod(_snap.TIntIntH_Save,None,TIntIntH)
TIntIntH.__eq__ = new_instancemethod(_snap.TIntIntH___eq__,None,TIntIntH)
TIntIntH.__lt__ = new_instancemethod(_snap.TIntIntH___lt__,None,TIntIntH)
TIntIntH.__call__ = new_instancemethod(_snap.TIntIntH___call__,None,TIntIntH)
TIntIntH.GetMemUsed = new_instancemethod(_snap.TIntIntH_GetMemUsed,None,TIntIntH)
TIntIntH.BegI = new_instancemethod(_snap.TIntIntH_BegI,None,TIntIntH)
TIntIntH.EndI = new_instancemethod(_snap.TIntIntH_EndI,None,TIntIntH)
TIntIntH.GetI = new_instancemethod(_snap.TIntIntH_GetI,None,TIntIntH)
TIntIntH.Gen = new_instancemethod(_snap.TIntIntH_Gen,None,TIntIntH)
TIntIntH.Clr = new_instancemethod(_snap.TIntIntH_Clr,None,TIntIntH)
TIntIntH.Empty = new_instancemethod(_snap.TIntIntH_Empty,None,TIntIntH)
TIntIntH.Len = new_instancemethod(_snap.TIntIntH_Len,None,TIntIntH)
TIntIntH.GetPorts = new_instancemethod(_snap.TIntIntH_GetPorts,None,TIntIntH)
TIntIntH.IsAutoSize = new_instancemethod(_snap.TIntIntH_IsAutoSize,None,TIntIntH)
TIntIntH.GetMxKeyIds = new_instancemethod(_snap.TIntIntH_GetMxKeyIds,None,TIntIntH)
TIntIntH.GetReservedKeyIds = new_instancemethod(_snap.TIntIntH_GetReservedKeyIds,None,TIntIntH)
TIntIntH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntIntH_IsKeyIdEqKeyN,None,TIntIntH)
TIntIntH.AddKey = new_instancemethod(_snap.TIntIntH_AddKey,None,TIntIntH)
TIntIntH.AddDat = new_instancemethod(_snap.TIntIntH_AddDat,None,TIntIntH)
TIntIntH.DelKey = new_instancemethod(_snap.TIntIntH_DelKey,None,TIntIntH)
TIntIntH.DelIfKey = new_instancemethod(_snap.TIntIntH_DelIfKey,None,TIntIntH)
TIntIntH.DelKeyId = new_instancemethod(_snap.TIntIntH_DelKeyId,None,TIntIntH)
TIntIntH.DelKeyIdV = new_instancemethod(_snap.TIntIntH_DelKeyIdV,None,TIntIntH)
TIntIntH.GetKey = new_instancemethod(_snap.TIntIntH_GetKey,None,TIntIntH)
TIntIntH.GetKeyId = new_instancemethod(_snap.TIntIntH_GetKeyId,None,TIntIntH)
TIntIntH.GetRndKeyId = new_instancemethod(_snap.TIntIntH_GetRndKeyId,None,TIntIntH)
TIntIntH.IsKey = new_instancemethod(_snap.TIntIntH_IsKey,None,TIntIntH)
TIntIntH.IsKeyId = new_instancemethod(_snap.TIntIntH_IsKeyId,None,TIntIntH)
TIntIntH.GetDat = new_instancemethod(_snap.TIntIntH_GetDat,None,TIntIntH)
TIntIntH.GetDatWithDefault = new_instancemethod(_snap.TIntIntH_GetDatWithDefault,None,TIntIntH)
TIntIntH.GetKeyDat = new_instancemethod(_snap.TIntIntH_GetKeyDat,None,TIntIntH)
TIntIntH.IsKeyGetDat = new_instancemethod(_snap.TIntIntH_IsKeyGetDat,None,TIntIntH)
TIntIntH.FFirstKeyId = new_instancemethod(_snap.TIntIntH_FFirstKeyId,None,TIntIntH)
TIntIntH.FNextKeyId = new_instancemethod(_snap.TIntIntH_FNextKeyId,None,TIntIntH)
TIntIntH.GetKeyV = new_instancemethod(_snap.TIntIntH_GetKeyV,None,TIntIntH)
TIntIntH.GetDatV = new_instancemethod(_snap.TIntIntH_GetDatV,None,TIntIntH)
TIntIntH.GetKeyDatPrV = new_instancemethod(_snap.TIntIntH_GetKeyDatPrV,None,TIntIntH)
TIntIntH.GetDatKeyPrV = new_instancemethod(_snap.TIntIntH_GetDatKeyPrV,None,TIntIntH)
TIntIntH.GetKeyDatKdV = new_instancemethod(_snap.TIntIntH_GetKeyDatKdV,None,TIntIntH)
TIntIntH.GetDatKeyKdV = new_instancemethod(_snap.TIntIntH_GetDatKeyKdV,None,TIntIntH)
TIntIntH.Swap = new_instancemethod(_snap.TIntIntH_Swap,None,TIntIntH)
TIntIntH.Defrag = new_instancemethod(_snap.TIntIntH_Defrag,None,TIntIntH)
TIntIntH.Pack = new_instancemethod(_snap.TIntIntH_Pack,None,TIntIntH)
TIntIntH.Sort = new_instancemethod(_snap.TIntIntH_Sort,None,TIntIntH)
TIntIntH.SortByKey = new_instancemethod(_snap.TIntIntH_SortByKey,None,TIntIntH)
TIntIntH.SortByDat = new_instancemethod(_snap.TIntIntH_SortByDat,None,TIntIntH)
TIntIntH_swigregister = _snap.TIntIntH_swigregister
TIntIntH_swigregister(TIntIntH)

class TIntFltH(object):
    """Proxy of C++ THash<(TInt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntFltH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(self) -> TIntFltH
        __init__(self, TIntFltH Hash) -> TIntFltH
        Parameters:
           Hash: THash< TInt,TFlt > const & value

           Hash: THash< TInt,TFlt > const & value

        __init__(self, int ExpectVals, bool _AutoSizeP = False) -> TIntFltH
        Parameters:
           ExpectVals: int const & value
           _AutoSizeP: bool const & value

           ExpectVals: int const & value
           _AutoSizeP: bool const & value

        __init__(self, int ExpectVals) -> TIntFltH
        Parameters:
           ExpectVals: int const & value

           ExpectVals: int const & value

        __init__(self, TSIn SIn) -> TIntFltH
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntFltH_swiginit(self,_snap.new_TIntFltH(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: THash< TInt,TFlt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntFltH_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: THash< TInt,TFlt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntFltH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntFltH Hash) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value
           Hash: THash< TInt,TFlt > const & value

           Hash: THash< TInt,TFlt > const & value

        """
        return _snap.TIntFltH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntFltH Hash) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value
           Hash: THash< TInt,TFlt > const & value

           Hash: THash< TInt,TFlt > const & value

        """
        return _snap.TIntFltH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(self, TInt Key) -> TFlt
        Parameters:
           self: THash< TInt,TFlt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntFltH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, TInt Key) -> TIter
        Parameters:
           self: THash< TInt,TFlt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntFltH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(self, int ExpectVals)
        Parameters:
           self: THash< TInt,TFlt > * value
           ExpectVals: int const & value

           ExpectVals: int const & value

        """
        return _snap.TIntFltH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1, bool ResetDat = True)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: THash< TInt,TFlt > * value


        """
        return _snap.TIntFltH_Clr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_Len(self)

    def GetPorts(self):
        """
        GetPorts(self) -> int
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(self) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(self) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TFlt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntFltH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(self, TInt Key) -> TFlt
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        AddDat(self, TInt Key, TFlt Dat) -> TFlt
        Parameters:
           self: THash< TInt,TFlt > * value
           Key: TInt const & value
           Dat: TFlt const & value

           Key: TInt const & value
           Dat: TFlt const & value

        """
        return _snap.TIntFltH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(self, TInt Key)
        Parameters:
           self: THash< TInt,TFlt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntFltH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(self, TInt Key) -> bool
        Parameters:
           self: THash< TInt,TFlt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntFltH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(self, int KeyId)
        Parameters:
           self: THash< TInt,TFlt > * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntFltH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(self, TIntV KeyIdV)
        Parameters:
           self: THash< TInt,TFlt > * value
           KeyIdV: TIntV const & value

           KeyIdV: TIntV const & value

        """
        return _snap.TIntFltH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(self, int KeyId) -> TInt
        Parameters:
           self: THash< TInt,TFlt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntFltH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TFlt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntFltH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(self, TRnd Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndKeyId(self, TRnd Rnd, double EmptyFrac) -> int
        Parameters:
           self: THash< TInt,TFlt > * value
           Rnd: TRnd & value
           EmptyFrac: double const & value

           Rnd: TRnd & value
           EmptyFrac: double const & value

        """
        return _snap.TIntFltH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(self, TInt Key) -> bool
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        IsKey(self, TInt Key, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value
           Key: TInt const & value
           KeyId: int & value

           Key: TInt const & value
           KeyId: int & value

        """
        return _snap.TIntFltH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntFltH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TInt Key) -> TFlt
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        GetDat(self, TInt Key) -> TFlt
        Parameters:
           self: THash< TInt,TFlt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntFltH_GetDat(self, *args)

    def GetDatWithDefault(self, *args):
        """
        GetDatWithDefault(self, TInt Key, TFlt DefaultValue) -> TFlt
        Parameters:
           self: THash< TInt,TFlt > * value
           Key: TInt const & value
           DefaultValue: TFlt value

           Key: TInt const & value
           DefaultValue: TFlt value

        """
        return _snap.TIntFltH_GetDatWithDefault(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(self, int KeyId, TInt Key, TFlt Dat)
        Parameters:
           self: THash< TInt,TFlt > const * value
           KeyId: int const & value
           Key: TInt & value
           Dat: TFlt & value

           KeyId: int const & value
           Key: TInt & value
           Dat: TFlt & value

        """
        return _snap.TIntFltH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(self, TInt Key, TFlt Dat) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value
           Key: TInt const & value
           Dat: TFlt & value

           Key: TInt const & value
           Dat: TFlt & value

        """
        return _snap.TIntFltH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(self) -> int
        Parameters:
           self: THash< TInt,TFlt > const * value




        """
        return _snap.TIntFltH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TFlt > const * value
           KeyId: int & value

           KeyId: int & value

        """
        return _snap.TIntFltH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(self, TIntV KeyV)
        Parameters:
           self: THash< TInt,TFlt > const * value
           KeyV: TVec< TInt > & value

           KeyV: TVec< TInt > & value

        """
        return _snap.TIntFltH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(self, TFltV DatV)
        Parameters:
           self: THash< TInt,TFlt > const * value
           DatV: TVec< TFlt > & value

           DatV: TVec< TFlt > & value

        """
        return _snap.TIntFltH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(self, TVec<(TPair<(TInt,TFlt)>)> KeyDatPrV)
        Parameters:
           self: THash< TInt,TFlt > const * value
           KeyDatPrV: TVec< TPair< TInt,TFlt > > & value

           KeyDatPrV: TVec< TPair< TInt,TFlt > > & value

        """
        return _snap.TIntFltH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(self, TVec<(TPair<(TFlt,TInt)>)> DatKeyPrV)
        Parameters:
           self: THash< TInt,TFlt > const * value
           DatKeyPrV: TVec< TPair< TFlt,TInt > > & value

           DatKeyPrV: TVec< TPair< TFlt,TInt > > & value

        """
        return _snap.TIntFltH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(self, TIntFltKdV KeyDatKdV)
        Parameters:
           self: THash< TInt,TFlt > const * value
           KeyDatKdV: TVec< TKeyDat< TInt,TFlt > > & value

           KeyDatKdV: TVec< TKeyDat< TInt,TFlt > > & value

        """
        return _snap.TIntFltH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(self, TVec<(TKeyDat<(TFlt,TInt)>)> DatKeyKdV)
        Parameters:
           self: THash< TInt,TFlt > const * value
           DatKeyKdV: TVec< TKeyDat< TFlt,TInt > > & value

           DatKeyKdV: TVec< TKeyDat< TFlt,TInt > > & value

        """
        return _snap.TIntFltH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntFltH Hash)
        Parameters:
           self: THash< TInt,TFlt > * value
           Hash: THash< TInt,TFlt > & value

           Hash: THash< TInt,TFlt > & value

        """
        return _snap.TIntFltH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: THash< TInt,TFlt > * value




        """
        return _snap.TIntFltH_Defrag(self)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: THash< TInt,TFlt > * value




        """
        return _snap.TIntFltH_Pack(self)

    def Sort(self, *args):
        """
        Sort(self, bool CmpKey, bool Asc)
        Parameters:
           self: THash< TInt,TFlt > * value
           CmpKey: bool const & value
           Asc: bool const & value

           CmpKey: bool const & value
           Asc: bool const & value

        """
        return _snap.TIntFltH_Sort(self, *args)

    def SortByKey(self, Asc = True):
        """
        SortByKey(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByKey(self)
        Parameters:
           self: THash< TInt,TFlt > * value


        """
        return _snap.TIntFltH_SortByKey(self, Asc)

    def SortByDat(self, Asc = True):
        """
        SortByDat(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByDat(self)
        Parameters:
           self: THash< TInt,TFlt > * value


        """
        return _snap.TIntFltH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntFltH
TIntFltH.Load = new_instancemethod(_snap.TIntFltH_Load,None,TIntFltH)
TIntFltH.Save = new_instancemethod(_snap.TIntFltH_Save,None,TIntFltH)
TIntFltH.__eq__ = new_instancemethod(_snap.TIntFltH___eq__,None,TIntFltH)
TIntFltH.__lt__ = new_instancemethod(_snap.TIntFltH___lt__,None,TIntFltH)
TIntFltH.__call__ = new_instancemethod(_snap.TIntFltH___call__,None,TIntFltH)
TIntFltH.GetMemUsed = new_instancemethod(_snap.TIntFltH_GetMemUsed,None,TIntFltH)
TIntFltH.BegI = new_instancemethod(_snap.TIntFltH_BegI,None,TIntFltH)
TIntFltH.EndI = new_instancemethod(_snap.TIntFltH_EndI,None,TIntFltH)
TIntFltH.GetI = new_instancemethod(_snap.TIntFltH_GetI,None,TIntFltH)
TIntFltH.Gen = new_instancemethod(_snap.TIntFltH_Gen,None,TIntFltH)
TIntFltH.Clr = new_instancemethod(_snap.TIntFltH_Clr,None,TIntFltH)
TIntFltH.Empty = new_instancemethod(_snap.TIntFltH_Empty,None,TIntFltH)
TIntFltH.Len = new_instancemethod(_snap.TIntFltH_Len,None,TIntFltH)
TIntFltH.GetPorts = new_instancemethod(_snap.TIntFltH_GetPorts,None,TIntFltH)
TIntFltH.IsAutoSize = new_instancemethod(_snap.TIntFltH_IsAutoSize,None,TIntFltH)
TIntFltH.GetMxKeyIds = new_instancemethod(_snap.TIntFltH_GetMxKeyIds,None,TIntFltH)
TIntFltH.GetReservedKeyIds = new_instancemethod(_snap.TIntFltH_GetReservedKeyIds,None,TIntFltH)
TIntFltH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntFltH_IsKeyIdEqKeyN,None,TIntFltH)
TIntFltH.AddKey = new_instancemethod(_snap.TIntFltH_AddKey,None,TIntFltH)
TIntFltH.AddDat = new_instancemethod(_snap.TIntFltH_AddDat,None,TIntFltH)
TIntFltH.DelKey = new_instancemethod(_snap.TIntFltH_DelKey,None,TIntFltH)
TIntFltH.DelIfKey = new_instancemethod(_snap.TIntFltH_DelIfKey,None,TIntFltH)
TIntFltH.DelKeyId = new_instancemethod(_snap.TIntFltH_DelKeyId,None,TIntFltH)
TIntFltH.DelKeyIdV = new_instancemethod(_snap.TIntFltH_DelKeyIdV,None,TIntFltH)
TIntFltH.GetKey = new_instancemethod(_snap.TIntFltH_GetKey,None,TIntFltH)
TIntFltH.GetKeyId = new_instancemethod(_snap.TIntFltH_GetKeyId,None,TIntFltH)
TIntFltH.GetRndKeyId = new_instancemethod(_snap.TIntFltH_GetRndKeyId,None,TIntFltH)
TIntFltH.IsKey = new_instancemethod(_snap.TIntFltH_IsKey,None,TIntFltH)
TIntFltH.IsKeyId = new_instancemethod(_snap.TIntFltH_IsKeyId,None,TIntFltH)
TIntFltH.GetDat = new_instancemethod(_snap.TIntFltH_GetDat,None,TIntFltH)
TIntFltH.GetDatWithDefault = new_instancemethod(_snap.TIntFltH_GetDatWithDefault,None,TIntFltH)
TIntFltH.GetKeyDat = new_instancemethod(_snap.TIntFltH_GetKeyDat,None,TIntFltH)
TIntFltH.IsKeyGetDat = new_instancemethod(_snap.TIntFltH_IsKeyGetDat,None,TIntFltH)
TIntFltH.FFirstKeyId = new_instancemethod(_snap.TIntFltH_FFirstKeyId,None,TIntFltH)
TIntFltH.FNextKeyId = new_instancemethod(_snap.TIntFltH_FNextKeyId,None,TIntFltH)
TIntFltH.GetKeyV = new_instancemethod(_snap.TIntFltH_GetKeyV,None,TIntFltH)
TIntFltH.GetDatV = new_instancemethod(_snap.TIntFltH_GetDatV,None,TIntFltH)
TIntFltH.GetKeyDatPrV = new_instancemethod(_snap.TIntFltH_GetKeyDatPrV,None,TIntFltH)
TIntFltH.GetDatKeyPrV = new_instancemethod(_snap.TIntFltH_GetDatKeyPrV,None,TIntFltH)
TIntFltH.GetKeyDatKdV = new_instancemethod(_snap.TIntFltH_GetKeyDatKdV,None,TIntFltH)
TIntFltH.GetDatKeyKdV = new_instancemethod(_snap.TIntFltH_GetDatKeyKdV,None,TIntFltH)
TIntFltH.Swap = new_instancemethod(_snap.TIntFltH_Swap,None,TIntFltH)
TIntFltH.Defrag = new_instancemethod(_snap.TIntFltH_Defrag,None,TIntFltH)
TIntFltH.Pack = new_instancemethod(_snap.TIntFltH_Pack,None,TIntFltH)
TIntFltH.Sort = new_instancemethod(_snap.TIntFltH_Sort,None,TIntFltH)
TIntFltH.SortByKey = new_instancemethod(_snap.TIntFltH_SortByKey,None,TIntFltH)
TIntFltH.SortByDat = new_instancemethod(_snap.TIntFltH_SortByDat,None,TIntFltH)
TIntFltH_swigregister = _snap.TIntFltH_swigregister
TIntFltH_swigregister(TIntFltH)

class TIntStrH(object):
    """Proxy of C++ THash<(TInt,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntStrH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(self) -> TIntStrH
        __init__(self, TIntStrH Hash) -> TIntStrH
        Parameters:
           Hash: THash< TInt,TStr > const & value

           Hash: THash< TInt,TStr > const & value

        __init__(self, int ExpectVals, bool _AutoSizeP = False) -> TIntStrH
        Parameters:
           ExpectVals: int const & value
           _AutoSizeP: bool const & value

           ExpectVals: int const & value
           _AutoSizeP: bool const & value

        __init__(self, int ExpectVals) -> TIntStrH
        Parameters:
           ExpectVals: int const & value

           ExpectVals: int const & value

        __init__(self, TSIn SIn) -> TIntStrH
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntStrH_swiginit(self,_snap.new_TIntStrH(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: THash< TInt,TStr > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntStrH_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: THash< TInt,TStr > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntStrH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntStrH Hash) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value
           Hash: THash< TInt,TStr > const & value

           Hash: THash< TInt,TStr > const & value

        """
        return _snap.TIntStrH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntStrH Hash) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value
           Hash: THash< TInt,TStr > const & value

           Hash: THash< TInt,TStr > const & value

        """
        return _snap.TIntStrH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(self, TInt Key) -> TStr
        Parameters:
           self: THash< TInt,TStr > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntStrH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, TInt Key) -> TIter
        Parameters:
           self: THash< TInt,TStr > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntStrH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(self, int ExpectVals)
        Parameters:
           self: THash< TInt,TStr > * value
           ExpectVals: int const & value

           ExpectVals: int const & value

        """
        return _snap.TIntStrH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1, bool ResetDat = True)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: THash< TInt,TStr > * value


        """
        return _snap.TIntStrH_Clr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_Len(self)

    def GetPorts(self):
        """
        GetPorts(self) -> int
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(self) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(self) -> int
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(self) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TStr > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntStrH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(self, TInt Key) -> TStr
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        AddDat(self, TInt Key, TStr Dat) -> TStr
        Parameters:
           self: THash< TInt,TStr > * value
           Key: TInt const & value
           Dat: TStr const & value

           Key: TInt const & value
           Dat: TStr const & value

        """
        return _snap.TIntStrH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(self, TInt Key)
        Parameters:
           self: THash< TInt,TStr > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntStrH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(self, TInt Key) -> bool
        Parameters:
           self: THash< TInt,TStr > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntStrH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(self, int KeyId)
        Parameters:
           self: THash< TInt,TStr > * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntStrH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(self, TIntV KeyIdV)
        Parameters:
           self: THash< TInt,TStr > * value
           KeyIdV: TIntV const & value

           KeyIdV: TIntV const & value

        """
        return _snap.TIntStrH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(self, int KeyId) -> TInt
        Parameters:
           self: THash< TInt,TStr > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntStrH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(self, TInt Key) -> int
        Parameters:
           self: THash< TInt,TStr > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntStrH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(self, TRnd Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndKeyId(self, TRnd Rnd, double EmptyFrac) -> int
        Parameters:
           self: THash< TInt,TStr > * value
           Rnd: TRnd & value
           EmptyFrac: double const & value

           Rnd: TRnd & value
           EmptyFrac: double const & value

        """
        return _snap.TIntStrH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(self, TInt Key) -> bool
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        IsKey(self, TInt Key, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value
           Key: TInt const & value
           KeyId: int & value

           Key: TInt const & value
           KeyId: int & value

        """
        return _snap.TIntStrH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntStrH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TInt Key) -> TStr
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        GetDat(self, TInt Key) -> TStr
        Parameters:
           self: THash< TInt,TStr > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntStrH_GetDat(self, *args)

    def GetDatWithDefault(self, *args):
        """
        GetDatWithDefault(self, TInt Key, TStr DefaultValue) -> TStr
        Parameters:
           self: THash< TInt,TStr > * value
           Key: TInt const & value
           DefaultValue: TStr value

           Key: TInt const & value
           DefaultValue: TStr value

        """
        return _snap.TIntStrH_GetDatWithDefault(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(self, int KeyId, TInt Key, TStr Dat)
        Parameters:
           self: THash< TInt,TStr > const * value
           KeyId: int const & value
           Key: TInt & value
           Dat: TStr & value

           KeyId: int const & value
           Key: TInt & value
           Dat: TStr & value

        """
        return _snap.TIntStrH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(self, TInt Key, TStr Dat) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value
           Key: TInt const & value
           Dat: TStr & value

           Key: TInt const & value
           Dat: TStr & value

        """
        return _snap.TIntStrH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(self) -> int
        Parameters:
           self: THash< TInt,TStr > const * value




        """
        return _snap.TIntStrH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TInt,TStr > const * value
           KeyId: int & value

           KeyId: int & value

        """
        return _snap.TIntStrH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(self, TIntV KeyV)
        Parameters:
           self: THash< TInt,TStr > const * value
           KeyV: TVec< TInt > & value

           KeyV: TVec< TInt > & value

        """
        return _snap.TIntStrH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(self, TStrV DatV)
        Parameters:
           self: THash< TInt,TStr > const * value
           DatV: TVec< TStr > & value

           DatV: TVec< TStr > & value

        """
        return _snap.TIntStrH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(self, TVec<(TPair<(TInt,TStr)>)> KeyDatPrV)
        Parameters:
           self: THash< TInt,TStr > const * value
           KeyDatPrV: TVec< TPair< TInt,TStr > > & value

           KeyDatPrV: TVec< TPair< TInt,TStr > > & value

        """
        return _snap.TIntStrH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(self, TStrIntPrV DatKeyPrV)
        Parameters:
           self: THash< TInt,TStr > const * value
           DatKeyPrV: TVec< TPair< TStr,TInt > > & value

           DatKeyPrV: TVec< TPair< TStr,TInt > > & value

        """
        return _snap.TIntStrH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(self, TVec<(TKeyDat<(TInt,TStr)>)> KeyDatKdV)
        Parameters:
           self: THash< TInt,TStr > const * value
           KeyDatKdV: TVec< TKeyDat< TInt,TStr > > & value

           KeyDatKdV: TVec< TKeyDat< TInt,TStr > > & value

        """
        return _snap.TIntStrH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(self, TVec<(TKeyDat<(TStr,TInt)>)> DatKeyKdV)
        Parameters:
           self: THash< TInt,TStr > const * value
           DatKeyKdV: TVec< TKeyDat< TStr,TInt > > & value

           DatKeyKdV: TVec< TKeyDat< TStr,TInt > > & value

        """
        return _snap.TIntStrH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntStrH Hash)
        Parameters:
           self: THash< TInt,TStr > * value
           Hash: THash< TInt,TStr > & value

           Hash: THash< TInt,TStr > & value

        """
        return _snap.TIntStrH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: THash< TInt,TStr > * value




        """
        return _snap.TIntStrH_Defrag(self)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: THash< TInt,TStr > * value




        """
        return _snap.TIntStrH_Pack(self)

    def Sort(self, *args):
        """
        Sort(self, bool CmpKey, bool Asc)
        Parameters:
           self: THash< TInt,TStr > * value
           CmpKey: bool const & value
           Asc: bool const & value

           CmpKey: bool const & value
           Asc: bool const & value

        """
        return _snap.TIntStrH_Sort(self, *args)

    def SortByKey(self, Asc = True):
        """
        SortByKey(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByKey(self)
        Parameters:
           self: THash< TInt,TStr > * value


        """
        return _snap.TIntStrH_SortByKey(self, Asc)

    def SortByDat(self, Asc = True):
        """
        SortByDat(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByDat(self)
        Parameters:
           self: THash< TInt,TStr > * value


        """
        return _snap.TIntStrH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntStrH
TIntStrH.Load = new_instancemethod(_snap.TIntStrH_Load,None,TIntStrH)
TIntStrH.Save = new_instancemethod(_snap.TIntStrH_Save,None,TIntStrH)
TIntStrH.__eq__ = new_instancemethod(_snap.TIntStrH___eq__,None,TIntStrH)
TIntStrH.__lt__ = new_instancemethod(_snap.TIntStrH___lt__,None,TIntStrH)
TIntStrH.__call__ = new_instancemethod(_snap.TIntStrH___call__,None,TIntStrH)
TIntStrH.GetMemUsed = new_instancemethod(_snap.TIntStrH_GetMemUsed,None,TIntStrH)
TIntStrH.BegI = new_instancemethod(_snap.TIntStrH_BegI,None,TIntStrH)
TIntStrH.EndI = new_instancemethod(_snap.TIntStrH_EndI,None,TIntStrH)
TIntStrH.GetI = new_instancemethod(_snap.TIntStrH_GetI,None,TIntStrH)
TIntStrH.Gen = new_instancemethod(_snap.TIntStrH_Gen,None,TIntStrH)
TIntStrH.Clr = new_instancemethod(_snap.TIntStrH_Clr,None,TIntStrH)
TIntStrH.Empty = new_instancemethod(_snap.TIntStrH_Empty,None,TIntStrH)
TIntStrH.Len = new_instancemethod(_snap.TIntStrH_Len,None,TIntStrH)
TIntStrH.GetPorts = new_instancemethod(_snap.TIntStrH_GetPorts,None,TIntStrH)
TIntStrH.IsAutoSize = new_instancemethod(_snap.TIntStrH_IsAutoSize,None,TIntStrH)
TIntStrH.GetMxKeyIds = new_instancemethod(_snap.TIntStrH_GetMxKeyIds,None,TIntStrH)
TIntStrH.GetReservedKeyIds = new_instancemethod(_snap.TIntStrH_GetReservedKeyIds,None,TIntStrH)
TIntStrH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntStrH_IsKeyIdEqKeyN,None,TIntStrH)
TIntStrH.AddKey = new_instancemethod(_snap.TIntStrH_AddKey,None,TIntStrH)
TIntStrH.AddDat = new_instancemethod(_snap.TIntStrH_AddDat,None,TIntStrH)
TIntStrH.DelKey = new_instancemethod(_snap.TIntStrH_DelKey,None,TIntStrH)
TIntStrH.DelIfKey = new_instancemethod(_snap.TIntStrH_DelIfKey,None,TIntStrH)
TIntStrH.DelKeyId = new_instancemethod(_snap.TIntStrH_DelKeyId,None,TIntStrH)
TIntStrH.DelKeyIdV = new_instancemethod(_snap.TIntStrH_DelKeyIdV,None,TIntStrH)
TIntStrH.GetKey = new_instancemethod(_snap.TIntStrH_GetKey,None,TIntStrH)
TIntStrH.GetKeyId = new_instancemethod(_snap.TIntStrH_GetKeyId,None,TIntStrH)
TIntStrH.GetRndKeyId = new_instancemethod(_snap.TIntStrH_GetRndKeyId,None,TIntStrH)
TIntStrH.IsKey = new_instancemethod(_snap.TIntStrH_IsKey,None,TIntStrH)
TIntStrH.IsKeyId = new_instancemethod(_snap.TIntStrH_IsKeyId,None,TIntStrH)
TIntStrH.GetDat = new_instancemethod(_snap.TIntStrH_GetDat,None,TIntStrH)
TIntStrH.GetDatWithDefault = new_instancemethod(_snap.TIntStrH_GetDatWithDefault,None,TIntStrH)
TIntStrH.GetKeyDat = new_instancemethod(_snap.TIntStrH_GetKeyDat,None,TIntStrH)
TIntStrH.IsKeyGetDat = new_instancemethod(_snap.TIntStrH_IsKeyGetDat,None,TIntStrH)
TIntStrH.FFirstKeyId = new_instancemethod(_snap.TIntStrH_FFirstKeyId,None,TIntStrH)
TIntStrH.FNextKeyId = new_instancemethod(_snap.TIntStrH_FNextKeyId,None,TIntStrH)
TIntStrH.GetKeyV = new_instancemethod(_snap.TIntStrH_GetKeyV,None,TIntStrH)
TIntStrH.GetDatV = new_instancemethod(_snap.TIntStrH_GetDatV,None,TIntStrH)
TIntStrH.GetKeyDatPrV = new_instancemethod(_snap.TIntStrH_GetKeyDatPrV,None,TIntStrH)
TIntStrH.GetDatKeyPrV = new_instancemethod(_snap.TIntStrH_GetDatKeyPrV,None,TIntStrH)
TIntStrH.GetKeyDatKdV = new_instancemethod(_snap.TIntStrH_GetKeyDatKdV,None,TIntStrH)
TIntStrH.GetDatKeyKdV = new_instancemethod(_snap.TIntStrH_GetDatKeyKdV,None,TIntStrH)
TIntStrH.Swap = new_instancemethod(_snap.TIntStrH_Swap,None,TIntStrH)
TIntStrH.Defrag = new_instancemethod(_snap.TIntStrH_Defrag,None,TIntStrH)
TIntStrH.Pack = new_instancemethod(_snap.TIntStrH_Pack,None,TIntStrH)
TIntStrH.Sort = new_instancemethod(_snap.TIntStrH_Sort,None,TIntStrH)
TIntStrH.SortByKey = new_instancemethod(_snap.TIntStrH_SortByKey,None,TIntStrH)
TIntStrH.SortByDat = new_instancemethod(_snap.TIntStrH_SortByDat,None,TIntStrH)
TIntStrH_swigregister = _snap.TIntStrH_swigregister
TIntStrH_swigregister(TIntStrH)

class TIntPrFltH(object):
    """Proxy of C++ THash<(TIntPr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HashPrimes = _snap.TIntPrFltH_HashPrimes
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrFltH
        __init__(self, TIntPrFltH Hash) -> TIntPrFltH
        Parameters:
           Hash: THash< TIntPr,TFlt > const & value

           Hash: THash< TIntPr,TFlt > const & value

        __init__(self, int ExpectVals, bool _AutoSizeP = False) -> TIntPrFltH
        Parameters:
           ExpectVals: int const & value
           _AutoSizeP: bool const & value

           ExpectVals: int const & value
           _AutoSizeP: bool const & value

        __init__(self, int ExpectVals) -> TIntPrFltH
        Parameters:
           ExpectVals: int const & value

           ExpectVals: int const & value

        __init__(self, TSIn SIn) -> TIntPrFltH
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntPrFltH_swiginit(self,_snap.new_TIntPrFltH(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: THash< TIntPr,TFlt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntPrFltH_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntPrFltH_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntPrFltH Hash) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           Hash: THash< TIntPr,TFlt > const & value

           Hash: THash< TIntPr,TFlt > const & value

        """
        return _snap.TIntPrFltH___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrFltH Hash) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           Hash: THash< TIntPr,TFlt > const & value

           Hash: THash< TIntPr,TFlt > const & value

        """
        return _snap.TIntPrFltH___lt__(self, *args)

    def __call__(self, *args):
        """
        __call__(self, TIntPr Key) -> TFlt
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrFltH___call__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_GetMemUsed(self)

    def BegI(self):
        """
        BegI(self) -> THash<(TPair<(TInt,TInt)>,TFlt)>::TIter
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_BegI(self)

    def EndI(self):
        """
        EndI(self) -> THash<(TPair<(TInt,TInt)>,TFlt)>::TIter
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, TIntPr Key) -> THash<(TPair<(TInt,TInt)>,TFlt)>::TIter
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrFltH_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(self, int ExpectVals)
        Parameters:
           self: THash< TIntPr,TFlt > * value
           ExpectVals: int const & value

           ExpectVals: int const & value

        """
        return _snap.TIntPrFltH_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1, bool ResetDat = True)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

           DoDel: bool const & value
           NoDelLim: int const & value
           ResetDat: bool const & value

        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: THash< TIntPr,TFlt > * value


        """
        return _snap.TIntPrFltH_Clr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_Len(self)

    def GetPorts(self):
        """
        GetPorts(self) -> int
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(self) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(self) -> int
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(self) -> int
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(self) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(self, TIntPr Key) -> int
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrFltH_AddKey(self, *args)

    def AddDat(self, *args):
        """
        AddDat(self, TIntPr Key) -> TFlt
        Parameters:
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        AddDat(self, TIntPr Key, TFlt Dat) -> TFlt
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Key: TPair< TInt,TInt > const & value
           Dat: TFlt const & value

           Key: TPair< TInt,TInt > const & value
           Dat: TFlt const & value

        """
        return _snap.TIntPrFltH_AddDat(self, *args)

    def DelKey(self, *args):
        """
        DelKey(self, TIntPr Key)
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrFltH_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(self, TIntPr Key) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrFltH_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(self, int KeyId)
        Parameters:
           self: THash< TIntPr,TFlt > * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntPrFltH_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(self, TIntV KeyIdV)
        Parameters:
           self: THash< TIntPr,TFlt > * value
           KeyIdV: TIntV const & value

           KeyIdV: TIntV const & value

        """
        return _snap.TIntPrFltH_DelKeyIdV(self, *args)

    def GetKey(self, *args):
        """
        GetKey(self, int KeyId) -> TIntPr
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntPrFltH_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(self, TIntPr Key) -> int
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrFltH_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(self, TRnd Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndKeyId(self, TRnd Rnd, double EmptyFrac) -> int
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Rnd: TRnd & value
           EmptyFrac: double const & value

           Rnd: TRnd & value
           EmptyFrac: double const & value

        """
        return _snap.TIntPrFltH_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(self, TIntPr Key) -> bool
        Parameters:
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        IsKey(self, TIntPr Key, int KeyId) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           Key: TPair< TInt,TInt > const & value
           KeyId: int & value

           Key: TPair< TInt,TInt > const & value
           KeyId: int & value

        """
        return _snap.TIntPrFltH_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntPrFltH_IsKeyId(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TIntPr Key) -> TFlt
        Parameters:
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        GetDat(self, TIntPr Key) -> TFlt
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Key: TPair< TInt,TInt > const & value

           Key: TPair< TInt,TInt > const & value

        """
        return _snap.TIntPrFltH_GetDat(self, *args)

    def GetDatWithDefault(self, *args):
        """
        GetDatWithDefault(self, TIntPr Key, TFlt DefaultValue) -> TFlt
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Key: TPair< TInt,TInt > const & value
           DefaultValue: TFlt value

           Key: TPair< TInt,TInt > const & value
           DefaultValue: TFlt value

        """
        return _snap.TIntPrFltH_GetDatWithDefault(self, *args)

    def GetKeyDat(self, *args):
        """
        GetKeyDat(self, int KeyId, TIntPr Key, TFlt Dat)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           KeyId: int const & value
           Key: TPair< TInt,TInt > & value
           Dat: TFlt & value

           KeyId: int const & value
           Key: TPair< TInt,TInt > & value
           Dat: TFlt & value

        """
        return _snap.TIntPrFltH_GetKeyDat(self, *args)

    def IsKeyGetDat(self, *args):
        """
        IsKeyGetDat(self, TIntPr Key, TFlt Dat) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           Key: TPair< TInt,TInt > const & value
           Dat: TFlt & value

           Key: TPair< TInt,TInt > const & value
           Dat: TFlt & value

        """
        return _snap.TIntPrFltH_IsKeyGetDat(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(self) -> int
        Parameters:
           self: THash< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltH_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(self, int KeyId) -> bool
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           KeyId: int & value

           KeyId: int & value

        """
        return _snap.TIntPrFltH_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(self, TIntPrV KeyV)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           KeyV: TVec< TPair< TInt,TInt > > & value

           KeyV: TVec< TPair< TInt,TInt > > & value

        """
        return _snap.TIntPrFltH_GetKeyV(self, *args)

    def GetDatV(self, *args):
        """
        GetDatV(self, TFltV DatV)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           DatV: TVec< TFlt > & value

           DatV: TVec< TFlt > & value

        """
        return _snap.TIntPrFltH_GetDatV(self, *args)

    def GetKeyDatPrV(self, *args):
        """
        GetKeyDatPrV(self, TVec<(TPair<(TPair<(TInt,TInt)>,TFlt)>)> KeyDatPrV)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           KeyDatPrV: TVec< TPair< TPair< TInt,TInt >,TFlt > > & value

           KeyDatPrV: TVec< TPair< TPair< TInt,TInt >,TFlt > > & value

        """
        return _snap.TIntPrFltH_GetKeyDatPrV(self, *args)

    def GetDatKeyPrV(self, *args):
        """
        GetDatKeyPrV(self, TVec<(TPair<(TFlt,TPair<(TInt,TInt)>)>)> DatKeyPrV)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           DatKeyPrV: TVec< TPair< TFlt,TPair< TInt,TInt > > > & value

           DatKeyPrV: TVec< TPair< TFlt,TPair< TInt,TInt > > > & value

        """
        return _snap.TIntPrFltH_GetDatKeyPrV(self, *args)

    def GetKeyDatKdV(self, *args):
        """
        GetKeyDatKdV(self, TVec<(TKeyDat<(TPair<(TInt,TInt)>,TFlt)>)> KeyDatKdV)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           KeyDatKdV: TVec< TKeyDat< TPair< TInt,TInt >,TFlt > > & value

           KeyDatKdV: TVec< TKeyDat< TPair< TInt,TInt >,TFlt > > & value

        """
        return _snap.TIntPrFltH_GetKeyDatKdV(self, *args)

    def GetDatKeyKdV(self, *args):
        """
        GetDatKeyKdV(self, TVec<(TKeyDat<(TFlt,TPair<(TInt,TInt)>)>)> DatKeyKdV)
        Parameters:
           self: THash< TIntPr,TFlt > const * value
           DatKeyKdV: TVec< TKeyDat< TFlt,TPair< TInt,TInt > > > & value

           DatKeyKdV: TVec< TKeyDat< TFlt,TPair< TInt,TInt > > > & value

        """
        return _snap.TIntPrFltH_GetDatKeyKdV(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntPrFltH Hash)
        Parameters:
           self: THash< TIntPr,TFlt > * value
           Hash: THash< TIntPr,TFlt > & value

           Hash: THash< TIntPr,TFlt > & value

        """
        return _snap.TIntPrFltH_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: THash< TIntPr,TFlt > * value




        """
        return _snap.TIntPrFltH_Defrag(self)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: THash< TIntPr,TFlt > * value




        """
        return _snap.TIntPrFltH_Pack(self)

    def Sort(self, *args):
        """
        Sort(self, bool CmpKey, bool Asc)
        Parameters:
           self: THash< TIntPr,TFlt > * value
           CmpKey: bool const & value
           Asc: bool const & value

           CmpKey: bool const & value
           Asc: bool const & value

        """
        return _snap.TIntPrFltH_Sort(self, *args)

    def SortByKey(self, Asc = True):
        """
        SortByKey(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByKey(self)
        Parameters:
           self: THash< TIntPr,TFlt > * value


        """
        return _snap.TIntPrFltH_SortByKey(self, Asc)

    def SortByDat(self, Asc = True):
        """
        SortByDat(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        SortByDat(self)
        Parameters:
           self: THash< TIntPr,TFlt > * value


        """
        return _snap.TIntPrFltH_SortByDat(self, Asc)

    __swig_destroy__ = _snap.delete_TIntPrFltH
TIntPrFltH.Load = new_instancemethod(_snap.TIntPrFltH_Load,None,TIntPrFltH)
TIntPrFltH.Save = new_instancemethod(_snap.TIntPrFltH_Save,None,TIntPrFltH)
TIntPrFltH.__eq__ = new_instancemethod(_snap.TIntPrFltH___eq__,None,TIntPrFltH)
TIntPrFltH.__lt__ = new_instancemethod(_snap.TIntPrFltH___lt__,None,TIntPrFltH)
TIntPrFltH.__call__ = new_instancemethod(_snap.TIntPrFltH___call__,None,TIntPrFltH)
TIntPrFltH.GetMemUsed = new_instancemethod(_snap.TIntPrFltH_GetMemUsed,None,TIntPrFltH)
TIntPrFltH.BegI = new_instancemethod(_snap.TIntPrFltH_BegI,None,TIntPrFltH)
TIntPrFltH.EndI = new_instancemethod(_snap.TIntPrFltH_EndI,None,TIntPrFltH)
TIntPrFltH.GetI = new_instancemethod(_snap.TIntPrFltH_GetI,None,TIntPrFltH)
TIntPrFltH.Gen = new_instancemethod(_snap.TIntPrFltH_Gen,None,TIntPrFltH)
TIntPrFltH.Clr = new_instancemethod(_snap.TIntPrFltH_Clr,None,TIntPrFltH)
TIntPrFltH.Empty = new_instancemethod(_snap.TIntPrFltH_Empty,None,TIntPrFltH)
TIntPrFltH.Len = new_instancemethod(_snap.TIntPrFltH_Len,None,TIntPrFltH)
TIntPrFltH.GetPorts = new_instancemethod(_snap.TIntPrFltH_GetPorts,None,TIntPrFltH)
TIntPrFltH.IsAutoSize = new_instancemethod(_snap.TIntPrFltH_IsAutoSize,None,TIntPrFltH)
TIntPrFltH.GetMxKeyIds = new_instancemethod(_snap.TIntPrFltH_GetMxKeyIds,None,TIntPrFltH)
TIntPrFltH.GetReservedKeyIds = new_instancemethod(_snap.TIntPrFltH_GetReservedKeyIds,None,TIntPrFltH)
TIntPrFltH.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntPrFltH_IsKeyIdEqKeyN,None,TIntPrFltH)
TIntPrFltH.AddKey = new_instancemethod(_snap.TIntPrFltH_AddKey,None,TIntPrFltH)
TIntPrFltH.AddDat = new_instancemethod(_snap.TIntPrFltH_AddDat,None,TIntPrFltH)
TIntPrFltH.DelKey = new_instancemethod(_snap.TIntPrFltH_DelKey,None,TIntPrFltH)
TIntPrFltH.DelIfKey = new_instancemethod(_snap.TIntPrFltH_DelIfKey,None,TIntPrFltH)
TIntPrFltH.DelKeyId = new_instancemethod(_snap.TIntPrFltH_DelKeyId,None,TIntPrFltH)
TIntPrFltH.DelKeyIdV = new_instancemethod(_snap.TIntPrFltH_DelKeyIdV,None,TIntPrFltH)
TIntPrFltH.GetKey = new_instancemethod(_snap.TIntPrFltH_GetKey,None,TIntPrFltH)
TIntPrFltH.GetKeyId = new_instancemethod(_snap.TIntPrFltH_GetKeyId,None,TIntPrFltH)
TIntPrFltH.GetRndKeyId = new_instancemethod(_snap.TIntPrFltH_GetRndKeyId,None,TIntPrFltH)
TIntPrFltH.IsKey = new_instancemethod(_snap.TIntPrFltH_IsKey,None,TIntPrFltH)
TIntPrFltH.IsKeyId = new_instancemethod(_snap.TIntPrFltH_IsKeyId,None,TIntPrFltH)
TIntPrFltH.GetDat = new_instancemethod(_snap.TIntPrFltH_GetDat,None,TIntPrFltH)
TIntPrFltH.GetDatWithDefault = new_instancemethod(_snap.TIntPrFltH_GetDatWithDefault,None,TIntPrFltH)
TIntPrFltH.GetKeyDat = new_instancemethod(_snap.TIntPrFltH_GetKeyDat,None,TIntPrFltH)
TIntPrFltH.IsKeyGetDat = new_instancemethod(_snap.TIntPrFltH_IsKeyGetDat,None,TIntPrFltH)
TIntPrFltH.FFirstKeyId = new_instancemethod(_snap.TIntPrFltH_FFirstKeyId,None,TIntPrFltH)
TIntPrFltH.FNextKeyId = new_instancemethod(_snap.TIntPrFltH_FNextKeyId,None,TIntPrFltH)
TIntPrFltH.GetKeyV = new_instancemethod(_snap.TIntPrFltH_GetKeyV,None,TIntPrFltH)
TIntPrFltH.GetDatV = new_instancemethod(_snap.TIntPrFltH_GetDatV,None,TIntPrFltH)
TIntPrFltH.GetKeyDatPrV = new_instancemethod(_snap.TIntPrFltH_GetKeyDatPrV,None,TIntPrFltH)
TIntPrFltH.GetDatKeyPrV = new_instancemethod(_snap.TIntPrFltH_GetDatKeyPrV,None,TIntPrFltH)
TIntPrFltH.GetKeyDatKdV = new_instancemethod(_snap.TIntPrFltH_GetKeyDatKdV,None,TIntPrFltH)
TIntPrFltH.GetDatKeyKdV = new_instancemethod(_snap.TIntPrFltH_GetDatKeyKdV,None,TIntPrFltH)
TIntPrFltH.Swap = new_instancemethod(_snap.TIntPrFltH_Swap,None,TIntPrFltH)
TIntPrFltH.Defrag = new_instancemethod(_snap.TIntPrFltH_Defrag,None,TIntPrFltH)
TIntPrFltH.Pack = new_instancemethod(_snap.TIntPrFltH_Pack,None,TIntPrFltH)
TIntPrFltH.Sort = new_instancemethod(_snap.TIntPrFltH_Sort,None,TIntPrFltH)
TIntPrFltH.SortByKey = new_instancemethod(_snap.TIntPrFltH_SortByKey,None,TIntPrFltH)
TIntPrFltH.SortByDat = new_instancemethod(_snap.TIntPrFltH_SortByDat,None,TIntPrFltH)
TIntPrFltH_swigregister = _snap.TIntPrFltH_swigregister
TIntPrFltH_swigregister(TIntPrFltH)

class TIntHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntHI
        __init__(self, TIntHI _HashKeyDatI) -> TIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const * value

        """
        _snap.TIntHI_swiginit(self,_snap.new_TIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value
           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

        """
        return _snap.TIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value
           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

        """
        return _snap.TIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntHI
        Parameters:
           self: THashKeyDatI< TInt,TInt > * value




        """
        return _snap.TIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TInt > * value


        """
        return _snap.TIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntHI
TIntHI.__eq__ = new_instancemethod(_snap.TIntHI___eq__,None,TIntHI)
TIntHI.__lt__ = new_instancemethod(_snap.TIntHI___lt__,None,TIntHI)
TIntHI.__ref__ = new_instancemethod(_snap.TIntHI___ref__,None,TIntHI)
TIntHI.__call__ = new_instancemethod(_snap.TIntHI___call__,None,TIntHI)
TIntHI.__deref__ = new_instancemethod(_snap.TIntHI___deref__,None,TIntHI)
TIntHI.Next = new_instancemethod(_snap.TIntHI_Next,None,TIntHI)
TIntHI.IsEmpty = new_instancemethod(_snap.TIntHI_IsEmpty,None,TIntHI)
TIntHI.IsEnd = new_instancemethod(_snap.TIntHI_IsEnd,None,TIntHI)
TIntHI.GetKey = new_instancemethod(_snap.TIntHI_GetKey,None,TIntHI)
TIntHI.GetDat = new_instancemethod(_snap.TIntHI_GetDat,None,TIntHI)
TIntHI_swigregister = _snap.TIntHI_swigregister
TIntHI_swigregister(TIntHI)

class TIntIntHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntIntHI
        __init__(self, TIntHI _HashKeyDatI) -> TIntIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TIntIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TInt >::THKeyDat const * value

        """
        _snap.TIntIntHI_swiginit(self,_snap.new_TIntIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value
           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

        """
        return _snap.TIntIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value
           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

           HashKeyDatI: THashKeyDatI< TInt,TInt > const & value

        """
        return _snap.TIntIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntHI
        Parameters:
           self: THashKeyDatI< TInt,TInt > * value




        """
        return _snap.TIntIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TInt > const * value




        """
        return _snap.TIntIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TInt > * value


        """
        return _snap.TIntIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntHI
TIntIntHI.__eq__ = new_instancemethod(_snap.TIntIntHI___eq__,None,TIntIntHI)
TIntIntHI.__lt__ = new_instancemethod(_snap.TIntIntHI___lt__,None,TIntIntHI)
TIntIntHI.__ref__ = new_instancemethod(_snap.TIntIntHI___ref__,None,TIntIntHI)
TIntIntHI.__call__ = new_instancemethod(_snap.TIntIntHI___call__,None,TIntIntHI)
TIntIntHI.__deref__ = new_instancemethod(_snap.TIntIntHI___deref__,None,TIntIntHI)
TIntIntHI.Next = new_instancemethod(_snap.TIntIntHI_Next,None,TIntIntHI)
TIntIntHI.IsEmpty = new_instancemethod(_snap.TIntIntHI_IsEmpty,None,TIntIntHI)
TIntIntHI.IsEnd = new_instancemethod(_snap.TIntIntHI_IsEnd,None,TIntIntHI)
TIntIntHI.GetKey = new_instancemethod(_snap.TIntIntHI_GetKey,None,TIntIntHI)
TIntIntHI.GetDat = new_instancemethod(_snap.TIntIntHI_GetDat,None,TIntIntHI)
TIntIntHI_swigregister = _snap.TIntIntHI_swigregister
TIntIntHI_swigregister(TIntIntHI)

class TIntFltHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntFltHI
        __init__(self, TIntFltHI _HashKeyDatI) -> TIntFltHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TFlt > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TFlt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TIntFltHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TFlt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TFlt >::THKeyDat const * value

        """
        _snap.TIntFltHI_swiginit(self,_snap.new_TIntFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFlt > const & value

        """
        return _snap.TIntFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFlt > const & value

        """
        return _snap.TIntFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value




        """
        return _snap.TIntFltHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value




        """
        return _snap.TIntFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value




        """
        return _snap.TIntFltHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntFltHI
        Parameters:
           self: THashKeyDatI< TInt,TFlt > * value




        """
        return _snap.TIntFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value




        """
        return _snap.TIntFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value




        """
        return _snap.TIntFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TFlt > const * value




        """
        return _snap.TIntFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFlt
        GetDat(self) -> TFlt
        Parameters:
           self: THashKeyDatI< TInt,TFlt > * value


        """
        return _snap.TIntFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltHI
TIntFltHI.__eq__ = new_instancemethod(_snap.TIntFltHI___eq__,None,TIntFltHI)
TIntFltHI.__lt__ = new_instancemethod(_snap.TIntFltHI___lt__,None,TIntFltHI)
TIntFltHI.__ref__ = new_instancemethod(_snap.TIntFltHI___ref__,None,TIntFltHI)
TIntFltHI.__call__ = new_instancemethod(_snap.TIntFltHI___call__,None,TIntFltHI)
TIntFltHI.__deref__ = new_instancemethod(_snap.TIntFltHI___deref__,None,TIntFltHI)
TIntFltHI.Next = new_instancemethod(_snap.TIntFltHI_Next,None,TIntFltHI)
TIntFltHI.IsEmpty = new_instancemethod(_snap.TIntFltHI_IsEmpty,None,TIntFltHI)
TIntFltHI.IsEnd = new_instancemethod(_snap.TIntFltHI_IsEnd,None,TIntFltHI)
TIntFltHI.GetKey = new_instancemethod(_snap.TIntFltHI_GetKey,None,TIntFltHI)
TIntFltHI.GetDat = new_instancemethod(_snap.TIntFltHI_GetDat,None,TIntFltHI)
TIntFltHI_swigregister = _snap.TIntFltHI_swigregister
TIntFltHI_swigregister(TIntFltHI)

class TIntStrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntStrHI
        __init__(self, TIntStrHI _HashKeyDatI) -> TIntStrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TStr > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TStr > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TIntStrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TStr >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TStr >::THKeyDat const * value

        """
        _snap.TIntStrHI_swiginit(self,_snap.new_TIntStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TStr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TStr > const & value

        """
        return _snap.TIntStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TStr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TStr > const & value

        """
        return _snap.TIntStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value




        """
        return _snap.TIntStrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value




        """
        return _snap.TIntStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value




        """
        return _snap.TIntStrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntStrHI
        Parameters:
           self: THashKeyDatI< TInt,TStr > * value




        """
        return _snap.TIntStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value




        """
        return _snap.TIntStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value




        """
        return _snap.TIntStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TStr > const * value




        """
        return _snap.TIntStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStr
        GetDat(self) -> TStr
        Parameters:
           self: THashKeyDatI< TInt,TStr > * value


        """
        return _snap.TIntStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntStrHI
TIntStrHI.__eq__ = new_instancemethod(_snap.TIntStrHI___eq__,None,TIntStrHI)
TIntStrHI.__lt__ = new_instancemethod(_snap.TIntStrHI___lt__,None,TIntStrHI)
TIntStrHI.__ref__ = new_instancemethod(_snap.TIntStrHI___ref__,None,TIntStrHI)
TIntStrHI.__call__ = new_instancemethod(_snap.TIntStrHI___call__,None,TIntStrHI)
TIntStrHI.__deref__ = new_instancemethod(_snap.TIntStrHI___deref__,None,TIntStrHI)
TIntStrHI.Next = new_instancemethod(_snap.TIntStrHI_Next,None,TIntStrHI)
TIntStrHI.IsEmpty = new_instancemethod(_snap.TIntStrHI_IsEmpty,None,TIntStrHI)
TIntStrHI.IsEnd = new_instancemethod(_snap.TIntStrHI_IsEnd,None,TIntStrHI)
TIntStrHI.GetKey = new_instancemethod(_snap.TIntStrHI_GetKey,None,TIntStrHI)
TIntStrHI.GetDat = new_instancemethod(_snap.TIntStrHI_GetDat,None,TIntStrHI)
TIntStrHI_swigregister = _snap.TIntStrHI_swigregister
TIntStrHI_swigregister(TIntStrHI)

class TIntPrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrFltHI
        __init__(self, TIntPrFltHI _HashKeyDatI) -> TIntPrFltHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const & value

           _HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const & value

        __init__(self, THashKeyDatI<(TPair<(TInt,TInt)>,TFlt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TInt,TInt)>,TFlt)>::THKeyDat _EndI) -> TIntPrFltHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TFlt >::THKeyDat const * value

        """
        _snap.TIntPrFltHI_swiginit(self,_snap.new_TIntPrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntPrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const & value

        """
        return _snap.TIntPrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TFlt > const & value

        """
        return _snap.TIntPrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntPrFltHI
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > * value




        """
        return _snap.TIntPrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > const * value




        """
        return _snap.TIntPrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFlt
        GetDat(self) -> TFlt
        Parameters:
           self: THashKeyDatI< TIntPr,TFlt > * value


        """
        return _snap.TIntPrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrFltHI
TIntPrFltHI.__eq__ = new_instancemethod(_snap.TIntPrFltHI___eq__,None,TIntPrFltHI)
TIntPrFltHI.__lt__ = new_instancemethod(_snap.TIntPrFltHI___lt__,None,TIntPrFltHI)
TIntPrFltHI.__ref__ = new_instancemethod(_snap.TIntPrFltHI___ref__,None,TIntPrFltHI)
TIntPrFltHI.__call__ = new_instancemethod(_snap.TIntPrFltHI___call__,None,TIntPrFltHI)
TIntPrFltHI.__deref__ = new_instancemethod(_snap.TIntPrFltHI___deref__,None,TIntPrFltHI)
TIntPrFltHI.Next = new_instancemethod(_snap.TIntPrFltHI_Next,None,TIntPrFltHI)
TIntPrFltHI.IsEmpty = new_instancemethod(_snap.TIntPrFltHI_IsEmpty,None,TIntPrFltHI)
TIntPrFltHI.IsEnd = new_instancemethod(_snap.TIntPrFltHI_IsEnd,None,TIntPrFltHI)
TIntPrFltHI.GetKey = new_instancemethod(_snap.TIntPrFltHI_GetKey,None,TIntPrFltHI)
TIntPrFltHI.GetDat = new_instancemethod(_snap.TIntPrFltHI_GetDat,None,TIntPrFltHI)
TIntPrFltHI_swigregister = _snap.TIntPrFltHI_swigregister
TIntPrFltHI_swigregister(TIntPrFltHI)

class TUInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TUInt64,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TUInt64HI
        __init__(self, TUInt64HI _HashKeyDatI) -> TUInt64HI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TUInt64,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TUInt64,TInt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TUInt64HI
        Parameters:
           _KeyDatI: THashKeyDatI< TUInt64,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TUInt64,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TUInt64,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TUInt64,TInt >::THKeyDat const * value

        """
        _snap.TUInt64HI_swiginit(self,_snap.new_TUInt64HI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TUInt64HI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value
           HashKeyDatI: THashKeyDatI< TUInt64,TInt > const & value

           HashKeyDatI: THashKeyDatI< TUInt64,TInt > const & value

        """
        return _snap.TUInt64HI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TUInt64HI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value
           HashKeyDatI: THashKeyDatI< TUInt64,TInt > const & value

           HashKeyDatI: THashKeyDatI< TUInt64,TInt > const & value

        """
        return _snap.TUInt64HI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value




        """
        return _snap.TUInt64HI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value




        """
        return _snap.TUInt64HI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value




        """
        return _snap.TUInt64HI___deref__(self)

    def Next(self):
        """
        Next(self) -> TUInt64HI
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > * value




        """
        return _snap.TUInt64HI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value




        """
        return _snap.TUInt64HI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value




        """
        return _snap.TUInt64HI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TUInt64
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > const * value




        """
        return _snap.TUInt64HI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TUInt64,TInt > * value


        """
        return _snap.TUInt64HI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TUInt64HI
TUInt64HI.__eq__ = new_instancemethod(_snap.TUInt64HI___eq__,None,TUInt64HI)
TUInt64HI.__lt__ = new_instancemethod(_snap.TUInt64HI___lt__,None,TUInt64HI)
TUInt64HI.__ref__ = new_instancemethod(_snap.TUInt64HI___ref__,None,TUInt64HI)
TUInt64HI.__call__ = new_instancemethod(_snap.TUInt64HI___call__,None,TUInt64HI)
TUInt64HI.__deref__ = new_instancemethod(_snap.TUInt64HI___deref__,None,TUInt64HI)
TUInt64HI.Next = new_instancemethod(_snap.TUInt64HI_Next,None,TUInt64HI)
TUInt64HI.IsEmpty = new_instancemethod(_snap.TUInt64HI_IsEmpty,None,TUInt64HI)
TUInt64HI.IsEnd = new_instancemethod(_snap.TUInt64HI_IsEnd,None,TUInt64HI)
TUInt64HI.GetKey = new_instancemethod(_snap.TUInt64HI_GetKey,None,TUInt64HI)
TUInt64HI.GetDat = new_instancemethod(_snap.TUInt64HI_GetDat,None,TUInt64HI)
TUInt64HI_swigregister = _snap.TUInt64HI_swigregister
TUInt64HI_swigregister(TUInt64HI)

class TIntBoolHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TBool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntBoolHI
        __init__(self, TIntBoolHI _HashKeyDatI) -> TIntBoolHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TBool > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TBool > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TIntBoolHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TBool >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TBool >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TBool >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TBool >::THKeyDat const * value

        """
        _snap.TIntBoolHI_swiginit(self,_snap.new_TIntBoolHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntBoolHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value
           HashKeyDatI: THashKeyDatI< TInt,TBool > const & value

           HashKeyDatI: THashKeyDatI< TInt,TBool > const & value

        """
        return _snap.TIntBoolHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntBoolHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value
           HashKeyDatI: THashKeyDatI< TInt,TBool > const & value

           HashKeyDatI: THashKeyDatI< TInt,TBool > const & value

        """
        return _snap.TIntBoolHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value




        """
        return _snap.TIntBoolHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value




        """
        return _snap.TIntBoolHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value




        """
        return _snap.TIntBoolHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntBoolHI
        Parameters:
           self: THashKeyDatI< TInt,TBool > * value




        """
        return _snap.TIntBoolHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value




        """
        return _snap.TIntBoolHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value




        """
        return _snap.TIntBoolHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TBool > const * value




        """
        return _snap.TIntBoolHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TBool
        GetDat(self) -> TBool
        Parameters:
           self: THashKeyDatI< TInt,TBool > * value


        """
        return _snap.TIntBoolHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntBoolHI
TIntBoolHI.__eq__ = new_instancemethod(_snap.TIntBoolHI___eq__,None,TIntBoolHI)
TIntBoolHI.__lt__ = new_instancemethod(_snap.TIntBoolHI___lt__,None,TIntBoolHI)
TIntBoolHI.__ref__ = new_instancemethod(_snap.TIntBoolHI___ref__,None,TIntBoolHI)
TIntBoolHI.__call__ = new_instancemethod(_snap.TIntBoolHI___call__,None,TIntBoolHI)
TIntBoolHI.__deref__ = new_instancemethod(_snap.TIntBoolHI___deref__,None,TIntBoolHI)
TIntBoolHI.Next = new_instancemethod(_snap.TIntBoolHI_Next,None,TIntBoolHI)
TIntBoolHI.IsEmpty = new_instancemethod(_snap.TIntBoolHI_IsEmpty,None,TIntBoolHI)
TIntBoolHI.IsEnd = new_instancemethod(_snap.TIntBoolHI_IsEnd,None,TIntBoolHI)
TIntBoolHI.GetKey = new_instancemethod(_snap.TIntBoolHI_GetKey,None,TIntBoolHI)
TIntBoolHI.GetDat = new_instancemethod(_snap.TIntBoolHI_GetDat,None,TIntBoolHI)
TIntBoolHI_swigregister = _snap.TIntBoolHI_swigregister
TIntBoolHI_swigregister(TIntBoolHI)

class TIntUInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TUInt64)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntUInt64HI
        __init__(self, TIntUInt64HI _HashKeyDatI) -> TIntUInt64HI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TIntUInt64HI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TUInt64 >::THKeyDat const * value

        """
        _snap.TIntUInt64HI_swiginit(self,_snap.new_TIntUInt64HI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntUInt64HI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value
           HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const & value

           HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const & value

        """
        return _snap.TIntUInt64HI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntUInt64HI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value
           HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const & value

           HashKeyDatI: THashKeyDatI< TInt,TUInt64 > const & value

        """
        return _snap.TIntUInt64HI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value




        """
        return _snap.TIntUInt64HI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value




        """
        return _snap.TIntUInt64HI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value




        """
        return _snap.TIntUInt64HI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntUInt64HI
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > * value




        """
        return _snap.TIntUInt64HI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value




        """
        return _snap.TIntUInt64HI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value




        """
        return _snap.TIntUInt64HI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > const * value




        """
        return _snap.TIntUInt64HI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TUInt64
        GetDat(self) -> TUInt64
        Parameters:
           self: THashKeyDatI< TInt,TUInt64 > * value


        """
        return _snap.TIntUInt64HI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntUInt64HI
TIntUInt64HI.__eq__ = new_instancemethod(_snap.TIntUInt64HI___eq__,None,TIntUInt64HI)
TIntUInt64HI.__lt__ = new_instancemethod(_snap.TIntUInt64HI___lt__,None,TIntUInt64HI)
TIntUInt64HI.__ref__ = new_instancemethod(_snap.TIntUInt64HI___ref__,None,TIntUInt64HI)
TIntUInt64HI.__call__ = new_instancemethod(_snap.TIntUInt64HI___call__,None,TIntUInt64HI)
TIntUInt64HI.__deref__ = new_instancemethod(_snap.TIntUInt64HI___deref__,None,TIntUInt64HI)
TIntUInt64HI.Next = new_instancemethod(_snap.TIntUInt64HI_Next,None,TIntUInt64HI)
TIntUInt64HI.IsEmpty = new_instancemethod(_snap.TIntUInt64HI_IsEmpty,None,TIntUInt64HI)
TIntUInt64HI.IsEnd = new_instancemethod(_snap.TIntUInt64HI_IsEnd,None,TIntUInt64HI)
TIntUInt64HI.GetKey = new_instancemethod(_snap.TIntUInt64HI_GetKey,None,TIntUInt64HI)
TIntUInt64HI.GetDat = new_instancemethod(_snap.TIntUInt64HI_GetDat,None,TIntUInt64HI)
TIntUInt64HI_swigregister = _snap.TIntUInt64HI_swigregister
TIntUInt64HI_swigregister(TIntUInt64HI)

class TIntIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntIntVHI
        __init__(self, TIntIntVHI _HashKeyDatI) -> TIntIntVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TIntV > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TIntV > const & value

        __init__(self, THashKeyDatI<(TInt,TVec<(TInt,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,TVec<(TInt,int)>)>::THKeyDat _EndI) -> TIntIntVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TInt,int > >::THKeyDat const * value

        """
        _snap.TIntIntVHI_swiginit(self,_snap.new_TIntIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntV > const & value

        """
        return _snap.TIntIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntV > const & value

        """
        return _snap.TIntIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value




        """
        return _snap.TIntIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value




        """
        return _snap.TIntIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value




        """
        return _snap.TIntIntVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntIntVHI
        Parameters:
           self: THashKeyDatI< TInt,TIntV > * value




        """
        return _snap.TIntIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value




        """
        return _snap.TIntIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value




        """
        return _snap.TIntIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TIntV > const * value




        """
        return _snap.TIntIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntV
        GetDat(self) -> TIntV
        Parameters:
           self: THashKeyDatI< TInt,TIntV > * value


        """
        return _snap.TIntIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntVHI
TIntIntVHI.__eq__ = new_instancemethod(_snap.TIntIntVHI___eq__,None,TIntIntVHI)
TIntIntVHI.__lt__ = new_instancemethod(_snap.TIntIntVHI___lt__,None,TIntIntVHI)
TIntIntVHI.__ref__ = new_instancemethod(_snap.TIntIntVHI___ref__,None,TIntIntVHI)
TIntIntVHI.__call__ = new_instancemethod(_snap.TIntIntVHI___call__,None,TIntIntVHI)
TIntIntVHI.__deref__ = new_instancemethod(_snap.TIntIntVHI___deref__,None,TIntIntVHI)
TIntIntVHI.Next = new_instancemethod(_snap.TIntIntVHI_Next,None,TIntIntVHI)
TIntIntVHI.IsEmpty = new_instancemethod(_snap.TIntIntVHI_IsEmpty,None,TIntIntVHI)
TIntIntVHI.IsEnd = new_instancemethod(_snap.TIntIntVHI_IsEnd,None,TIntIntVHI)
TIntIntVHI.GetKey = new_instancemethod(_snap.TIntIntVHI_GetKey,None,TIntIntVHI)
TIntIntVHI.GetDat = new_instancemethod(_snap.TIntIntVHI_GetDat,None,TIntIntVHI)
TIntIntVHI_swigregister = _snap.TIntIntVHI_swigregister
TIntIntVHI_swigregister(TIntIntVHI)

class TIntIntHHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntH)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntIntHHI
        __init__(self, TIntIntHHI _HashKeyDatI) -> TIntIntHHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TIntH > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TIntH > const & value

        __init__(self, THashKeyDatI<(TInt,THash<(TInt,TInt,TDefaultHashFunc<(TInt)>)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,THash<(TInt,TInt,TDefaultHashFunc<(TInt)>)>)>::THKeyDat _EndI) -> TIntIntHHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,THash< TInt,TInt,TDefaultHashFunc< TInt > > >::THKeyDat const * value

        """
        _snap.TIntIntHHI_swiginit(self,_snap.new_TIntIntHHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntIntHHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntH > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntH > const & value

        """
        return _snap.TIntIntHHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntIntHHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntH > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntH > const & value

        """
        return _snap.TIntIntHHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,THash<(TInt,TInt,TDefaultHashFunc<(TInt)>)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value




        """
        return _snap.TIntIntHHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,THash<(TInt,TInt,TDefaultHashFunc<(TInt)>)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value




        """
        return _snap.TIntIntHHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,THash<(TInt,TInt,TDefaultHashFunc<(TInt)>)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value




        """
        return _snap.TIntIntHHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntIntHHI
        Parameters:
           self: THashKeyDatI< TInt,TIntH > * value




        """
        return _snap.TIntIntHHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value




        """
        return _snap.TIntIntHHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value




        """
        return _snap.TIntIntHHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TIntH > const * value




        """
        return _snap.TIntIntHHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntH
        GetDat(self) -> TIntH
        Parameters:
           self: THashKeyDatI< TInt,TIntH > * value


        """
        return _snap.TIntIntHHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntHHI
TIntIntHHI.__eq__ = new_instancemethod(_snap.TIntIntHHI___eq__,None,TIntIntHHI)
TIntIntHHI.__lt__ = new_instancemethod(_snap.TIntIntHHI___lt__,None,TIntIntHHI)
TIntIntHHI.__ref__ = new_instancemethod(_snap.TIntIntHHI___ref__,None,TIntIntHHI)
TIntIntHHI.__call__ = new_instancemethod(_snap.TIntIntHHI___call__,None,TIntIntHHI)
TIntIntHHI.__deref__ = new_instancemethod(_snap.TIntIntHHI___deref__,None,TIntIntHHI)
TIntIntHHI.Next = new_instancemethod(_snap.TIntIntHHI_Next,None,TIntIntHHI)
TIntIntHHI.IsEmpty = new_instancemethod(_snap.TIntIntHHI_IsEmpty,None,TIntIntHHI)
TIntIntHHI.IsEnd = new_instancemethod(_snap.TIntIntHHI_IsEnd,None,TIntIntHHI)
TIntIntHHI.GetKey = new_instancemethod(_snap.TIntIntHHI_GetKey,None,TIntIntHHI)
TIntIntHHI.GetDat = new_instancemethod(_snap.TIntIntHHI_GetDat,None,TIntIntHHI)
TIntIntHHI_swigregister = _snap.TIntIntHHI_swigregister
TIntIntHHI_swigregister(TIntIntHHI)

class TIntFltPrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFltPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntFltPrHI
        __init__(self, TIntFltPrHI _HashKeyDatI) -> TIntFltPrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TFltPr > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TFltPr > const & value

        __init__(self, THashKeyDatI<(TInt,TPair<(TFlt,TFlt)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,TPair<(TFlt,TFlt)>)>::THKeyDat _EndI) -> TIntFltPrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TPair< TFlt,TFlt > >::THKeyDat const * value

        """
        _snap.TIntFltPrHI_swiginit(self,_snap.new_TIntFltPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntFltPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFltPr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFltPr > const & value

        """
        return _snap.TIntFltPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntFltPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFltPr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFltPr > const & value

        """
        return _snap.TIntFltPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,TPair<(TFlt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value




        """
        return _snap.TIntFltPrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,TPair<(TFlt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value




        """
        return _snap.TIntFltPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,TPair<(TFlt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value




        """
        return _snap.TIntFltPrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntFltPrHI
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > * value




        """
        return _snap.TIntFltPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value




        """
        return _snap.TIntFltPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value




        """
        return _snap.TIntFltPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > const * value




        """
        return _snap.TIntFltPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFltPr
        GetDat(self) -> TFltPr
        Parameters:
           self: THashKeyDatI< TInt,TFltPr > * value


        """
        return _snap.TIntFltPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltPrHI
TIntFltPrHI.__eq__ = new_instancemethod(_snap.TIntFltPrHI___eq__,None,TIntFltPrHI)
TIntFltPrHI.__lt__ = new_instancemethod(_snap.TIntFltPrHI___lt__,None,TIntFltPrHI)
TIntFltPrHI.__ref__ = new_instancemethod(_snap.TIntFltPrHI___ref__,None,TIntFltPrHI)
TIntFltPrHI.__call__ = new_instancemethod(_snap.TIntFltPrHI___call__,None,TIntFltPrHI)
TIntFltPrHI.__deref__ = new_instancemethod(_snap.TIntFltPrHI___deref__,None,TIntFltPrHI)
TIntFltPrHI.Next = new_instancemethod(_snap.TIntFltPrHI_Next,None,TIntFltPrHI)
TIntFltPrHI.IsEmpty = new_instancemethod(_snap.TIntFltPrHI_IsEmpty,None,TIntFltPrHI)
TIntFltPrHI.IsEnd = new_instancemethod(_snap.TIntFltPrHI_IsEnd,None,TIntFltPrHI)
TIntFltPrHI.GetKey = new_instancemethod(_snap.TIntFltPrHI_GetKey,None,TIntFltPrHI)
TIntFltPrHI.GetDat = new_instancemethod(_snap.TIntFltPrHI_GetDat,None,TIntFltPrHI)
TIntFltPrHI_swigregister = _snap.TIntFltPrHI_swigregister
TIntFltPrHI_swigregister(TIntFltPrHI)

class TIntFltTrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFltTr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntFltTrHI
        __init__(self, TIntFltTrHI _HashKeyDatI) -> TIntFltTrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TFltTr > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TFltTr > const & value

        __init__(self, THashKeyDatI<(TInt,TTriple<(TFlt,TFlt,TFlt)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,TTriple<(TFlt,TFlt,TFlt)>)>::THKeyDat _EndI) -> TIntFltTrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TTriple< TFlt,TFlt,TFlt > >::THKeyDat const * value

        """
        _snap.TIntFltTrHI_swiginit(self,_snap.new_TIntFltTrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntFltTrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFltTr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFltTr > const & value

        """
        return _snap.TIntFltTrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntFltTrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFltTr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFltTr > const & value

        """
        return _snap.TIntFltTrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,TTriple<(TFlt,TFlt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value




        """
        return _snap.TIntFltTrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,TTriple<(TFlt,TFlt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value




        """
        return _snap.TIntFltTrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,TTriple<(TFlt,TFlt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value




        """
        return _snap.TIntFltTrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntFltTrHI
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > * value




        """
        return _snap.TIntFltTrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value




        """
        return _snap.TIntFltTrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value




        """
        return _snap.TIntFltTrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > const * value




        """
        return _snap.TIntFltTrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TTriple<(TFlt,TFlt,TFlt)>
        GetDat(self) -> TTriple<(TFlt,TFlt,TFlt)>
        Parameters:
           self: THashKeyDatI< TInt,TFltTr > * value


        """
        return _snap.TIntFltTrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltTrHI
TIntFltTrHI.__eq__ = new_instancemethod(_snap.TIntFltTrHI___eq__,None,TIntFltTrHI)
TIntFltTrHI.__lt__ = new_instancemethod(_snap.TIntFltTrHI___lt__,None,TIntFltTrHI)
TIntFltTrHI.__ref__ = new_instancemethod(_snap.TIntFltTrHI___ref__,None,TIntFltTrHI)
TIntFltTrHI.__call__ = new_instancemethod(_snap.TIntFltTrHI___call__,None,TIntFltTrHI)
TIntFltTrHI.__deref__ = new_instancemethod(_snap.TIntFltTrHI___deref__,None,TIntFltTrHI)
TIntFltTrHI.Next = new_instancemethod(_snap.TIntFltTrHI_Next,None,TIntFltTrHI)
TIntFltTrHI.IsEmpty = new_instancemethod(_snap.TIntFltTrHI_IsEmpty,None,TIntFltTrHI)
TIntFltTrHI.IsEnd = new_instancemethod(_snap.TIntFltTrHI_IsEnd,None,TIntFltTrHI)
TIntFltTrHI.GetKey = new_instancemethod(_snap.TIntFltTrHI_GetKey,None,TIntFltTrHI)
TIntFltTrHI.GetDat = new_instancemethod(_snap.TIntFltTrHI_GetDat,None,TIntFltTrHI)
TIntFltTrHI_swigregister = _snap.TIntFltTrHI_swigregister
TIntFltTrHI_swigregister(TIntFltTrHI)

class TIntFltVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TFltV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntFltVHI
        __init__(self, TIntFltVHI _HashKeyDatI) -> TIntFltVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TFltV > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TFltV > const & value

        __init__(self, THashKeyDatI<(TInt,TVec<(TFlt,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,TVec<(TFlt,int)>)>::THKeyDat _EndI) -> TIntFltVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TFlt,int > >::THKeyDat const * value

        """
        _snap.TIntFltVHI_swiginit(self,_snap.new_TIntFltVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntFltVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFltV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFltV > const & value

        """
        return _snap.TIntFltVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntFltVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TFltV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TFltV > const & value

        """
        return _snap.TIntFltVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,TVec<(TFlt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value




        """
        return _snap.TIntFltVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,TVec<(TFlt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value




        """
        return _snap.TIntFltVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,TVec<(TFlt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value




        """
        return _snap.TIntFltVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntFltVHI
        Parameters:
           self: THashKeyDatI< TInt,TFltV > * value




        """
        return _snap.TIntFltVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value




        """
        return _snap.TIntFltVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value




        """
        return _snap.TIntFltVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TFltV > const * value




        """
        return _snap.TIntFltVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFltV
        GetDat(self) -> TFltV
        Parameters:
           self: THashKeyDatI< TInt,TFltV > * value


        """
        return _snap.TIntFltVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntFltVHI
TIntFltVHI.__eq__ = new_instancemethod(_snap.TIntFltVHI___eq__,None,TIntFltVHI)
TIntFltVHI.__lt__ = new_instancemethod(_snap.TIntFltVHI___lt__,None,TIntFltVHI)
TIntFltVHI.__ref__ = new_instancemethod(_snap.TIntFltVHI___ref__,None,TIntFltVHI)
TIntFltVHI.__call__ = new_instancemethod(_snap.TIntFltVHI___call__,None,TIntFltVHI)
TIntFltVHI.__deref__ = new_instancemethod(_snap.TIntFltVHI___deref__,None,TIntFltVHI)
TIntFltVHI.Next = new_instancemethod(_snap.TIntFltVHI_Next,None,TIntFltVHI)
TIntFltVHI.IsEmpty = new_instancemethod(_snap.TIntFltVHI_IsEmpty,None,TIntFltVHI)
TIntFltVHI.IsEnd = new_instancemethod(_snap.TIntFltVHI_IsEnd,None,TIntFltVHI)
TIntFltVHI.GetKey = new_instancemethod(_snap.TIntFltVHI_GetKey,None,TIntFltVHI)
TIntFltVHI.GetDat = new_instancemethod(_snap.TIntFltVHI_GetDat,None,TIntFltVHI)
TIntFltVHI_swigregister = _snap.TIntFltVHI_swigregister
TIntFltVHI_swigregister(TIntFltVHI)

class TIntStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntStrVHI
        __init__(self, TIntStrVHI _HashKeyDatI) -> TIntStrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TStrV > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TStrV > const & value

        __init__(self, THashKeyDatI<(TInt,TVec<(TStr,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,TVec<(TStr,int)>)>::THKeyDat _EndI) -> TIntStrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TStr,int > >::THKeyDat const * value

        """
        _snap.TIntStrVHI_swiginit(self,_snap.new_TIntStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TStrV > const & value

        """
        return _snap.TIntStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TStrV > const & value

        """
        return _snap.TIntStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value




        """
        return _snap.TIntStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value




        """
        return _snap.TIntStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value




        """
        return _snap.TIntStrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntStrVHI
        Parameters:
           self: THashKeyDatI< TInt,TStrV > * value




        """
        return _snap.TIntStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value




        """
        return _snap.TIntStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value




        """
        return _snap.TIntStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TStrV > const * value




        """
        return _snap.TIntStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStrV
        GetDat(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TInt,TStrV > * value


        """
        return _snap.TIntStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntStrVHI
TIntStrVHI.__eq__ = new_instancemethod(_snap.TIntStrVHI___eq__,None,TIntStrVHI)
TIntStrVHI.__lt__ = new_instancemethod(_snap.TIntStrVHI___lt__,None,TIntStrVHI)
TIntStrVHI.__ref__ = new_instancemethod(_snap.TIntStrVHI___ref__,None,TIntStrVHI)
TIntStrVHI.__call__ = new_instancemethod(_snap.TIntStrVHI___call__,None,TIntStrVHI)
TIntStrVHI.__deref__ = new_instancemethod(_snap.TIntStrVHI___deref__,None,TIntStrVHI)
TIntStrVHI.Next = new_instancemethod(_snap.TIntStrVHI_Next,None,TIntStrVHI)
TIntStrVHI.IsEmpty = new_instancemethod(_snap.TIntStrVHI_IsEmpty,None,TIntStrVHI)
TIntStrVHI.IsEnd = new_instancemethod(_snap.TIntStrVHI_IsEnd,None,TIntStrVHI)
TIntStrVHI.GetKey = new_instancemethod(_snap.TIntStrVHI_GetKey,None,TIntStrVHI)
TIntStrVHI.GetDat = new_instancemethod(_snap.TIntStrVHI_GetDat,None,TIntStrVHI)
TIntStrVHI_swigregister = _snap.TIntStrVHI_swigregister
TIntStrVHI_swigregister(TIntStrVHI)

class TIntIntPrHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntIntPrHI
        __init__(self, TIntIntPrHI _HashKeyDatI) -> TIntIntPrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TIntPr > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TIntPr > const & value

        __init__(self, THashKeyDatI<(TInt,TPair<(TInt,TInt)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,TPair<(TInt,TInt)>)>::THKeyDat _EndI) -> TIntIntPrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TPair< TInt,TInt > >::THKeyDat const * value

        """
        _snap.TIntIntPrHI_swiginit(self,_snap.new_TIntIntPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntIntPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntPr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntPr > const & value

        """
        return _snap.TIntIntPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntIntPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntPr > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntPr > const & value

        """
        return _snap.TIntIntPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,TPair<(TInt,TInt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value




        """
        return _snap.TIntIntPrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,TPair<(TInt,TInt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value




        """
        return _snap.TIntIntPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,TPair<(TInt,TInt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value




        """
        return _snap.TIntIntPrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntIntPrHI
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > * value




        """
        return _snap.TIntIntPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value




        """
        return _snap.TIntIntPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value




        """
        return _snap.TIntIntPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > const * value




        """
        return _snap.TIntIntPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntPr
        GetDat(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TInt,TIntPr > * value


        """
        return _snap.TIntIntPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntPrHI
TIntIntPrHI.__eq__ = new_instancemethod(_snap.TIntIntPrHI___eq__,None,TIntIntPrHI)
TIntIntPrHI.__lt__ = new_instancemethod(_snap.TIntIntPrHI___lt__,None,TIntIntPrHI)
TIntIntPrHI.__ref__ = new_instancemethod(_snap.TIntIntPrHI___ref__,None,TIntIntPrHI)
TIntIntPrHI.__call__ = new_instancemethod(_snap.TIntIntPrHI___call__,None,TIntIntPrHI)
TIntIntPrHI.__deref__ = new_instancemethod(_snap.TIntIntPrHI___deref__,None,TIntIntPrHI)
TIntIntPrHI.Next = new_instancemethod(_snap.TIntIntPrHI_Next,None,TIntIntPrHI)
TIntIntPrHI.IsEmpty = new_instancemethod(_snap.TIntIntPrHI_IsEmpty,None,TIntIntPrHI)
TIntIntPrHI.IsEnd = new_instancemethod(_snap.TIntIntPrHI_IsEnd,None,TIntIntPrHI)
TIntIntPrHI.GetKey = new_instancemethod(_snap.TIntIntPrHI_GetKey,None,TIntIntPrHI)
TIntIntPrHI.GetDat = new_instancemethod(_snap.TIntIntPrHI_GetDat,None,TIntIntPrHI)
TIntIntPrHI_swigregister = _snap.TIntIntPrHI_swigregister
TIntIntPrHI_swigregister(TIntIntPrHI)

class TIntIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TInt,TIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntIntPrVHI
        __init__(self, TIntIntPrVHI _HashKeyDatI) -> TIntIntPrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const & value

           _HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const & value

        __init__(self, THashKeyDatI<(TInt,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TInt,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat _EndI) -> TIntIntPrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TInt,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value

        """
        _snap.TIntIntPrVHI_swiginit(self,_snap.new_TIntIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const & value

        """
        return _snap.TIntIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TInt,TIntPrV > const & value

        """
        return _snap.TIntIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TInt,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value




        """
        return _snap.TIntIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TInt,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value




        """
        return _snap.TIntIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TInt,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value




        """
        return _snap.TIntIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntIntPrVHI
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > * value




        """
        return _snap.TIntIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value




        """
        return _snap.TIntIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value




        """
        return _snap.TIntIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > const * value




        """
        return _snap.TIntIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntPrV
        GetDat(self) -> TIntPrV
        Parameters:
           self: THashKeyDatI< TInt,TIntPrV > * value


        """
        return _snap.TIntIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntIntPrVHI
TIntIntPrVHI.__eq__ = new_instancemethod(_snap.TIntIntPrVHI___eq__,None,TIntIntPrVHI)
TIntIntPrVHI.__lt__ = new_instancemethod(_snap.TIntIntPrVHI___lt__,None,TIntIntPrVHI)
TIntIntPrVHI.__ref__ = new_instancemethod(_snap.TIntIntPrVHI___ref__,None,TIntIntPrVHI)
TIntIntPrVHI.__call__ = new_instancemethod(_snap.TIntIntPrVHI___call__,None,TIntIntPrVHI)
TIntIntPrVHI.__deref__ = new_instancemethod(_snap.TIntIntPrVHI___deref__,None,TIntIntPrVHI)
TIntIntPrVHI.Next = new_instancemethod(_snap.TIntIntPrVHI_Next,None,TIntIntPrVHI)
TIntIntPrVHI.IsEmpty = new_instancemethod(_snap.TIntIntPrVHI_IsEmpty,None,TIntIntPrVHI)
TIntIntPrVHI.IsEnd = new_instancemethod(_snap.TIntIntPrVHI_IsEnd,None,TIntIntPrVHI)
TIntIntPrVHI.GetKey = new_instancemethod(_snap.TIntIntPrVHI_GetKey,None,TIntIntPrVHI)
TIntIntPrVHI.GetDat = new_instancemethod(_snap.TIntIntPrVHI_GetDat,None,TIntIntPrVHI)
TIntIntPrVHI_swigregister = _snap.TIntIntPrVHI_swigregister
TIntIntPrVHI_swigregister(TIntIntPrVHI)

class TUInt64StrVHI(object):
    """Proxy of C++ THashKeyDatI<(TUInt64,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TUInt64StrVHI
        __init__(self, TUInt64StrVHI _HashKeyDatI) -> TUInt64StrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const & value

           _HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const & value

        __init__(self, THashKeyDatI<(TUInt64,TVec<(TStr,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TUInt64,TVec<(TStr,int)>)>::THKeyDat _EndI) -> TUInt64StrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TUInt64,TVec< TStr,int > >::THKeyDat const * value

        """
        _snap.TUInt64StrVHI_swiginit(self,_snap.new_TUInt64StrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TUInt64StrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const & value

        """
        return _snap.TUInt64StrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TUInt64StrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TUInt64,TStrV > const & value

        """
        return _snap.TUInt64StrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TUInt64,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value




        """
        return _snap.TUInt64StrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TUInt64,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value




        """
        return _snap.TUInt64StrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TUInt64,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value




        """
        return _snap.TUInt64StrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TUInt64StrVHI
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > * value




        """
        return _snap.TUInt64StrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value




        """
        return _snap.TUInt64StrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value




        """
        return _snap.TUInt64StrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TUInt64
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > const * value




        """
        return _snap.TUInt64StrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStrV
        GetDat(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TUInt64,TStrV > * value


        """
        return _snap.TUInt64StrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TUInt64StrVHI
TUInt64StrVHI.__eq__ = new_instancemethod(_snap.TUInt64StrVHI___eq__,None,TUInt64StrVHI)
TUInt64StrVHI.__lt__ = new_instancemethod(_snap.TUInt64StrVHI___lt__,None,TUInt64StrVHI)
TUInt64StrVHI.__ref__ = new_instancemethod(_snap.TUInt64StrVHI___ref__,None,TUInt64StrVHI)
TUInt64StrVHI.__call__ = new_instancemethod(_snap.TUInt64StrVHI___call__,None,TUInt64StrVHI)
TUInt64StrVHI.__deref__ = new_instancemethod(_snap.TUInt64StrVHI___deref__,None,TUInt64StrVHI)
TUInt64StrVHI.Next = new_instancemethod(_snap.TUInt64StrVHI_Next,None,TUInt64StrVHI)
TUInt64StrVHI.IsEmpty = new_instancemethod(_snap.TUInt64StrVHI_IsEmpty,None,TUInt64StrVHI)
TUInt64StrVHI.IsEnd = new_instancemethod(_snap.TUInt64StrVHI_IsEnd,None,TUInt64StrVHI)
TUInt64StrVHI.GetKey = new_instancemethod(_snap.TUInt64StrVHI_GetKey,None,TUInt64StrVHI)
TUInt64StrVHI.GetDat = new_instancemethod(_snap.TUInt64StrVHI_GetDat,None,TUInt64StrVHI)
TUInt64StrVHI_swigregister = _snap.TUInt64StrVHI_swigregister
TUInt64StrVHI_swigregister(TUInt64StrVHI)

class TIntPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrIntHI
        __init__(self, TIntPrIntHI _HashKeyDatI) -> TIntPrIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntPr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TIntPr,TInt > const & value

        __init__(self, THashKeyDatI<(TPair<(TInt,TInt)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TInt,TInt)>,TInt)>::THKeyDat _EndI) -> TIntPrIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TInt >::THKeyDat const * value

        """
        _snap.TIntPrIntHI_swiginit(self,_snap.new_TIntPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TInt > const & value

        """
        return _snap.TIntPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TInt > const & value

        """
        return _snap.TIntPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value




        """
        return _snap.TIntPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value




        """
        return _snap.TIntPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value




        """
        return _snap.TIntPrIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntPrIntHI
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > * value




        """
        return _snap.TIntPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value




        """
        return _snap.TIntPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value




        """
        return _snap.TIntPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > const * value




        """
        return _snap.TIntPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TIntPr,TInt > * value


        """
        return _snap.TIntPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrIntHI
TIntPrIntHI.__eq__ = new_instancemethod(_snap.TIntPrIntHI___eq__,None,TIntPrIntHI)
TIntPrIntHI.__lt__ = new_instancemethod(_snap.TIntPrIntHI___lt__,None,TIntPrIntHI)
TIntPrIntHI.__ref__ = new_instancemethod(_snap.TIntPrIntHI___ref__,None,TIntPrIntHI)
TIntPrIntHI.__call__ = new_instancemethod(_snap.TIntPrIntHI___call__,None,TIntPrIntHI)
TIntPrIntHI.__deref__ = new_instancemethod(_snap.TIntPrIntHI___deref__,None,TIntPrIntHI)
TIntPrIntHI.Next = new_instancemethod(_snap.TIntPrIntHI_Next,None,TIntPrIntHI)
TIntPrIntHI.IsEmpty = new_instancemethod(_snap.TIntPrIntHI_IsEmpty,None,TIntPrIntHI)
TIntPrIntHI.IsEnd = new_instancemethod(_snap.TIntPrIntHI_IsEnd,None,TIntPrIntHI)
TIntPrIntHI.GetKey = new_instancemethod(_snap.TIntPrIntHI_GetKey,None,TIntPrIntHI)
TIntPrIntHI.GetDat = new_instancemethod(_snap.TIntPrIntHI_GetDat,None,TIntPrIntHI)
TIntPrIntHI_swigregister = _snap.TIntPrIntHI_swigregister
TIntPrIntHI_swigregister(TIntPrIntHI)

class TIntPrIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrIntVHI
        __init__(self, TIntPrIntVHI _HashKeyDatI) -> TIntPrIntVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const & value

           _HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const & value

        __init__(self, THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TInt,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TInt,int)>)>::THKeyDat _EndI) -> TIntPrIntVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TInt,int > >::THKeyDat const * value

        """
        _snap.TIntPrIntVHI_swiginit(self,_snap.new_TIntPrIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntPrIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const & value

        """
        return _snap.TIntPrIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TIntV > const & value

        """
        return _snap.TIntPrIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value




        """
        return _snap.TIntPrIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value




        """
        return _snap.TIntPrIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value




        """
        return _snap.TIntPrIntVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntPrIntVHI
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > * value




        """
        return _snap.TIntPrIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value




        """
        return _snap.TIntPrIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value




        """
        return _snap.TIntPrIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > const * value




        """
        return _snap.TIntPrIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntV
        GetDat(self) -> TIntV
        Parameters:
           self: THashKeyDatI< TIntPr,TIntV > * value


        """
        return _snap.TIntPrIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrIntVHI
TIntPrIntVHI.__eq__ = new_instancemethod(_snap.TIntPrIntVHI___eq__,None,TIntPrIntVHI)
TIntPrIntVHI.__lt__ = new_instancemethod(_snap.TIntPrIntVHI___lt__,None,TIntPrIntVHI)
TIntPrIntVHI.__ref__ = new_instancemethod(_snap.TIntPrIntVHI___ref__,None,TIntPrIntVHI)
TIntPrIntVHI.__call__ = new_instancemethod(_snap.TIntPrIntVHI___call__,None,TIntPrIntVHI)
TIntPrIntVHI.__deref__ = new_instancemethod(_snap.TIntPrIntVHI___deref__,None,TIntPrIntVHI)
TIntPrIntVHI.Next = new_instancemethod(_snap.TIntPrIntVHI_Next,None,TIntPrIntVHI)
TIntPrIntVHI.IsEmpty = new_instancemethod(_snap.TIntPrIntVHI_IsEmpty,None,TIntPrIntVHI)
TIntPrIntVHI.IsEnd = new_instancemethod(_snap.TIntPrIntVHI_IsEnd,None,TIntPrIntVHI)
TIntPrIntVHI.GetKey = new_instancemethod(_snap.TIntPrIntVHI_GetKey,None,TIntPrIntVHI)
TIntPrIntVHI.GetDat = new_instancemethod(_snap.TIntPrIntVHI_GetDat,None,TIntPrIntVHI)
TIntPrIntVHI_swigregister = _snap.TIntPrIntVHI_swigregister
TIntPrIntVHI_swigregister(TIntPrIntVHI)

class TIntPrIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrIntPrVHI
        __init__(self, TIntPrIntPrVHI _HashKeyDatI) -> TIntPrIntPrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const & value

           _HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const & value

        __init__(self, THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat _EndI) -> TIntPrIntPrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value

        """
        _snap.TIntPrIntPrVHI_swiginit(self,_snap.new_TIntPrIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntPrIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const & value

        """
        return _snap.TIntPrIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TIntPrV > const & value

        """
        return _snap.TIntPrIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value




        """
        return _snap.TIntPrIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value




        """
        return _snap.TIntPrIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value




        """
        return _snap.TIntPrIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntPrIntPrVHI
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > * value




        """
        return _snap.TIntPrIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value




        """
        return _snap.TIntPrIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value




        """
        return _snap.TIntPrIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > const * value




        """
        return _snap.TIntPrIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntPrV
        GetDat(self) -> TIntPrV
        Parameters:
           self: THashKeyDatI< TIntPr,TIntPrV > * value


        """
        return _snap.TIntPrIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrIntPrVHI
TIntPrIntPrVHI.__eq__ = new_instancemethod(_snap.TIntPrIntPrVHI___eq__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__lt__ = new_instancemethod(_snap.TIntPrIntPrVHI___lt__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__ref__ = new_instancemethod(_snap.TIntPrIntPrVHI___ref__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__call__ = new_instancemethod(_snap.TIntPrIntPrVHI___call__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.__deref__ = new_instancemethod(_snap.TIntPrIntPrVHI___deref__,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.Next = new_instancemethod(_snap.TIntPrIntPrVHI_Next,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.IsEmpty = new_instancemethod(_snap.TIntPrIntPrVHI_IsEmpty,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.IsEnd = new_instancemethod(_snap.TIntPrIntPrVHI_IsEnd,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.GetKey = new_instancemethod(_snap.TIntPrIntPrVHI_GetKey,None,TIntPrIntPrVHI)
TIntPrIntPrVHI.GetDat = new_instancemethod(_snap.TIntPrIntPrVHI_GetDat,None,TIntPrIntPrVHI)
TIntPrIntPrVHI_swigregister = _snap.TIntPrIntPrVHI_swigregister
TIntPrIntPrVHI_swigregister(TIntPrIntPrVHI)

class TIntTrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntTr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntTrIntHI
        __init__(self, TIntTrIntHI _HashKeyDatI) -> TIntTrIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntTr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TIntTr,TInt > const & value

        __init__(self, THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TInt)>::THKeyDat _EndI) -> TIntTrIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TInt >::THKeyDat const * value

        """
        _snap.TIntTrIntHI_swiginit(self,_snap.new_TIntTrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntTrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntTr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntTr,TInt > const & value

        """
        return _snap.TIntTrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntTrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntTr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntTr,TInt > const & value

        """
        return _snap.TIntTrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value




        """
        return _snap.TIntTrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value




        """
        return _snap.TIntTrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value




        """
        return _snap.TIntTrIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntTrIntHI
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > * value




        """
        return _snap.TIntTrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value




        """
        return _snap.TIntTrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value




        """
        return _snap.TIntTrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntTr
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > const * value




        """
        return _snap.TIntTrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TIntTr,TInt > * value


        """
        return _snap.TIntTrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntTrIntHI
TIntTrIntHI.__eq__ = new_instancemethod(_snap.TIntTrIntHI___eq__,None,TIntTrIntHI)
TIntTrIntHI.__lt__ = new_instancemethod(_snap.TIntTrIntHI___lt__,None,TIntTrIntHI)
TIntTrIntHI.__ref__ = new_instancemethod(_snap.TIntTrIntHI___ref__,None,TIntTrIntHI)
TIntTrIntHI.__call__ = new_instancemethod(_snap.TIntTrIntHI___call__,None,TIntTrIntHI)
TIntTrIntHI.__deref__ = new_instancemethod(_snap.TIntTrIntHI___deref__,None,TIntTrIntHI)
TIntTrIntHI.Next = new_instancemethod(_snap.TIntTrIntHI_Next,None,TIntTrIntHI)
TIntTrIntHI.IsEmpty = new_instancemethod(_snap.TIntTrIntHI_IsEmpty,None,TIntTrIntHI)
TIntTrIntHI.IsEnd = new_instancemethod(_snap.TIntTrIntHI_IsEnd,None,TIntTrIntHI)
TIntTrIntHI.GetKey = new_instancemethod(_snap.TIntTrIntHI_GetKey,None,TIntTrIntHI)
TIntTrIntHI.GetDat = new_instancemethod(_snap.TIntTrIntHI_GetDat,None,TIntTrIntHI)
TIntTrIntHI_swigregister = _snap.TIntTrIntHI_swigregister
TIntTrIntHI_swigregister(TIntTrIntHI)

class TIntVIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntV,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntVIntHI
        __init__(self, TIntVIntHI _HashKeyDatI) -> TIntVIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntV,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TIntV,TInt > const & value

        __init__(self, THashKeyDatI<(TVec<(TInt,int)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TVec<(TInt,int)>,TInt)>::THKeyDat _EndI) -> TIntVIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TInt,int >,TInt >::THKeyDat const * value

        """
        _snap.TIntVIntHI_swiginit(self,_snap.new_TIntVIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntVIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntV,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntV,TInt > const & value

        """
        return _snap.TIntVIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntVIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntV,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntV,TInt > const & value

        """
        return _snap.TIntVIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TVec<(TInt,int)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value




        """
        return _snap.TIntVIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TVec<(TInt,int)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value




        """
        return _snap.TIntVIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TVec<(TInt,int)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value




        """
        return _snap.TIntVIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntVIntHI
        Parameters:
           self: THashKeyDatI< TIntV,TInt > * value




        """
        return _snap.TIntVIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value




        """
        return _snap.TIntVIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value




        """
        return _snap.TIntVIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntV
        Parameters:
           self: THashKeyDatI< TIntV,TInt > const * value




        """
        return _snap.TIntVIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TIntV,TInt > * value


        """
        return _snap.TIntVIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntVIntHI
TIntVIntHI.__eq__ = new_instancemethod(_snap.TIntVIntHI___eq__,None,TIntVIntHI)
TIntVIntHI.__lt__ = new_instancemethod(_snap.TIntVIntHI___lt__,None,TIntVIntHI)
TIntVIntHI.__ref__ = new_instancemethod(_snap.TIntVIntHI___ref__,None,TIntVIntHI)
TIntVIntHI.__call__ = new_instancemethod(_snap.TIntVIntHI___call__,None,TIntVIntHI)
TIntVIntHI.__deref__ = new_instancemethod(_snap.TIntVIntHI___deref__,None,TIntVIntHI)
TIntVIntHI.Next = new_instancemethod(_snap.TIntVIntHI_Next,None,TIntVIntHI)
TIntVIntHI.IsEmpty = new_instancemethod(_snap.TIntVIntHI_IsEmpty,None,TIntVIntHI)
TIntVIntHI.IsEnd = new_instancemethod(_snap.TIntVIntHI_IsEnd,None,TIntVIntHI)
TIntVIntHI.GetKey = new_instancemethod(_snap.TIntVIntHI_GetKey,None,TIntVIntHI)
TIntVIntHI.GetDat = new_instancemethod(_snap.TIntVIntHI_GetDat,None,TIntVIntHI)
TIntVIntHI_swigregister = _snap.TIntVIntHI_swigregister
TIntVIntHI_swigregister(TIntVIntHI)

class TUIntHI(object):
    """Proxy of C++ THashKeyDatI<(TUInt,TUInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TUIntHI
        __init__(self, TUIntHI _HashKeyDatI) -> TUIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TUInt,TUInt > const & value

           _HashKeyDatI: THashKeyDatI< TUInt,TUInt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TUIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TUInt,TUInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TUInt,TUInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TUInt,TUInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TUInt,TUInt >::THKeyDat const * value

        """
        _snap.TUIntHI_swiginit(self,_snap.new_TUIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TUIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value
           HashKeyDatI: THashKeyDatI< TUInt,TUInt > const & value

           HashKeyDatI: THashKeyDatI< TUInt,TUInt > const & value

        """
        return _snap.TUIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TUIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value
           HashKeyDatI: THashKeyDatI< TUInt,TUInt > const & value

           HashKeyDatI: THashKeyDatI< TUInt,TUInt > const & value

        """
        return _snap.TUIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value




        """
        return _snap.TUIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value




        """
        return _snap.TUIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value




        """
        return _snap.TUIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TUIntHI
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > * value




        """
        return _snap.TUIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value




        """
        return _snap.TUIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value




        """
        return _snap.TUIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TUInt
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > const * value




        """
        return _snap.TUIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TUInt
        GetDat(self) -> TUInt
        Parameters:
           self: THashKeyDatI< TUInt,TUInt > * value


        """
        return _snap.TUIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TUIntHI
TUIntHI.__eq__ = new_instancemethod(_snap.TUIntHI___eq__,None,TUIntHI)
TUIntHI.__lt__ = new_instancemethod(_snap.TUIntHI___lt__,None,TUIntHI)
TUIntHI.__ref__ = new_instancemethod(_snap.TUIntHI___ref__,None,TUIntHI)
TUIntHI.__call__ = new_instancemethod(_snap.TUIntHI___call__,None,TUIntHI)
TUIntHI.__deref__ = new_instancemethod(_snap.TUIntHI___deref__,None,TUIntHI)
TUIntHI.Next = new_instancemethod(_snap.TUIntHI_Next,None,TUIntHI)
TUIntHI.IsEmpty = new_instancemethod(_snap.TUIntHI_IsEmpty,None,TUIntHI)
TUIntHI.IsEnd = new_instancemethod(_snap.TUIntHI_IsEnd,None,TUIntHI)
TUIntHI.GetKey = new_instancemethod(_snap.TUIntHI_GetKey,None,TUIntHI)
TUIntHI.GetDat = new_instancemethod(_snap.TUIntHI_GetDat,None,TUIntHI)
TUIntHI_swigregister = _snap.TUIntHI_swigregister
TUIntHI_swigregister(TUIntHI)

class TIntTrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TIntTr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntTrFltHI
        __init__(self, TIntTrFltHI _HashKeyDatI) -> TIntTrFltHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const & value

           _HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const & value

        __init__(self, THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TFlt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TFlt)>::THKeyDat _EndI) -> TIntTrFltHI
        Parameters:
           _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TTriple< TInt,TInt,TInt >,TFlt >::THKeyDat const * value

        """
        _snap.TIntTrFltHI_swiginit(self,_snap.new_TIntTrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntTrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const & value

        """
        return _snap.TIntTrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntTrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TIntTr,TFlt > const & value

        """
        return _snap.TIntTrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value




        """
        return _snap.TIntTrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value




        """
        return _snap.TIntTrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TTriple<(TInt,TInt,TInt)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value




        """
        return _snap.TIntTrFltHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntTrFltHI
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > * value




        """
        return _snap.TIntTrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value




        """
        return _snap.TIntTrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value




        """
        return _snap.TIntTrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntTr
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > const * value




        """
        return _snap.TIntTrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFlt
        GetDat(self) -> TFlt
        Parameters:
           self: THashKeyDatI< TIntTr,TFlt > * value


        """
        return _snap.TIntTrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntTrFltHI
TIntTrFltHI.__eq__ = new_instancemethod(_snap.TIntTrFltHI___eq__,None,TIntTrFltHI)
TIntTrFltHI.__lt__ = new_instancemethod(_snap.TIntTrFltHI___lt__,None,TIntTrFltHI)
TIntTrFltHI.__ref__ = new_instancemethod(_snap.TIntTrFltHI___ref__,None,TIntTrFltHI)
TIntTrFltHI.__call__ = new_instancemethod(_snap.TIntTrFltHI___call__,None,TIntTrFltHI)
TIntTrFltHI.__deref__ = new_instancemethod(_snap.TIntTrFltHI___deref__,None,TIntTrFltHI)
TIntTrFltHI.Next = new_instancemethod(_snap.TIntTrFltHI_Next,None,TIntTrFltHI)
TIntTrFltHI.IsEmpty = new_instancemethod(_snap.TIntTrFltHI_IsEmpty,None,TIntTrFltHI)
TIntTrFltHI.IsEnd = new_instancemethod(_snap.TIntTrFltHI_IsEnd,None,TIntTrFltHI)
TIntTrFltHI.GetKey = new_instancemethod(_snap.TIntTrFltHI_GetKey,None,TIntTrFltHI)
TIntTrFltHI.GetDat = new_instancemethod(_snap.TIntTrFltHI_GetDat,None,TIntTrFltHI)
TIntTrFltHI_swigregister = _snap.TIntTrFltHI_swigregister
TIntTrFltHI_swigregister(TIntTrFltHI)

class TIntPrStrHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrStrHI
        __init__(self, TIntPrStrHI _HashKeyDatI) -> TIntPrStrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntPr,TStr > const & value

           _HashKeyDatI: THashKeyDatI< TIntPr,TStr > const & value

        __init__(self, THashKeyDatI<(TPair<(TInt,TInt)>,TStr)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TInt,TInt)>,TStr)>::THKeyDat _EndI) -> TIntPrStrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TStr >::THKeyDat const * value

        """
        _snap.TIntPrStrHI_swiginit(self,_snap.new_TIntPrStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntPrStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TStr > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TStr > const & value

        """
        return _snap.TIntPrStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TStr > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TStr > const & value

        """
        return _snap.TIntPrStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value




        """
        return _snap.TIntPrStrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value




        """
        return _snap.TIntPrStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value




        """
        return _snap.TIntPrStrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntPrStrHI
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > * value




        """
        return _snap.TIntPrStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value




        """
        return _snap.TIntPrStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value




        """
        return _snap.TIntPrStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > const * value




        """
        return _snap.TIntPrStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStr
        GetDat(self) -> TStr
        Parameters:
           self: THashKeyDatI< TIntPr,TStr > * value


        """
        return _snap.TIntPrStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrStrHI
TIntPrStrHI.__eq__ = new_instancemethod(_snap.TIntPrStrHI___eq__,None,TIntPrStrHI)
TIntPrStrHI.__lt__ = new_instancemethod(_snap.TIntPrStrHI___lt__,None,TIntPrStrHI)
TIntPrStrHI.__ref__ = new_instancemethod(_snap.TIntPrStrHI___ref__,None,TIntPrStrHI)
TIntPrStrHI.__call__ = new_instancemethod(_snap.TIntPrStrHI___call__,None,TIntPrStrHI)
TIntPrStrHI.__deref__ = new_instancemethod(_snap.TIntPrStrHI___deref__,None,TIntPrStrHI)
TIntPrStrHI.Next = new_instancemethod(_snap.TIntPrStrHI_Next,None,TIntPrStrHI)
TIntPrStrHI.IsEmpty = new_instancemethod(_snap.TIntPrStrHI_IsEmpty,None,TIntPrStrHI)
TIntPrStrHI.IsEnd = new_instancemethod(_snap.TIntPrStrHI_IsEnd,None,TIntPrStrHI)
TIntPrStrHI.GetKey = new_instancemethod(_snap.TIntPrStrHI_GetKey,None,TIntPrStrHI)
TIntPrStrHI.GetDat = new_instancemethod(_snap.TIntPrStrHI_GetDat,None,TIntPrStrHI)
TIntPrStrHI_swigregister = _snap.TIntPrStrHI_swigregister
TIntPrStrHI_swigregister(TIntPrStrHI)

class TIntPrStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TIntPr,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntPrStrVHI
        __init__(self, TIntPrStrVHI _HashKeyDatI) -> TIntPrStrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const & value

           _HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const & value

        __init__(self, THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TStr,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TStr,int)>)>::THKeyDat _EndI) -> TIntPrStrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TInt >,TVec< TStr,int > >::THKeyDat const * value

        """
        _snap.TIntPrStrVHI_swiginit(self,_snap.new_TIntPrStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntPrStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const & value

        """
        return _snap.TIntPrStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntPrStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TIntPr,TStrV > const & value

        """
        return _snap.TIntPrStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value




        """
        return _snap.TIntPrStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value




        """
        return _snap.TIntPrStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TInt,TInt)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value




        """
        return _snap.TIntPrStrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntPrStrVHI
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > * value




        """
        return _snap.TIntPrStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value




        """
        return _snap.TIntPrStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value




        """
        return _snap.TIntPrStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > const * value




        """
        return _snap.TIntPrStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStrV
        GetDat(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TIntPr,TStrV > * value


        """
        return _snap.TIntPrStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntPrStrVHI
TIntPrStrVHI.__eq__ = new_instancemethod(_snap.TIntPrStrVHI___eq__,None,TIntPrStrVHI)
TIntPrStrVHI.__lt__ = new_instancemethod(_snap.TIntPrStrVHI___lt__,None,TIntPrStrVHI)
TIntPrStrVHI.__ref__ = new_instancemethod(_snap.TIntPrStrVHI___ref__,None,TIntPrStrVHI)
TIntPrStrVHI.__call__ = new_instancemethod(_snap.TIntPrStrVHI___call__,None,TIntPrStrVHI)
TIntPrStrVHI.__deref__ = new_instancemethod(_snap.TIntPrStrVHI___deref__,None,TIntPrStrVHI)
TIntPrStrVHI.Next = new_instancemethod(_snap.TIntPrStrVHI_Next,None,TIntPrStrVHI)
TIntPrStrVHI.IsEmpty = new_instancemethod(_snap.TIntPrStrVHI_IsEmpty,None,TIntPrStrVHI)
TIntPrStrVHI.IsEnd = new_instancemethod(_snap.TIntPrStrVHI_IsEnd,None,TIntPrStrVHI)
TIntPrStrVHI.GetKey = new_instancemethod(_snap.TIntPrStrVHI_GetKey,None,TIntPrStrVHI)
TIntPrStrVHI.GetDat = new_instancemethod(_snap.TIntPrStrVHI_GetDat,None,TIntPrStrVHI)
TIntPrStrVHI_swigregister = _snap.TIntPrStrVHI_swigregister
TIntPrStrVHI_swigregister(TIntPrStrVHI)

class TIntStrPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TIntStrPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntStrPrIntHI
        __init__(self, TIntStrPrIntHI _HashKeyDatI) -> TIntStrPrIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const & value

        __init__(self, THashKeyDatI<(TPair<(TInt,TStr)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TInt,TStr)>,TInt)>::THKeyDat _EndI) -> TIntStrPrIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TInt,TStr >,TInt >::THKeyDat const * value

        """
        _snap.TIntStrPrIntHI_swiginit(self,_snap.new_TIntStrPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntStrPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const & value

        """
        return _snap.TIntStrPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntStrPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TIntStrPr,TInt > const & value

        """
        return _snap.TIntStrPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TInt,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value




        """
        return _snap.TIntStrPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TInt,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value




        """
        return _snap.TIntStrPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TInt,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value




        """
        return _snap.TIntStrPrIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntStrPrIntHI
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > * value




        """
        return _snap.TIntStrPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value




        """
        return _snap.TIntStrPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value




        """
        return _snap.TIntStrPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TIntStrPr
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > const * value




        """
        return _snap.TIntStrPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TIntStrPr,TInt > * value


        """
        return _snap.TIntStrPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TIntStrPrIntHI
TIntStrPrIntHI.__eq__ = new_instancemethod(_snap.TIntStrPrIntHI___eq__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__lt__ = new_instancemethod(_snap.TIntStrPrIntHI___lt__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__ref__ = new_instancemethod(_snap.TIntStrPrIntHI___ref__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__call__ = new_instancemethod(_snap.TIntStrPrIntHI___call__,None,TIntStrPrIntHI)
TIntStrPrIntHI.__deref__ = new_instancemethod(_snap.TIntStrPrIntHI___deref__,None,TIntStrPrIntHI)
TIntStrPrIntHI.Next = new_instancemethod(_snap.TIntStrPrIntHI_Next,None,TIntStrPrIntHI)
TIntStrPrIntHI.IsEmpty = new_instancemethod(_snap.TIntStrPrIntHI_IsEmpty,None,TIntStrPrIntHI)
TIntStrPrIntHI.IsEnd = new_instancemethod(_snap.TIntStrPrIntHI_IsEnd,None,TIntStrPrIntHI)
TIntStrPrIntHI.GetKey = new_instancemethod(_snap.TIntStrPrIntHI_GetKey,None,TIntStrPrIntHI)
TIntStrPrIntHI.GetDat = new_instancemethod(_snap.TIntStrPrIntHI_GetDat,None,TIntStrPrIntHI)
TIntStrPrIntHI_swigregister = _snap.TIntStrPrIntHI_swigregister
TIntStrPrIntHI_swigregister(TIntStrPrIntHI)

class TFltFltHI(object):
    """Proxy of C++ THashKeyDatI<(TFlt,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TFltFltHI
        __init__(self, TFltFltHI _HashKeyDatI) -> TFltFltHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TFlt,TFlt > const & value

           _HashKeyDatI: THashKeyDatI< TFlt,TFlt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TFltFltHI
        Parameters:
           _KeyDatI: THashKeyDatI< TFlt,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TFlt,TFlt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TFlt,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TFlt,TFlt >::THKeyDat const * value

        """
        _snap.TFltFltHI_swiginit(self,_snap.new_TFltFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TFltFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TFlt,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TFlt,TFlt > const & value

        """
        return _snap.TFltFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TFltFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TFlt,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TFlt,TFlt > const & value

        """
        return _snap.TFltFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value




        """
        return _snap.TFltFltHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value




        """
        return _snap.TFltFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value




        """
        return _snap.TFltFltHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TFltFltHI
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > * value




        """
        return _snap.TFltFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value




        """
        return _snap.TFltFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value




        """
        return _snap.TFltFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TFlt
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > const * value




        """
        return _snap.TFltFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFlt
        GetDat(self) -> TFlt
        Parameters:
           self: THashKeyDatI< TFlt,TFlt > * value


        """
        return _snap.TFltFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TFltFltHI
TFltFltHI.__eq__ = new_instancemethod(_snap.TFltFltHI___eq__,None,TFltFltHI)
TFltFltHI.__lt__ = new_instancemethod(_snap.TFltFltHI___lt__,None,TFltFltHI)
TFltFltHI.__ref__ = new_instancemethod(_snap.TFltFltHI___ref__,None,TFltFltHI)
TFltFltHI.__call__ = new_instancemethod(_snap.TFltFltHI___call__,None,TFltFltHI)
TFltFltHI.__deref__ = new_instancemethod(_snap.TFltFltHI___deref__,None,TFltFltHI)
TFltFltHI.Next = new_instancemethod(_snap.TFltFltHI_Next,None,TFltFltHI)
TFltFltHI.IsEmpty = new_instancemethod(_snap.TFltFltHI_IsEmpty,None,TFltFltHI)
TFltFltHI.IsEnd = new_instancemethod(_snap.TFltFltHI_IsEnd,None,TFltFltHI)
TFltFltHI.GetKey = new_instancemethod(_snap.TFltFltHI_GetKey,None,TFltFltHI)
TFltFltHI.GetDat = new_instancemethod(_snap.TFltFltHI_GetDat,None,TFltFltHI)
TFltFltHI_swigregister = _snap.TFltFltHI_swigregister
TFltFltHI_swigregister(TFltFltHI)

class TStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrHI
        __init__(self, TStrHI _HashKeyDatI) -> TStrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TStrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const * value

        """
        _snap.TStrHI_swiginit(self,_snap.new_TStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

        """
        return _snap.TStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

        """
        return _snap.TStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrHI
        Parameters:
           self: THashKeyDatI< TStr,TInt > * value




        """
        return _snap.TStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TStr,TInt > * value


        """
        return _snap.TStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrHI
TStrHI.__eq__ = new_instancemethod(_snap.TStrHI___eq__,None,TStrHI)
TStrHI.__lt__ = new_instancemethod(_snap.TStrHI___lt__,None,TStrHI)
TStrHI.__ref__ = new_instancemethod(_snap.TStrHI___ref__,None,TStrHI)
TStrHI.__call__ = new_instancemethod(_snap.TStrHI___call__,None,TStrHI)
TStrHI.__deref__ = new_instancemethod(_snap.TStrHI___deref__,None,TStrHI)
TStrHI.Next = new_instancemethod(_snap.TStrHI_Next,None,TStrHI)
TStrHI.IsEmpty = new_instancemethod(_snap.TStrHI_IsEmpty,None,TStrHI)
TStrHI.IsEnd = new_instancemethod(_snap.TStrHI_IsEnd,None,TStrHI)
TStrHI.GetKey = new_instancemethod(_snap.TStrHI_GetKey,None,TStrHI)
TStrHI.GetDat = new_instancemethod(_snap.TStrHI_GetDat,None,TStrHI)
TStrHI_swigregister = _snap.TStrHI_swigregister
TStrHI_swigregister(TStrHI)

class TStrBoolHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TBool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrBoolHI
        __init__(self, TStrBoolHI _HashKeyDatI) -> TStrBoolHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TBool > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TBool > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TStrBoolHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TBool >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TBool >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TBool >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TBool >::THKeyDat const * value

        """
        _snap.TStrBoolHI_swiginit(self,_snap.new_TStrBoolHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrBoolHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value
           HashKeyDatI: THashKeyDatI< TStr,TBool > const & value

           HashKeyDatI: THashKeyDatI< TStr,TBool > const & value

        """
        return _snap.TStrBoolHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrBoolHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value
           HashKeyDatI: THashKeyDatI< TStr,TBool > const & value

           HashKeyDatI: THashKeyDatI< TStr,TBool > const & value

        """
        return _snap.TStrBoolHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value




        """
        return _snap.TStrBoolHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value




        """
        return _snap.TStrBoolHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value




        """
        return _snap.TStrBoolHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrBoolHI
        Parameters:
           self: THashKeyDatI< TStr,TBool > * value




        """
        return _snap.TStrBoolHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value




        """
        return _snap.TStrBoolHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value




        """
        return _snap.TStrBoolHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TBool > const * value




        """
        return _snap.TStrBoolHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TBool
        GetDat(self) -> TBool
        Parameters:
           self: THashKeyDatI< TStr,TBool > * value


        """
        return _snap.TStrBoolHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrBoolHI
TStrBoolHI.__eq__ = new_instancemethod(_snap.TStrBoolHI___eq__,None,TStrBoolHI)
TStrBoolHI.__lt__ = new_instancemethod(_snap.TStrBoolHI___lt__,None,TStrBoolHI)
TStrBoolHI.__ref__ = new_instancemethod(_snap.TStrBoolHI___ref__,None,TStrBoolHI)
TStrBoolHI.__call__ = new_instancemethod(_snap.TStrBoolHI___call__,None,TStrBoolHI)
TStrBoolHI.__deref__ = new_instancemethod(_snap.TStrBoolHI___deref__,None,TStrBoolHI)
TStrBoolHI.Next = new_instancemethod(_snap.TStrBoolHI_Next,None,TStrBoolHI)
TStrBoolHI.IsEmpty = new_instancemethod(_snap.TStrBoolHI_IsEmpty,None,TStrBoolHI)
TStrBoolHI.IsEnd = new_instancemethod(_snap.TStrBoolHI_IsEnd,None,TStrBoolHI)
TStrBoolHI.GetKey = new_instancemethod(_snap.TStrBoolHI_GetKey,None,TStrBoolHI)
TStrBoolHI.GetDat = new_instancemethod(_snap.TStrBoolHI_GetDat,None,TStrBoolHI)
TStrBoolHI_swigregister = _snap.TStrBoolHI_swigregister
TStrBoolHI_swigregister(TStrBoolHI)

class TStrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntHI
        __init__(self, TStrHI _HashKeyDatI) -> TStrIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TStrIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TInt >::THKeyDat const * value

        """
        _snap.TStrIntHI_swiginit(self,_snap.new_TStrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

        """
        return _snap.TStrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStr,TInt > const & value

        """
        return _snap.TStrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrHI
        Parameters:
           self: THashKeyDatI< TStr,TInt > * value




        """
        return _snap.TStrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TInt > const * value




        """
        return _snap.TStrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TStr,TInt > * value


        """
        return _snap.TStrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntHI
TStrIntHI.__eq__ = new_instancemethod(_snap.TStrIntHI___eq__,None,TStrIntHI)
TStrIntHI.__lt__ = new_instancemethod(_snap.TStrIntHI___lt__,None,TStrIntHI)
TStrIntHI.__ref__ = new_instancemethod(_snap.TStrIntHI___ref__,None,TStrIntHI)
TStrIntHI.__call__ = new_instancemethod(_snap.TStrIntHI___call__,None,TStrIntHI)
TStrIntHI.__deref__ = new_instancemethod(_snap.TStrIntHI___deref__,None,TStrIntHI)
TStrIntHI.Next = new_instancemethod(_snap.TStrIntHI_Next,None,TStrIntHI)
TStrIntHI.IsEmpty = new_instancemethod(_snap.TStrIntHI_IsEmpty,None,TStrIntHI)
TStrIntHI.IsEnd = new_instancemethod(_snap.TStrIntHI_IsEnd,None,TStrIntHI)
TStrIntHI.GetKey = new_instancemethod(_snap.TStrIntHI_GetKey,None,TStrIntHI)
TStrIntHI.GetDat = new_instancemethod(_snap.TStrIntHI_GetDat,None,TStrIntHI)
TStrIntHI_swigregister = _snap.TStrIntHI_swigregister
TStrIntHI_swigregister(TStrIntHI)

class TStrIntPrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntPrHI
        __init__(self, TStrIntPrHI _HashKeyDatI) -> TStrIntPrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TIntPr > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TIntPr > const & value

        __init__(self, THashKeyDatI<(TStr,TPair<(TInt,TInt)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TPair<(TInt,TInt)>)>::THKeyDat _EndI) -> TStrIntPrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TPair< TInt,TInt > >::THKeyDat const * value

        """
        _snap.TStrIntPrHI_swiginit(self,_snap.new_TStrIntPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrIntPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntPr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntPr > const & value

        """
        return _snap.TStrIntPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrIntPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntPr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntPr > const & value

        """
        return _snap.TStrIntPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TPair<(TInt,TInt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value




        """
        return _snap.TStrIntPrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TPair<(TInt,TInt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value




        """
        return _snap.TStrIntPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TPair<(TInt,TInt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value




        """
        return _snap.TStrIntPrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrIntPrHI
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > * value




        """
        return _snap.TStrIntPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value




        """
        return _snap.TStrIntPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value




        """
        return _snap.TStrIntPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > const * value




        """
        return _snap.TStrIntPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntPr
        GetDat(self) -> TIntPr
        Parameters:
           self: THashKeyDatI< TStr,TIntPr > * value


        """
        return _snap.TStrIntPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntPrHI
TStrIntPrHI.__eq__ = new_instancemethod(_snap.TStrIntPrHI___eq__,None,TStrIntPrHI)
TStrIntPrHI.__lt__ = new_instancemethod(_snap.TStrIntPrHI___lt__,None,TStrIntPrHI)
TStrIntPrHI.__ref__ = new_instancemethod(_snap.TStrIntPrHI___ref__,None,TStrIntPrHI)
TStrIntPrHI.__call__ = new_instancemethod(_snap.TStrIntPrHI___call__,None,TStrIntPrHI)
TStrIntPrHI.__deref__ = new_instancemethod(_snap.TStrIntPrHI___deref__,None,TStrIntPrHI)
TStrIntPrHI.Next = new_instancemethod(_snap.TStrIntPrHI_Next,None,TStrIntPrHI)
TStrIntPrHI.IsEmpty = new_instancemethod(_snap.TStrIntPrHI_IsEmpty,None,TStrIntPrHI)
TStrIntPrHI.IsEnd = new_instancemethod(_snap.TStrIntPrHI_IsEnd,None,TStrIntPrHI)
TStrIntPrHI.GetKey = new_instancemethod(_snap.TStrIntPrHI_GetKey,None,TStrIntPrHI)
TStrIntPrHI.GetDat = new_instancemethod(_snap.TStrIntPrHI_GetDat,None,TStrIntPrHI)
TStrIntPrHI_swigregister = _snap.TStrIntPrHI_swigregister
TStrIntPrHI_swigregister(TStrIntPrHI)

class TStrIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntVHI
        __init__(self, TStrIntVHI _HashKeyDatI) -> TStrIntVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TIntV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TIntV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TInt,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TInt,int)>)>::THKeyDat _EndI) -> TStrIntVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TInt,int > >::THKeyDat const * value

        """
        _snap.TStrIntVHI_swiginit(self,_snap.new_TStrIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntV > const & value

        """
        return _snap.TStrIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntV > const & value

        """
        return _snap.TStrIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value




        """
        return _snap.TStrIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value




        """
        return _snap.TStrIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value




        """
        return _snap.TStrIntVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrIntVHI
        Parameters:
           self: THashKeyDatI< TStr,TIntV > * value




        """
        return _snap.TStrIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value




        """
        return _snap.TStrIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value




        """
        return _snap.TStrIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TIntV > const * value




        """
        return _snap.TStrIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntV
        GetDat(self) -> TIntV
        Parameters:
           self: THashKeyDatI< TStr,TIntV > * value


        """
        return _snap.TStrIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntVHI
TStrIntVHI.__eq__ = new_instancemethod(_snap.TStrIntVHI___eq__,None,TStrIntVHI)
TStrIntVHI.__lt__ = new_instancemethod(_snap.TStrIntVHI___lt__,None,TStrIntVHI)
TStrIntVHI.__ref__ = new_instancemethod(_snap.TStrIntVHI___ref__,None,TStrIntVHI)
TStrIntVHI.__call__ = new_instancemethod(_snap.TStrIntVHI___call__,None,TStrIntVHI)
TStrIntVHI.__deref__ = new_instancemethod(_snap.TStrIntVHI___deref__,None,TStrIntVHI)
TStrIntVHI.Next = new_instancemethod(_snap.TStrIntVHI_Next,None,TStrIntVHI)
TStrIntVHI.IsEmpty = new_instancemethod(_snap.TStrIntVHI_IsEmpty,None,TStrIntVHI)
TStrIntVHI.IsEnd = new_instancemethod(_snap.TStrIntVHI_IsEnd,None,TStrIntVHI)
TStrIntVHI.GetKey = new_instancemethod(_snap.TStrIntVHI_GetKey,None,TStrIntVHI)
TStrIntVHI.GetDat = new_instancemethod(_snap.TStrIntVHI_GetDat,None,TStrIntVHI)
TStrIntVHI_swigregister = _snap.TStrIntVHI_swigregister
TStrIntVHI_swigregister(TStrIntVHI)

class TStrUInt64HI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TUInt64)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrUInt64HI
        __init__(self, TStrUInt64HI _HashKeyDatI) -> TStrUInt64HI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TStrUInt64HI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TUInt64 >::THKeyDat const * value

        """
        _snap.TStrUInt64HI_swiginit(self,_snap.new_TStrUInt64HI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrUInt64HI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value
           HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const & value

           HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const & value

        """
        return _snap.TStrUInt64HI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrUInt64HI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value
           HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const & value

           HashKeyDatI: THashKeyDatI< TStr,TUInt64 > const & value

        """
        return _snap.TStrUInt64HI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value




        """
        return _snap.TStrUInt64HI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value




        """
        return _snap.TStrUInt64HI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value




        """
        return _snap.TStrUInt64HI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrUInt64HI
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > * value




        """
        return _snap.TStrUInt64HI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value




        """
        return _snap.TStrUInt64HI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value




        """
        return _snap.TStrUInt64HI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > const * value




        """
        return _snap.TStrUInt64HI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TUInt64
        GetDat(self) -> TUInt64
        Parameters:
           self: THashKeyDatI< TStr,TUInt64 > * value


        """
        return _snap.TStrUInt64HI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrUInt64HI
TStrUInt64HI.__eq__ = new_instancemethod(_snap.TStrUInt64HI___eq__,None,TStrUInt64HI)
TStrUInt64HI.__lt__ = new_instancemethod(_snap.TStrUInt64HI___lt__,None,TStrUInt64HI)
TStrUInt64HI.__ref__ = new_instancemethod(_snap.TStrUInt64HI___ref__,None,TStrUInt64HI)
TStrUInt64HI.__call__ = new_instancemethod(_snap.TStrUInt64HI___call__,None,TStrUInt64HI)
TStrUInt64HI.__deref__ = new_instancemethod(_snap.TStrUInt64HI___deref__,None,TStrUInt64HI)
TStrUInt64HI.Next = new_instancemethod(_snap.TStrUInt64HI_Next,None,TStrUInt64HI)
TStrUInt64HI.IsEmpty = new_instancemethod(_snap.TStrUInt64HI_IsEmpty,None,TStrUInt64HI)
TStrUInt64HI.IsEnd = new_instancemethod(_snap.TStrUInt64HI_IsEnd,None,TStrUInt64HI)
TStrUInt64HI.GetKey = new_instancemethod(_snap.TStrUInt64HI_GetKey,None,TStrUInt64HI)
TStrUInt64HI.GetDat = new_instancemethod(_snap.TStrUInt64HI_GetDat,None,TStrUInt64HI)
TStrUInt64HI_swigregister = _snap.TStrUInt64HI_swigregister
TStrUInt64HI_swigregister(TStrUInt64HI)

class TStrUInt64VHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TUInt64V)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrUInt64VHI
        __init__(self, TStrUInt64VHI _HashKeyDatI) -> TStrUInt64VHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TUInt64,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TUInt64,int)>)>::THKeyDat _EndI) -> TStrUInt64VHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TUInt64,int > >::THKeyDat const * value

        """
        _snap.TStrUInt64VHI_swiginit(self,_snap.new_TStrUInt64VHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrUInt64VHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value
           HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const & value

           HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const & value

        """
        return _snap.TStrUInt64VHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrUInt64VHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value
           HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const & value

           HashKeyDatI: THashKeyDatI< TStr,TUInt64V > const & value

        """
        return _snap.TStrUInt64VHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TUInt64,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value




        """
        return _snap.TStrUInt64VHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TUInt64,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value




        """
        return _snap.TStrUInt64VHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TUInt64,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value




        """
        return _snap.TStrUInt64VHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrUInt64VHI
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > * value




        """
        return _snap.TStrUInt64VHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value




        """
        return _snap.TStrUInt64VHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value




        """
        return _snap.TStrUInt64VHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > const * value




        """
        return _snap.TStrUInt64VHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TVec<(TUInt64,int)>
        GetDat(self) -> TVec<(TUInt64,int)>
        Parameters:
           self: THashKeyDatI< TStr,TUInt64V > * value


        """
        return _snap.TStrUInt64VHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrUInt64VHI
TStrUInt64VHI.__eq__ = new_instancemethod(_snap.TStrUInt64VHI___eq__,None,TStrUInt64VHI)
TStrUInt64VHI.__lt__ = new_instancemethod(_snap.TStrUInt64VHI___lt__,None,TStrUInt64VHI)
TStrUInt64VHI.__ref__ = new_instancemethod(_snap.TStrUInt64VHI___ref__,None,TStrUInt64VHI)
TStrUInt64VHI.__call__ = new_instancemethod(_snap.TStrUInt64VHI___call__,None,TStrUInt64VHI)
TStrUInt64VHI.__deref__ = new_instancemethod(_snap.TStrUInt64VHI___deref__,None,TStrUInt64VHI)
TStrUInt64VHI.Next = new_instancemethod(_snap.TStrUInt64VHI_Next,None,TStrUInt64VHI)
TStrUInt64VHI.IsEmpty = new_instancemethod(_snap.TStrUInt64VHI_IsEmpty,None,TStrUInt64VHI)
TStrUInt64VHI.IsEnd = new_instancemethod(_snap.TStrUInt64VHI_IsEnd,None,TStrUInt64VHI)
TStrUInt64VHI.GetKey = new_instancemethod(_snap.TStrUInt64VHI_GetKey,None,TStrUInt64VHI)
TStrUInt64VHI.GetDat = new_instancemethod(_snap.TStrUInt64VHI_GetDat,None,TStrUInt64VHI)
TStrUInt64VHI_swigregister = _snap.TStrUInt64VHI_swigregister
TStrUInt64VHI_swigregister(TStrUInt64VHI)

class TStrIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntPrVHI
        __init__(self, TStrIntPrVHI _HashKeyDatI) -> TStrIntPrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat _EndI) -> TStrIntPrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TPair< TInt,TInt >,int > >::THKeyDat const * value

        """
        _snap.TStrIntPrVHI_swiginit(self,_snap.new_TStrIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const & value

        """
        return _snap.TStrIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntPrV > const & value

        """
        return _snap.TStrIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value




        """
        return _snap.TStrIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value




        """
        return _snap.TStrIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TInt,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value




        """
        return _snap.TStrIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrIntPrVHI
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > * value




        """
        return _snap.TStrIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value




        """
        return _snap.TStrIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value




        """
        return _snap.TStrIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > const * value




        """
        return _snap.TStrIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntPrV
        GetDat(self) -> TIntPrV
        Parameters:
           self: THashKeyDatI< TStr,TIntPrV > * value


        """
        return _snap.TStrIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntPrVHI
TStrIntPrVHI.__eq__ = new_instancemethod(_snap.TStrIntPrVHI___eq__,None,TStrIntPrVHI)
TStrIntPrVHI.__lt__ = new_instancemethod(_snap.TStrIntPrVHI___lt__,None,TStrIntPrVHI)
TStrIntPrVHI.__ref__ = new_instancemethod(_snap.TStrIntPrVHI___ref__,None,TStrIntPrVHI)
TStrIntPrVHI.__call__ = new_instancemethod(_snap.TStrIntPrVHI___call__,None,TStrIntPrVHI)
TStrIntPrVHI.__deref__ = new_instancemethod(_snap.TStrIntPrVHI___deref__,None,TStrIntPrVHI)
TStrIntPrVHI.Next = new_instancemethod(_snap.TStrIntPrVHI_Next,None,TStrIntPrVHI)
TStrIntPrVHI.IsEmpty = new_instancemethod(_snap.TStrIntPrVHI_IsEmpty,None,TStrIntPrVHI)
TStrIntPrVHI.IsEnd = new_instancemethod(_snap.TStrIntPrVHI_IsEnd,None,TStrIntPrVHI)
TStrIntPrVHI.GetKey = new_instancemethod(_snap.TStrIntPrVHI_GetKey,None,TStrIntPrVHI)
TStrIntPrVHI.GetDat = new_instancemethod(_snap.TStrIntPrVHI_GetDat,None,TStrIntPrVHI)
TStrIntPrVHI_swigregister = _snap.TStrIntPrVHI_swigregister
TStrIntPrVHI_swigregister(TStrIntPrVHI)

class TStrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrFltHI
        __init__(self, TStrFltHI _HashKeyDatI) -> TStrFltHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TFlt > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TFlt > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TStrFltHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TFlt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TFlt >::THKeyDat const * value

        """
        _snap.TStrFltHI_swiginit(self,_snap.new_TStrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TStr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TStr,TFlt > const & value

        """
        return _snap.TStrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TStr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TStr,TFlt > const & value

        """
        return _snap.TStrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value




        """
        return _snap.TStrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value




        """
        return _snap.TStrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value




        """
        return _snap.TStrFltHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrFltHI
        Parameters:
           self: THashKeyDatI< TStr,TFlt > * value




        """
        return _snap.TStrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value




        """
        return _snap.TStrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value




        """
        return _snap.TStrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TFlt > const * value




        """
        return _snap.TStrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFlt
        GetDat(self) -> TFlt
        Parameters:
           self: THashKeyDatI< TStr,TFlt > * value


        """
        return _snap.TStrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrFltHI
TStrFltHI.__eq__ = new_instancemethod(_snap.TStrFltHI___eq__,None,TStrFltHI)
TStrFltHI.__lt__ = new_instancemethod(_snap.TStrFltHI___lt__,None,TStrFltHI)
TStrFltHI.__ref__ = new_instancemethod(_snap.TStrFltHI___ref__,None,TStrFltHI)
TStrFltHI.__call__ = new_instancemethod(_snap.TStrFltHI___call__,None,TStrFltHI)
TStrFltHI.__deref__ = new_instancemethod(_snap.TStrFltHI___deref__,None,TStrFltHI)
TStrFltHI.Next = new_instancemethod(_snap.TStrFltHI_Next,None,TStrFltHI)
TStrFltHI.IsEmpty = new_instancemethod(_snap.TStrFltHI_IsEmpty,None,TStrFltHI)
TStrFltHI.IsEnd = new_instancemethod(_snap.TStrFltHI_IsEnd,None,TStrFltHI)
TStrFltHI.GetKey = new_instancemethod(_snap.TStrFltHI_GetKey,None,TStrFltHI)
TStrFltHI.GetDat = new_instancemethod(_snap.TStrFltHI_GetDat,None,TStrFltHI)
TStrFltHI_swigregister = _snap.TStrFltHI_swigregister
TStrFltHI_swigregister(TStrFltHI)

class TStrFltVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TFltV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrFltVHI
        __init__(self, TStrFltVHI _HashKeyDatI) -> TStrFltVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TFltV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TFltV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TFlt,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TFlt,int)>)>::THKeyDat _EndI) -> TStrFltVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TFlt,int > >::THKeyDat const * value

        """
        _snap.TStrFltVHI_swiginit(self,_snap.new_TStrFltVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrFltVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TFltV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TFltV > const & value

        """
        return _snap.TStrFltVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrFltVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TFltV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TFltV > const & value

        """
        return _snap.TStrFltVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TFlt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value




        """
        return _snap.TStrFltVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TFlt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value




        """
        return _snap.TStrFltVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TFlt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value




        """
        return _snap.TStrFltVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrFltVHI
        Parameters:
           self: THashKeyDatI< TStr,TFltV > * value




        """
        return _snap.TStrFltVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value




        """
        return _snap.TStrFltVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value




        """
        return _snap.TStrFltVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TFltV > const * value




        """
        return _snap.TStrFltVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFltV
        GetDat(self) -> TFltV
        Parameters:
           self: THashKeyDatI< TStr,TFltV > * value


        """
        return _snap.TStrFltVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrFltVHI
TStrFltVHI.__eq__ = new_instancemethod(_snap.TStrFltVHI___eq__,None,TStrFltVHI)
TStrFltVHI.__lt__ = new_instancemethod(_snap.TStrFltVHI___lt__,None,TStrFltVHI)
TStrFltVHI.__ref__ = new_instancemethod(_snap.TStrFltVHI___ref__,None,TStrFltVHI)
TStrFltVHI.__call__ = new_instancemethod(_snap.TStrFltVHI___call__,None,TStrFltVHI)
TStrFltVHI.__deref__ = new_instancemethod(_snap.TStrFltVHI___deref__,None,TStrFltVHI)
TStrFltVHI.Next = new_instancemethod(_snap.TStrFltVHI_Next,None,TStrFltVHI)
TStrFltVHI.IsEmpty = new_instancemethod(_snap.TStrFltVHI_IsEmpty,None,TStrFltVHI)
TStrFltVHI.IsEnd = new_instancemethod(_snap.TStrFltVHI_IsEnd,None,TStrFltVHI)
TStrFltVHI.GetKey = new_instancemethod(_snap.TStrFltVHI_GetKey,None,TStrFltVHI)
TStrFltVHI.GetDat = new_instancemethod(_snap.TStrFltVHI_GetDat,None,TStrFltVHI)
TStrFltVHI_swigregister = _snap.TStrFltVHI_swigregister
TStrFltVHI_swigregister(TStrFltVHI)

class TStrStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrStrHI
        __init__(self, TStrStrHI _HashKeyDatI) -> TStrStrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TStr > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TStr > const & value

        __init__(self, THKeyDat _KeyDatI, THKeyDat _EndI) -> TStrStrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TStr >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TStr >::THKeyDat const * value

        """
        _snap.TStrStrHI_swiginit(self,_snap.new_TStrStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStr > const & value

        """
        return _snap.TStrStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStr > const & value

        """
        return _snap.TStrStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value




        """
        return _snap.TStrStrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value




        """
        return _snap.TStrStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value




        """
        return _snap.TStrStrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrStrHI
        Parameters:
           self: THashKeyDatI< TStr,TStr > * value




        """
        return _snap.TStrStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value




        """
        return _snap.TStrStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value




        """
        return _snap.TStrStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStr > const * value




        """
        return _snap.TStrStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStr
        GetDat(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStr > * value


        """
        return _snap.TStrStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrHI
TStrStrHI.__eq__ = new_instancemethod(_snap.TStrStrHI___eq__,None,TStrStrHI)
TStrStrHI.__lt__ = new_instancemethod(_snap.TStrStrHI___lt__,None,TStrStrHI)
TStrStrHI.__ref__ = new_instancemethod(_snap.TStrStrHI___ref__,None,TStrStrHI)
TStrStrHI.__call__ = new_instancemethod(_snap.TStrStrHI___call__,None,TStrStrHI)
TStrStrHI.__deref__ = new_instancemethod(_snap.TStrStrHI___deref__,None,TStrStrHI)
TStrStrHI.Next = new_instancemethod(_snap.TStrStrHI_Next,None,TStrStrHI)
TStrStrHI.IsEmpty = new_instancemethod(_snap.TStrStrHI_IsEmpty,None,TStrStrHI)
TStrStrHI.IsEnd = new_instancemethod(_snap.TStrStrHI_IsEnd,None,TStrStrHI)
TStrStrHI.GetKey = new_instancemethod(_snap.TStrStrHI_GetKey,None,TStrStrHI)
TStrStrHI.GetDat = new_instancemethod(_snap.TStrStrHI_GetDat,None,TStrStrHI)
TStrStrHI_swigregister = _snap.TStrStrHI_swigregister
TStrStrHI_swigregister(TStrStrHI)

class TStrStrPrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrStrPrHI
        __init__(self, TStrStrPrHI _HashKeyDatI) -> TStrStrPrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TStrPr > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TStrPr > const & value

        __init__(self, THashKeyDatI<(TStr,TPair<(TStr,TStr)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TPair<(TStr,TStr)>)>::THKeyDat _EndI) -> TStrStrPrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TPair< TStr,TStr > >::THKeyDat const * value

        """
        _snap.TStrStrPrHI_swiginit(self,_snap.new_TStrStrPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrStrPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrPr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrPr > const & value

        """
        return _snap.TStrStrPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrStrPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrPr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrPr > const & value

        """
        return _snap.TStrStrPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TPair<(TStr,TStr)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value




        """
        return _snap.TStrStrPrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TPair<(TStr,TStr)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value




        """
        return _snap.TStrStrPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TPair<(TStr,TStr)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value




        """
        return _snap.TStrStrPrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrStrPrHI
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > * value




        """
        return _snap.TStrStrPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value




        """
        return _snap.TStrStrPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value




        """
        return _snap.TStrStrPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > const * value




        """
        return _snap.TStrStrPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TPair<(TStr,TStr)>
        GetDat(self) -> TPair<(TStr,TStr)>
        Parameters:
           self: THashKeyDatI< TStr,TStrPr > * value


        """
        return _snap.TStrStrPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrPrHI
TStrStrPrHI.__eq__ = new_instancemethod(_snap.TStrStrPrHI___eq__,None,TStrStrPrHI)
TStrStrPrHI.__lt__ = new_instancemethod(_snap.TStrStrPrHI___lt__,None,TStrStrPrHI)
TStrStrPrHI.__ref__ = new_instancemethod(_snap.TStrStrPrHI___ref__,None,TStrStrPrHI)
TStrStrPrHI.__call__ = new_instancemethod(_snap.TStrStrPrHI___call__,None,TStrStrPrHI)
TStrStrPrHI.__deref__ = new_instancemethod(_snap.TStrStrPrHI___deref__,None,TStrStrPrHI)
TStrStrPrHI.Next = new_instancemethod(_snap.TStrStrPrHI_Next,None,TStrStrPrHI)
TStrStrPrHI.IsEmpty = new_instancemethod(_snap.TStrStrPrHI_IsEmpty,None,TStrStrPrHI)
TStrStrPrHI.IsEnd = new_instancemethod(_snap.TStrStrPrHI_IsEnd,None,TStrStrPrHI)
TStrStrPrHI.GetKey = new_instancemethod(_snap.TStrStrPrHI_GetKey,None,TStrStrPrHI)
TStrStrPrHI.GetDat = new_instancemethod(_snap.TStrStrPrHI_GetDat,None,TStrStrPrHI)
TStrStrPrHI_swigregister = _snap.TStrStrPrHI_swigregister
TStrStrPrHI_swigregister(TStrStrPrHI)

class TStrStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrStrVHI
        __init__(self, TStrStrVHI _HashKeyDatI) -> TStrStrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TStrV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TStrV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TStr,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TStr,int)>)>::THKeyDat _EndI) -> TStrStrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TStr,int > >::THKeyDat const * value

        """
        _snap.TStrStrVHI_swiginit(self,_snap.new_TStrStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrV > const & value

        """
        return _snap.TStrStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrV > const & value

        """
        return _snap.TStrStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value




        """
        return _snap.TStrStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value




        """
        return _snap.TStrStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value




        """
        return _snap.TStrStrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrStrVHI
        Parameters:
           self: THashKeyDatI< TStr,TStrV > * value




        """
        return _snap.TStrStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value




        """
        return _snap.TStrStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value




        """
        return _snap.TStrStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStrV > const * value




        """
        return _snap.TStrStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStrV
        GetDat(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TStr,TStrV > * value


        """
        return _snap.TStrStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrVHI
TStrStrVHI.__eq__ = new_instancemethod(_snap.TStrStrVHI___eq__,None,TStrStrVHI)
TStrStrVHI.__lt__ = new_instancemethod(_snap.TStrStrVHI___lt__,None,TStrStrVHI)
TStrStrVHI.__ref__ = new_instancemethod(_snap.TStrStrVHI___ref__,None,TStrStrVHI)
TStrStrVHI.__call__ = new_instancemethod(_snap.TStrStrVHI___call__,None,TStrStrVHI)
TStrStrVHI.__deref__ = new_instancemethod(_snap.TStrStrVHI___deref__,None,TStrStrVHI)
TStrStrVHI.Next = new_instancemethod(_snap.TStrStrVHI_Next,None,TStrStrVHI)
TStrStrVHI.IsEmpty = new_instancemethod(_snap.TStrStrVHI_IsEmpty,None,TStrStrVHI)
TStrStrVHI.IsEnd = new_instancemethod(_snap.TStrStrVHI_IsEnd,None,TStrStrVHI)
TStrStrVHI.GetKey = new_instancemethod(_snap.TStrStrVHI_GetKey,None,TStrStrVHI)
TStrStrVHI.GetDat = new_instancemethod(_snap.TStrStrVHI_GetDat,None,TStrStrVHI)
TStrStrVHI_swigregister = _snap.TStrStrVHI_swigregister
TStrStrVHI_swigregister(TStrStrVHI)

class TStrStrPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrStrPrVHI
        __init__(self, TStrStrPrVHI _HashKeyDatI) -> TStrStrPrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TPair<(TStr,TStr)>,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TPair<(TStr,TStr)>,int)>)>::THKeyDat _EndI) -> TStrStrPrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TStr >,int > >::THKeyDat const * value

        """
        _snap.TStrStrPrVHI_swiginit(self,_snap.new_TStrStrPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrStrPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const & value

        """
        return _snap.TStrStrPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrStrPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrPrV > const & value

        """
        return _snap.TStrStrPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TStr,TStr)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value




        """
        return _snap.TStrStrPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TStr,TStr)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value




        """
        return _snap.TStrStrPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TStr,TStr)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value




        """
        return _snap.TStrStrPrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrStrPrVHI
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > * value




        """
        return _snap.TStrStrPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value




        """
        return _snap.TStrStrPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value




        """
        return _snap.TStrStrPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > const * value




        """
        return _snap.TStrStrPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TVec<(TPair<(TStr,TStr)>,int)>
        GetDat(self) -> TVec<(TPair<(TStr,TStr)>,int)>
        Parameters:
           self: THashKeyDatI< TStr,TStrPrV > * value


        """
        return _snap.TStrStrPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrPrVHI
TStrStrPrVHI.__eq__ = new_instancemethod(_snap.TStrStrPrVHI___eq__,None,TStrStrPrVHI)
TStrStrPrVHI.__lt__ = new_instancemethod(_snap.TStrStrPrVHI___lt__,None,TStrStrPrVHI)
TStrStrPrVHI.__ref__ = new_instancemethod(_snap.TStrStrPrVHI___ref__,None,TStrStrPrVHI)
TStrStrPrVHI.__call__ = new_instancemethod(_snap.TStrStrPrVHI___call__,None,TStrStrPrVHI)
TStrStrPrVHI.__deref__ = new_instancemethod(_snap.TStrStrPrVHI___deref__,None,TStrStrPrVHI)
TStrStrPrVHI.Next = new_instancemethod(_snap.TStrStrPrVHI_Next,None,TStrStrPrVHI)
TStrStrPrVHI.IsEmpty = new_instancemethod(_snap.TStrStrPrVHI_IsEmpty,None,TStrStrPrVHI)
TStrStrPrVHI.IsEnd = new_instancemethod(_snap.TStrStrPrVHI_IsEnd,None,TStrStrPrVHI)
TStrStrPrVHI.GetKey = new_instancemethod(_snap.TStrStrPrVHI_GetKey,None,TStrStrPrVHI)
TStrStrPrVHI.GetDat = new_instancemethod(_snap.TStrStrPrVHI_GetDat,None,TStrStrPrVHI)
TStrStrPrVHI_swigregister = _snap.TStrStrPrVHI_swigregister
TStrStrPrVHI_swigregister(TStrStrPrVHI)

class TStrStrKdVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrKdV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrStrKdVHI
        __init__(self, TStrStrKdVHI _HashKeyDatI) -> TStrStrKdVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TStr)>,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TStr)>,int)>)>::THKeyDat _EndI) -> TStrStrKdVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TStr >,int > >::THKeyDat const * value

        """
        _snap.TStrStrKdVHI_swiginit(self,_snap.new_TStrStrKdVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrStrKdVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const & value

        """
        return _snap.TStrStrKdVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrStrKdVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrKdV > const & value

        """
        return _snap.TStrStrKdVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TStr)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value




        """
        return _snap.TStrStrKdVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TStr)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value




        """
        return _snap.TStrStrKdVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TStr)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value




        """
        return _snap.TStrStrKdVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrStrKdVHI
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > * value




        """
        return _snap.TStrStrKdVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value




        """
        return _snap.TStrStrKdVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value




        """
        return _snap.TStrStrKdVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > const * value




        """
        return _snap.TStrStrKdVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TVec<(TKeyDat<(TStr,TStr)>,int)>
        GetDat(self) -> TVec<(TKeyDat<(TStr,TStr)>,int)>
        Parameters:
           self: THashKeyDatI< TStr,TStrKdV > * value


        """
        return _snap.TStrStrKdVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrKdVHI
TStrStrKdVHI.__eq__ = new_instancemethod(_snap.TStrStrKdVHI___eq__,None,TStrStrKdVHI)
TStrStrKdVHI.__lt__ = new_instancemethod(_snap.TStrStrKdVHI___lt__,None,TStrStrKdVHI)
TStrStrKdVHI.__ref__ = new_instancemethod(_snap.TStrStrKdVHI___ref__,None,TStrStrKdVHI)
TStrStrKdVHI.__call__ = new_instancemethod(_snap.TStrStrKdVHI___call__,None,TStrStrKdVHI)
TStrStrKdVHI.__deref__ = new_instancemethod(_snap.TStrStrKdVHI___deref__,None,TStrStrKdVHI)
TStrStrKdVHI.Next = new_instancemethod(_snap.TStrStrKdVHI_Next,None,TStrStrKdVHI)
TStrStrKdVHI.IsEmpty = new_instancemethod(_snap.TStrStrKdVHI_IsEmpty,None,TStrStrKdVHI)
TStrStrKdVHI.IsEnd = new_instancemethod(_snap.TStrStrKdVHI_IsEnd,None,TStrStrKdVHI)
TStrStrKdVHI.GetKey = new_instancemethod(_snap.TStrStrKdVHI_GetKey,None,TStrStrKdVHI)
TStrStrKdVHI.GetDat = new_instancemethod(_snap.TStrStrKdVHI_GetDat,None,TStrStrKdVHI)
TStrStrKdVHI_swigregister = _snap.TStrStrKdVHI_swigregister
TStrStrKdVHI_swigregister(TStrStrKdVHI)

class TStrIntFltPrHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TIntFltPr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntFltPrHI
        __init__(self, TStrIntFltPrHI _HashKeyDatI) -> TStrIntFltPrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const & value

        __init__(self, THashKeyDatI<(TStr,TPair<(TInt,TFlt)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TPair<(TInt,TFlt)>)>::THKeyDat _EndI) -> TStrIntFltPrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TPair< TInt,TFlt > >::THKeyDat const * value

        """
        _snap.TStrIntFltPrHI_swiginit(self,_snap.new_TStrIntFltPrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrIntFltPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const & value

        """
        return _snap.TStrIntFltPrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrIntFltPrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value
           HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const & value

           HashKeyDatI: THashKeyDatI< TStr,TIntFltPr > const & value

        """
        return _snap.TStrIntFltPrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TPair<(TInt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value




        """
        return _snap.TStrIntFltPrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TPair<(TInt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value




        """
        return _snap.TStrIntFltPrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TPair<(TInt,TFlt)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value




        """
        return _snap.TStrIntFltPrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrIntFltPrHI
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > * value




        """
        return _snap.TStrIntFltPrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value




        """
        return _snap.TStrIntFltPrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value




        """
        return _snap.TStrIntFltPrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > const * value




        """
        return _snap.TStrIntFltPrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TPair<(TInt,TFlt)>
        GetDat(self) -> TPair<(TInt,TFlt)>
        Parameters:
           self: THashKeyDatI< TStr,TIntFltPr > * value


        """
        return _snap.TStrIntFltPrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntFltPrHI
TStrIntFltPrHI.__eq__ = new_instancemethod(_snap.TStrIntFltPrHI___eq__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__lt__ = new_instancemethod(_snap.TStrIntFltPrHI___lt__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__ref__ = new_instancemethod(_snap.TStrIntFltPrHI___ref__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__call__ = new_instancemethod(_snap.TStrIntFltPrHI___call__,None,TStrIntFltPrHI)
TStrIntFltPrHI.__deref__ = new_instancemethod(_snap.TStrIntFltPrHI___deref__,None,TStrIntFltPrHI)
TStrIntFltPrHI.Next = new_instancemethod(_snap.TStrIntFltPrHI_Next,None,TStrIntFltPrHI)
TStrIntFltPrHI.IsEmpty = new_instancemethod(_snap.TStrIntFltPrHI_IsEmpty,None,TStrIntFltPrHI)
TStrIntFltPrHI.IsEnd = new_instancemethod(_snap.TStrIntFltPrHI_IsEnd,None,TStrIntFltPrHI)
TStrIntFltPrHI.GetKey = new_instancemethod(_snap.TStrIntFltPrHI_GetKey,None,TStrIntFltPrHI)
TStrIntFltPrHI.GetDat = new_instancemethod(_snap.TStrIntFltPrHI_GetDat,None,TStrIntFltPrHI)
TStrIntFltPrHI_swigregister = _snap.TStrIntFltPrHI_swigregister
TStrIntFltPrHI_swigregister(TStrIntFltPrHI)

class TStrStrIntPrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrIntPrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrStrIntPrVHI
        __init__(self, TStrStrIntPrVHI _HashKeyDatI) -> TStrStrIntPrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TPair<(TStr,TInt)>,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TPair<(TStr,TInt)>,int)>)>::THKeyDat _EndI) -> TStrStrIntPrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TPair< TStr,TInt >,int > >::THKeyDat const * value

        """
        _snap.TStrStrIntPrVHI_swiginit(self,_snap.new_TStrStrIntPrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrStrIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const & value

        """
        return _snap.TStrStrIntPrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrStrIntPrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrIntPrV > const & value

        """
        return _snap.TStrStrIntPrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TStr,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value




        """
        return _snap.TStrStrIntPrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TStr,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value




        """
        return _snap.TStrStrIntPrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TPair<(TStr,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value




        """
        return _snap.TStrStrIntPrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrStrIntPrVHI
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > * value




        """
        return _snap.TStrStrIntPrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value




        """
        return _snap.TStrStrIntPrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value




        """
        return _snap.TStrStrIntPrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > const * value




        """
        return _snap.TStrStrIntPrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStrIntPrV
        GetDat(self) -> TStrIntPrV
        Parameters:
           self: THashKeyDatI< TStr,TStrIntPrV > * value


        """
        return _snap.TStrStrIntPrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrIntPrVHI
TStrStrIntPrVHI.__eq__ = new_instancemethod(_snap.TStrStrIntPrVHI___eq__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__lt__ = new_instancemethod(_snap.TStrStrIntPrVHI___lt__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__ref__ = new_instancemethod(_snap.TStrStrIntPrVHI___ref__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__call__ = new_instancemethod(_snap.TStrStrIntPrVHI___call__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.__deref__ = new_instancemethod(_snap.TStrStrIntPrVHI___deref__,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.Next = new_instancemethod(_snap.TStrStrIntPrVHI_Next,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.IsEmpty = new_instancemethod(_snap.TStrStrIntPrVHI_IsEmpty,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.IsEnd = new_instancemethod(_snap.TStrStrIntPrVHI_IsEnd,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.GetKey = new_instancemethod(_snap.TStrStrIntPrVHI_GetKey,None,TStrStrIntPrVHI)
TStrStrIntPrVHI.GetDat = new_instancemethod(_snap.TStrStrIntPrVHI_GetDat,None,TStrStrIntPrVHI)
TStrStrIntPrVHI_swigregister = _snap.TStrStrIntPrVHI_swigregister
TStrStrIntPrVHI_swigregister(TStrStrIntPrVHI)

class TStrStrIntKdVHI(object):
    """Proxy of C++ THashKeyDatI<(TStr,TStrIntKdV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrStrIntKdVHI
        __init__(self, TStrStrIntKdVHI _HashKeyDatI) -> TStrStrIntKdVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const & value

           _HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const & value

        __init__(self, THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TInt)>,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TInt)>,int)>)>::THKeyDat _EndI) -> TStrStrIntKdVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TStr,TVec< TKeyDat< TStr,TInt >,int > >::THKeyDat const * value

        """
        _snap.TStrStrIntKdVHI_swiginit(self,_snap.new_TStrStrIntKdVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrStrIntKdVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const & value

        """
        return _snap.TStrStrIntKdVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrStrIntKdVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value
           HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const & value

           HashKeyDatI: THashKeyDatI< TStr,TStrIntKdV > const & value

        """
        return _snap.TStrStrIntKdVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value




        """
        return _snap.TStrStrIntKdVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value




        """
        return _snap.TStrStrIntKdVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TStr,TVec<(TKeyDat<(TStr,TInt)>,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value




        """
        return _snap.TStrStrIntKdVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrStrIntKdVHI
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > * value




        """
        return _snap.TStrStrIntKdVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value




        """
        return _snap.TStrStrIntKdVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value




        """
        return _snap.TStrStrIntKdVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > const * value




        """
        return _snap.TStrStrIntKdVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TVec<(TKeyDat<(TStr,TInt)>,int)>
        GetDat(self) -> TVec<(TKeyDat<(TStr,TInt)>,int)>
        Parameters:
           self: THashKeyDatI< TStr,TStrIntKdV > * value


        """
        return _snap.TStrStrIntKdVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrStrIntKdVHI
TStrStrIntKdVHI.__eq__ = new_instancemethod(_snap.TStrStrIntKdVHI___eq__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__lt__ = new_instancemethod(_snap.TStrStrIntKdVHI___lt__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__ref__ = new_instancemethod(_snap.TStrStrIntKdVHI___ref__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__call__ = new_instancemethod(_snap.TStrStrIntKdVHI___call__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.__deref__ = new_instancemethod(_snap.TStrStrIntKdVHI___deref__,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.Next = new_instancemethod(_snap.TStrStrIntKdVHI_Next,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.IsEmpty = new_instancemethod(_snap.TStrStrIntKdVHI_IsEmpty,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.IsEnd = new_instancemethod(_snap.TStrStrIntKdVHI_IsEnd,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.GetKey = new_instancemethod(_snap.TStrStrIntKdVHI_GetKey,None,TStrStrIntKdVHI)
TStrStrIntKdVHI.GetDat = new_instancemethod(_snap.TStrStrIntKdVHI_GetDat,None,TStrStrIntKdVHI)
TStrStrIntKdVHI_swigregister = _snap.TStrStrIntKdVHI_swigregister
TStrStrIntKdVHI_swigregister(TStrStrIntKdVHI)

class TStrPrBoolHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TBool)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrPrBoolHI
        __init__(self, TStrPrBoolHI _HashKeyDatI) -> TStrPrBoolHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrPr,TBool > const & value

           _HashKeyDatI: THashKeyDatI< TStrPr,TBool > const & value

        __init__(self, THashKeyDatI<(TPair<(TStr,TStr)>,TBool)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TStr,TStr)>,TBool)>::THKeyDat _EndI) -> TStrPrBoolHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TBool >::THKeyDat const * value

        """
        _snap.TStrPrBoolHI_swiginit(self,_snap.new_TStrPrBoolHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrPrBoolHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TBool > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TBool > const & value

        """
        return _snap.TStrPrBoolHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrPrBoolHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TBool > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TBool > const & value

        """
        return _snap.TStrPrBoolHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TBool)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value




        """
        return _snap.TStrPrBoolHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TBool)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value




        """
        return _snap.TStrPrBoolHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TBool)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value




        """
        return _snap.TStrPrBoolHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrPrBoolHI
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > * value




        """
        return _snap.TStrPrBoolHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value




        """
        return _snap.TStrPrBoolHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value




        """
        return _snap.TStrPrBoolHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TPair<(TStr,TStr)>
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > const * value




        """
        return _snap.TStrPrBoolHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TBool
        GetDat(self) -> TBool
        Parameters:
           self: THashKeyDatI< TStrPr,TBool > * value


        """
        return _snap.TStrPrBoolHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrBoolHI
TStrPrBoolHI.__eq__ = new_instancemethod(_snap.TStrPrBoolHI___eq__,None,TStrPrBoolHI)
TStrPrBoolHI.__lt__ = new_instancemethod(_snap.TStrPrBoolHI___lt__,None,TStrPrBoolHI)
TStrPrBoolHI.__ref__ = new_instancemethod(_snap.TStrPrBoolHI___ref__,None,TStrPrBoolHI)
TStrPrBoolHI.__call__ = new_instancemethod(_snap.TStrPrBoolHI___call__,None,TStrPrBoolHI)
TStrPrBoolHI.__deref__ = new_instancemethod(_snap.TStrPrBoolHI___deref__,None,TStrPrBoolHI)
TStrPrBoolHI.Next = new_instancemethod(_snap.TStrPrBoolHI_Next,None,TStrPrBoolHI)
TStrPrBoolHI.IsEmpty = new_instancemethod(_snap.TStrPrBoolHI_IsEmpty,None,TStrPrBoolHI)
TStrPrBoolHI.IsEnd = new_instancemethod(_snap.TStrPrBoolHI_IsEnd,None,TStrPrBoolHI)
TStrPrBoolHI.GetKey = new_instancemethod(_snap.TStrPrBoolHI_GetKey,None,TStrPrBoolHI)
TStrPrBoolHI.GetDat = new_instancemethod(_snap.TStrPrBoolHI_GetDat,None,TStrPrBoolHI)
TStrPrBoolHI_swigregister = _snap.TStrPrBoolHI_swigregister
TStrPrBoolHI_swigregister(TStrPrBoolHI)

class TStrPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrPrIntHI
        __init__(self, TStrPrIntHI _HashKeyDatI) -> TStrPrIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrPr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TStrPr,TInt > const & value

        __init__(self, THashKeyDatI<(TPair<(TStr,TStr)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TStr,TStr)>,TInt)>::THKeyDat _EndI) -> TStrPrIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TInt >::THKeyDat const * value

        """
        _snap.TStrPrIntHI_swiginit(self,_snap.new_TStrPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TInt > const & value

        """
        return _snap.TStrPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TInt > const & value

        """
        return _snap.TStrPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value




        """
        return _snap.TStrPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value




        """
        return _snap.TStrPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value




        """
        return _snap.TStrPrIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrPrIntHI
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > * value




        """
        return _snap.TStrPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value




        """
        return _snap.TStrPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value




        """
        return _snap.TStrPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TPair<(TStr,TStr)>
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > const * value




        """
        return _snap.TStrPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TStrPr,TInt > * value


        """
        return _snap.TStrPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrIntHI
TStrPrIntHI.__eq__ = new_instancemethod(_snap.TStrPrIntHI___eq__,None,TStrPrIntHI)
TStrPrIntHI.__lt__ = new_instancemethod(_snap.TStrPrIntHI___lt__,None,TStrPrIntHI)
TStrPrIntHI.__ref__ = new_instancemethod(_snap.TStrPrIntHI___ref__,None,TStrPrIntHI)
TStrPrIntHI.__call__ = new_instancemethod(_snap.TStrPrIntHI___call__,None,TStrPrIntHI)
TStrPrIntHI.__deref__ = new_instancemethod(_snap.TStrPrIntHI___deref__,None,TStrPrIntHI)
TStrPrIntHI.Next = new_instancemethod(_snap.TStrPrIntHI_Next,None,TStrPrIntHI)
TStrPrIntHI.IsEmpty = new_instancemethod(_snap.TStrPrIntHI_IsEmpty,None,TStrPrIntHI)
TStrPrIntHI.IsEnd = new_instancemethod(_snap.TStrPrIntHI_IsEnd,None,TStrPrIntHI)
TStrPrIntHI.GetKey = new_instancemethod(_snap.TStrPrIntHI_GetKey,None,TStrPrIntHI)
TStrPrIntHI.GetDat = new_instancemethod(_snap.TStrPrIntHI_GetDat,None,TStrPrIntHI)
TStrPrIntHI_swigregister = _snap.TStrPrIntHI_swigregister
TStrPrIntHI_swigregister(TStrPrIntHI)

class TStrPrFltHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TFlt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrPrFltHI
        __init__(self, TStrPrFltHI _HashKeyDatI) -> TStrPrFltHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const & value

           _HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const & value

        __init__(self, THashKeyDatI<(TPair<(TStr,TStr)>,TFlt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TStr,TStr)>,TFlt)>::THKeyDat _EndI) -> TStrPrFltHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TFlt >::THKeyDat const * value

        """
        _snap.TStrPrFltHI_swiginit(self,_snap.new_TStrPrFltHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrPrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const & value

        """
        return _snap.TStrPrFltHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrPrFltHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TFlt > const & value

        """
        return _snap.TStrPrFltHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value




        """
        return _snap.TStrPrFltHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value




        """
        return _snap.TStrPrFltHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TFlt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value




        """
        return _snap.TStrPrFltHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrPrFltHI
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > * value




        """
        return _snap.TStrPrFltHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value




        """
        return _snap.TStrPrFltHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value




        """
        return _snap.TStrPrFltHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TPair<(TStr,TStr)>
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > const * value




        """
        return _snap.TStrPrFltHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TFlt
        GetDat(self) -> TFlt
        Parameters:
           self: THashKeyDatI< TStrPr,TFlt > * value


        """
        return _snap.TStrPrFltHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrFltHI
TStrPrFltHI.__eq__ = new_instancemethod(_snap.TStrPrFltHI___eq__,None,TStrPrFltHI)
TStrPrFltHI.__lt__ = new_instancemethod(_snap.TStrPrFltHI___lt__,None,TStrPrFltHI)
TStrPrFltHI.__ref__ = new_instancemethod(_snap.TStrPrFltHI___ref__,None,TStrPrFltHI)
TStrPrFltHI.__call__ = new_instancemethod(_snap.TStrPrFltHI___call__,None,TStrPrFltHI)
TStrPrFltHI.__deref__ = new_instancemethod(_snap.TStrPrFltHI___deref__,None,TStrPrFltHI)
TStrPrFltHI.Next = new_instancemethod(_snap.TStrPrFltHI_Next,None,TStrPrFltHI)
TStrPrFltHI.IsEmpty = new_instancemethod(_snap.TStrPrFltHI_IsEmpty,None,TStrPrFltHI)
TStrPrFltHI.IsEnd = new_instancemethod(_snap.TStrPrFltHI_IsEnd,None,TStrPrFltHI)
TStrPrFltHI.GetKey = new_instancemethod(_snap.TStrPrFltHI_GetKey,None,TStrPrFltHI)
TStrPrFltHI.GetDat = new_instancemethod(_snap.TStrPrFltHI_GetDat,None,TStrPrFltHI)
TStrPrFltHI_swigregister = _snap.TStrPrFltHI_swigregister
TStrPrFltHI_swigregister(TStrPrFltHI)

class TStrPrStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrPrStrHI
        __init__(self, TStrPrStrHI _HashKeyDatI) -> TStrPrStrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrPr,TStr > const & value

           _HashKeyDatI: THashKeyDatI< TStrPr,TStr > const & value

        __init__(self, THashKeyDatI<(TPair<(TStr,TStr)>,TStr)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TStr,TStr)>,TStr)>::THKeyDat _EndI) -> TStrPrStrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TStr >::THKeyDat const * value

        """
        _snap.TStrPrStrHI_swiginit(self,_snap.new_TStrPrStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrPrStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TStr > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TStr > const & value

        """
        return _snap.TStrPrStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrPrStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TStr > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TStr > const & value

        """
        return _snap.TStrPrStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value




        """
        return _snap.TStrPrStrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value




        """
        return _snap.TStrPrStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value




        """
        return _snap.TStrPrStrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrPrStrHI
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > * value




        """
        return _snap.TStrPrStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value




        """
        return _snap.TStrPrStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value




        """
        return _snap.TStrPrStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TPair<(TStr,TStr)>
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > const * value




        """
        return _snap.TStrPrStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStr
        GetDat(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStrPr,TStr > * value


        """
        return _snap.TStrPrStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrStrHI
TStrPrStrHI.__eq__ = new_instancemethod(_snap.TStrPrStrHI___eq__,None,TStrPrStrHI)
TStrPrStrHI.__lt__ = new_instancemethod(_snap.TStrPrStrHI___lt__,None,TStrPrStrHI)
TStrPrStrHI.__ref__ = new_instancemethod(_snap.TStrPrStrHI___ref__,None,TStrPrStrHI)
TStrPrStrHI.__call__ = new_instancemethod(_snap.TStrPrStrHI___call__,None,TStrPrStrHI)
TStrPrStrHI.__deref__ = new_instancemethod(_snap.TStrPrStrHI___deref__,None,TStrPrStrHI)
TStrPrStrHI.Next = new_instancemethod(_snap.TStrPrStrHI_Next,None,TStrPrStrHI)
TStrPrStrHI.IsEmpty = new_instancemethod(_snap.TStrPrStrHI_IsEmpty,None,TStrPrStrHI)
TStrPrStrHI.IsEnd = new_instancemethod(_snap.TStrPrStrHI_IsEnd,None,TStrPrStrHI)
TStrPrStrHI.GetKey = new_instancemethod(_snap.TStrPrStrHI_GetKey,None,TStrPrStrHI)
TStrPrStrHI.GetDat = new_instancemethod(_snap.TStrPrStrHI_GetDat,None,TStrPrStrHI)
TStrPrStrHI_swigregister = _snap.TStrPrStrHI_swigregister
TStrPrStrHI_swigregister(TStrPrStrHI)

class TStrPrStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrPr,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrPrStrVHI
        __init__(self, TStrPrStrVHI _HashKeyDatI) -> TStrPrStrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const & value

           _HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const & value

        __init__(self, THashKeyDatI<(TPair<(TStr,TStr)>,TVec<(TStr,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TStr,TStr)>,TVec<(TStr,int)>)>::THKeyDat _EndI) -> TStrPrStrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TStr >,TVec< TStr,int > >::THKeyDat const * value

        """
        _snap.TStrPrStrVHI_swiginit(self,_snap.new_TStrPrStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrPrStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const & value

        """
        return _snap.TStrPrStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrPrStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TStrPr,TStrV > const & value

        """
        return _snap.TStrPrStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value




        """
        return _snap.TStrPrStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value




        """
        return _snap.TStrPrStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TStr,TStr)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value




        """
        return _snap.TStrPrStrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrPrStrVHI
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > * value




        """
        return _snap.TStrPrStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value




        """
        return _snap.TStrPrStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value




        """
        return _snap.TStrPrStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TPair<(TStr,TStr)>
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > const * value




        """
        return _snap.TStrPrStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStrV
        GetDat(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TStrPr,TStrV > * value


        """
        return _snap.TStrPrStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrPrStrVHI
TStrPrStrVHI.__eq__ = new_instancemethod(_snap.TStrPrStrVHI___eq__,None,TStrPrStrVHI)
TStrPrStrVHI.__lt__ = new_instancemethod(_snap.TStrPrStrVHI___lt__,None,TStrPrStrVHI)
TStrPrStrVHI.__ref__ = new_instancemethod(_snap.TStrPrStrVHI___ref__,None,TStrPrStrVHI)
TStrPrStrVHI.__call__ = new_instancemethod(_snap.TStrPrStrVHI___call__,None,TStrPrStrVHI)
TStrPrStrVHI.__deref__ = new_instancemethod(_snap.TStrPrStrVHI___deref__,None,TStrPrStrVHI)
TStrPrStrVHI.Next = new_instancemethod(_snap.TStrPrStrVHI_Next,None,TStrPrStrVHI)
TStrPrStrVHI.IsEmpty = new_instancemethod(_snap.TStrPrStrVHI_IsEmpty,None,TStrPrStrVHI)
TStrPrStrVHI.IsEnd = new_instancemethod(_snap.TStrPrStrVHI_IsEnd,None,TStrPrStrVHI)
TStrPrStrVHI.GetKey = new_instancemethod(_snap.TStrPrStrVHI_GetKey,None,TStrPrStrVHI)
TStrPrStrVHI.GetDat = new_instancemethod(_snap.TStrPrStrVHI_GetDat,None,TStrPrStrVHI)
TStrPrStrVHI_swigregister = _snap.TStrPrStrVHI_swigregister
TStrPrStrVHI_swigregister(TStrPrStrVHI)

class TStrTrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStrTr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrTrIntHI
        __init__(self, TStrTrIntHI _HashKeyDatI) -> TStrTrIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrTr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TStrTr,TInt > const & value

        __init__(self, THashKeyDatI<(TTriple<(TStr,TStr,TStr)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TTriple<(TStr,TStr,TStr)>,TInt)>::THKeyDat _EndI) -> TStrTrIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TTriple< TStr,TStr,TStr >,TInt >::THKeyDat const * value

        """
        _snap.TStrTrIntHI_swiginit(self,_snap.new_TStrTrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrTrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrTr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrTr,TInt > const & value

        """
        return _snap.TStrTrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrTrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrTr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrTr,TInt > const & value

        """
        return _snap.TStrTrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TTriple<(TStr,TStr,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value




        """
        return _snap.TStrTrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TTriple<(TStr,TStr,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value




        """
        return _snap.TStrTrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TTriple<(TStr,TStr,TStr)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value




        """
        return _snap.TStrTrIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrTrIntHI
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > * value




        """
        return _snap.TStrTrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value




        """
        return _snap.TStrTrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value




        """
        return _snap.TStrTrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TTriple<(TStr,TStr,TStr)>
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > const * value




        """
        return _snap.TStrTrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TStrTr,TInt > * value


        """
        return _snap.TStrTrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrTrIntHI
TStrTrIntHI.__eq__ = new_instancemethod(_snap.TStrTrIntHI___eq__,None,TStrTrIntHI)
TStrTrIntHI.__lt__ = new_instancemethod(_snap.TStrTrIntHI___lt__,None,TStrTrIntHI)
TStrTrIntHI.__ref__ = new_instancemethod(_snap.TStrTrIntHI___ref__,None,TStrTrIntHI)
TStrTrIntHI.__call__ = new_instancemethod(_snap.TStrTrIntHI___call__,None,TStrTrIntHI)
TStrTrIntHI.__deref__ = new_instancemethod(_snap.TStrTrIntHI___deref__,None,TStrTrIntHI)
TStrTrIntHI.Next = new_instancemethod(_snap.TStrTrIntHI_Next,None,TStrTrIntHI)
TStrTrIntHI.IsEmpty = new_instancemethod(_snap.TStrTrIntHI_IsEmpty,None,TStrTrIntHI)
TStrTrIntHI.IsEnd = new_instancemethod(_snap.TStrTrIntHI_IsEnd,None,TStrTrIntHI)
TStrTrIntHI.GetKey = new_instancemethod(_snap.TStrTrIntHI_GetKey,None,TStrTrIntHI)
TStrTrIntHI.GetDat = new_instancemethod(_snap.TStrTrIntHI_GetDat,None,TStrTrIntHI)
TStrTrIntHI_swigregister = _snap.TStrTrIntHI_swigregister
TStrTrIntHI_swigregister(TStrTrIntHI)

class TStrIntPrIntHI(object):
    """Proxy of C++ THashKeyDatI<(TStrIntPr,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrIntPrIntHI
        __init__(self, TStrIntPrIntHI _HashKeyDatI) -> TStrIntPrIntHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const & value

        __init__(self, THashKeyDatI<(TPair<(TStr,TInt)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TPair<(TStr,TInt)>,TInt)>::THKeyDat _EndI) -> TStrIntPrIntHI
        Parameters:
           _KeyDatI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TPair< TStr,TInt >,TInt >::THKeyDat const * value

        """
        _snap.TStrIntPrIntHI_swiginit(self,_snap.new_TStrIntPrIntHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrIntPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const & value

        """
        return _snap.TStrIntPrIntHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrIntPrIntHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrIntPr,TInt > const & value

        """
        return _snap.TStrIntPrIntHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TPair<(TStr,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value




        """
        return _snap.TStrIntPrIntHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TPair<(TStr,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value




        """
        return _snap.TStrIntPrIntHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TPair<(TStr,TInt)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value




        """
        return _snap.TStrIntPrIntHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrIntPrIntHI
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > * value




        """
        return _snap.TStrIntPrIntHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value




        """
        return _snap.TStrIntPrIntHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value




        """
        return _snap.TStrIntPrIntHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStrIntPr
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > const * value




        """
        return _snap.TStrIntPrIntHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TStrIntPr,TInt > * value


        """
        return _snap.TStrIntPrIntHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrIntPrIntHI
TStrIntPrIntHI.__eq__ = new_instancemethod(_snap.TStrIntPrIntHI___eq__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__lt__ = new_instancemethod(_snap.TStrIntPrIntHI___lt__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__ref__ = new_instancemethod(_snap.TStrIntPrIntHI___ref__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__call__ = new_instancemethod(_snap.TStrIntPrIntHI___call__,None,TStrIntPrIntHI)
TStrIntPrIntHI.__deref__ = new_instancemethod(_snap.TStrIntPrIntHI___deref__,None,TStrIntPrIntHI)
TStrIntPrIntHI.Next = new_instancemethod(_snap.TStrIntPrIntHI_Next,None,TStrIntPrIntHI)
TStrIntPrIntHI.IsEmpty = new_instancemethod(_snap.TStrIntPrIntHI_IsEmpty,None,TStrIntPrIntHI)
TStrIntPrIntHI.IsEnd = new_instancemethod(_snap.TStrIntPrIntHI_IsEnd,None,TStrIntPrIntHI)
TStrIntPrIntHI.GetKey = new_instancemethod(_snap.TStrIntPrIntHI_GetKey,None,TStrIntPrIntHI)
TStrIntPrIntHI.GetDat = new_instancemethod(_snap.TStrIntPrIntHI_GetDat,None,TStrIntPrIntHI)
TStrIntPrIntHI_swigregister = _snap.TStrIntPrIntHI_swigregister
TStrIntPrIntHI_swigregister(TStrIntPrIntHI)

class TStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrVHI
        __init__(self, TStrVHI _HashKeyDatI) -> TStrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrV,TInt > const & value

           _HashKeyDatI: THashKeyDatI< TStrV,TInt > const & value

        __init__(self, THashKeyDatI<(TVec<(TStr,int)>,TInt)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TVec<(TStr,int)>,TInt)>::THKeyDat _EndI) -> TStrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TInt >::THKeyDat const * value

        """
        _snap.TStrVHI_swiginit(self,_snap.new_TStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TInt > const & value

        """
        return _snap.TStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TInt > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TInt > const & value

        """
        return _snap.TStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value




        """
        return _snap.TStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value




        """
        return _snap.TStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TInt)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value




        """
        return _snap.TStrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrVHI
        Parameters:
           self: THashKeyDatI< TStrV,TInt > * value




        """
        return _snap.TStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value




        """
        return _snap.TStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value




        """
        return _snap.TStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TStrV,TInt > const * value




        """
        return _snap.TStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TInt
        GetDat(self) -> TInt
        Parameters:
           self: THashKeyDatI< TStrV,TInt > * value


        """
        return _snap.TStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVHI
TStrVHI.__eq__ = new_instancemethod(_snap.TStrVHI___eq__,None,TStrVHI)
TStrVHI.__lt__ = new_instancemethod(_snap.TStrVHI___lt__,None,TStrVHI)
TStrVHI.__ref__ = new_instancemethod(_snap.TStrVHI___ref__,None,TStrVHI)
TStrVHI.__call__ = new_instancemethod(_snap.TStrVHI___call__,None,TStrVHI)
TStrVHI.__deref__ = new_instancemethod(_snap.TStrVHI___deref__,None,TStrVHI)
TStrVHI.Next = new_instancemethod(_snap.TStrVHI_Next,None,TStrVHI)
TStrVHI.IsEmpty = new_instancemethod(_snap.TStrVHI_IsEmpty,None,TStrVHI)
TStrVHI.IsEnd = new_instancemethod(_snap.TStrVHI_IsEnd,None,TStrVHI)
TStrVHI.GetKey = new_instancemethod(_snap.TStrVHI_GetKey,None,TStrVHI)
TStrVHI.GetDat = new_instancemethod(_snap.TStrVHI_GetDat,None,TStrVHI)
TStrVHI_swigregister = _snap.TStrVHI_swigregister
TStrVHI_swigregister(TStrVHI)

class TStrVIntVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TIntV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrVIntVHI
        __init__(self, TStrVIntVHI _HashKeyDatI) -> TStrVIntVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrV,TIntV > const & value

           _HashKeyDatI: THashKeyDatI< TStrV,TIntV > const & value

        __init__(self, THashKeyDatI<(TVec<(TStr,int)>,TVec<(TInt,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TVec<(TStr,int)>,TVec<(TInt,int)>)>::THKeyDat _EndI) -> TStrVIntVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TInt,int > >::THKeyDat const * value

        """
        _snap.TStrVIntVHI_swiginit(self,_snap.new_TStrVIntVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrVIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TIntV > const & value

        """
        return _snap.TStrVIntVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrVIntVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TIntV > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TIntV > const & value

        """
        return _snap.TStrVIntVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value




        """
        return _snap.TStrVIntVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value




        """
        return _snap.TStrVIntVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TVec<(TInt,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value




        """
        return _snap.TStrVIntVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrVIntVHI
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > * value




        """
        return _snap.TStrVIntVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value




        """
        return _snap.TStrVIntVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value




        """
        return _snap.TStrVIntVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > const * value




        """
        return _snap.TStrVIntVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TIntV
        GetDat(self) -> TIntV
        Parameters:
           self: THashKeyDatI< TStrV,TIntV > * value


        """
        return _snap.TStrVIntVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVIntVHI
TStrVIntVHI.__eq__ = new_instancemethod(_snap.TStrVIntVHI___eq__,None,TStrVIntVHI)
TStrVIntVHI.__lt__ = new_instancemethod(_snap.TStrVIntVHI___lt__,None,TStrVIntVHI)
TStrVIntVHI.__ref__ = new_instancemethod(_snap.TStrVIntVHI___ref__,None,TStrVIntVHI)
TStrVIntVHI.__call__ = new_instancemethod(_snap.TStrVIntVHI___call__,None,TStrVIntVHI)
TStrVIntVHI.__deref__ = new_instancemethod(_snap.TStrVIntVHI___deref__,None,TStrVIntVHI)
TStrVIntVHI.Next = new_instancemethod(_snap.TStrVIntVHI_Next,None,TStrVIntVHI)
TStrVIntVHI.IsEmpty = new_instancemethod(_snap.TStrVIntVHI_IsEmpty,None,TStrVIntVHI)
TStrVIntVHI.IsEnd = new_instancemethod(_snap.TStrVIntVHI_IsEnd,None,TStrVIntVHI)
TStrVIntVHI.GetKey = new_instancemethod(_snap.TStrVIntVHI_GetKey,None,TStrVIntVHI)
TStrVIntVHI.GetDat = new_instancemethod(_snap.TStrVIntVHI_GetDat,None,TStrVIntVHI)
TStrVIntVHI_swigregister = _snap.TStrVIntVHI_swigregister
TStrVIntVHI_swigregister(TStrVIntVHI)

class TStrVStrHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TStr)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrVStrHI
        __init__(self, TStrVStrHI _HashKeyDatI) -> TStrVStrHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrV,TStr > const & value

           _HashKeyDatI: THashKeyDatI< TStrV,TStr > const & value

        __init__(self, THashKeyDatI<(TVec<(TStr,int)>,TStr)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TVec<(TStr,int)>,TStr)>::THKeyDat _EndI) -> TStrVStrHI
        Parameters:
           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TStr >::THKeyDat const * value

        """
        _snap.TStrVStrHI_swiginit(self,_snap.new_TStrVStrHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrVStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TStr > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TStr > const & value

        """
        return _snap.TStrVStrHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrVStrHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TStr > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TStr > const & value

        """
        return _snap.TStrVStrHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value




        """
        return _snap.TStrVStrHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value




        """
        return _snap.TStrVStrHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TStr)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value




        """
        return _snap.TStrVStrHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrVStrHI
        Parameters:
           self: THashKeyDatI< TStrV,TStr > * value




        """
        return _snap.TStrVStrHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value




        """
        return _snap.TStrVStrHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value




        """
        return _snap.TStrVStrHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TStrV,TStr > const * value




        """
        return _snap.TStrVStrHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStr
        GetDat(self) -> TStr
        Parameters:
           self: THashKeyDatI< TStrV,TStr > * value


        """
        return _snap.TStrVStrHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVStrHI
TStrVStrHI.__eq__ = new_instancemethod(_snap.TStrVStrHI___eq__,None,TStrVStrHI)
TStrVStrHI.__lt__ = new_instancemethod(_snap.TStrVStrHI___lt__,None,TStrVStrHI)
TStrVStrHI.__ref__ = new_instancemethod(_snap.TStrVStrHI___ref__,None,TStrVStrHI)
TStrVStrHI.__call__ = new_instancemethod(_snap.TStrVStrHI___call__,None,TStrVStrHI)
TStrVStrHI.__deref__ = new_instancemethod(_snap.TStrVStrHI___deref__,None,TStrVStrHI)
TStrVStrHI.Next = new_instancemethod(_snap.TStrVStrHI_Next,None,TStrVStrHI)
TStrVStrHI.IsEmpty = new_instancemethod(_snap.TStrVStrHI_IsEmpty,None,TStrVStrHI)
TStrVStrHI.IsEnd = new_instancemethod(_snap.TStrVStrHI_IsEnd,None,TStrVStrHI)
TStrVStrHI.GetKey = new_instancemethod(_snap.TStrVStrHI_GetKey,None,TStrVStrHI)
TStrVStrHI.GetDat = new_instancemethod(_snap.TStrVStrHI_GetDat,None,TStrVStrHI)
TStrVStrHI_swigregister = _snap.TStrVStrHI_swigregister
TStrVStrHI_swigregister(TStrVStrHI)

class TStrVStrVHI(object):
    """Proxy of C++ THashKeyDatI<(TStrV,TStrV)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TStrVStrVHI
        __init__(self, TStrVStrVHI _HashKeyDatI) -> TStrVStrVHI
        Parameters:
           _HashKeyDatI: THashKeyDatI< TStrV,TStrV > const & value

           _HashKeyDatI: THashKeyDatI< TStrV,TStrV > const & value

        __init__(self, THashKeyDatI<(TVec<(TStr,int)>,TVec<(TStr,int)>)>::THKeyDat _KeyDatI, 
            THashKeyDatI<(TVec<(TStr,int)>,TVec<(TStr,int)>)>::THKeyDat _EndI) -> TStrVStrVHI
        Parameters:
           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * value

           _KeyDatI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * value
           _EndI: THashKeyDatI< TVec< TStr,int >,TVec< TStr,int > >::THKeyDat const * value

        """
        _snap.TStrVStrVHI_swiginit(self,_snap.new_TStrVStrVHI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrVStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TStrV > const & value

        """
        return _snap.TStrVStrVHI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrVStrVHI HashKeyDatI) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value
           HashKeyDatI: THashKeyDatI< TStrV,TStrV > const & value

           HashKeyDatI: THashKeyDatI< TStrV,TStrV > const & value

        """
        return _snap.TStrVStrVHI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value




        """
        return _snap.TStrVStrVHI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value




        """
        return _snap.TStrVStrVHI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> THashKeyDatI<(TVec<(TStr,int)>,TVec<(TStr,int)>)>::THKeyDat
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value




        """
        return _snap.TStrVStrVHI___deref__(self)

    def Next(self):
        """
        Next(self) -> TStrVStrVHI
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > * value




        """
        return _snap.TStrVStrVHI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value




        """
        return _snap.TStrVStrVHI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value




        """
        return _snap.TStrVStrVHI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > const * value




        """
        return _snap.TStrVStrVHI_GetKey(self)

    def GetDat(self, *args):
        """
        GetDat(self) -> TStrV
        GetDat(self) -> TStrV
        Parameters:
           self: THashKeyDatI< TStrV,TStrV > * value


        """
        return _snap.TStrVStrVHI_GetDat(self, *args)

    __swig_destroy__ = _snap.delete_TStrVStrVHI
TStrVStrVHI.__eq__ = new_instancemethod(_snap.TStrVStrVHI___eq__,None,TStrVStrVHI)
TStrVStrVHI.__lt__ = new_instancemethod(_snap.TStrVStrVHI___lt__,None,TStrVStrVHI)
TStrVStrVHI.__ref__ = new_instancemethod(_snap.TStrVStrVHI___ref__,None,TStrVStrVHI)
TStrVStrVHI.__call__ = new_instancemethod(_snap.TStrVStrVHI___call__,None,TStrVStrVHI)
TStrVStrVHI.__deref__ = new_instancemethod(_snap.TStrVStrVHI___deref__,None,TStrVStrVHI)
TStrVStrVHI.Next = new_instancemethod(_snap.TStrVStrVHI_Next,None,TStrVStrVHI)
TStrVStrVHI.IsEmpty = new_instancemethod(_snap.TStrVStrVHI_IsEmpty,None,TStrVStrVHI)
TStrVStrVHI.IsEnd = new_instancemethod(_snap.TStrVStrVHI_IsEnd,None,TStrVStrVHI)
TStrVStrVHI.GetKey = new_instancemethod(_snap.TStrVStrVHI_GetKey,None,TStrVStrVHI)
TStrVStrVHI.GetDat = new_instancemethod(_snap.TStrVStrVHI_GetDat,None,TStrVStrVHI)
TStrVStrVHI_swigregister = _snap.TStrVStrVHI_swigregister
TStrVStrVHI_swigregister(TStrVStrVHI)

class TCnComV(object):
    """Proxy of C++ TVec<(TCnCom)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _snap.delete_TCnComV
    def __init__(self, *args): 
        """
        __init__(self) -> TCnComV
        __init__(self, TCnComV Vec) -> TCnComV
        Parameters:
           Vec: TVec< TCnCom,int > const & value

           Vec: TVec< TCnCom,int > const & value

        __init__(self, int _Vals) -> TCnComV
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> TCnComV
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TCnCom _ValT, int _Vals) -> TCnComV
        Parameters:
           _ValT: TCnCom * value
           _Vals: int const & value

           _ValT: TCnCom * value
           _Vals: int const & value

        __init__(self, TSIn SIn) -> TCnComV
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TCnComV_swiginit(self,_snap.new_TCnComV(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: TVec< TCnCom > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TCnComV_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TVec< TCnCom > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TCnComV_Save(self, *args)

    def __add__(self, *args):
        """
        __add__(self, TCnCom Val) -> TCnComV
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TCnComV Vec) -> bool
        Parameters:
           self: TVec< TCnCom > const * value
           Vec: TVec< TCnCom,int > const & value

           Vec: TVec< TCnCom,int > const & value

        """
        return _snap.TCnComV___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TCnComV Vec) -> bool
        Parameters:
           self: TVec< TCnCom > const * value
           Vec: TVec< TCnCom,int > const & value

           Vec: TVec< TCnCom,int > const & value

        """
        return _snap.TCnComV___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_GetMemSize(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_GetSecHashCd(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TCnCom > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TCnComV_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TCnCom _ValT, int _Vals)
        Parameters:
           self: TVec< TCnCom > * value
           _ValT: TCnCom * value
           _Vals: int const & value

           _ValT: TCnCom * value
           _Vals: int const & value

        """
        return _snap.TCnComV_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TCnCom > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.TCnComV_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TCnCom > * value


        """
        return _snap.TCnComV_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TCnCom > * value


        """
        return _snap.TCnComV_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TCnCom > * value


        """
        return _snap.TCnComV_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TCnCom > * value




        """
        return _snap.TCnComV_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, TCnComV Vec)
        Parameters:
           self: TVec< TCnCom > * value
           Vec: TVec< TCnCom,int > & value

           Vec: TVec< TCnCom,int > & value

        """
        return _snap.TCnComV_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, TCnComV Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TCnCom > * value
           Vec: TVec< TCnCom,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TCnCom,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.TCnComV_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TCnCom
        Last(self) -> TCnCom
        Parameters:
           self: TVec< TCnCom > * value


        """
        return _snap.TCnComV_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TCnCom
        LastLast(self) -> TCnCom
        Parameters:
           self: TVec< TCnCom > * value


        """
        return _snap.TCnComV_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TCnCom
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TCnCom
        GetRndVal(self, TRnd Rnd = Rnd) -> TCnCom
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TCnCom
        Parameters:
           self: TVec< TCnCom > * value


        """
        return _snap.TCnComV_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TIter
        Parameters:
           self: TVec< TCnCom > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TCnComV_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TCnCom Val) -> int
        Parameters:
           Val: TCnCom const & value

           Val: TCnCom const & value

        Add(self, TCnCom Val) -> int
        Parameters:
           Val: TCnCom & value

           Val: TCnCom & value

        Add(self, TCnCom Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value
           ResizeLen: int const & value

           Val: TCnCom const & value
           ResizeLen: int const & value

        """
        return _snap.TCnComV_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, TCnComV ValV) -> int
        Parameters:
           self: TVec< TCnCom > * value
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        """
        return _snap.TCnComV_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TCnCom Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TCnCom const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TCnCom const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TCnCom Val, bool Asc = True) -> int
        Parameters:
           Val: TCnCom const & value
           Asc: bool const & value

           Val: TCnCom const & value
           Asc: bool const & value

        AddSorted(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TCnCom Val, bool Asc) -> int
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value
           Asc: bool const & value

           Val: TCnCom const & value
           Asc: bool const & value

        """
        return _snap.TCnComV_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, TCnComV ValV) -> int
        Parameters:
           self: TVec< TCnCom > * value
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        """
        return _snap.TCnComV_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TCnCom
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TCnCom
        Parameters:
           self: TVec< TCnCom > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.TCnComV_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TCnCom Val)
        Parameters:
           self: TVec< TCnCom > * value
           ValN: int const & value
           Val: TCnCom const & value

           ValN: int const & value
           Val: TCnCom const & value

        """
        return _snap.TCnComV_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, TCnComV ValV)
        Parameters:
           self: TVec< TCnCom > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TCnCom,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TCnCom,int > & value

        """
        return _snap.TCnComV_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TCnCom Val)
        Parameters:
           self: TVec< TCnCom > * value
           ValN: int const & value
           Val: TCnCom const & value

           ValN: int const & value
           Val: TCnCom const & value

        """
        return _snap.TCnComV_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TCnCom > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.TCnComV_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TCnCom > * value




        """
        return _snap.TCnComV_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TCnCom Val) -> bool
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TCnCom Val)
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TCnCom Val)
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TCnComV Vec)
        Parameters:
           Vec: TVec< TCnCom,int > & value

           Vec: TVec< TCnCom,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TCnCom > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.TCnComV_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TIter LVal, TIter RVal)
        Parameters:
           LVal: TVec< TCnCom >::TIter value
           RVal: TVec< TCnCom >::TIter value

           LVal: TVec< TCnCom >::TIter value
           RVal: TVec< TCnCom >::TIter value

           LVal: TVec< TCnCom >::TIter value
           RVal: TVec< TCnCom >::TIter value

        """
        return _snap.TCnComV_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TCnCom > * value




        """
        return _snap.TCnComV_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TCnCom > * value




        """
        return _snap.TCnComV_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.TCnComV_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TCnCom > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TCnComV_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TCnCom > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TCnComV_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TCnCom > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TCnComV_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TCnCom > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.TCnComV_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TCnCom > * value


        """
        return _snap.TCnComV_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TCnCom > const * value


        """
        return _snap.TCnComV_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TCnCom > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TCnComV_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TCnCom > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.TCnComV_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TCnCom > * value




        """
        return _snap.TCnComV_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, TCnComV ValV)
        Parameters:
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        Intrs(self, TCnComV ValV, TCnComV DstValV)
        Parameters:
           self: TVec< TCnCom > const * value
           ValV: TVec< TCnCom,int > const & value
           DstValV: TVec< TCnCom,int > & value

           ValV: TVec< TCnCom,int > const & value
           DstValV: TVec< TCnCom,int > & value

        """
        return _snap.TCnComV_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, TCnComV ValV)
        Parameters:
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        Union(self, TCnComV ValV, TCnComV DstValV)
        Parameters:
           self: TVec< TCnCom > const * value
           ValV: TVec< TCnCom,int > const & value
           DstValV: TVec< TCnCom,int > & value

           ValV: TVec< TCnCom,int > const & value
           DstValV: TVec< TCnCom,int > & value

        """
        return _snap.TCnComV_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, TCnComV ValV)
        Parameters:
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        Diff(self, TCnComV ValV, TCnComV DstValV)
        Parameters:
           self: TVec< TCnCom > const * value
           ValV: TVec< TCnCom,int > const & value
           DstValV: TVec< TCnCom,int > & value

           ValV: TVec< TCnCom,int > const & value
           DstValV: TVec< TCnCom,int > & value

        """
        return _snap.TCnComV_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, TCnComV ValV) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        """
        return _snap.TCnComV_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, TCnComV ValV) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        """
        return _snap.TCnComV_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TCnCom Val) -> int
        Parameters:
           Val: TCnCom const & value

           Val: TCnCom const & value

        SearchBin(self, TCnCom Val, int InsValN) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value
           InsValN: int & value

           Val: TCnCom const & value
           InsValN: int & value

        """
        return _snap.TCnComV_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TCnCom Val, int InsValN) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value
           InsValN: int & value

           Val: TCnCom const & value
           InsValN: int & value

        """
        return _snap.TCnComV_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TCnCom Val, int BValN = 0) -> int
        Parameters:
           Val: TCnCom const & value
           BValN: int const & value

           Val: TCnCom const & value
           BValN: int const & value

        SearchForw(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TCnCom Val) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, TCnComV ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TCnCom,int > const & value
           BValN: int const & value

           ValV: TVec< TCnCom,int > const & value
           BValN: int const & value

        SearchVForw(self, TCnComV ValV) -> int
        Parameters:
           self: TVec< TCnCom > const * value
           ValV: TVec< TCnCom,int > const & value

           ValV: TVec< TCnCom,int > const & value

        """
        return _snap.TCnComV_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TCnCom Val) -> bool
        Parameters:
           Val: TCnCom const & value

           Val: TCnCom const & value

        IsIn(self, TCnCom Val, int ValN) -> bool
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value
           ValN: int & value

           Val: TCnCom const & value
           ValN: int & value

        """
        return _snap.TCnComV_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TCnCom Val) -> bool
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TCnCom Val) -> TCnCom
        Parameters:
           self: TVec< TCnCom > const * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TCnCom Val) -> TCnCom
        Parameters:
           self: TVec< TCnCom > * value
           Val: TCnCom const & value

           Val: TCnCom const & value

        """
        return _snap.TCnComV_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TCnCom > const * value




        """
        return _snap.TCnComV_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TCnCom Val1) -> TCnComV
        Parameters:
           Val1: TCnCom const & value

           Val1: TCnCom const & value

           Val1: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
            TCnCom Val5) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
            TCnCom Val5, TCnCom Val6) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
            TCnCom Val5, TCnCom Val6, TCnCom Val7) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
            TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value
           Val8: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value
           Val8: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value
           Val8: TCnCom const & value

        GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
            TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8, 
            TCnCom Val9) -> TCnComV
        Parameters:
           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value
           Val8: TCnCom const & value
           Val9: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value
           Val8: TCnCom const & value
           Val9: TCnCom const & value

           Val1: TCnCom const & value
           Val2: TCnCom const & value
           Val3: TCnCom const & value
           Val4: TCnCom const & value
           Val5: TCnCom const & value
           Val6: TCnCom const & value
           Val7: TCnCom const & value
           Val8: TCnCom const & value
           Val9: TCnCom const & value

        """
        return _snap.TCnComV_GetV(*args)

    GetV = staticmethod(GetV)
TCnComV.Load = new_instancemethod(_snap.TCnComV_Load,None,TCnComV)
TCnComV.Save = new_instancemethod(_snap.TCnComV_Save,None,TCnComV)
TCnComV.__add__ = new_instancemethod(_snap.TCnComV___add__,None,TCnComV)
TCnComV.__eq__ = new_instancemethod(_snap.TCnComV___eq__,None,TCnComV)
TCnComV.__lt__ = new_instancemethod(_snap.TCnComV___lt__,None,TCnComV)
TCnComV.GetMemUsed = new_instancemethod(_snap.TCnComV_GetMemUsed,None,TCnComV)
TCnComV.GetMemSize = new_instancemethod(_snap.TCnComV_GetMemSize,None,TCnComV)
TCnComV.GetPrimHashCd = new_instancemethod(_snap.TCnComV_GetPrimHashCd,None,TCnComV)
TCnComV.GetSecHashCd = new_instancemethod(_snap.TCnComV_GetSecHashCd,None,TCnComV)
TCnComV.Gen = new_instancemethod(_snap.TCnComV_Gen,None,TCnComV)
TCnComV.GenExt = new_instancemethod(_snap.TCnComV_GenExt,None,TCnComV)
TCnComV.IsExt = new_instancemethod(_snap.TCnComV_IsExt,None,TCnComV)
TCnComV.Reserve = new_instancemethod(_snap.TCnComV_Reserve,None,TCnComV)
TCnComV.Clr = new_instancemethod(_snap.TCnComV_Clr,None,TCnComV)
TCnComV.Trunc = new_instancemethod(_snap.TCnComV_Trunc,None,TCnComV)
TCnComV.Reduce = new_instancemethod(_snap.TCnComV_Reduce,None,TCnComV)
TCnComV.Pack = new_instancemethod(_snap.TCnComV_Pack,None,TCnComV)
TCnComV.MoveFrom = new_instancemethod(_snap.TCnComV_MoveFrom,None,TCnComV)
TCnComV.CopyUniqueFrom = new_instancemethod(_snap.TCnComV_CopyUniqueFrom,None,TCnComV)
TCnComV.Empty = new_instancemethod(_snap.TCnComV_Empty,None,TCnComV)
TCnComV.Len = new_instancemethod(_snap.TCnComV_Len,None,TCnComV)
TCnComV.Reserved = new_instancemethod(_snap.TCnComV_Reserved,None,TCnComV)
TCnComV.Last = new_instancemethod(_snap.TCnComV_Last,None,TCnComV)
TCnComV.LastValN = new_instancemethod(_snap.TCnComV_LastValN,None,TCnComV)
TCnComV.LastLast = new_instancemethod(_snap.TCnComV_LastLast,None,TCnComV)
TCnComV.GetRndVal = new_instancemethod(_snap.TCnComV_GetRndVal,None,TCnComV)
TCnComV.BegI = new_instancemethod(_snap.TCnComV_BegI,None,TCnComV)
TCnComV.EndI = new_instancemethod(_snap.TCnComV_EndI,None,TCnComV)
TCnComV.GetI = new_instancemethod(_snap.TCnComV_GetI,None,TCnComV)
TCnComV.AddAtm = new_instancemethod(_snap.TCnComV_AddAtm,None,TCnComV)
TCnComV.Add = new_instancemethod(_snap.TCnComV_Add,None,TCnComV)
TCnComV.AddMP = new_instancemethod(_snap.TCnComV_AddMP,None,TCnComV)
TCnComV.AddV = new_instancemethod(_snap.TCnComV_AddV,None,TCnComV)
TCnComV.AddSorted = new_instancemethod(_snap.TCnComV_AddSorted,None,TCnComV)
TCnComV.AddBackSorted = new_instancemethod(_snap.TCnComV_AddBackSorted,None,TCnComV)
TCnComV.AddMerged = new_instancemethod(_snap.TCnComV_AddMerged,None,TCnComV)
TCnComV.AddVMerged = new_instancemethod(_snap.TCnComV_AddVMerged,None,TCnComV)
TCnComV.AddUnique = new_instancemethod(_snap.TCnComV_AddUnique,None,TCnComV)
TCnComV.GetVal = new_instancemethod(_snap.TCnComV_GetVal,None,TCnComV)
TCnComV.SetVal = new_instancemethod(_snap.TCnComV_SetVal,None,TCnComV)
TCnComV.GetSubValV = new_instancemethod(_snap.TCnComV_GetSubValV,None,TCnComV)
TCnComV.Ins = new_instancemethod(_snap.TCnComV_Ins,None,TCnComV)
TCnComV.Del = new_instancemethod(_snap.TCnComV_Del,None,TCnComV)
TCnComV.DelLast = new_instancemethod(_snap.TCnComV_DelLast,None,TCnComV)
TCnComV.DelIfIn = new_instancemethod(_snap.TCnComV_DelIfIn,None,TCnComV)
TCnComV.DelAll = new_instancemethod(_snap.TCnComV_DelAll,None,TCnComV)
TCnComV.PutAll = new_instancemethod(_snap.TCnComV_PutAll,None,TCnComV)
TCnComV.Swap = new_instancemethod(_snap.TCnComV_Swap,None,TCnComV)
TCnComV.NextPerm = new_instancemethod(_snap.TCnComV_NextPerm,None,TCnComV)
TCnComV.PrevPerm = new_instancemethod(_snap.TCnComV_PrevPerm,None,TCnComV)
TCnComV.GetPivotValN = new_instancemethod(_snap.TCnComV_GetPivotValN,None,TCnComV)
TCnComV.BSort = new_instancemethod(_snap.TCnComV_BSort,None,TCnComV)
TCnComV.ISort = new_instancemethod(_snap.TCnComV_ISort,None,TCnComV)
TCnComV.Partition = new_instancemethod(_snap.TCnComV_Partition,None,TCnComV)
TCnComV.QSort = new_instancemethod(_snap.TCnComV_QSort,None,TCnComV)
TCnComV.Sort = new_instancemethod(_snap.TCnComV_Sort,None,TCnComV)
TCnComV.IsSorted = new_instancemethod(_snap.TCnComV_IsSorted,None,TCnComV)
TCnComV.Shuffle = new_instancemethod(_snap.TCnComV_Shuffle,None,TCnComV)
TCnComV.Reverse = new_instancemethod(_snap.TCnComV_Reverse,None,TCnComV)
TCnComV.Merge = new_instancemethod(_snap.TCnComV_Merge,None,TCnComV)
TCnComV.Intrs = new_instancemethod(_snap.TCnComV_Intrs,None,TCnComV)
TCnComV.Union = new_instancemethod(_snap.TCnComV_Union,None,TCnComV)
TCnComV.Diff = new_instancemethod(_snap.TCnComV_Diff,None,TCnComV)
TCnComV.IntrsLen = new_instancemethod(_snap.TCnComV_IntrsLen,None,TCnComV)
TCnComV.UnionLen = new_instancemethod(_snap.TCnComV_UnionLen,None,TCnComV)
TCnComV.Count = new_instancemethod(_snap.TCnComV_Count,None,TCnComV)
TCnComV.SearchBin = new_instancemethod(_snap.TCnComV_SearchBin,None,TCnComV)
TCnComV.SearchBinLeft = new_instancemethod(_snap.TCnComV_SearchBinLeft,None,TCnComV)
TCnComV.SearchForw = new_instancemethod(_snap.TCnComV_SearchForw,None,TCnComV)
TCnComV.SearchBack = new_instancemethod(_snap.TCnComV_SearchBack,None,TCnComV)
TCnComV.SearchVForw = new_instancemethod(_snap.TCnComV_SearchVForw,None,TCnComV)
TCnComV.IsIn = new_instancemethod(_snap.TCnComV_IsIn,None,TCnComV)
TCnComV.IsInBin = new_instancemethod(_snap.TCnComV_IsInBin,None,TCnComV)
TCnComV.GetDat = new_instancemethod(_snap.TCnComV_GetDat,None,TCnComV)
TCnComV.GetAddDat = new_instancemethod(_snap.TCnComV_GetAddDat,None,TCnComV)
TCnComV.GetMxValN = new_instancemethod(_snap.TCnComV_GetMxValN,None,TCnComV)
TCnComV_swigregister = _snap.TCnComV_swigregister
TCnComV_swigregister(TCnComV)

def TCnComV_SwapI(*args):
  """
    TCnComV_SwapI(TIter LVal, TIter RVal)
    Parameters:
       LVal: TVec< TCnCom >::TIter value
       RVal: TVec< TCnCom >::TIter value

       LVal: TVec< TCnCom >::TIter value
       RVal: TVec< TCnCom >::TIter value

    """
  return _snap.TCnComV_SwapI(*args)

def TCnComV_GetV(*args):
  """
    GetV(TCnCom Val1) -> TCnComV
    Parameters:
       Val1: TCnCom const & value

       Val1: TCnCom const & value

    GetV(TCnCom Val1, TCnCom Val2) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
        TCnCom Val5) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
        TCnCom Val5, TCnCom Val6) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
        TCnCom Val5, TCnCom Val6, TCnCom Val7) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value
       Val7: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value
       Val7: TCnCom const & value

    GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
        TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value
       Val7: TCnCom const & value
       Val8: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value
       Val7: TCnCom const & value
       Val8: TCnCom const & value

    TCnComV_GetV(TCnCom Val1, TCnCom Val2, TCnCom Val3, TCnCom Val4, 
        TCnCom Val5, TCnCom Val6, TCnCom Val7, TCnCom Val8, 
        TCnCom Val9) -> TCnComV
    Parameters:
       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value
       Val7: TCnCom const & value
       Val8: TCnCom const & value
       Val9: TCnCom const & value

       Val1: TCnCom const & value
       Val2: TCnCom const & value
       Val3: TCnCom const & value
       Val4: TCnCom const & value
       Val5: TCnCom const & value
       Val6: TCnCom const & value
       Val7: TCnCom const & value
       Val8: TCnCom const & value
       Val9: TCnCom const & value

    """
  return _snap.TCnComV_GetV(*args)

class TStrTAttrPr(object):
    """Proxy of C++ TPair<(TStr,TAttrType)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Val1 = _swig_property(_snap.TStrTAttrPr_Val1_get, _snap.TStrTAttrPr_Val1_set)
    Val2 = _swig_property(_snap.TStrTAttrPr_Val2_get, _snap.TStrTAttrPr_Val2_set)
    def __init__(self, *args): 
        """
        __init__(self) -> TStrTAttrPr
        __init__(self, TStrTAttrPr Pair) -> TStrTAttrPr
        Parameters:
           Pair: TPair< TStr,TAttrType > const & value

           Pair: TPair< TStr,TAttrType > const & value

        __init__(self, TStr _Val1, enum TAttrType_ _Val2) -> TStrTAttrPr
        Parameters:
           _Val1: TStr const & value
           _Val2: enum TAttrType_ const & value

           _Val1: TStr const & value
           _Val2: enum TAttrType_ const & value

        """
        _snap.TStrTAttrPr_swiginit(self,_snap.new_TStrTAttrPr(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TStrTAttrPr Pair) -> bool
        Parameters:
           self: TPair< TStr,TAttrType > const * value
           Pair: TPair< TStr,TAttrType > const & value

           Pair: TPair< TStr,TAttrType > const & value

        """
        return _snap.TStrTAttrPr___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TStrTAttrPr Pair) -> bool
        Parameters:
           self: TPair< TStr,TAttrType > const * value
           Pair: TPair< TStr,TAttrType > const & value

           Pair: TPair< TStr,TAttrType > const & value

        """
        return _snap.TStrTAttrPr___lt__(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, TStr _Val1, enum TAttrType_ _Val2)
        Parameters:
           self: TPair< TStr,TAttrType > const * value
           _Val1: TStr & value
           _Val2: enum TAttrType_ & value

           _Val1: TStr & value
           _Val2: enum TAttrType_ & value

        """
        return _snap.TStrTAttrPr_GetVal(self, *args)

    def GetVal1(self):
        """
        GetVal1(self) -> TStr
        Parameters:
           self: TPair< TStr,TAttrType > const * value




        """
        return _snap.TStrTAttrPr_GetVal1(self)

    def GetVal2(self):
        """
        GetVal2(self) -> enum TAttrType_
        Parameters:
           self: TPair< TStr,TAttrType > const * value




        """
        return _snap.TStrTAttrPr_GetVal2(self)

    __swig_destroy__ = _snap.delete_TStrTAttrPr
TStrTAttrPr.__eq__ = new_instancemethod(_snap.TStrTAttrPr___eq__,None,TStrTAttrPr)
TStrTAttrPr.__lt__ = new_instancemethod(_snap.TStrTAttrPr___lt__,None,TStrTAttrPr)
TStrTAttrPr.GetVal = new_instancemethod(_snap.TStrTAttrPr_GetVal,None,TStrTAttrPr)
TStrTAttrPr.GetVal1 = new_instancemethod(_snap.TStrTAttrPr_GetVal1,None,TStrTAttrPr)
TStrTAttrPr.GetVal2 = new_instancemethod(_snap.TStrTAttrPr_GetVal2,None,TStrTAttrPr)
TStrTAttrPr_swigregister = _snap.TStrTAttrPr_swigregister
TStrTAttrPr_swigregister(TStrTAttrPr)

class Schema(object):
    """Proxy of C++ TVec<(TPair<(TStr,TAttrType)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Schema
        __init__(self, Schema Vec) -> Schema
        Parameters:
           Vec: TVec< TPair< TStr,TAttrType >,int > const & value

           Vec: TVec< TPair< TStr,TAttrType >,int > const & value

        __init__(self, int _Vals) -> Schema
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        __init__(self, int _MxVals, int _Vals) -> Schema
        Parameters:
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        __init__(self, TStrTAttrPr _ValT, int _Vals) -> Schema
        Parameters:
           _ValT: TPair< TStr,TAttrType > * value
           _Vals: int const & value

           _ValT: TPair< TStr,TAttrType > * value
           _Vals: int const & value

        """
        _snap.Schema_swiginit(self,_snap.new_Schema(*args))
    __swig_destroy__ = _snap.delete_Schema
    def __add__(self, *args):
        """
        __add__(self, TStrTAttrPr Val) -> Schema
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema___add__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, Schema Vec) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Vec: TVec< TPair< TStr,TAttrType >,int > const & value

           Vec: TVec< TPair< TStr,TAttrType >,int > const & value

        """
        return _snap.Schema___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, Schema Vec) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Vec: TVec< TPair< TStr,TAttrType >,int > const & value

           Vec: TVec< TPair< TStr,TAttrType >,int > const & value

        """
        return _snap.Schema___lt__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_GetMemUsed(self)

    def GetMemSize(self):
        """
        GetMemSize(self) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_GetMemSize(self)

    def Gen(self, *args):
        """
        Gen(self, int _Vals)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Gen(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.Schema_Gen(self, *args)

    def GenExt(self, *args):
        """
        GenExt(self, TStrTAttrPr _ValT, int _Vals)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           _ValT: TPair< TStr,TAttrType > * value
           _Vals: int const & value

           _ValT: TPair< TStr,TAttrType > * value
           _Vals: int const & value

        """
        return _snap.Schema_GenExt(self, *args)

    def IsExt(self):
        """
        IsExt(self) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_IsExt(self)

    def Reserve(self, *args):
        """
        Reserve(self, int _MxVals)
        Parameters:
           _MxVals: int const & value

           _MxVals: int const & value

        Reserve(self, int _MxVals, int _Vals)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           _MxVals: int const & value
           _Vals: int const & value

           _MxVals: int const & value
           _Vals: int const & value

        """
        return _snap.Schema_Reserve(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value


        """
        return _snap.Schema_Clr(self, *args)

    def Trunc(self, *args):
        """
        Trunc(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Trunc(self)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value


        """
        return _snap.Schema_Trunc(self, *args)

    def Reduce(self, *args):
        """
        Reduce(self, int _Vals = -1)
        Parameters:
           _Vals: int const & value

           _Vals: int const & value

        Reduce(self)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value


        """
        return _snap.Schema_Reduce(self, *args)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value




        """
        return _snap.Schema_Pack(self)

    def MoveFrom(self, *args):
        """
        MoveFrom(self, Schema Vec)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Vec: TVec< TPair< TStr,TAttrType >,int > & value

           Vec: TVec< TPair< TStr,TAttrType >,int > & value

        """
        return _snap.Schema_MoveFrom(self, *args)

    def CopyUniqueFrom(self, *args):
        """
        CopyUniqueFrom(self, Schema Vec, TInt Offset, TInt Sz)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Vec: TVec< TPair< TStr,TAttrType >,int > & value
           Offset: TInt value
           Sz: TInt value

           Vec: TVec< TPair< TStr,TAttrType >,int > & value
           Offset: TInt value
           Sz: TInt value

        """
        return _snap.Schema_CopyUniqueFrom(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_Len(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_Reserved(self)

    def Last(self, *args):
        """
        Last(self) -> TStrTAttrPr
        Last(self) -> TStrTAttrPr
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value


        """
        return _snap.Schema_Last(self, *args)

    def LastValN(self):
        """
        LastValN(self) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_LastValN(self)

    def LastLast(self, *args):
        """
        LastLast(self) -> TStrTAttrPr
        LastLast(self) -> TStrTAttrPr
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value


        """
        return _snap.Schema_LastLast(self, *args)

    def GetRndVal(self, *args):
        """
        GetRndVal(self, TRnd Rnd = Rnd) -> TStrTAttrPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TStrTAttrPr
        GetRndVal(self, TRnd Rnd = Rnd) -> TStrTAttrPr
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndVal(self) -> TStrTAttrPr
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value


        """
        return _snap.Schema_GetRndVal(self, *args)

    def BegI(self):
        """
        BegI(self) -> TVec<(TPair<(TStr,enum TAttrType_)>)>::TIter
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TVec<(TPair<(TStr,enum TAttrType_)>)>::TIter
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, int ValN) -> TVec<(TPair<(TStr,enum TAttrType_)>)>::TIter
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.Schema_GetI(self, *args)

    def AddAtm(self, *args):
        """
        AddAtm(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_AddAtm(self, *args)

    def Add(self, *args):
        """
        Add(self) -> int
        Add(self, TStrTAttrPr Val) -> int
        Parameters:
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        Add(self, TStrTAttrPr Val) -> int
        Parameters:
           Val: TPair< TStr,TAttrType > & value

           Val: TPair< TStr,TAttrType > & value

        Add(self, TStrTAttrPr Val, int ResizeLen) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value
           ResizeLen: int const & value

           Val: TPair< TStr,TAttrType > const & value
           ResizeLen: int const & value

        """
        return _snap.Schema_Add(self, *args)

    def AddMP(self, *args):
        """
        AddMP(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_AddMP(self, *args)

    def AddV(self, *args):
        """
        AddV(self, Schema ValV) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        """
        return _snap.Schema_AddV(self, *args)

    def AddSorted(self, *args):
        """
        AddSorted(self, TStrTAttrPr Val, bool Asc = True, int _MxVals = -1) -> int
        Parameters:
           Val: TPair< TStr,TAttrType > const & value
           Asc: bool const & value
           _MxVals: int const & value

           Val: TPair< TStr,TAttrType > const & value
           Asc: bool const & value
           _MxVals: int const & value

        AddSorted(self, TStrTAttrPr Val, bool Asc = True) -> int
        Parameters:
           Val: TPair< TStr,TAttrType > const & value
           Asc: bool const & value

           Val: TPair< TStr,TAttrType > const & value
           Asc: bool const & value

        AddSorted(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_AddSorted(self, *args)

    def AddBackSorted(self, *args):
        """
        AddBackSorted(self, TStrTAttrPr Val, bool Asc) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value
           Asc: bool const & value

           Val: TPair< TStr,TAttrType > const & value
           Asc: bool const & value

        """
        return _snap.Schema_AddBackSorted(self, *args)

    def AddMerged(self, *args):
        """
        AddMerged(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_AddMerged(self, *args)

    def AddVMerged(self, *args):
        """
        AddVMerged(self, Schema ValV) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        """
        return _snap.Schema_AddVMerged(self, *args)

    def AddUnique(self, *args):
        """
        AddUnique(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_AddUnique(self, *args)

    def GetVal(self, *args):
        """
        GetVal(self, int ValN) -> TStrTAttrPr
        Parameters:
           ValN: int const & value

           ValN: int const & value

        GetVal(self, int ValN) -> TStrTAttrPr
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           ValN: int const & value

           ValN: int const & value

        """
        return _snap.Schema_GetVal(self, *args)

    def SetVal(self, *args):
        """
        SetVal(self, int ValN, TStrTAttrPr Val)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           ValN: int const & value
           Val: TPair< TStr,TAttrType > const & value

           ValN: int const & value
           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_SetVal(self, *args)

    def GetSubValV(self, *args):
        """
        GetSubValV(self, int BValN, int EValN, Schema ValV)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TStr,TAttrType >,int > & value

           BValN: int const & value
           EValN: int const & value
           ValV: TVec< TPair< TStr,TAttrType >,int > & value

        """
        return _snap.Schema_GetSubValV(self, *args)

    def Ins(self, *args):
        """
        Ins(self, int ValN, TStrTAttrPr Val)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           ValN: int const & value
           Val: TPair< TStr,TAttrType > const & value

           ValN: int const & value
           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_Ins(self, *args)

    def Del(self, *args):
        """
        Del(self, int ValN)
        Parameters:
           ValN: int const & value

           ValN: int const & value

        Del(self, int MnValN, int MxValN)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           MnValN: int const & value
           MxValN: int const & value

           MnValN: int const & value
           MxValN: int const & value

        """
        return _snap.Schema_Del(self, *args)

    def DelLast(self):
        """
        DelLast(self)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value




        """
        return _snap.Schema_DelLast(self)

    def DelIfIn(self, *args):
        """
        DelIfIn(self, TStrTAttrPr Val) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_DelIfIn(self, *args)

    def DelAll(self, *args):
        """
        DelAll(self, TStrTAttrPr Val)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_DelAll(self, *args)

    def PutAll(self, *args):
        """
        PutAll(self, TStrTAttrPr Val)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_PutAll(self, *args)

    def Swap(self, *args):
        """
        Swap(self, Schema Vec)
        Parameters:
           Vec: TVec< TPair< TStr,TAttrType >,int > & value

           Vec: TVec< TPair< TStr,TAttrType >,int > & value

        Swap(self, int ValN1, int ValN2)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           ValN1: int const & value
           ValN2: int const & value

           ValN1: int const & value
           ValN2: int const & value

        """
        return _snap.Schema_Swap(self, *args)

    def SwapI(*args):
        """
        SwapI(TVec<(TPair<(TStr,enum TAttrType_)>)>::TIter LVal, 
            TVec<(TPair<(TStr,enum TAttrType_)>)>::TIter RVal)
        Parameters:
           LVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value
           RVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value

           LVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value
           RVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value

           LVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value
           RVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value

        """
        return _snap.Schema_SwapI(*args)

    SwapI = staticmethod(SwapI)
    def NextPerm(self):
        """
        NextPerm(self) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value




        """
        return _snap.Schema_NextPerm(self)

    def PrevPerm(self):
        """
        PrevPerm(self) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value




        """
        return _snap.Schema_PrevPerm(self)

    def GetPivotValN(self, *args):
        """
        GetPivotValN(self, int LValN, int RValN) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           LValN: int const & value
           RValN: int const & value

           LValN: int const & value
           RValN: int const & value

        """
        return _snap.Schema_GetPivotValN(self, *args)

    def BSort(self, *args):
        """
        BSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.Schema_BSort(self, *args)

    def ISort(self, *args):
        """
        ISort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.Schema_ISort(self, *args)

    def Partition(self, *args):
        """
        Partition(self, int MnLValN, int MxRValN, bool Asc) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.Schema_Partition(self, *args)

    def QSort(self, *args):
        """
        QSort(self, int MnLValN, int MxRValN, bool Asc)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

           MnLValN: int const & value
           MxRValN: int const & value
           Asc: bool const & value

        """
        return _snap.Schema_QSort(self, *args)

    def Sort(self, Asc = True):
        """
        Sort(self, bool Asc = True)
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        Sort(self)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value


        """
        return _snap.Schema_Sort(self, Asc)

    def IsSorted(self, Asc = True):
        """
        IsSorted(self, bool Asc = True) -> bool
        Parameters:
           Asc: bool const & value

           Asc: bool const & value

        IsSorted(self) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value


        """
        return _snap.Schema_IsSorted(self, Asc)

    def Shuffle(self, *args):
        """
        Shuffle(self, TRnd Rnd)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.Schema_Shuffle(self, *args)

    def Reverse(self, *args):
        """
        Reverse(self)
        Reverse(self, int LValN, int RValN)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           LValN: int value
           RValN: int value

           LValN: int value
           RValN: int value

        """
        return _snap.Schema_Reverse(self, *args)

    def Merge(self):
        """
        Merge(self)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value




        """
        return _snap.Schema_Merge(self)

    def Intrs(self, *args):
        """
        Intrs(self, Schema ValV)
        Parameters:
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        Intrs(self, Schema ValV, Schema DstValV)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           DstValV: TVec< TPair< TStr,TAttrType >,int > & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           DstValV: TVec< TPair< TStr,TAttrType >,int > & value

        """
        return _snap.Schema_Intrs(self, *args)

    def Union(self, *args):
        """
        Union(self, Schema ValV)
        Parameters:
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        Union(self, Schema ValV, Schema DstValV)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           DstValV: TVec< TPair< TStr,TAttrType >,int > & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           DstValV: TVec< TPair< TStr,TAttrType >,int > & value

        """
        return _snap.Schema_Union(self, *args)

    def Diff(self, *args):
        """
        Diff(self, Schema ValV)
        Parameters:
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        Diff(self, Schema ValV, Schema DstValV)
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           DstValV: TVec< TPair< TStr,TAttrType >,int > & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           DstValV: TVec< TPair< TStr,TAttrType >,int > & value

        """
        return _snap.Schema_Diff(self, *args)

    def IntrsLen(self, *args):
        """
        IntrsLen(self, Schema ValV) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        """
        return _snap.Schema_IntrsLen(self, *args)

    def UnionLen(self, *args):
        """
        UnionLen(self, Schema ValV) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        """
        return _snap.Schema_UnionLen(self, *args)

    def Count(self, *args):
        """
        Count(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_Count(self, *args)

    def SearchBin(self, *args):
        """
        SearchBin(self, TStrTAttrPr Val) -> int
        Parameters:
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        SearchBin(self, TStrTAttrPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value
           InsValN: int & value

           Val: TPair< TStr,TAttrType > const & value
           InsValN: int & value

        """
        return _snap.Schema_SearchBin(self, *args)

    def SearchBinLeft(self, *args):
        """
        SearchBinLeft(self, TStrTAttrPr Val, int InsValN) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value
           InsValN: int & value

           Val: TPair< TStr,TAttrType > const & value
           InsValN: int & value

        """
        return _snap.Schema_SearchBinLeft(self, *args)

    def SearchForw(self, *args):
        """
        SearchForw(self, TStrTAttrPr Val, int BValN = 0) -> int
        Parameters:
           Val: TPair< TStr,TAttrType > const & value
           BValN: int const & value

           Val: TPair< TStr,TAttrType > const & value
           BValN: int const & value

        SearchForw(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_SearchForw(self, *args)

    def SearchBack(self, *args):
        """
        SearchBack(self, TStrTAttrPr Val) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_SearchBack(self, *args)

    def SearchVForw(self, *args):
        """
        SearchVForw(self, Schema ValV, int BValN = 0) -> int
        Parameters:
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           BValN: int const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value
           BValN: int const & value

        SearchVForw(self, Schema ValV) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

           ValV: TVec< TPair< TStr,TAttrType >,int > const & value

        """
        return _snap.Schema_SearchVForw(self, *args)

    def IsIn(self, *args):
        """
        IsIn(self, TStrTAttrPr Val) -> bool
        Parameters:
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        IsIn(self, TStrTAttrPr Val, int ValN) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value
           ValN: int & value

           Val: TPair< TStr,TAttrType > const & value
           ValN: int & value

        """
        return _snap.Schema_IsIn(self, *args)

    def IsInBin(self, *args):
        """
        IsInBin(self, TStrTAttrPr Val) -> bool
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_IsInBin(self, *args)

    def GetDat(self, *args):
        """
        GetDat(self, TStrTAttrPr Val) -> TStrTAttrPr
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_GetDat(self, *args)

    def GetAddDat(self, *args):
        """
        GetAddDat(self, TStrTAttrPr Val) -> TStrTAttrPr
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > * value
           Val: TPair< TStr,TAttrType > const & value

           Val: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_GetAddDat(self, *args)

    def GetMxValN(self):
        """
        GetMxValN(self) -> int
        Parameters:
           self: TVec< TPair< TStr,TAttrType > > const * value




        """
        return _snap.Schema_GetMxValN(self)

    def GetV(*args):
        """
        GetV(TStrTAttrPr Val1) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
            TStrTAttrPr Val4) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
            TStrTAttrPr Val4, TStrTAttrPr Val5) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
            TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
            TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, 
            TStrTAttrPr Val7) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
            TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, 
            TStrTAttrPr Val7, TStrTAttrPr Val8) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value
           Val8: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value
           Val8: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value
           Val8: TPair< TStr,TAttrType > const & value

        GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
            TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, 
            TStrTAttrPr Val7, TStrTAttrPr Val8, 
            TStrTAttrPr Val9) -> Schema
        Parameters:
           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value
           Val8: TPair< TStr,TAttrType > const & value
           Val9: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value
           Val8: TPair< TStr,TAttrType > const & value
           Val9: TPair< TStr,TAttrType > const & value

           Val1: TPair< TStr,TAttrType > const & value
           Val2: TPair< TStr,TAttrType > const & value
           Val3: TPair< TStr,TAttrType > const & value
           Val4: TPair< TStr,TAttrType > const & value
           Val5: TPair< TStr,TAttrType > const & value
           Val6: TPair< TStr,TAttrType > const & value
           Val7: TPair< TStr,TAttrType > const & value
           Val8: TPair< TStr,TAttrType > const & value
           Val9: TPair< TStr,TAttrType > const & value

        """
        return _snap.Schema_GetV(*args)

    GetV = staticmethod(GetV)
Schema.__add__ = new_instancemethod(_snap.Schema___add__,None,Schema)
Schema.__eq__ = new_instancemethod(_snap.Schema___eq__,None,Schema)
Schema.__lt__ = new_instancemethod(_snap.Schema___lt__,None,Schema)
Schema.GetMemUsed = new_instancemethod(_snap.Schema_GetMemUsed,None,Schema)
Schema.GetMemSize = new_instancemethod(_snap.Schema_GetMemSize,None,Schema)
Schema.Gen = new_instancemethod(_snap.Schema_Gen,None,Schema)
Schema.GenExt = new_instancemethod(_snap.Schema_GenExt,None,Schema)
Schema.IsExt = new_instancemethod(_snap.Schema_IsExt,None,Schema)
Schema.Reserve = new_instancemethod(_snap.Schema_Reserve,None,Schema)
Schema.Clr = new_instancemethod(_snap.Schema_Clr,None,Schema)
Schema.Trunc = new_instancemethod(_snap.Schema_Trunc,None,Schema)
Schema.Reduce = new_instancemethod(_snap.Schema_Reduce,None,Schema)
Schema.Pack = new_instancemethod(_snap.Schema_Pack,None,Schema)
Schema.MoveFrom = new_instancemethod(_snap.Schema_MoveFrom,None,Schema)
Schema.CopyUniqueFrom = new_instancemethod(_snap.Schema_CopyUniqueFrom,None,Schema)
Schema.Empty = new_instancemethod(_snap.Schema_Empty,None,Schema)
Schema.Len = new_instancemethod(_snap.Schema_Len,None,Schema)
Schema.Reserved = new_instancemethod(_snap.Schema_Reserved,None,Schema)
Schema.Last = new_instancemethod(_snap.Schema_Last,None,Schema)
Schema.LastValN = new_instancemethod(_snap.Schema_LastValN,None,Schema)
Schema.LastLast = new_instancemethod(_snap.Schema_LastLast,None,Schema)
Schema.GetRndVal = new_instancemethod(_snap.Schema_GetRndVal,None,Schema)
Schema.BegI = new_instancemethod(_snap.Schema_BegI,None,Schema)
Schema.EndI = new_instancemethod(_snap.Schema_EndI,None,Schema)
Schema.GetI = new_instancemethod(_snap.Schema_GetI,None,Schema)
Schema.AddAtm = new_instancemethod(_snap.Schema_AddAtm,None,Schema)
Schema.Add = new_instancemethod(_snap.Schema_Add,None,Schema)
Schema.AddMP = new_instancemethod(_snap.Schema_AddMP,None,Schema)
Schema.AddV = new_instancemethod(_snap.Schema_AddV,None,Schema)
Schema.AddSorted = new_instancemethod(_snap.Schema_AddSorted,None,Schema)
Schema.AddBackSorted = new_instancemethod(_snap.Schema_AddBackSorted,None,Schema)
Schema.AddMerged = new_instancemethod(_snap.Schema_AddMerged,None,Schema)
Schema.AddVMerged = new_instancemethod(_snap.Schema_AddVMerged,None,Schema)
Schema.AddUnique = new_instancemethod(_snap.Schema_AddUnique,None,Schema)
Schema.GetVal = new_instancemethod(_snap.Schema_GetVal,None,Schema)
Schema.SetVal = new_instancemethod(_snap.Schema_SetVal,None,Schema)
Schema.GetSubValV = new_instancemethod(_snap.Schema_GetSubValV,None,Schema)
Schema.Ins = new_instancemethod(_snap.Schema_Ins,None,Schema)
Schema.Del = new_instancemethod(_snap.Schema_Del,None,Schema)
Schema.DelLast = new_instancemethod(_snap.Schema_DelLast,None,Schema)
Schema.DelIfIn = new_instancemethod(_snap.Schema_DelIfIn,None,Schema)
Schema.DelAll = new_instancemethod(_snap.Schema_DelAll,None,Schema)
Schema.PutAll = new_instancemethod(_snap.Schema_PutAll,None,Schema)
Schema.Swap = new_instancemethod(_snap.Schema_Swap,None,Schema)
Schema.NextPerm = new_instancemethod(_snap.Schema_NextPerm,None,Schema)
Schema.PrevPerm = new_instancemethod(_snap.Schema_PrevPerm,None,Schema)
Schema.GetPivotValN = new_instancemethod(_snap.Schema_GetPivotValN,None,Schema)
Schema.BSort = new_instancemethod(_snap.Schema_BSort,None,Schema)
Schema.ISort = new_instancemethod(_snap.Schema_ISort,None,Schema)
Schema.Partition = new_instancemethod(_snap.Schema_Partition,None,Schema)
Schema.QSort = new_instancemethod(_snap.Schema_QSort,None,Schema)
Schema.Sort = new_instancemethod(_snap.Schema_Sort,None,Schema)
Schema.IsSorted = new_instancemethod(_snap.Schema_IsSorted,None,Schema)
Schema.Shuffle = new_instancemethod(_snap.Schema_Shuffle,None,Schema)
Schema.Reverse = new_instancemethod(_snap.Schema_Reverse,None,Schema)
Schema.Merge = new_instancemethod(_snap.Schema_Merge,None,Schema)
Schema.Intrs = new_instancemethod(_snap.Schema_Intrs,None,Schema)
Schema.Union = new_instancemethod(_snap.Schema_Union,None,Schema)
Schema.Diff = new_instancemethod(_snap.Schema_Diff,None,Schema)
Schema.IntrsLen = new_instancemethod(_snap.Schema_IntrsLen,None,Schema)
Schema.UnionLen = new_instancemethod(_snap.Schema_UnionLen,None,Schema)
Schema.Count = new_instancemethod(_snap.Schema_Count,None,Schema)
Schema.SearchBin = new_instancemethod(_snap.Schema_SearchBin,None,Schema)
Schema.SearchBinLeft = new_instancemethod(_snap.Schema_SearchBinLeft,None,Schema)
Schema.SearchForw = new_instancemethod(_snap.Schema_SearchForw,None,Schema)
Schema.SearchBack = new_instancemethod(_snap.Schema_SearchBack,None,Schema)
Schema.SearchVForw = new_instancemethod(_snap.Schema_SearchVForw,None,Schema)
Schema.IsIn = new_instancemethod(_snap.Schema_IsIn,None,Schema)
Schema.IsInBin = new_instancemethod(_snap.Schema_IsInBin,None,Schema)
Schema.GetDat = new_instancemethod(_snap.Schema_GetDat,None,Schema)
Schema.GetAddDat = new_instancemethod(_snap.Schema_GetAddDat,None,Schema)
Schema.GetMxValN = new_instancemethod(_snap.Schema_GetMxValN,None,Schema)
Schema_swigregister = _snap.Schema_swigregister
Schema_swigregister(Schema)

def Schema_SwapI(*args):
  """
    Schema_SwapI(TVec<(TPair<(TStr,enum TAttrType_)>)>::TIter LVal, 
        TVec<(TPair<(TStr,enum TAttrType_)>)>::TIter RVal)
    Parameters:
       LVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value
       RVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value

       LVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value
       RVal: TVec< TPair< TStr,enum TAttrType_ > >::TIter value

    """
  return _snap.Schema_SwapI(*args)

def Schema_GetV(*args):
  """
    GetV(TStrTAttrPr Val1) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
        TStrTAttrPr Val4) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
        TStrTAttrPr Val4, TStrTAttrPr Val5) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
        TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
        TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, 
        TStrTAttrPr Val7) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value
       Val7: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value
       Val7: TPair< TStr,TAttrType > const & value

    GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
        TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, 
        TStrTAttrPr Val7, TStrTAttrPr Val8) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value
       Val7: TPair< TStr,TAttrType > const & value
       Val8: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value
       Val7: TPair< TStr,TAttrType > const & value
       Val8: TPair< TStr,TAttrType > const & value

    Schema_GetV(TStrTAttrPr Val1, TStrTAttrPr Val2, TStrTAttrPr Val3, 
        TStrTAttrPr Val4, TStrTAttrPr Val5, TStrTAttrPr Val6, 
        TStrTAttrPr Val7, TStrTAttrPr Val8, 
        TStrTAttrPr Val9) -> Schema
    Parameters:
       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value
       Val7: TPair< TStr,TAttrType > const & value
       Val8: TPair< TStr,TAttrType > const & value
       Val9: TPair< TStr,TAttrType > const & value

       Val1: TPair< TStr,TAttrType > const & value
       Val2: TPair< TStr,TAttrType > const & value
       Val3: TPair< TStr,TAttrType > const & value
       Val4: TPair< TStr,TAttrType > const & value
       Val5: TPair< TStr,TAttrType > const & value
       Val6: TPair< TStr,TAttrType > const & value
       Val7: TPair< TStr,TAttrType > const & value
       Val8: TPair< TStr,TAttrType > const & value
       Val9: TPair< TStr,TAttrType > const & value

    """
  return _snap.Schema_GetV(*args)

class TIntSet(object):
    """Proxy of C++ THashSet<(TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntSet
        __init__(self, TIntSet Set) -> TIntSet
        Parameters:
           Set: THashSet< TInt > const & value

           Set: THashSet< TInt > const & value

        __init__(self, int ExpectVals, bool _AutoSizeP = False) -> TIntSet
        Parameters:
           ExpectVals: int const & value
           _AutoSizeP: bool const & value

           ExpectVals: int const & value
           _AutoSizeP: bool const & value

        __init__(self, int ExpectVals) -> TIntSet
        Parameters:
           ExpectVals: int const & value

           ExpectVals: int const & value

        __init__(self, TIntV KeyV) -> TIntSet
        Parameters:
           KeyV: TVec< TInt > const & value

           KeyV: TVec< TInt > const & value

        __init__(self, TSIn SIn) -> TIntSet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

        """
        _snap.TIntSet_swiginit(self,_snap.new_TIntSet(*args))
    def Load(self, *args):
        """
        Load(self, TSIn SIn)
        Parameters:
           self: THashSet< TInt > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.TIntSet_Load(self, *args)

    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: THashSet< TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntSet_Save(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TIntSet Set) -> bool
        Parameters:
           self: THashSet< TInt > const * value
           Set: THashSet< TInt > const & value

           Set: THashSet< TInt > const & value

        """
        return _snap.TIntSet___eq__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> ::TSize
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_GetMemUsed(self)

    def BegI(self):
        """
        BegI(self) -> TIter
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_BegI(self)

    def EndI(self):
        """
        EndI(self) -> TIter
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_EndI(self)

    def GetI(self, *args):
        """
        GetI(self, TInt Key) -> TIter
        Parameters:
           self: THashSet< TInt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntSet_GetI(self, *args)

    def Gen(self, *args):
        """
        Gen(self, int ExpectVals)
        Parameters:
           self: THashSet< TInt > * value
           ExpectVals: int const & value

           ExpectVals: int const & value

        """
        return _snap.TIntSet_Gen(self, *args)

    def Clr(self, *args):
        """
        Clr(self, bool DoDel = True, int NoDelLim = -1)
        Parameters:
           DoDel: bool const & value
           NoDelLim: int const & value

           DoDel: bool const & value
           NoDelLim: int const & value

        Clr(self, bool DoDel = True)
        Parameters:
           DoDel: bool const & value

           DoDel: bool const & value

        Clr(self)
        Parameters:
           self: THashSet< TInt > * value


        """
        return _snap.TIntSet_Clr(self, *args)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_Empty(self)

    def Len(self):
        """
        Len(self) -> int
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_Len(self)

    def GetPorts(self):
        """
        GetPorts(self) -> int
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_GetPorts(self)

    def IsAutoSize(self):
        """
        IsAutoSize(self) -> bool
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_IsAutoSize(self)

    def GetMxKeyIds(self):
        """
        GetMxKeyIds(self) -> int
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_GetMxKeyIds(self)

    def GetReservedKeyIds(self):
        """
        GetReservedKeyIds(self) -> int
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_GetReservedKeyIds(self)

    def IsKeyIdEqKeyN(self):
        """
        IsKeyIdEqKeyN(self) -> bool
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_IsKeyIdEqKeyN(self)

    def AddKey(self, *args):
        """
        AddKey(self, TInt Key) -> int
        Parameters:
           self: THashSet< TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntSet_AddKey(self, *args)

    def AddKeyV(self, *args):
        """
        AddKeyV(self, TIntV KeyV)
        Parameters:
           self: THashSet< TInt > * value
           KeyV: TVec< TInt > const & value

           KeyV: TVec< TInt > const & value

        """
        return _snap.TIntSet_AddKeyV(self, *args)

    def DelKey(self, *args):
        """
        DelKey(self, TInt Key)
        Parameters:
           self: THashSet< TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntSet_DelKey(self, *args)

    def DelIfKey(self, *args):
        """
        DelIfKey(self, TInt Key) -> bool
        Parameters:
           self: THashSet< TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntSet_DelIfKey(self, *args)

    def DelKeyId(self, *args):
        """
        DelKeyId(self, int KeyId)
        Parameters:
           self: THashSet< TInt > * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntSet_DelKeyId(self, *args)

    def DelKeyIdV(self, *args):
        """
        DelKeyIdV(self, TIntV KeyIdV)
        Parameters:
           self: THashSet< TInt > * value
           KeyIdV: TIntV const & value

           KeyIdV: TIntV const & value

        """
        return _snap.TIntSet_DelKeyIdV(self, *args)

    def MarkDelKey(self, *args):
        """
        MarkDelKey(self, TInt Key)
        Parameters:
           self: THashSet< TInt > * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntSet_MarkDelKey(self, *args)

    def MarkDelKeyId(self, *args):
        """
        MarkDelKeyId(self, int KeyId)
        Parameters:
           self: THashSet< TInt > * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntSet_MarkDelKeyId(self, *args)

    def GetKey(self, *args):
        """
        GetKey(self, int KeyId) -> TInt
        Parameters:
           self: THashSet< TInt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntSet_GetKey(self, *args)

    def GetKeyId(self, *args):
        """
        GetKeyId(self, TInt Key) -> int
        Parameters:
           self: THashSet< TInt > const * value
           Key: TInt const & value

           Key: TInt const & value

        """
        return _snap.TIntSet_GetKeyId(self, *args)

    def GetRndKeyId(self, *args):
        """
        GetRndKeyId(self, TRnd Rnd) -> int
        Parameters:
           self: THashSet< TInt > const * value
           Rnd: TRnd & value

           Rnd: TRnd & value

        """
        return _snap.TIntSet_GetRndKeyId(self, *args)

    def IsKey(self, *args):
        """
        IsKey(self, TInt Key) -> bool
        Parameters:
           Key: TInt const & value

           Key: TInt const & value

        IsKey(self, TInt Key, int KeyId) -> bool
        Parameters:
           self: THashSet< TInt > const * value
           Key: TInt const & value
           KeyId: int & value

           Key: TInt const & value
           KeyId: int & value

        """
        return _snap.TIntSet_IsKey(self, *args)

    def IsKeyId(self, *args):
        """
        IsKeyId(self, int KeyId) -> bool
        Parameters:
           self: THashSet< TInt > const * value
           KeyId: int const & value

           KeyId: int const & value

        """
        return _snap.TIntSet_IsKeyId(self, *args)

    def FFirstKeyId(self):
        """
        FFirstKeyId(self) -> int
        Parameters:
           self: THashSet< TInt > const * value




        """
        return _snap.TIntSet_FFirstKeyId(self)

    def FNextKeyId(self, *args):
        """
        FNextKeyId(self, int KeyId) -> bool
        Parameters:
           self: THashSet< TInt > const * value
           KeyId: int & value

           KeyId: int & value

        """
        return _snap.TIntSet_FNextKeyId(self, *args)

    def GetKeyV(self, *args):
        """
        GetKeyV(self, TIntV KeyV)
        Parameters:
           self: THashSet< TInt > const * value
           KeyV: TVec< TInt > & value

           KeyV: TVec< TInt > & value

        """
        return _snap.TIntSet_GetKeyV(self, *args)

    def Swap(self, *args):
        """
        Swap(self, TIntSet Set)
        Parameters:
           self: THashSet< TInt > * value
           Set: THashSet< TInt > & value

           Set: THashSet< TInt > & value

        """
        return _snap.TIntSet_Swap(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: THashSet< TInt > * value




        """
        return _snap.TIntSet_Defrag(self)

    def Pack(self):
        """
        Pack(self)
        Parameters:
           self: THashSet< TInt > * value




        """
        return _snap.TIntSet_Pack(self)

    def GetSet(*args):
        """
        GetSet(TInt Key1) -> TIntSet
        Parameters:
           Key1: TInt const & value

           Key1: TInt const & value

           Key1: TInt const & value

        GetSet(TInt Key1, TInt Key2) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value

        GetSet(TInt Key1, TInt Key2, TInt Key3) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
            TInt Key6) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
            TInt Key6, TInt Key7) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
            TInt Key6, TInt Key7, TInt Key8) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value
           Key8: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value
           Key8: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value
           Key8: TInt const & value

        GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
            TInt Key6, TInt Key7, TInt Key8, TInt Key9) -> TIntSet
        Parameters:
           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value
           Key8: TInt const & value
           Key9: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value
           Key8: TInt const & value
           Key9: TInt const & value

           Key1: TInt const & value
           Key2: TInt const & value
           Key3: TInt const & value
           Key4: TInt const & value
           Key5: TInt const & value
           Key6: TInt const & value
           Key7: TInt const & value
           Key8: TInt const & value
           Key9: TInt const & value

        """
        return _snap.TIntSet_GetSet(*args)

    GetSet = staticmethod(GetSet)
    __swig_destroy__ = _snap.delete_TIntSet
TIntSet.Load = new_instancemethod(_snap.TIntSet_Load,None,TIntSet)
TIntSet.Save = new_instancemethod(_snap.TIntSet_Save,None,TIntSet)
TIntSet.__eq__ = new_instancemethod(_snap.TIntSet___eq__,None,TIntSet)
TIntSet.GetMemUsed = new_instancemethod(_snap.TIntSet_GetMemUsed,None,TIntSet)
TIntSet.BegI = new_instancemethod(_snap.TIntSet_BegI,None,TIntSet)
TIntSet.EndI = new_instancemethod(_snap.TIntSet_EndI,None,TIntSet)
TIntSet.GetI = new_instancemethod(_snap.TIntSet_GetI,None,TIntSet)
TIntSet.Gen = new_instancemethod(_snap.TIntSet_Gen,None,TIntSet)
TIntSet.Clr = new_instancemethod(_snap.TIntSet_Clr,None,TIntSet)
TIntSet.Empty = new_instancemethod(_snap.TIntSet_Empty,None,TIntSet)
TIntSet.Len = new_instancemethod(_snap.TIntSet_Len,None,TIntSet)
TIntSet.GetPorts = new_instancemethod(_snap.TIntSet_GetPorts,None,TIntSet)
TIntSet.IsAutoSize = new_instancemethod(_snap.TIntSet_IsAutoSize,None,TIntSet)
TIntSet.GetMxKeyIds = new_instancemethod(_snap.TIntSet_GetMxKeyIds,None,TIntSet)
TIntSet.GetReservedKeyIds = new_instancemethod(_snap.TIntSet_GetReservedKeyIds,None,TIntSet)
TIntSet.IsKeyIdEqKeyN = new_instancemethod(_snap.TIntSet_IsKeyIdEqKeyN,None,TIntSet)
TIntSet.AddKey = new_instancemethod(_snap.TIntSet_AddKey,None,TIntSet)
TIntSet.AddKeyV = new_instancemethod(_snap.TIntSet_AddKeyV,None,TIntSet)
TIntSet.DelKey = new_instancemethod(_snap.TIntSet_DelKey,None,TIntSet)
TIntSet.DelIfKey = new_instancemethod(_snap.TIntSet_DelIfKey,None,TIntSet)
TIntSet.DelKeyId = new_instancemethod(_snap.TIntSet_DelKeyId,None,TIntSet)
TIntSet.DelKeyIdV = new_instancemethod(_snap.TIntSet_DelKeyIdV,None,TIntSet)
TIntSet.MarkDelKey = new_instancemethod(_snap.TIntSet_MarkDelKey,None,TIntSet)
TIntSet.MarkDelKeyId = new_instancemethod(_snap.TIntSet_MarkDelKeyId,None,TIntSet)
TIntSet.GetKey = new_instancemethod(_snap.TIntSet_GetKey,None,TIntSet)
TIntSet.GetKeyId = new_instancemethod(_snap.TIntSet_GetKeyId,None,TIntSet)
TIntSet.GetRndKeyId = new_instancemethod(_snap.TIntSet_GetRndKeyId,None,TIntSet)
TIntSet.IsKey = new_instancemethod(_snap.TIntSet_IsKey,None,TIntSet)
TIntSet.IsKeyId = new_instancemethod(_snap.TIntSet_IsKeyId,None,TIntSet)
TIntSet.FFirstKeyId = new_instancemethod(_snap.TIntSet_FFirstKeyId,None,TIntSet)
TIntSet.FNextKeyId = new_instancemethod(_snap.TIntSet_FNextKeyId,None,TIntSet)
TIntSet.GetKeyV = new_instancemethod(_snap.TIntSet_GetKeyV,None,TIntSet)
TIntSet.Swap = new_instancemethod(_snap.TIntSet_Swap,None,TIntSet)
TIntSet.Defrag = new_instancemethod(_snap.TIntSet_Defrag,None,TIntSet)
TIntSet.Pack = new_instancemethod(_snap.TIntSet_Pack,None,TIntSet)
TIntSet_swigregister = _snap.TIntSet_swigregister
TIntSet_swigregister(TIntSet)

def TIntSet_GetSet(*args):
  """
    GetSet(TInt Key1) -> TIntSet
    Parameters:
       Key1: TInt const & value

       Key1: TInt const & value

    GetSet(TInt Key1, TInt Key2) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value

    GetSet(TInt Key1, TInt Key2, TInt Key3) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
        TInt Key6) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
        TInt Key6, TInt Key7) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value
       Key7: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value
       Key7: TInt const & value

    GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
        TInt Key6, TInt Key7, TInt Key8) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value
       Key7: TInt const & value
       Key8: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value
       Key7: TInt const & value
       Key8: TInt const & value

    TIntSet_GetSet(TInt Key1, TInt Key2, TInt Key3, TInt Key4, TInt Key5, 
        TInt Key6, TInt Key7, TInt Key8, TInt Key9) -> TIntSet
    Parameters:
       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value
       Key7: TInt const & value
       Key8: TInt const & value
       Key9: TInt const & value

       Key1: TInt const & value
       Key2: TInt const & value
       Key3: TInt const & value
       Key4: TInt const & value
       Key5: TInt const & value
       Key6: TInt const & value
       Key7: TInt const & value
       Key8: TInt const & value
       Key9: TInt const & value

    """
  return _snap.TIntSet_GetSet(*args)

class TIntHSI(object):
    """Proxy of C++ THashSetKeyI<(TInt)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TIntHSI
        __init__(self, TIntHSI _SetKeyI) -> TIntHSI
        Parameters:
           _SetKeyI: THashSetKeyI< TInt > const & value

           _SetKeyI: THashSetKeyI< TInt > const & value

        __init__(self, TSetKey _KeyI, TSetKey _EndI) -> TIntHSI
        Parameters:
           _KeyI: THashSetKeyI< TInt >::TSetKey const * value
           _EndI: THashSetKeyI< TInt >::TSetKey const * value

           _KeyI: THashSetKeyI< TInt >::TSetKey const * value
           _EndI: THashSetKeyI< TInt >::TSetKey const * value

        """
        _snap.TIntHSI_swiginit(self,_snap.new_TIntHSI(*args))
    def __eq__(self, *args):
        """
        __eq__(self, TIntHSI SetKeyI) -> bool
        Parameters:
           self: THashSetKeyI< TInt > const * value
           SetKeyI: THashSetKeyI< TInt > const & value

           SetKeyI: THashSetKeyI< TInt > const & value

        """
        return _snap.TIntHSI___eq__(self, *args)

    def __lt__(self, *args):
        """
        __lt__(self, TIntHSI SetKeyI) -> bool
        Parameters:
           self: THashSetKeyI< TInt > const * value
           SetKeyI: THashSetKeyI< TInt > const & value

           SetKeyI: THashSetKeyI< TInt > const & value

        """
        return _snap.TIntHSI___lt__(self, *args)

    def __ref__(self):
        """
        __ref__(self) -> TInt
        Parameters:
           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI___ref__(self)

    def __call__(self):
        """
        __call__(self) -> TInt
        Parameters:
           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI___call__(self)

    def __deref__(self):
        """
        __deref__(self) -> TInt
        Parameters:
           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI___deref__(self)

    def Next(self):
        """
        Next(self) -> TIntHSI
        Parameters:
           self: THashSetKeyI< TInt > * value




        """
        return _snap.TIntHSI_Next(self)

    def IsEmpty(self):
        """
        IsEmpty(self) -> bool
        Parameters:
           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI_IsEmpty(self)

    def IsEnd(self):
        """
        IsEnd(self) -> bool
        Parameters:
           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI_IsEnd(self)

    def GetKey(self):
        """
        GetKey(self) -> TInt
        Parameters:
           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI_GetKey(self)

    __swig_destroy__ = _snap.delete_TIntHSI
    Val = _swig_property(_snap.TIntHSI_Val_get)
    Mn = _swig_property(_snap.TIntHSI_Mn_get)
    Mx = _swig_property(_snap.TIntHSI_Mx_get)
    Kilo = _swig_property(_snap.TIntHSI_Kilo_get)
    Mega = _swig_property(_snap.TIntHSI_Mega_get)
    Giga = _swig_property(_snap.TIntHSI_Giga_get)
    Rnd = _swig_property(_snap.TIntHSI_Rnd_get)
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TInt const * value
           SOut: TSOut & value

           SOut: TSOut & value

           self: THashSetKeyI< TInt > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.TIntHSI_Save(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, int Int) -> bool
        Parameters:
           self: TInt const * value
           Int: int const & value

           Int: int const & value

           self: THashSetKeyI< TInt > const * value
           Int: int const & value

           Int: int const & value

        """
        return _snap.TIntHSI___ne__(self, *args)

    def GetMemUsed(self):
        """
        GetMemUsed(self) -> int
        Parameters:
           self: TInt const * value




           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI_GetMemUsed(self)

    def GetPrimHashCd(self):
        """
        GetPrimHashCd(self) -> int
        Parameters:
           self: TInt const * value




           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI_GetPrimHashCd(self)

    def GetSecHashCd(self):
        """
        GetSecHashCd(self) -> int
        Parameters:
           self: TInt const * value




           self: THashSetKeyI< TInt > const * value




        """
        return _snap.TIntHSI_GetSecHashCd(self)

TIntHSI.__eq__ = new_instancemethod(_snap.TIntHSI___eq__,None,TIntHSI)
TIntHSI.__lt__ = new_instancemethod(_snap.TIntHSI___lt__,None,TIntHSI)
TIntHSI.__ref__ = new_instancemethod(_snap.TIntHSI___ref__,None,TIntHSI)
TIntHSI.__call__ = new_instancemethod(_snap.TIntHSI___call__,None,TIntHSI)
TIntHSI.__deref__ = new_instancemethod(_snap.TIntHSI___deref__,None,TIntHSI)
TIntHSI.Next = new_instancemethod(_snap.TIntHSI_Next,None,TIntHSI)
TIntHSI.IsEmpty = new_instancemethod(_snap.TIntHSI_IsEmpty,None,TIntHSI)
TIntHSI.IsEnd = new_instancemethod(_snap.TIntHSI_IsEnd,None,TIntHSI)
TIntHSI.GetKey = new_instancemethod(_snap.TIntHSI_GetKey,None,TIntHSI)
TIntHSI.Save = new_instancemethod(_snap.TIntHSI_Save,None,TIntHSI)
TIntHSI.__ne__ = new_instancemethod(_snap.TIntHSI___ne__,None,TIntHSI)
TIntHSI.GetMemUsed = new_instancemethod(_snap.TIntHSI_GetMemUsed,None,TIntHSI)
TIntHSI.GetPrimHashCd = new_instancemethod(_snap.TIntHSI_GetPrimHashCd,None,TIntHSI)
TIntHSI.GetSecHashCd = new_instancemethod(_snap.TIntHSI_GetSecHashCd,None,TIntHSI)
TIntHSI_swigregister = _snap.TIntHSI_swigregister
TIntHSI_swigregister(TIntHSI)

class TNGraphNodeI(object):
    """Proxy of C++ TNGraphNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNGraphNodeI
        __init__(self, TNodeI NodeI) -> TNGraphNodeI
        Parameters:
           NodeI: TNGraph::TNodeI const & value

           NodeI: TNGraph::TNodeI const & value

        """
        _snap.TNGraphNodeI_swiginit(self,_snap.new_TNGraphNodeI(*args))
    def Next(self):
        """
        Next(self) -> TNGraphNodeI
        Parameters:
           self: TNGraphNodeI * value




        """
        return _snap.TNGraphNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNGraphNodeI NodeI) -> bool
        Parameters:
           self: TNGraphNodeI const * value
           NodeI: TNGraphNodeI const & value

           NodeI: TNGraphNodeI const & value

        """
        return _snap.TNGraphNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNGraphNodeI NodeI) -> bool
        Parameters:
           self: TNGraphNodeI const * value
           NodeI: TNGraphNodeI const & value

           NodeI: TNGraphNodeI const & value

        """
        return _snap.TNGraphNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNGraphNodeI const * value




        """
        return _snap.TNGraphNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(self) -> int
        Parameters:
           self: TNGraphNodeI const * value




        """
        return _snap.TNGraphNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(self) -> int
        Parameters:
           self: TNGraphNodeI const * value




        """
        return _snap.TNGraphNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(self) -> int
        Parameters:
           self: TNGraphNodeI const * value




        """
        return _snap.TNGraphNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(self, int NodeN) -> int
        Parameters:
           self: TNGraphNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNGraphNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(self, int NodeN) -> int
        Parameters:
           self: TNGraphNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNGraphNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(self, int NodeN) -> int
        Parameters:
           self: TNGraphNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNGraphNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(self, int NId) -> bool
        Parameters:
           self: TNGraphNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(self, int NId) -> bool
        Parameters:
           self: TNGraphNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(self, int NId) -> bool
        Parameters:
           self: TNGraphNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TNGraphNodeI
TNGraphNodeI.Next = new_instancemethod(_snap.TNGraphNodeI_Next,None,TNGraphNodeI)
TNGraphNodeI.__lt__ = new_instancemethod(_snap.TNGraphNodeI___lt__,None,TNGraphNodeI)
TNGraphNodeI.__eq__ = new_instancemethod(_snap.TNGraphNodeI___eq__,None,TNGraphNodeI)
TNGraphNodeI.GetId = new_instancemethod(_snap.TNGraphNodeI_GetId,None,TNGraphNodeI)
TNGraphNodeI.GetDeg = new_instancemethod(_snap.TNGraphNodeI_GetDeg,None,TNGraphNodeI)
TNGraphNodeI.GetInDeg = new_instancemethod(_snap.TNGraphNodeI_GetInDeg,None,TNGraphNodeI)
TNGraphNodeI.GetOutDeg = new_instancemethod(_snap.TNGraphNodeI_GetOutDeg,None,TNGraphNodeI)
TNGraphNodeI.GetInNId = new_instancemethod(_snap.TNGraphNodeI_GetInNId,None,TNGraphNodeI)
TNGraphNodeI.GetOutNId = new_instancemethod(_snap.TNGraphNodeI_GetOutNId,None,TNGraphNodeI)
TNGraphNodeI.GetNbrNId = new_instancemethod(_snap.TNGraphNodeI_GetNbrNId,None,TNGraphNodeI)
TNGraphNodeI.IsInNId = new_instancemethod(_snap.TNGraphNodeI_IsInNId,None,TNGraphNodeI)
TNGraphNodeI.IsOutNId = new_instancemethod(_snap.TNGraphNodeI_IsOutNId,None,TNGraphNodeI)
TNGraphNodeI.IsNbrNId = new_instancemethod(_snap.TNGraphNodeI_IsNbrNId,None,TNGraphNodeI)
TNGraphNodeI_swigregister = _snap.TNGraphNodeI_swigregister
TNGraphNodeI_swigregister(TNGraphNodeI)

class TNGraphMPNodeI(object):
    """Proxy of C++ TNGraphMPNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNGraphMPNodeI
        __init__(self, TNodeI NodeI) -> TNGraphMPNodeI
        Parameters:
           NodeI: TNGraphMP::TNodeI const & value

           NodeI: TNGraphMP::TNodeI const & value

        """
        _snap.TNGraphMPNodeI_swiginit(self,_snap.new_TNGraphMPNodeI(*args))
    def Next(self):
        """
        Next(self) -> TNGraphMPNodeI
        Parameters:
           self: TNGraphMPNodeI * value




        """
        return _snap.TNGraphMPNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNGraphMPNodeI NodeI) -> bool
        Parameters:
           self: TNGraphMPNodeI const * value
           NodeI: TNGraphMPNodeI const & value

           NodeI: TNGraphMPNodeI const & value

        """
        return _snap.TNGraphMPNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNGraphMPNodeI NodeI) -> bool
        Parameters:
           self: TNGraphMPNodeI const * value
           NodeI: TNGraphMPNodeI const & value

           NodeI: TNGraphMPNodeI const & value

        """
        return _snap.TNGraphMPNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNGraphMPNodeI const * value




        """
        return _snap.TNGraphMPNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(self) -> int
        Parameters:
           self: TNGraphMPNodeI const * value




        """
        return _snap.TNGraphMPNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(self) -> int
        Parameters:
           self: TNGraphMPNodeI const * value




        """
        return _snap.TNGraphMPNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(self) -> int
        Parameters:
           self: TNGraphMPNodeI const * value




        """
        return _snap.TNGraphMPNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(self, int NodeN) -> int
        Parameters:
           self: TNGraphMPNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNGraphMPNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(self, int NodeN) -> int
        Parameters:
           self: TNGraphMPNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNGraphMPNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(self, int NodeN) -> int
        Parameters:
           self: TNGraphMPNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNGraphMPNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(self, int NId) -> bool
        Parameters:
           self: TNGraphMPNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphMPNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(self, int NId) -> bool
        Parameters:
           self: TNGraphMPNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphMPNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(self, int NId) -> bool
        Parameters:
           self: TNGraphMPNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNGraphMPNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TNGraphMPNodeI
TNGraphMPNodeI.Next = new_instancemethod(_snap.TNGraphMPNodeI_Next,None,TNGraphMPNodeI)
TNGraphMPNodeI.__lt__ = new_instancemethod(_snap.TNGraphMPNodeI___lt__,None,TNGraphMPNodeI)
TNGraphMPNodeI.__eq__ = new_instancemethod(_snap.TNGraphMPNodeI___eq__,None,TNGraphMPNodeI)
TNGraphMPNodeI.GetId = new_instancemethod(_snap.TNGraphMPNodeI_GetId,None,TNGraphMPNodeI)
TNGraphMPNodeI.GetDeg = new_instancemethod(_snap.TNGraphMPNodeI_GetDeg,None,TNGraphMPNodeI)
TNGraphMPNodeI.GetInDeg = new_instancemethod(_snap.TNGraphMPNodeI_GetInDeg,None,TNGraphMPNodeI)
TNGraphMPNodeI.GetOutDeg = new_instancemethod(_snap.TNGraphMPNodeI_GetOutDeg,None,TNGraphMPNodeI)
TNGraphMPNodeI.GetInNId = new_instancemethod(_snap.TNGraphMPNodeI_GetInNId,None,TNGraphMPNodeI)
TNGraphMPNodeI.GetOutNId = new_instancemethod(_snap.TNGraphMPNodeI_GetOutNId,None,TNGraphMPNodeI)
TNGraphMPNodeI.GetNbrNId = new_instancemethod(_snap.TNGraphMPNodeI_GetNbrNId,None,TNGraphMPNodeI)
TNGraphMPNodeI.IsInNId = new_instancemethod(_snap.TNGraphMPNodeI_IsInNId,None,TNGraphMPNodeI)
TNGraphMPNodeI.IsOutNId = new_instancemethod(_snap.TNGraphMPNodeI_IsOutNId,None,TNGraphMPNodeI)
TNGraphMPNodeI.IsNbrNId = new_instancemethod(_snap.TNGraphMPNodeI_IsNbrNId,None,TNGraphMPNodeI)
TNGraphMPNodeI_swigregister = _snap.TNGraphMPNodeI_swigregister
TNGraphMPNodeI_swigregister(TNGraphMPNodeI)

class TNGraphEdgeI(object):
    """Proxy of C++ TNGraphEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNGraphEdgeI
        __init__(self, TEdgeI EdgeI) -> TNGraphEdgeI
        Parameters:
           EdgeI: TNGraph::TEdgeI const & value

           EdgeI: TNGraph::TEdgeI const & value

        """
        _snap.TNGraphEdgeI_swiginit(self,_snap.new_TNGraphEdgeI(*args))
    def Next(self):
        """
        Next(self) -> TNGraphEdgeI
        Parameters:
           self: TNGraphEdgeI * value




        """
        return _snap.TNGraphEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNGraphEdgeI EdgeI) -> bool
        Parameters:
           self: TNGraphEdgeI const * value
           EdgeI: TNGraphEdgeI const & value

           EdgeI: TNGraphEdgeI const & value

        """
        return _snap.TNGraphEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNGraphEdgeI EdgeI) -> bool
        Parameters:
           self: TNGraphEdgeI const * value
           EdgeI: TNGraphEdgeI const & value

           EdgeI: TNGraphEdgeI const & value

        """
        return _snap.TNGraphEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNGraphEdgeI const * value




        """
        return _snap.TNGraphEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(self) -> int
        Parameters:
           self: TNGraphEdgeI const * value




        """
        return _snap.TNGraphEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(self) -> int
        Parameters:
           self: TNGraphEdgeI const * value




        """
        return _snap.TNGraphEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TNGraphEdgeI
TNGraphEdgeI.Next = new_instancemethod(_snap.TNGraphEdgeI_Next,None,TNGraphEdgeI)
TNGraphEdgeI.__lt__ = new_instancemethod(_snap.TNGraphEdgeI___lt__,None,TNGraphEdgeI)
TNGraphEdgeI.__eq__ = new_instancemethod(_snap.TNGraphEdgeI___eq__,None,TNGraphEdgeI)
TNGraphEdgeI.GetId = new_instancemethod(_snap.TNGraphEdgeI_GetId,None,TNGraphEdgeI)
TNGraphEdgeI.GetSrcNId = new_instancemethod(_snap.TNGraphEdgeI_GetSrcNId,None,TNGraphEdgeI)
TNGraphEdgeI.GetDstNId = new_instancemethod(_snap.TNGraphEdgeI_GetDstNId,None,TNGraphEdgeI)
TNGraphEdgeI_swigregister = _snap.TNGraphEdgeI_swigregister
TNGraphEdgeI_swigregister(TNGraphEdgeI)

class TNGraphMPEdgeI(object):
    """Proxy of C++ TNGraphMPEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNGraphMPEdgeI
        __init__(self, TEdgeI EdgeI) -> TNGraphMPEdgeI
        Parameters:
           EdgeI: TNGraphMP::TEdgeI const & value

           EdgeI: TNGraphMP::TEdgeI const & value

        """
        _snap.TNGraphMPEdgeI_swiginit(self,_snap.new_TNGraphMPEdgeI(*args))
    def Next(self):
        """
        Next(self) -> TNGraphMPEdgeI
        Parameters:
           self: TNGraphMPEdgeI * value




        """
        return _snap.TNGraphMPEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNGraphMPEdgeI EdgeI) -> bool
        Parameters:
           self: TNGraphMPEdgeI const * value
           EdgeI: TNGraphMPEdgeI const & value

           EdgeI: TNGraphMPEdgeI const & value

        """
        return _snap.TNGraphMPEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNGraphMPEdgeI EdgeI) -> bool
        Parameters:
           self: TNGraphMPEdgeI const * value
           EdgeI: TNGraphMPEdgeI const & value

           EdgeI: TNGraphMPEdgeI const & value

        """
        return _snap.TNGraphMPEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNGraphMPEdgeI const * value




        """
        return _snap.TNGraphMPEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(self) -> int
        Parameters:
           self: TNGraphMPEdgeI const * value




        """
        return _snap.TNGraphMPEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(self) -> int
        Parameters:
           self: TNGraphMPEdgeI const * value




        """
        return _snap.TNGraphMPEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TNGraphMPEdgeI
TNGraphMPEdgeI.Next = new_instancemethod(_snap.TNGraphMPEdgeI_Next,None,TNGraphMPEdgeI)
TNGraphMPEdgeI.__lt__ = new_instancemethod(_snap.TNGraphMPEdgeI___lt__,None,TNGraphMPEdgeI)
TNGraphMPEdgeI.__eq__ = new_instancemethod(_snap.TNGraphMPEdgeI___eq__,None,TNGraphMPEdgeI)
TNGraphMPEdgeI.GetId = new_instancemethod(_snap.TNGraphMPEdgeI_GetId,None,TNGraphMPEdgeI)
TNGraphMPEdgeI.GetSrcNId = new_instancemethod(_snap.TNGraphMPEdgeI_GetSrcNId,None,TNGraphMPEdgeI)
TNGraphMPEdgeI.GetDstNId = new_instancemethod(_snap.TNGraphMPEdgeI_GetDstNId,None,TNGraphMPEdgeI)
TNGraphMPEdgeI_swigregister = _snap.TNGraphMPEdgeI_swigregister
TNGraphMPEdgeI_swigregister(TNGraphMPEdgeI)

class TUNGraphNodeI(object):
    """Proxy of C++ TUNGraphNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TUNGraphNodeI
        __init__(self, TNodeI NodeI) -> TUNGraphNodeI
        Parameters:
           NodeI: TUNGraph::TNodeI const & value

           NodeI: TUNGraph::TNodeI const & value

        """
        _snap.TUNGraphNodeI_swiginit(self,_snap.new_TUNGraphNodeI(*args))
    def Next(self):
        """
        Next(self) -> TUNGraphNodeI
        Parameters:
           self: TUNGraphNodeI * value




        """
        return _snap.TUNGraphNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TUNGraphNodeI NodeI) -> bool
        Parameters:
           self: TUNGraphNodeI const * value
           NodeI: TUNGraphNodeI const & value

           NodeI: TUNGraphNodeI const & value

        """
        return _snap.TUNGraphNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TUNGraphNodeI NodeI) -> bool
        Parameters:
           self: TUNGraphNodeI const * value
           NodeI: TUNGraphNodeI const & value

           NodeI: TUNGraphNodeI const & value

        """
        return _snap.TUNGraphNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TUNGraphNodeI const * value




        """
        return _snap.TUNGraphNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(self) -> int
        Parameters:
           self: TUNGraphNodeI const * value




        """
        return _snap.TUNGraphNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(self) -> int
        Parameters:
           self: TUNGraphNodeI const * value




        """
        return _snap.TUNGraphNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(self) -> int
        Parameters:
           self: TUNGraphNodeI const * value




        """
        return _snap.TUNGraphNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(self, int NodeN) -> int
        Parameters:
           self: TUNGraphNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TUNGraphNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(self, int NodeN) -> int
        Parameters:
           self: TUNGraphNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TUNGraphNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(self, int NodeN) -> int
        Parameters:
           self: TUNGraphNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TUNGraphNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(self, int NId) -> bool
        Parameters:
           self: TUNGraphNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TUNGraphNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(self, int NId) -> bool
        Parameters:
           self: TUNGraphNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TUNGraphNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(self, int NId) -> bool
        Parameters:
           self: TUNGraphNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TUNGraphNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TUNGraphNodeI
TUNGraphNodeI.Next = new_instancemethod(_snap.TUNGraphNodeI_Next,None,TUNGraphNodeI)
TUNGraphNodeI.__lt__ = new_instancemethod(_snap.TUNGraphNodeI___lt__,None,TUNGraphNodeI)
TUNGraphNodeI.__eq__ = new_instancemethod(_snap.TUNGraphNodeI___eq__,None,TUNGraphNodeI)
TUNGraphNodeI.GetId = new_instancemethod(_snap.TUNGraphNodeI_GetId,None,TUNGraphNodeI)
TUNGraphNodeI.GetDeg = new_instancemethod(_snap.TUNGraphNodeI_GetDeg,None,TUNGraphNodeI)
TUNGraphNodeI.GetInDeg = new_instancemethod(_snap.TUNGraphNodeI_GetInDeg,None,TUNGraphNodeI)
TUNGraphNodeI.GetOutDeg = new_instancemethod(_snap.TUNGraphNodeI_GetOutDeg,None,TUNGraphNodeI)
TUNGraphNodeI.GetInNId = new_instancemethod(_snap.TUNGraphNodeI_GetInNId,None,TUNGraphNodeI)
TUNGraphNodeI.GetOutNId = new_instancemethod(_snap.TUNGraphNodeI_GetOutNId,None,TUNGraphNodeI)
TUNGraphNodeI.GetNbrNId = new_instancemethod(_snap.TUNGraphNodeI_GetNbrNId,None,TUNGraphNodeI)
TUNGraphNodeI.IsInNId = new_instancemethod(_snap.TUNGraphNodeI_IsInNId,None,TUNGraphNodeI)
TUNGraphNodeI.IsOutNId = new_instancemethod(_snap.TUNGraphNodeI_IsOutNId,None,TUNGraphNodeI)
TUNGraphNodeI.IsNbrNId = new_instancemethod(_snap.TUNGraphNodeI_IsNbrNId,None,TUNGraphNodeI)
TUNGraphNodeI_swigregister = _snap.TUNGraphNodeI_swigregister
TUNGraphNodeI_swigregister(TUNGraphNodeI)

class TUNGraphEdgeI(object):
    """Proxy of C++ TUNGraphEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TUNGraphEdgeI
        __init__(self, TEdgeI EdgeI) -> TUNGraphEdgeI
        Parameters:
           EdgeI: TUNGraph::TEdgeI const & value

           EdgeI: TUNGraph::TEdgeI const & value

        """
        _snap.TUNGraphEdgeI_swiginit(self,_snap.new_TUNGraphEdgeI(*args))
    def Next(self):
        """
        Next(self) -> TUNGraphEdgeI
        Parameters:
           self: TUNGraphEdgeI * value




        """
        return _snap.TUNGraphEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TUNGraphEdgeI EdgeI) -> bool
        Parameters:
           self: TUNGraphEdgeI const * value
           EdgeI: TUNGraphEdgeI const & value

           EdgeI: TUNGraphEdgeI const & value

        """
        return _snap.TUNGraphEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TUNGraphEdgeI EdgeI) -> bool
        Parameters:
           self: TUNGraphEdgeI const * value
           EdgeI: TUNGraphEdgeI const & value

           EdgeI: TUNGraphEdgeI const & value

        """
        return _snap.TUNGraphEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TUNGraphEdgeI const * value




        """
        return _snap.TUNGraphEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(self) -> int
        Parameters:
           self: TUNGraphEdgeI const * value




        """
        return _snap.TUNGraphEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(self) -> int
        Parameters:
           self: TUNGraphEdgeI const * value




        """
        return _snap.TUNGraphEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TUNGraphEdgeI
TUNGraphEdgeI.Next = new_instancemethod(_snap.TUNGraphEdgeI_Next,None,TUNGraphEdgeI)
TUNGraphEdgeI.__lt__ = new_instancemethod(_snap.TUNGraphEdgeI___lt__,None,TUNGraphEdgeI)
TUNGraphEdgeI.__eq__ = new_instancemethod(_snap.TUNGraphEdgeI___eq__,None,TUNGraphEdgeI)
TUNGraphEdgeI.GetId = new_instancemethod(_snap.TUNGraphEdgeI_GetId,None,TUNGraphEdgeI)
TUNGraphEdgeI.GetSrcNId = new_instancemethod(_snap.TUNGraphEdgeI_GetSrcNId,None,TUNGraphEdgeI)
TUNGraphEdgeI.GetDstNId = new_instancemethod(_snap.TUNGraphEdgeI_GetDstNId,None,TUNGraphEdgeI)
TUNGraphEdgeI_swigregister = _snap.TUNGraphEdgeI_swigregister
TUNGraphEdgeI_swigregister(TUNGraphEdgeI)

class TNEANetNodeI(object):
    """Proxy of C++ TNEANetNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetNodeI
        __init__(self, TNodeI NodeI) -> TNEANetNodeI
        Parameters:
           NodeI: TNEANet::TNodeI const & value

           NodeI: TNEANet::TNodeI const & value

        """
        _snap.TNEANetNodeI_swiginit(self,_snap.new_TNEANetNodeI(*args))
    def Next(self):
        """
        Next(self) -> TNEANetNodeI
        Parameters:
           self: TNEANetNodeI * value




        """
        return _snap.TNEANetNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNEANetNodeI NodeI) -> bool
        Parameters:
           self: TNEANetNodeI const * value
           NodeI: TNEANetNodeI const & value

           NodeI: TNEANetNodeI const & value

        """
        return _snap.TNEANetNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNEANetNodeI NodeI) -> bool
        Parameters:
           self: TNEANetNodeI const * value
           NodeI: TNEANetNodeI const & value

           NodeI: TNEANetNodeI const & value

        """
        return _snap.TNEANetNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNEANetNodeI const * value




        """
        return _snap.TNEANetNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(self) -> int
        Parameters:
           self: TNEANetNodeI const * value




        """
        return _snap.TNEANetNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(self) -> int
        Parameters:
           self: TNEANetNodeI const * value




        """
        return _snap.TNEANetNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(self) -> int
        Parameters:
           self: TNEANetNodeI const * value




        """
        return _snap.TNEANetNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(self, int NodeN) -> int
        Parameters:
           self: TNEANetNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNEANetNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(self, int NodeN) -> int
        Parameters:
           self: TNEANetNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNEANetNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(self, int NodeN) -> int
        Parameters:
           self: TNEANetNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNEANetNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(self, int NId) -> bool
        Parameters:
           self: TNEANetNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(self, int NId) -> bool
        Parameters:
           self: TNEANetNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(self, int NId) -> bool
        Parameters:
           self: TNEANetNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TNEANetNodeI
TNEANetNodeI.Next = new_instancemethod(_snap.TNEANetNodeI_Next,None,TNEANetNodeI)
TNEANetNodeI.__lt__ = new_instancemethod(_snap.TNEANetNodeI___lt__,None,TNEANetNodeI)
TNEANetNodeI.__eq__ = new_instancemethod(_snap.TNEANetNodeI___eq__,None,TNEANetNodeI)
TNEANetNodeI.GetId = new_instancemethod(_snap.TNEANetNodeI_GetId,None,TNEANetNodeI)
TNEANetNodeI.GetDeg = new_instancemethod(_snap.TNEANetNodeI_GetDeg,None,TNEANetNodeI)
TNEANetNodeI.GetInDeg = new_instancemethod(_snap.TNEANetNodeI_GetInDeg,None,TNEANetNodeI)
TNEANetNodeI.GetOutDeg = new_instancemethod(_snap.TNEANetNodeI_GetOutDeg,None,TNEANetNodeI)
TNEANetNodeI.GetInNId = new_instancemethod(_snap.TNEANetNodeI_GetInNId,None,TNEANetNodeI)
TNEANetNodeI.GetOutNId = new_instancemethod(_snap.TNEANetNodeI_GetOutNId,None,TNEANetNodeI)
TNEANetNodeI.GetNbrNId = new_instancemethod(_snap.TNEANetNodeI_GetNbrNId,None,TNEANetNodeI)
TNEANetNodeI.IsInNId = new_instancemethod(_snap.TNEANetNodeI_IsInNId,None,TNEANetNodeI)
TNEANetNodeI.IsOutNId = new_instancemethod(_snap.TNEANetNodeI_IsOutNId,None,TNEANetNodeI)
TNEANetNodeI.IsNbrNId = new_instancemethod(_snap.TNEANetNodeI_IsNbrNId,None,TNEANetNodeI)
TNEANetNodeI_swigregister = _snap.TNEANetNodeI_swigregister
TNEANetNodeI_swigregister(TNEANetNodeI)

class TNEANetEdgeI(object):
    """Proxy of C++ TNEANetEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetEdgeI
        __init__(self, TEdgeI EdgeI) -> TNEANetEdgeI
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value

           EdgeI: TNEANet::TEdgeI const & value

        """
        _snap.TNEANetEdgeI_swiginit(self,_snap.new_TNEANetEdgeI(*args))
    def Next(self):
        """
        Next(self) -> TNEANetEdgeI
        Parameters:
           self: TNEANetEdgeI * value




        """
        return _snap.TNEANetEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNEANetEdgeI EdgeI) -> bool
        Parameters:
           self: TNEANetEdgeI const * value
           EdgeI: TNEANetEdgeI const & value

           EdgeI: TNEANetEdgeI const & value

        """
        return _snap.TNEANetEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNEANetEdgeI EdgeI) -> bool
        Parameters:
           self: TNEANetEdgeI const * value
           EdgeI: TNEANetEdgeI const & value

           EdgeI: TNEANetEdgeI const & value

        """
        return _snap.TNEANetEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNEANetEdgeI const * value




        """
        return _snap.TNEANetEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(self) -> int
        Parameters:
           self: TNEANetEdgeI const * value




        """
        return _snap.TNEANetEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(self) -> int
        Parameters:
           self: TNEANetEdgeI const * value




        """
        return _snap.TNEANetEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TNEANetEdgeI
TNEANetEdgeI.Next = new_instancemethod(_snap.TNEANetEdgeI_Next,None,TNEANetEdgeI)
TNEANetEdgeI.__lt__ = new_instancemethod(_snap.TNEANetEdgeI___lt__,None,TNEANetEdgeI)
TNEANetEdgeI.__eq__ = new_instancemethod(_snap.TNEANetEdgeI___eq__,None,TNEANetEdgeI)
TNEANetEdgeI.GetId = new_instancemethod(_snap.TNEANetEdgeI_GetId,None,TNEANetEdgeI)
TNEANetEdgeI.GetSrcNId = new_instancemethod(_snap.TNEANetEdgeI_GetSrcNId,None,TNEANetEdgeI)
TNEANetEdgeI.GetDstNId = new_instancemethod(_snap.TNEANetEdgeI_GetDstNId,None,TNEANetEdgeI)
TNEANetEdgeI_swigregister = _snap.TNEANetEdgeI_swigregister
TNEANetEdgeI_swigregister(TNEANetEdgeI)

class TNEANetAIntI(object):
    """Proxy of C++ TNEANetAIntI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetAIntI
        __init__(self, TIntVecIter HIter, TStr attribute, bool isEdgeIter, 
            TNEANet GraphPt) -> TNEANetAIntI
        Parameters:
           HIter: TIntVecIter const & value
           attribute: TStr value
           isEdgeIter: bool value
           GraphPt: TNEANet const * value

           HIter: TIntVecIter const & value
           attribute: TStr value
           isEdgeIter: bool value
           GraphPt: TNEANet const * value

        __init__(self, TAIntI I) -> TNEANetAIntI
        Parameters:
           I: TNEANet::TAIntI const & value

           I: TNEANet::TAIntI const & value

        """
        _snap.TNEANetAIntI_swiginit(self,_snap.new_TNEANetAIntI(*args))
    def Next(self):
        """
        Next(self) -> TNEANetAIntI
        Parameters:
           self: TNEANetAIntI * value




        """
        return _snap.TNEANetAIntI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNEANetAIntI I) -> bool
        Parameters:
           self: TNEANetAIntI const * value
           I: TNEANetAIntI const & value

           I: TNEANetAIntI const & value

        """
        return _snap.TNEANetAIntI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNEANetAIntI I) -> bool
        Parameters:
           self: TNEANetAIntI const * value
           I: TNEANetAIntI const & value

           I: TNEANetAIntI const & value

        """
        return _snap.TNEANetAIntI___eq__(self, *args)

    def GetDat(self):
        """
        GetDat(self) -> int
        Parameters:
           self: TNEANetAIntI const * value




        """
        return _snap.TNEANetAIntI_GetDat(self)

    def IsDeleted(self):
        """
        IsDeleted(self) -> bool
        Parameters:
           self: TNEANetAIntI const * value




        """
        return _snap.TNEANetAIntI_IsDeleted(self)

    __swig_destroy__ = _snap.delete_TNEANetAIntI
TNEANetAIntI.Next = new_instancemethod(_snap.TNEANetAIntI_Next,None,TNEANetAIntI)
TNEANetAIntI.__lt__ = new_instancemethod(_snap.TNEANetAIntI___lt__,None,TNEANetAIntI)
TNEANetAIntI.__eq__ = new_instancemethod(_snap.TNEANetAIntI___eq__,None,TNEANetAIntI)
TNEANetAIntI.GetDat = new_instancemethod(_snap.TNEANetAIntI_GetDat,None,TNEANetAIntI)
TNEANetAIntI.IsDeleted = new_instancemethod(_snap.TNEANetAIntI_IsDeleted,None,TNEANetAIntI)
TNEANetAIntI_swigregister = _snap.TNEANetAIntI_swigregister
TNEANetAIntI_swigregister(TNEANetAIntI)

class TNEANetAStrI(object):
    """Proxy of C++ TNEANetAStrI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetAStrI
        __init__(self, TStrVecIter HIter, TStr attribute, bool isEdgeIter, 
            TNEANet GraphPt) -> TNEANetAStrI
        Parameters:
           HIter: TStrVecIter const & value
           attribute: TStr value
           isEdgeIter: bool value
           GraphPt: TNEANet const * value

           HIter: TStrVecIter const & value
           attribute: TStr value
           isEdgeIter: bool value
           GraphPt: TNEANet const * value

        __init__(self, TAStrI I) -> TNEANetAStrI
        Parameters:
           I: TNEANet::TAStrI const & value

           I: TNEANet::TAStrI const & value

        """
        _snap.TNEANetAStrI_swiginit(self,_snap.new_TNEANetAStrI(*args))
    def Next(self):
        """
        Next(self) -> TNEANetAStrI
        Parameters:
           self: TNEANetAStrI * value




        """
        return _snap.TNEANetAStrI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNEANetAStrI I) -> bool
        Parameters:
           self: TNEANetAStrI const * value
           I: TNEANetAStrI const & value

           I: TNEANetAStrI const & value

        """
        return _snap.TNEANetAStrI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNEANetAStrI I) -> bool
        Parameters:
           self: TNEANetAStrI const * value
           I: TNEANetAStrI const & value

           I: TNEANetAStrI const & value

        """
        return _snap.TNEANetAStrI___eq__(self, *args)

    def GetDat(self):
        """
        GetDat(self) -> char
        Parameters:
           self: TNEANetAStrI const * value




        """
        return _snap.TNEANetAStrI_GetDat(self)

    def IsDeleted(self):
        """
        IsDeleted(self) -> bool
        Parameters:
           self: TNEANetAStrI const * value




        """
        return _snap.TNEANetAStrI_IsDeleted(self)

    __swig_destroy__ = _snap.delete_TNEANetAStrI
TNEANetAStrI.Next = new_instancemethod(_snap.TNEANetAStrI_Next,None,TNEANetAStrI)
TNEANetAStrI.__lt__ = new_instancemethod(_snap.TNEANetAStrI___lt__,None,TNEANetAStrI)
TNEANetAStrI.__eq__ = new_instancemethod(_snap.TNEANetAStrI___eq__,None,TNEANetAStrI)
TNEANetAStrI.GetDat = new_instancemethod(_snap.TNEANetAStrI_GetDat,None,TNEANetAStrI)
TNEANetAStrI.IsDeleted = new_instancemethod(_snap.TNEANetAStrI_IsDeleted,None,TNEANetAStrI)
TNEANetAStrI_swigregister = _snap.TNEANetAStrI_swigregister
TNEANetAStrI_swigregister(TNEANetAStrI)

class TNEANetAFltI(object):
    """Proxy of C++ TNEANetAFltI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetAFltI
        __init__(self, TFltVecIter HIter, TStr attribute, bool isEdgeIter, 
            TNEANet GraphPt) -> TNEANetAFltI
        Parameters:
           HIter: TFltVecIter const & value
           attribute: TStr value
           isEdgeIter: bool value
           GraphPt: TNEANet const * value

           HIter: TFltVecIter const & value
           attribute: TStr value
           isEdgeIter: bool value
           GraphPt: TNEANet const * value

        __init__(self, TAFltI I) -> TNEANetAFltI
        Parameters:
           I: TNEANet::TAFltI const & value

           I: TNEANet::TAFltI const & value

        """
        _snap.TNEANetAFltI_swiginit(self,_snap.new_TNEANetAFltI(*args))
    def Next(self):
        """
        Next(self) -> TNEANetAFltI
        Parameters:
           self: TNEANetAFltI * value




        """
        return _snap.TNEANetAFltI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNEANetAFltI I) -> bool
        Parameters:
           self: TNEANetAFltI const * value
           I: TNEANetAFltI const & value

           I: TNEANetAFltI const & value

        """
        return _snap.TNEANetAFltI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNEANetAFltI I) -> bool
        Parameters:
           self: TNEANetAFltI const * value
           I: TNEANetAFltI const & value

           I: TNEANetAFltI const & value

        """
        return _snap.TNEANetAFltI___eq__(self, *args)

    def GetDat(self):
        """
        GetDat(self) -> double
        Parameters:
           self: TNEANetAFltI const * value




        """
        return _snap.TNEANetAFltI_GetDat(self)

    def IsDeleted(self):
        """
        IsDeleted(self) -> bool
        Parameters:
           self: TNEANetAFltI const * value




        """
        return _snap.TNEANetAFltI_IsDeleted(self)

    __swig_destroy__ = _snap.delete_TNEANetAFltI
TNEANetAFltI.Next = new_instancemethod(_snap.TNEANetAFltI_Next,None,TNEANetAFltI)
TNEANetAFltI.__lt__ = new_instancemethod(_snap.TNEANetAFltI___lt__,None,TNEANetAFltI)
TNEANetAFltI.__eq__ = new_instancemethod(_snap.TNEANetAFltI___eq__,None,TNEANetAFltI)
TNEANetAFltI.GetDat = new_instancemethod(_snap.TNEANetAFltI_GetDat,None,TNEANetAFltI)
TNEANetAFltI.IsDeleted = new_instancemethod(_snap.TNEANetAFltI_IsDeleted,None,TNEANetAFltI)
TNEANetAFltI_swigregister = _snap.TNEANetAFltI_swigregister
TNEANetAFltI_swigregister(TNEANetAFltI)

class TNEANetMPNodeI(object):
    """Proxy of C++ TNEANetMPNodeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetMPNodeI
        __init__(self, TNodeI NodeI) -> TNEANetMPNodeI
        Parameters:
           NodeI: TNEANetMP::TNodeI const & value

           NodeI: TNEANetMP::TNodeI const & value

        """
        _snap.TNEANetMPNodeI_swiginit(self,_snap.new_TNEANetMPNodeI(*args))
    def Next(self):
        """
        Next(self) -> TNEANetMPNodeI
        Parameters:
           self: TNEANetMPNodeI * value




        """
        return _snap.TNEANetMPNodeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNEANetMPNodeI NodeI) -> bool
        Parameters:
           self: TNEANetMPNodeI const * value
           NodeI: TNEANetMPNodeI const & value

           NodeI: TNEANetMPNodeI const & value

        """
        return _snap.TNEANetMPNodeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNEANetMPNodeI NodeI) -> bool
        Parameters:
           self: TNEANetMPNodeI const * value
           NodeI: TNEANetMPNodeI const & value

           NodeI: TNEANetMPNodeI const & value

        """
        return _snap.TNEANetMPNodeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNEANetMPNodeI const * value




        """
        return _snap.TNEANetMPNodeI_GetId(self)

    def GetDeg(self):
        """
        GetDeg(self) -> int
        Parameters:
           self: TNEANetMPNodeI const * value




        """
        return _snap.TNEANetMPNodeI_GetDeg(self)

    def GetInDeg(self):
        """
        GetInDeg(self) -> int
        Parameters:
           self: TNEANetMPNodeI const * value




        """
        return _snap.TNEANetMPNodeI_GetInDeg(self)

    def GetOutDeg(self):
        """
        GetOutDeg(self) -> int
        Parameters:
           self: TNEANetMPNodeI const * value




        """
        return _snap.TNEANetMPNodeI_GetOutDeg(self)

    def GetInNId(self, *args):
        """
        GetInNId(self, int NodeN) -> int
        Parameters:
           self: TNEANetMPNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNEANetMPNodeI_GetInNId(self, *args)

    def GetOutNId(self, *args):
        """
        GetOutNId(self, int NodeN) -> int
        Parameters:
           self: TNEANetMPNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNEANetMPNodeI_GetOutNId(self, *args)

    def GetNbrNId(self, *args):
        """
        GetNbrNId(self, int NodeN) -> int
        Parameters:
           self: TNEANetMPNodeI const * value
           NodeN: int const & value

           NodeN: int const & value

        """
        return _snap.TNEANetMPNodeI_GetNbrNId(self, *args)

    def IsInNId(self, *args):
        """
        IsInNId(self, int NId) -> bool
        Parameters:
           self: TNEANetMPNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetMPNodeI_IsInNId(self, *args)

    def IsOutNId(self, *args):
        """
        IsOutNId(self, int NId) -> bool
        Parameters:
           self: TNEANetMPNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetMPNodeI_IsOutNId(self, *args)

    def IsNbrNId(self, *args):
        """
        IsNbrNId(self, int NId) -> bool
        Parameters:
           self: TNEANetMPNodeI const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.TNEANetMPNodeI_IsNbrNId(self, *args)

    __swig_destroy__ = _snap.delete_TNEANetMPNodeI
TNEANetMPNodeI.Next = new_instancemethod(_snap.TNEANetMPNodeI_Next,None,TNEANetMPNodeI)
TNEANetMPNodeI.__lt__ = new_instancemethod(_snap.TNEANetMPNodeI___lt__,None,TNEANetMPNodeI)
TNEANetMPNodeI.__eq__ = new_instancemethod(_snap.TNEANetMPNodeI___eq__,None,TNEANetMPNodeI)
TNEANetMPNodeI.GetId = new_instancemethod(_snap.TNEANetMPNodeI_GetId,None,TNEANetMPNodeI)
TNEANetMPNodeI.GetDeg = new_instancemethod(_snap.TNEANetMPNodeI_GetDeg,None,TNEANetMPNodeI)
TNEANetMPNodeI.GetInDeg = new_instancemethod(_snap.TNEANetMPNodeI_GetInDeg,None,TNEANetMPNodeI)
TNEANetMPNodeI.GetOutDeg = new_instancemethod(_snap.TNEANetMPNodeI_GetOutDeg,None,TNEANetMPNodeI)
TNEANetMPNodeI.GetInNId = new_instancemethod(_snap.TNEANetMPNodeI_GetInNId,None,TNEANetMPNodeI)
TNEANetMPNodeI.GetOutNId = new_instancemethod(_snap.TNEANetMPNodeI_GetOutNId,None,TNEANetMPNodeI)
TNEANetMPNodeI.GetNbrNId = new_instancemethod(_snap.TNEANetMPNodeI_GetNbrNId,None,TNEANetMPNodeI)
TNEANetMPNodeI.IsInNId = new_instancemethod(_snap.TNEANetMPNodeI_IsInNId,None,TNEANetMPNodeI)
TNEANetMPNodeI.IsOutNId = new_instancemethod(_snap.TNEANetMPNodeI_IsOutNId,None,TNEANetMPNodeI)
TNEANetMPNodeI.IsNbrNId = new_instancemethod(_snap.TNEANetMPNodeI_IsNbrNId,None,TNEANetMPNodeI)
TNEANetMPNodeI_swigregister = _snap.TNEANetMPNodeI_swigregister
TNEANetMPNodeI_swigregister(TNEANetMPNodeI)

class TNEANetMPEdgeI(object):
    """Proxy of C++ TNEANetMPEdgeI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> TNEANetMPEdgeI
        __init__(self, TEdgeI EdgeI) -> TNEANetMPEdgeI
        Parameters:
           EdgeI: TNEANetMP::TEdgeI const & value

           EdgeI: TNEANetMP::TEdgeI const & value

        """
        _snap.TNEANetMPEdgeI_swiginit(self,_snap.new_TNEANetMPEdgeI(*args))
    def Next(self):
        """
        Next(self) -> TNEANetMPEdgeI
        Parameters:
           self: TNEANetMPEdgeI * value




        """
        return _snap.TNEANetMPEdgeI_Next(self)

    def __lt__(self, *args):
        """
        __lt__(self, TNEANetMPEdgeI EdgeI) -> bool
        Parameters:
           self: TNEANetMPEdgeI const * value
           EdgeI: TNEANetMPEdgeI const & value

           EdgeI: TNEANetMPEdgeI const & value

        """
        return _snap.TNEANetMPEdgeI___lt__(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, TNEANetMPEdgeI EdgeI) -> bool
        Parameters:
           self: TNEANetMPEdgeI const * value
           EdgeI: TNEANetMPEdgeI const & value

           EdgeI: TNEANetMPEdgeI const & value

        """
        return _snap.TNEANetMPEdgeI___eq__(self, *args)

    def GetId(self):
        """
        GetId(self) -> int
        Parameters:
           self: TNEANetMPEdgeI const * value




        """
        return _snap.TNEANetMPEdgeI_GetId(self)

    def GetSrcNId(self):
        """
        GetSrcNId(self) -> int
        Parameters:
           self: TNEANetMPEdgeI const * value




        """
        return _snap.TNEANetMPEdgeI_GetSrcNId(self)

    def GetDstNId(self):
        """
        GetDstNId(self) -> int
        Parameters:
           self: TNEANetMPEdgeI const * value




        """
        return _snap.TNEANetMPEdgeI_GetDstNId(self)

    __swig_destroy__ = _snap.delete_TNEANetMPEdgeI
TNEANetMPEdgeI.Next = new_instancemethod(_snap.TNEANetMPEdgeI_Next,None,TNEANetMPEdgeI)
TNEANetMPEdgeI.__lt__ = new_instancemethod(_snap.TNEANetMPEdgeI___lt__,None,TNEANetMPEdgeI)
TNEANetMPEdgeI.__eq__ = new_instancemethod(_snap.TNEANetMPEdgeI___eq__,None,TNEANetMPEdgeI)
TNEANetMPEdgeI.GetId = new_instancemethod(_snap.TNEANetMPEdgeI_GetId,None,TNEANetMPEdgeI)
TNEANetMPEdgeI.GetSrcNId = new_instancemethod(_snap.TNEANetMPEdgeI_GetSrcNId,None,TNEANetMPEdgeI)
TNEANetMPEdgeI.GetDstNId = new_instancemethod(_snap.TNEANetMPEdgeI_GetDstNId,None,TNEANetMPEdgeI)
TNEANetMPEdgeI_swigregister = _snap.TNEANetMPEdgeI_swigregister
TNEANetMPEdgeI_swigregister(TNEANetMPEdgeI)


def TPrGraph(*args):
  """
    TPrGraph(PUNGraph G) -> TUNGraph
    Parameters:
       G: PUNGraph value

       G: PUNGraph value

    """
  return _snap.TPrGraph(*args)

def GetRndWalkRestart_PUNGraph(*args):
  """
    GetRndWalkRestart_PUNGraph(PUNGraph Graph, double JumpProb, int JumpNId, TIntFltH RwrNIdH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       JumpProb: double const & value
       JumpNId: int const & value
       RwrNIdH: THash< TInt,TFlt,TDefaultHashFunc< TInt > > & value

       Graph: TPt< TUNGraph > const & value
       JumpProb: double const & value
       JumpNId: int const & value
       RwrNIdH: THash< TInt,TFlt,TDefaultHashFunc< TInt > > & value

    """
  return _snap.GetRndWalkRestart_PUNGraph(*args)

def GetRndWalkRestart_PNGraph(*args):
  """
    GetRndWalkRestart_PNGraph(PNGraph Graph, double JumpProb, int JumpNId, TIntFltH RwrNIdH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       JumpProb: double const & value
       JumpNId: int const & value
       RwrNIdH: THash< TInt,TFlt,TDefaultHashFunc< TInt > > & value

       Graph: TPt< TNGraph > const & value
       JumpProb: double const & value
       JumpNId: int const & value
       RwrNIdH: THash< TInt,TFlt,TDefaultHashFunc< TInt > > & value

    """
  return _snap.GetRndWalkRestart_PNGraph(*args)

def GetRndWalkRestart_PNEANet(*args):
  """
    GetRndWalkRestart_PNEANet(PNEANet Graph, double JumpProb, int JumpNId, TIntFltH RwrNIdH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       JumpProb: double const & value
       JumpNId: int const & value
       RwrNIdH: THash< TInt,TFlt,TDefaultHashFunc< TInt > > & value

       Graph: TPt< TNEANet > const & value
       JumpProb: double const & value
       JumpNId: int const & value
       RwrNIdH: THash< TInt,TFlt,TDefaultHashFunc< TInt > > & value

    """
  return _snap.GetRndWalkRestart_PNEANet(*args)
#
# define __getitem__ for [] addressing
#

def getitem(self, i):
    return self.GetVal(i)

def setitem(self, i, val):
    self.SetVal(i, val)

def len(self):
    return self.Len()

def delitem(self,  i):
    self.Del(i)

#
# define iterator for TVec
#

class IterVec:
    def __init__(self, vec):
        self.vec = vec
        self.count = -1

    def __iter__(self):
        return self

    def next(self):
        if self.count+1 < self.vec.Len():
            self.count += 1
            return self.vec[self.count]

        raise StopIteration

def itervec(self):
    return IterVec(self)

# expand TVec types with methods __iter__ and __getitem__

TIntV.__getitem__ = getitem
TIntV.__setitem__ = setitem
TIntV.__iter__ = itervec
TIntV.__len__ = len
TIntV.__delitem__ = delitem
TFltV.__getitem__ = getitem
TFltV.__setitem__ = setitem
TFltV.__iter__ = itervec
TFltV.__len__ = len
TFltV.__delitem__ = delitem
TIntIntVV.__getitem__ = getitem
TIntIntVV.__setitem__ = setitem
TIntIntVV.__iter__ = itervec
TIntIntVV.__len__ = len
TIntIntVV.__delitem__ = delitem
TIntPrV.__getitem__ = getitem
TIntPrV.__setitem__ = setitem
TIntPrV.__iter__ = itervec
TIntPrV.__len__ = len
TIntPrV.__delitem__ = delitem
TFltPrV.__getitem__ = getitem
TFltPrV.__setitem__ = setitem
TFltPrV.__iter__ = itervec
TFltPrV.__len__ = len
TFltPrV.__delitem__ = delitem
TStrIntPrV.__getitem__ = getitem
TStrIntPrV.__setitem__ = setitem
TStrIntPrV.__iter__ = itervec
TStrIntPrV.__len__ = len
TStrIntPrV.__delitem__ = delitem
TIntFltKdV.__getitem__ = getitem
TIntFltKdV.__setitem__ = setitem
TIntFltKdV.__iter__ = itervec
TIntFltKdV.__len__ = len
TIntFltKdV.__delitem__ = delitem
TCnComV.__getitem__ = getitem
TCnComV.__setitem__ = setitem
TCnComV.__iter__ = itervec
TCnComV.__len__ = len
TCnComV.__delitem__ = delitem
TCnCom.__getitem__ = getitem
TCnCom.__setitem__ = setitem
TCnCom.__iter__ = itervec
TCnCom.__len__ = len
TCnCom.__delitem__ = delitem
Schema.__getitem__ = getitem
Schema.__setitem__ = setitem
Schema.__iter__ = itervec
Schema.__len__ = len
Schema.__delitem__ = delitem
PNEANetV.__getitem__ = getitem
PNEANetV.__setitem__ = setitem
PNEANetV.__iter__ = itervec
PNEANetV.__len__ = len
PNEANetV.__delitem__ = delitem

#
# define __getitem__ for [] addressing
#
def getitem_hash(self, i):
    return self.GetDat(i)

def setitem_hash(self, key, value):
    self.AddDat(key, value)

def delitem_hash(self, key):
    self.DelKey(key)

def len_hash(self):
    return self.Len()

#
# define iterator for THash
#

class IterHash:
    def __init__(self, hash):
        self.hash = hash
        self.iter = None

    def __iter__(self):
        return self

    def next(self):
        if self.hash.Len() == 0:
            raise StopIteration
        if not self.iter:
            self.iter = self.hash.BegI()
            if not self.iter:
                raise StopIteration
            if self.iter:
                return self.iter.GetKey()
            return self.iter

        if self.iter.IsEnd():
            raise StopIteration

        self.iter.Next()

        if self.iter.IsEnd():
            raise StopIteration
     
        if self.iter:
            return self.iter.GetKey()
        return self.iter

def iterhash(self):
    return IterHash(self)

TIntH.__getitem__ = getitem_hash
TIntH.__setitem__ = setitem_hash
TIntH.__delitem__ = delitem_hash
TIntH.__len__ = len_hash
TIntH.__iter__ = iterhash
TIntIntH.__getitem__ = getitem_hash
TIntIntH.__setitem__ = setitem_hash
TIntIntH.__delitem__ = delitem_hash
TIntIntH.__len__ = len_hash
TIntIntH.__iter__ = iterhash
TIntFltH.__getitem__ = getitem_hash
TIntFltH.__setitem__ = setitem_hash
TIntFltH.__delitem__ = delitem_hash
TIntFltH.__len__ = len_hash
TIntFltH.__iter__ = iterhash
TIntStrH.__getitem__ = getitem_hash
TIntStrH.__setitem__ = setitem_hash
TIntStrH.__delitem__ = delitem_hash
TIntStrH.__len__ = len_hash
TIntStrH.__iter__ = iterhash
TIntPrFltH.__getitem__ = getitem_hash
TIntPrFltH.__setitem__ = setitem_hash
TIntPrFltH.__delitem__ = delitem_hash
TIntPrFltH.__len__ = len_hash
TIntPrFltH.__iter__ = iterhash

#
# define __getitem__ for [] addressing
#
def getitem_hashset(self, i):
    return self.GetSetKey(i)

def delitem_hashset(self, i):
    self.DelKey(i)

def contains_hashset(self, key):
    return self.IsKey(key)

#
# define iterator for THashSet
#

class IterHashSet:
    def __init__(self, hash):
        self.hash = hash
        self.vec = None
        self.iter = None
        self.count = 0

    def __iter__(self):
        return self

    def next(self):
        if not self.iter or not self.vec:
            self.vec = TIntV()
            self.hash.GetKeyV(self.vec)
            self.count = 0

        if self.count >= self.vec.Len():
            raise StopIteration

        self.iter = self.vec.GetVal(self.count)
        self.count += 1
     
        return self.iter

def iterhashset(self):
    return IterHashSet(self)


TIntSet.__iter__ = iterhashset
TIntSet.__contains__ = contains_hashset


class PNEANet(object):
    """Proxy of C++ TPt<(TNEANet)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PNEANet"""
        return _snap.PNEANet_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PNEANet
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPt< TNEANet > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PNEANet_Save(self, *args)

    def __deref__(self):
        """
        __deref__(self) -> TNEANet
        Parameters:
           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet___deref__(self)

    def __ref__(self):
        """
        __ref__(self) -> TNEANet
        Parameters:
           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet___ref__(self)

    def __call__(self):
        """
        __call__(self) -> TNEANet
        Parameters:
           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet___call__(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TPt< TNEANet > * value




        """
        return _snap.PNEANet_Clr(self)

    def GetRefs(self):
        """
        GetRefs(self) -> int
        Parameters:
           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet_GetRefs(self)

    def Save_V1(self, *args):
        """
        Save_V1(self, TSOut SOut)
        Parameters:
           self: TNEANet const * value
           SOut: TSOut & value

           SOut: TSOut & value

           self: TPt< TNEANet > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PNEANet_Save_V1(self, *args)

    def Load(self, *args):
        """
        Load(self, TSIn SIn) -> PNEANet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

           self: TPt< TNEANet > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.PNEANet_Load(self, *args)

    def Load_V1(self, *args):
        """
        Load_V1(self, TSIn SIn) -> PNEANet
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

           self: TPt< TNEANet > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.PNEANet_Load_V1(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNEANet const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

           self: TPt< TNEANet > const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.PNEANet_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNEANet const * value




           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeI) -> int
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNodeI const & value

           NodeI: TNEANet::TNodeI const & value

           self: TPt< TNEANet > * value
           NodeI: TNEANet::TNodeI const & value

           NodeI: TNEANet::TNodeI const & value

        """
        return _snap.PNEANet_AddNode(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNode const & value

           NodeI: TNEANet::TNode const & value

           self: TPt< TNEANet > * value
           NodeI: TNEANet::TNode const & value

           NodeI: TNEANet::TNode const & value

        """
        return _snap.PNEANet_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNEANet > const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNEANet_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNEANetNodeI
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNEANetNodeI
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNEANetNodeI
        Parameters:
           self: TNEANet * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNEANet > * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNEANet_GetNI(self, *args)

    def BegNAIntI(self, *args):
        """
        BegNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        BegNAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_BegNAIntI(self, *args)

    def EndNAIntI(self, *args):
        """
        EndNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        EndNAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_EndNAIntI(self, *args)

    def GetNAIntI(self, *args):
        """
        GetNAIntI(self, TStr attr, int NId) -> TAIntI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

           self: TPt< TNEANet > const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.PNEANet_GetNAIntI(self, *args)

    def BegNAStrI(self, *args):
        """
        BegNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        BegNAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_BegNAStrI(self, *args)

    def EndNAStrI(self, *args):
        """
        EndNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        EndNAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_EndNAStrI(self, *args)

    def GetNAStrI(self, *args):
        """
        GetNAStrI(self, TStr attr, int NId) -> TAStrI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

           self: TPt< TNEANet > const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.PNEANet_GetNAStrI(self, *args)

    def BegNAFltI(self, *args):
        """
        BegNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        BegNAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_BegNAFltI(self, *args)

    def EndNAFltI(self, *args):
        """
        EndNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        EndNAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_EndNAFltI(self, *args)

    def GetNAFltI(self, *args):
        """
        GetNAFltI(self, TStr attr, int NId) -> TAFltI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

           self: TPt< TNEANet > const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.PNEANet_GetNAFltI(self, *args)

    def AttrNameNI(self, *args):
        """
        AttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        AttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_AttrNameNI(self, *args)

    def AttrValueNI(self, *args):
        """
        AttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        AttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANet_AttrValueNI(self, *args)

    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        IntAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_IntAttrNameNI(self, *args)

    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(self, TInt NId, TIntV Values)
        Parameters:
           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

        IntAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TIntV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.PNEANet_IntAttrValueNI(self, *args)

    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        StrAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_StrAttrNameNI(self, *args)

    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        StrAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANet_StrAttrValueNI(self, *args)

    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        FltAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_FltAttrNameNI(self, *args)

    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(self, TInt NId, TFltV Values)
        Parameters:
           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

        FltAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TFltV Values)
        Parameters:
           self: TNEANet const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           self: TPt< TNEANet > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.PNEANet_FltAttrValueNI(self, *args)

    def AttrNameEI(self, *args):
        """
        AttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        AttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_AttrNameEI(self, *args)

    def AttrValueEI(self, *args):
        """
        AttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        AttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANet_AttrValueEI(self, *args)

    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        IntAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_IntAttrNameEI(self, *args)

    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(self, TInt EId, TIntV Values)
        Parameters:
           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

        IntAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TIntV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.PNEANet_IntAttrValueEI(self, *args)

    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        StrAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_StrAttrNameEI(self, *args)

    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        StrAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANet_StrAttrValueEI(self, *args)

    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        FltAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANet_FltAttrNameEI(self, *args)

    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(self, TInt EId, TFltV Values)
        Parameters:
           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

        FltAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TFltV Values)
        Parameters:
           self: TNEANet const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           self: TPt< TNEANet > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.PNEANet_FltAttrValueEI(self, *args)

    def BegEAIntI(self, *args):
        """
        BegEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        BegEAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_BegEAIntI(self, *args)

    def EndEAIntI(self, *args):
        """
        EndEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        EndEAIntI(self, TStr attr) -> TNEANetAIntI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_EndEAIntI(self, *args)

    def GetEAIntI(self, *args):
        """
        GetEAIntI(self, TStr attr, int EId) -> TAIntI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

           self: TPt< TNEANet > const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.PNEANet_GetEAIntI(self, *args)

    def BegEAStrI(self, *args):
        """
        BegEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        BegEAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_BegEAStrI(self, *args)

    def EndEAStrI(self, *args):
        """
        EndEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        EndEAStrI(self, TStr attr) -> TNEANetAStrI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_EndEAStrI(self, *args)

    def GetEAStrI(self, *args):
        """
        GetEAStrI(self, TStr attr, int EId) -> TAStrI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

           self: TPt< TNEANet > const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.PNEANet_GetEAStrI(self, *args)

    def BegEAFltI(self, *args):
        """
        BegEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        BegEAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_BegEAFltI(self, *args)

    def EndEAFltI(self, *args):
        """
        EndEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

           attr: TStr const & value

        EndEAFltI(self, TStr attr) -> TNEANetAFltI
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_EndEAFltI(self, *args)

    def GetEAFltI(self, *args):
        """
        GetEAFltI(self, TStr attr, int EId) -> TAFltI
        Parameters:
           self: TNEANet const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

           self: TPt< TNEANet > const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.PNEANet_GetEAFltI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNEANet const * value




           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet_GetMxNId(self)

    def GetMxEId(self):
        """
        GetMxEId(self) -> int
        Parameters:
           self: TNEANet const * value




           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet_GetMxEId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNEANet const * value




           self: TPt< TNEANet > const * value




        """
        return _snap.PNEANet_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId, int EId = -1) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNEANet * value
           EdgeI: TNEANet::TEdgeI const & value

           EdgeI: TNEANet::TEdgeI const & value

           self: TPt< TNEANet > * value
           EdgeI: TNEANet::TEdgeI const & value

           EdgeI: TNEANet::TEdgeI const & value

        """
        return _snap.PNEANet_AddEdge(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int EId)
        Parameters:
           EId: int const & value

           EId: int const & value

           EId: int const & value

           EId: int const & value

        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TNEANet * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNEANet > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNEANet_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int EId) -> bool
        Parameters:
           EId: int const & value

           EId: int const & value

           EId: int const & value

           EId: int const & value

        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        IsEdge(self, int SrcNId, int DstNId, int EId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId, int EId) -> bool
        Parameters:
           self: TNEANet const * value
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           self: TPt< TNEANet > const * value
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

        """
        return _snap.PNEANet_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNEANet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNEANet > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNEANet_GetEId(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNEANetEdgeI
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNEANetEdgeI
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNEANet const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNEANet > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNEANet_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEId(self) -> int
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(self, TRnd Rnd = Rnd) -> TEdgeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEI(self) -> TEdgeI
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNEANet const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

           self: TPt< TNEANet > const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.PNEANet_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(self, TIntV EIdV)
        Parameters:
           self: TNEANet const * value
           EIdV: TIntV & value

           EIdV: TIntV & value

           self: TPt< TNEANet > const * value
           EIdV: TIntV & value

           EIdV: TIntV & value

        """
        return _snap.PNEANet_GetEIdV(self, *args)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNEANet * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           self: TPt< TNEANet > * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.PNEANet_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNEANet * value


           self: TPt< TNEANet > * value


        """
        return _snap.PNEANet_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNEANet const * value


           self: TPt< TNEANet > const * value


        """
        return _snap.PNEANet_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNEANet const * value


           self: TPt< TNEANet > const * value


        """
        return _snap.PNEANet_Dump(self, *args)

    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(self, TNodeI NodeI, TInt value, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatN(self, int NId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_AddIntAttrDatN(self, *args)

    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(self, TNodeI NodeI, TStr value, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatN(self, int NId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_AddStrAttrDatN(self, *args)

    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(self, TNodeI NodeI, TFlt value, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatN(self, int NId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_AddFltAttrDatN(self, *args)

    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(self, TEdgeI EdgeI, TInt value, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatE(self, int EId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_AddIntAttrDatE(self, *args)

    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(self, TEdgeI EdgeI, TStr value, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatE(self, int EId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_AddStrAttrDatE(self, *args)

    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(self, TEdgeI EdgeI, TFlt value, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatE(self, int EId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_AddFltAttrDatE(self, *args)

    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(self, TNodeI NodeI, TStr attr) -> TInt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        GetIntAttrDatN(self, int NId, TStr attr) -> TInt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_GetIntAttrDatN(self, *args)

    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(self, TNodeI NodeI, TStr attr) -> TStr
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        GetStrAttrDatN(self, int NId, TStr attr) -> TStr
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_GetStrAttrDatN(self, *args)

    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(self, TNodeI NodeI, TStr attr) -> TFlt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        GetFltAttrDatN(self, int NId, TStr attr) -> TFlt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_GetFltAttrDatN(self, *args)

    def GetIntAttrIndN(self, *args):
        """
        GetIntAttrIndN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_GetIntAttrIndN(self, *args)

    def GetAttrIndN(self, *args):
        """
        GetAttrIndN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_GetAttrIndN(self, *args)

    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(self, TNodeI NodeI, int index) -> TInt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

        GetIntAttrIndDatN(self, int NId, int index) -> TInt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.PNEANet_GetIntAttrIndDatN(self, *args)

    def GetStrAttrIndDatN(self, *args):
        """
        GetStrAttrIndDatN(self, TNodeI NodeI, int index) -> TStr
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

        GetStrAttrIndDatN(self, int NId, int index) -> TStr
        Parameters:
           self: TNEANet * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.PNEANet_GetStrAttrIndDatN(self, *args)

    def GetFltAttrIndDatN(self, *args):
        """
        GetFltAttrIndDatN(self, TNodeI NodeI, int index) -> TFlt
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

           NodeI: TNEANet::TNodeI const & value
           index: int const & value

        GetFltAttrIndDatN(self, int NId, int index) -> TFlt
        Parameters:
           self: TNEANet * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.PNEANet_GetFltAttrIndDatN(self, *args)

    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(self, TEdgeI EdgeI, TStr attr) -> TInt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        GetIntAttrDatE(self, int EId, TStr attr) -> TInt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_GetIntAttrDatE(self, *args)

    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(self, TEdgeI EdgeI, TStr attr) -> TStr
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        GetStrAttrDatE(self, int EId, TStr attr) -> TStr
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_GetStrAttrDatE(self, *args)

    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(self, TEdgeI EdgeI, TStr attr) -> TFlt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        GetFltAttrDatE(self, int EId, TStr attr) -> TFlt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_GetFltAttrDatE(self, *args)

    def GetIntAttrIndE(self, *args):
        """
        GetIntAttrIndE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_GetIntAttrIndE(self, *args)

    def GetAttrIndE(self, *args):
        """
        GetAttrIndE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_GetAttrIndE(self, *args)

    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(self, TEdgeI EdgeI, int index) -> TInt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

        GetIntAttrIndDatE(self, int EId, int index) -> TInt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.PNEANet_GetIntAttrIndDatE(self, *args)

    def GetFltAttrIndDatE(self, *args):
        """
        GetFltAttrIndDatE(self, TEdgeI EdgeI, int index) -> TFlt
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

        GetFltAttrIndDatE(self, int EId, int index) -> TFlt
        Parameters:
           self: TNEANet * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.PNEANet_GetFltAttrIndDatE(self, *args)

    def GetStrAttrIndDatE(self, *args):
        """
        GetStrAttrIndDatE(self, TEdgeI EdgeI, int index) -> TStr
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

           EdgeI: TNEANet::TEdgeI const & value
           index: int const & value

        GetStrAttrIndDatE(self, int EId, int index) -> TStr
        Parameters:
           self: TNEANet * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.PNEANet_GetStrAttrIndDatE(self, *args)

    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(self, TNodeI NodeI, TStr attr) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           attr: TStr const & value

        DelAttrDatN(self, int NId, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_DelAttrDatN(self, *args)

    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(self, TEdgeI EdgeI, TStr attr) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           attr: TStr const & value

        DelAttrDatE(self, int EId, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_DelAttrDatE(self, *args)

    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_AddIntAttrN(self, *args)

    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_AddStrAttrN(self, *args)

    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_AddFltAttrN(self, *args)

    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_AddIntAttrE(self, *args)

    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_AddStrAttrE(self, *args)

    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_AddFltAttrE(self, *args)

    def DelAttrN(self, *args):
        """
        DelAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_DelAttrN(self, *args)

    def DelAttrE(self, *args):
        """
        DelAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_DelAttrE(self, *args)

    def IsAttrDeletedN(self, *args):
        """
        IsAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsAttrDeletedN(self, *args)

    def IsIntAttrDeletedN(self, *args):
        """
        IsIntAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsIntAttrDeletedN(self, *args)

    def IsStrAttrDeletedN(self, *args):
        """
        IsStrAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsStrAttrDeletedN(self, *args)

    def IsFltAttrDeletedN(self, *args):
        """
        IsFltAttrDeletedN(self, int NId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsFltAttrDeletedN(self, *args)

    def NodeAttrIsDeleted(self, *args):
        """
        NodeAttrIsDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_NodeAttrIsDeleted(self, *args)

    def NodeAttrIsIntDeleted(self, *args):
        """
        NodeAttrIsIntDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_NodeAttrIsIntDeleted(self, *args)

    def NodeAttrIsStrDeleted(self, *args):
        """
        NodeAttrIsStrDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_NodeAttrIsStrDeleted(self, *args)

    def NodeAttrIsFltDeleted(self, *args):
        """
        NodeAttrIsFltDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_NodeAttrIsFltDeleted(self, *args)

    def IsAttrDeletedE(self, *args):
        """
        IsAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsAttrDeletedE(self, *args)

    def IsIntAttrDeletedE(self, *args):
        """
        IsIntAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsIntAttrDeletedE(self, *args)

    def IsStrAttrDeletedE(self, *args):
        """
        IsStrAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsStrAttrDeletedE(self, *args)

    def IsFltAttrDeletedE(self, *args):
        """
        IsFltAttrDeletedE(self, int EId, TStr attr) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_IsFltAttrDeletedE(self, *args)

    def EdgeAttrIsDeleted(self, *args):
        """
        EdgeAttrIsDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_EdgeAttrIsDeleted(self, *args)

    def EdgeAttrIsIntDeleted(self, *args):
        """
        EdgeAttrIsIntDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_EdgeAttrIsIntDeleted(self, *args)

    def EdgeAttrIsStrDeleted(self, *args):
        """
        EdgeAttrIsStrDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_EdgeAttrIsStrDeleted(self, *args)

    def EdgeAttrIsFltDeleted(self, *args):
        """
        EdgeAttrIsFltDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_EdgeAttrIsFltDeleted(self, *args)

    def GetNodeAttrValue(self, *args):
        """
        GetNodeAttrValue(self, int NId, TStrIntPrH::TIter NodeHI) -> TStr
        Parameters:
           self: TNEANet const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_GetNodeAttrValue(self, *args)

    def GetEdgeAttrValue(self, *args):
        """
        GetEdgeAttrValue(self, int EId, TStrIntPrH::TIter EdgeHI) -> TStr
        Parameters:
           self: TNEANet const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANet > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANet_GetEdgeAttrValue(self, *args)

    def GetWeightOutEdges(self, *args):
        """
        GetWeightOutEdges(self, TNodeI NI, TStr attr) -> TFlt
        Parameters:
           self: TNEANet * value
           NI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NI: TNEANet::TNodeI const & value
           attr: TStr const & value

           self: TPt< TNEANet > * value
           NI: TNEANet::TNodeI const & value
           attr: TStr const & value

           NI: TNEANet::TNodeI const & value
           attr: TStr const & value

        """
        return _snap.PNEANet_GetWeightOutEdges(self, *args)

    def IsFltAttrE(self, *args):
        """
        IsFltAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_IsFltAttrE(self, *args)

    def IsIntAttrE(self, *args):
        """
        IsIntAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_IsIntAttrE(self, *args)

    def IsStrAttrE(self, *args):
        """
        IsStrAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_IsStrAttrE(self, *args)

    def GetFltAttrVecE(self, *args):
        """
        GetFltAttrVecE(self, TStr attr) -> TFltV
        Parameters:
           self: TNEANet * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANet > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANet_GetFltAttrVecE(self, *args)

    def GetFltKeyIdE(self, *args):
        """
        GetFltKeyIdE(self, int EId) -> int
        Parameters:
           self: TNEANet * value
           EId: int const & value

           EId: int const & value

           self: TPt< TNEANet > * value
           EId: int const & value

           EId: int const & value

        """
        return _snap.PNEANet_GetFltKeyIdE(self, *args)

    def GetWeightOutEdgesV(self, *args):
        """
        GetWeightOutEdgesV(self, TFltV OutWeights, TFltV AttrVal)
        Parameters:
           self: TNEANet * value
           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           self: TPt< TNEANet > * value
           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           OutWeights: TFltV & value
           AttrVal: TFltV const & value

        """
        return _snap.PNEANet_GetWeightOutEdgesV(self, *args)

    def GetAttrNNames(self, *args):
        """
        GetAttrNNames(self, TStrV IntAttrNames, TStrV FltAttrNames, TStrV StrAttrNames)
        Parameters:
           self: TNEANet const * value
           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           self: TPt< TNEANet > const * value
           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

        """
        return _snap.PNEANet_GetAttrNNames(self, *args)

    def GetAttrENames(self, *args):
        """
        GetAttrENames(self, TStrV IntAttrNames, TStrV FltAttrNames, TStrV StrAttrNames)
        Parameters:
           self: TNEANet const * value
           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           self: TPt< TNEANet > const * value
           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

           IntAttrNames: TStrV & value
           FltAttrNames: TStrV & value
           StrAttrNames: TStrV & value

        """
        return _snap.PNEANet_GetAttrENames(self, *args)

    def AddSAttrDatN(self, *args):
        """
        AddSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           self: TPt< TNEANet > * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.PNEANet_AddSAttrDatN(self, *args)

    def GetSAttrDatN(self, *args):
        """
        GetSAttrDatN(self, TInt NId, TStr AttrName, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TInt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TInt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TFlt Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatN(self, TInt NId, TStr AttrName, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           NId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TInt NId, TInt AttrId, TStr Val) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           NId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TStr AttrName, TStr Val) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatN(self, TNodeI NodeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet const * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           self: TPt< TNEANet > const * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.PNEANet_GetSAttrDatN(self, *args)

    def DelSAttrDatN(self, *args):
        """
        DelSAttrDatN(self, TInt NId, TStr AttrName) -> int
        Parameters:
           NId: TInt const & value
           AttrName: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value

           NId: TInt const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TInt NId, TInt AttrId) -> int
        Parameters:
           NId: TInt const & value
           AttrId: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value

           NId: TInt const & value
           AttrId: TInt const & value

        DelSAttrDatN(self, TNodeI NodeI, TStr AttrName) -> int
        Parameters:
           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value

           NodeI: TNEANet::TNodeI const & value
           AttrName: TStr const & value

        DelSAttrDatN(self, TNodeI NodeI, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value

           self: TPt< TNEANet > * value
           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value

           NodeI: TNEANet::TNodeI const & value
           AttrId: TInt const & value

        """
        return _snap.PNEANet_DelSAttrDatN(self, *args)

    def GetSAttrVN(self, *args):
        """
        GetSAttrVN(self, TInt NId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVN(self, TNodeI NodeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TNEANet const * value
           NodeI: TNEANet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NodeI: TNEANet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           self: TPt< TNEANet > const * value
           NodeI: TNEANet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           NodeI: TNEANet::TNodeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.PNEANet_GetSAttrVN(self, *args)

    def GetIdVSAttrN(self, *args):
        """
        GetIdVSAttrN(self, TStr AttrName, TIntV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

        GetIdVSAttrN(self, TInt AttrId, TIntV IdV) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

           self: TPt< TNEANet > const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

        """
        return _snap.PNEANet_GetIdVSAttrN(self, *args)

    def AddSAttrN(self, *args):
        """
        AddSAttrN(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           self: TPt< TNEANet > * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.PNEANet_AddSAttrN(self, *args)

    def GetSAttrIdN(self, *args):
        """
        GetSAttrIdN(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           self: TPt< TNEANet > const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.PNEANet_GetSAttrIdN(self, *args)

    def GetSAttrNameN(self, *args):
        """
        GetSAttrNameN(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           self: TPt< TNEANet > const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.PNEANet_GetSAttrNameN(self, *args)

    def AddSAttrDatE(self, *args):
        """
        AddSAttrDatE(self, TInt EId, TStr AttrName, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, TInt EId, TInt AttrId, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt const & value

        AddSAttrDatE(self, TInt EId, TStr AttrName, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TInt EId, TInt AttrId, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt const & value

        AddSAttrDatE(self, TInt EId, TStr AttrName, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, TInt EId, TInt AttrId, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr const & value

        AddSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           self: TPt< TNEANet > * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr const & value

        """
        return _snap.PNEANet_AddSAttrDatE(self, *args)

    def GetSAttrDatE(self, *args):
        """
        GetSAttrDatE(self, TInt EId, TStr AttrName, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, TInt EId, TInt AttrId, TInt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TInt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TInt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TInt & value

        GetSAttrDatE(self, TInt EId, TStr AttrName, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, TInt EId, TInt AttrId, TFlt Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TFlt & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TFlt Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TFlt & value

        GetSAttrDatE(self, TInt EId, TStr AttrName, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

           EId: TInt const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, TInt EId, TInt AttrId, TStr Val) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

           EId: TInt const & value
           AttrId: TInt const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TStr AttrName, TStr Val) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value
           Val: TStr & value

        GetSAttrDatE(self, TEdgeI EdgeI, TInt AttrId, TStr Val) -> int
        Parameters:
           self: TNEANet const * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           self: TPt< TNEANet > const * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value
           Val: TStr & value

        """
        return _snap.PNEANet_GetSAttrDatE(self, *args)

    def DelSAttrDatE(self, *args):
        """
        DelSAttrDatE(self, TInt EId, TStr AttrName) -> int
        Parameters:
           EId: TInt const & value
           AttrName: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value

           EId: TInt const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, TInt EId, TInt AttrId) -> int
        Parameters:
           EId: TInt const & value
           AttrId: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value

           EId: TInt const & value
           AttrId: TInt const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TStr AttrName) -> int
        Parameters:
           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrName: TStr const & value

        DelSAttrDatE(self, TEdgeI EdgeI, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value

           self: TPt< TNEANet > * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrId: TInt const & value

        """
        return _snap.PNEANet_DelSAttrDatE(self, *args)

    def GetSAttrVE(self, *args):
        """
        GetSAttrVE(self, TInt EId,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           EId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EId: TInt const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        GetSAttrVE(self, TEdgeI EdgeI,  AttrType, TAttrPrV AttrV) -> int
        Parameters:
           self: TNEANet const * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           self: TPt< TNEANet > const * value
           EdgeI: TNEANet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

           EdgeI: TNEANet::TEdgeI const & value
           AttrType: enum TAttrType const value
           AttrV: TAttrPrV & value

        """
        return _snap.PNEANet_GetSAttrVE(self, *args)

    def GetIdVSAttrE(self, *args):
        """
        GetIdVSAttrE(self, TStr AttrName, TIntV IdV) -> int
        Parameters:
           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

           AttrName: TStr const & value
           IdV: TIntV & value

        GetIdVSAttrE(self, TInt AttrId, TIntV IdV) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

           self: TPt< TNEANet > const * value
           AttrId: TInt const & value
           IdV: TIntV & value

           AttrId: TInt const & value
           IdV: TIntV & value

        """
        return _snap.PNEANet_GetIdVSAttrE(self, *args)

    def AddSAttrE(self, *args):
        """
        AddSAttrE(self, TStr Name,  AttrType, TInt AttrId) -> int
        Parameters:
           self: TNEANet * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           self: TPt< TNEANet > * value
           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

           Name: TStr const & value
           AttrType: TAttrType const & value
           AttrId: TInt & value

        """
        return _snap.PNEANet_AddSAttrE(self, *args)

    def GetSAttrIdE(self, *args):
        """
        GetSAttrIdE(self, TStr Name, TInt AttrId,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           self: TPt< TNEANet > const * value
           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

           Name: TStr const & value
           AttrId: TInt & value
           AttrType: TAttrType & value

        """
        return _snap.PNEANet_GetSAttrIdE(self, *args)

    def GetSAttrNameE(self, *args):
        """
        GetSAttrNameE(self, TInt AttrId, TStr Name,  AttrType) -> int
        Parameters:
           self: TNEANet const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           self: TPt< TNEANet > const * value
           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

           AttrId: TInt const & value
           Name: TStr & value
           AttrType: TAttrType & value

        """
        return _snap.PNEANet_GetSAttrNameE(self, *args)

PNEANet.Save = new_instancemethod(_snap.PNEANet_Save,None,PNEANet)
PNEANet.__deref__ = new_instancemethod(_snap.PNEANet___deref__,None,PNEANet)
PNEANet.__ref__ = new_instancemethod(_snap.PNEANet___ref__,None,PNEANet)
PNEANet.__call__ = new_instancemethod(_snap.PNEANet___call__,None,PNEANet)
PNEANet.Empty = new_instancemethod(_snap.PNEANet_Empty,None,PNEANet)
PNEANet.Clr = new_instancemethod(_snap.PNEANet_Clr,None,PNEANet)
PNEANet.GetRefs = new_instancemethod(_snap.PNEANet_GetRefs,None,PNEANet)
PNEANet.Save_V1 = new_instancemethod(_snap.PNEANet_Save_V1,None,PNEANet)
PNEANet.Load = new_instancemethod(_snap.PNEANet_Load,None,PNEANet)
PNEANet.Load_V1 = new_instancemethod(_snap.PNEANet_Load_V1,None,PNEANet)
PNEANet.HasFlag = new_instancemethod(_snap.PNEANet_HasFlag,None,PNEANet)
PNEANet.GetNodes = new_instancemethod(_snap.PNEANet_GetNodes,None,PNEANet)
PNEANet.AddNode = new_instancemethod(_snap.PNEANet_AddNode,None,PNEANet)
PNEANet.DelNode = new_instancemethod(_snap.PNEANet_DelNode,None,PNEANet)
PNEANet.IsNode = new_instancemethod(_snap.PNEANet_IsNode,None,PNEANet)
PNEANet.BegNI = new_instancemethod(_snap.PNEANet_BegNI,None,PNEANet)
PNEANet.EndNI = new_instancemethod(_snap.PNEANet_EndNI,None,PNEANet)
PNEANet.GetNI = new_instancemethod(_snap.PNEANet_GetNI,None,PNEANet)
PNEANet.BegNAIntI = new_instancemethod(_snap.PNEANet_BegNAIntI,None,PNEANet)
PNEANet.EndNAIntI = new_instancemethod(_snap.PNEANet_EndNAIntI,None,PNEANet)
PNEANet.GetNAIntI = new_instancemethod(_snap.PNEANet_GetNAIntI,None,PNEANet)
PNEANet.BegNAStrI = new_instancemethod(_snap.PNEANet_BegNAStrI,None,PNEANet)
PNEANet.EndNAStrI = new_instancemethod(_snap.PNEANet_EndNAStrI,None,PNEANet)
PNEANet.GetNAStrI = new_instancemethod(_snap.PNEANet_GetNAStrI,None,PNEANet)
PNEANet.BegNAFltI = new_instancemethod(_snap.PNEANet_BegNAFltI,None,PNEANet)
PNEANet.EndNAFltI = new_instancemethod(_snap.PNEANet_EndNAFltI,None,PNEANet)
PNEANet.GetNAFltI = new_instancemethod(_snap.PNEANet_GetNAFltI,None,PNEANet)
PNEANet.AttrNameNI = new_instancemethod(_snap.PNEANet_AttrNameNI,None,PNEANet)
PNEANet.AttrValueNI = new_instancemethod(_snap.PNEANet_AttrValueNI,None,PNEANet)
PNEANet.IntAttrNameNI = new_instancemethod(_snap.PNEANet_IntAttrNameNI,None,PNEANet)
PNEANet.IntAttrValueNI = new_instancemethod(_snap.PNEANet_IntAttrValueNI,None,PNEANet)
PNEANet.StrAttrNameNI = new_instancemethod(_snap.PNEANet_StrAttrNameNI,None,PNEANet)
PNEANet.StrAttrValueNI = new_instancemethod(_snap.PNEANet_StrAttrValueNI,None,PNEANet)
PNEANet.FltAttrNameNI = new_instancemethod(_snap.PNEANet_FltAttrNameNI,None,PNEANet)
PNEANet.FltAttrValueNI = new_instancemethod(_snap.PNEANet_FltAttrValueNI,None,PNEANet)
PNEANet.AttrNameEI = new_instancemethod(_snap.PNEANet_AttrNameEI,None,PNEANet)
PNEANet.AttrValueEI = new_instancemethod(_snap.PNEANet_AttrValueEI,None,PNEANet)
PNEANet.IntAttrNameEI = new_instancemethod(_snap.PNEANet_IntAttrNameEI,None,PNEANet)
PNEANet.IntAttrValueEI = new_instancemethod(_snap.PNEANet_IntAttrValueEI,None,PNEANet)
PNEANet.StrAttrNameEI = new_instancemethod(_snap.PNEANet_StrAttrNameEI,None,PNEANet)
PNEANet.StrAttrValueEI = new_instancemethod(_snap.PNEANet_StrAttrValueEI,None,PNEANet)
PNEANet.FltAttrNameEI = new_instancemethod(_snap.PNEANet_FltAttrNameEI,None,PNEANet)
PNEANet.FltAttrValueEI = new_instancemethod(_snap.PNEANet_FltAttrValueEI,None,PNEANet)
PNEANet.BegEAIntI = new_instancemethod(_snap.PNEANet_BegEAIntI,None,PNEANet)
PNEANet.EndEAIntI = new_instancemethod(_snap.PNEANet_EndEAIntI,None,PNEANet)
PNEANet.GetEAIntI = new_instancemethod(_snap.PNEANet_GetEAIntI,None,PNEANet)
PNEANet.BegEAStrI = new_instancemethod(_snap.PNEANet_BegEAStrI,None,PNEANet)
PNEANet.EndEAStrI = new_instancemethod(_snap.PNEANet_EndEAStrI,None,PNEANet)
PNEANet.GetEAStrI = new_instancemethod(_snap.PNEANet_GetEAStrI,None,PNEANet)
PNEANet.BegEAFltI = new_instancemethod(_snap.PNEANet_BegEAFltI,None,PNEANet)
PNEANet.EndEAFltI = new_instancemethod(_snap.PNEANet_EndEAFltI,None,PNEANet)
PNEANet.GetEAFltI = new_instancemethod(_snap.PNEANet_GetEAFltI,None,PNEANet)
PNEANet.GetMxNId = new_instancemethod(_snap.PNEANet_GetMxNId,None,PNEANet)
PNEANet.GetMxEId = new_instancemethod(_snap.PNEANet_GetMxEId,None,PNEANet)
PNEANet.GetEdges = new_instancemethod(_snap.PNEANet_GetEdges,None,PNEANet)
PNEANet.AddEdge = new_instancemethod(_snap.PNEANet_AddEdge,None,PNEANet)
PNEANet.DelEdge = new_instancemethod(_snap.PNEANet_DelEdge,None,PNEANet)
PNEANet.IsEdge = new_instancemethod(_snap.PNEANet_IsEdge,None,PNEANet)
PNEANet.GetEId = new_instancemethod(_snap.PNEANet_GetEId,None,PNEANet)
PNEANet.BegEI = new_instancemethod(_snap.PNEANet_BegEI,None,PNEANet)
PNEANet.EndEI = new_instancemethod(_snap.PNEANet_EndEI,None,PNEANet)
PNEANet.GetEI = new_instancemethod(_snap.PNEANet_GetEI,None,PNEANet)
PNEANet.GetRndNId = new_instancemethod(_snap.PNEANet_GetRndNId,None,PNEANet)
PNEANet.GetRndNI = new_instancemethod(_snap.PNEANet_GetRndNI,None,PNEANet)
PNEANet.GetRndEId = new_instancemethod(_snap.PNEANet_GetRndEId,None,PNEANet)
PNEANet.GetRndEI = new_instancemethod(_snap.PNEANet_GetRndEI,None,PNEANet)
PNEANet.GetNIdV = new_instancemethod(_snap.PNEANet_GetNIdV,None,PNEANet)
PNEANet.GetEIdV = new_instancemethod(_snap.PNEANet_GetEIdV,None,PNEANet)
PNEANet.Reserve = new_instancemethod(_snap.PNEANet_Reserve,None,PNEANet)
PNEANet.Defrag = new_instancemethod(_snap.PNEANet_Defrag,None,PNEANet)
PNEANet.IsOk = new_instancemethod(_snap.PNEANet_IsOk,None,PNEANet)
PNEANet.Dump = new_instancemethod(_snap.PNEANet_Dump,None,PNEANet)
PNEANet.AddIntAttrDatN = new_instancemethod(_snap.PNEANet_AddIntAttrDatN,None,PNEANet)
PNEANet.AddStrAttrDatN = new_instancemethod(_snap.PNEANet_AddStrAttrDatN,None,PNEANet)
PNEANet.AddFltAttrDatN = new_instancemethod(_snap.PNEANet_AddFltAttrDatN,None,PNEANet)
PNEANet.AddIntAttrDatE = new_instancemethod(_snap.PNEANet_AddIntAttrDatE,None,PNEANet)
PNEANet.AddStrAttrDatE = new_instancemethod(_snap.PNEANet_AddStrAttrDatE,None,PNEANet)
PNEANet.AddFltAttrDatE = new_instancemethod(_snap.PNEANet_AddFltAttrDatE,None,PNEANet)
PNEANet.GetIntAttrDatN = new_instancemethod(_snap.PNEANet_GetIntAttrDatN,None,PNEANet)
PNEANet.GetStrAttrDatN = new_instancemethod(_snap.PNEANet_GetStrAttrDatN,None,PNEANet)
PNEANet.GetFltAttrDatN = new_instancemethod(_snap.PNEANet_GetFltAttrDatN,None,PNEANet)
PNEANet.GetIntAttrIndN = new_instancemethod(_snap.PNEANet_GetIntAttrIndN,None,PNEANet)
PNEANet.GetAttrIndN = new_instancemethod(_snap.PNEANet_GetAttrIndN,None,PNEANet)
PNEANet.GetIntAttrIndDatN = new_instancemethod(_snap.PNEANet_GetIntAttrIndDatN,None,PNEANet)
PNEANet.GetStrAttrIndDatN = new_instancemethod(_snap.PNEANet_GetStrAttrIndDatN,None,PNEANet)
PNEANet.GetFltAttrIndDatN = new_instancemethod(_snap.PNEANet_GetFltAttrIndDatN,None,PNEANet)
PNEANet.GetIntAttrDatE = new_instancemethod(_snap.PNEANet_GetIntAttrDatE,None,PNEANet)
PNEANet.GetStrAttrDatE = new_instancemethod(_snap.PNEANet_GetStrAttrDatE,None,PNEANet)
PNEANet.GetFltAttrDatE = new_instancemethod(_snap.PNEANet_GetFltAttrDatE,None,PNEANet)
PNEANet.GetIntAttrIndE = new_instancemethod(_snap.PNEANet_GetIntAttrIndE,None,PNEANet)
PNEANet.GetAttrIndE = new_instancemethod(_snap.PNEANet_GetAttrIndE,None,PNEANet)
PNEANet.GetIntAttrIndDatE = new_instancemethod(_snap.PNEANet_GetIntAttrIndDatE,None,PNEANet)
PNEANet.GetFltAttrIndDatE = new_instancemethod(_snap.PNEANet_GetFltAttrIndDatE,None,PNEANet)
PNEANet.GetStrAttrIndDatE = new_instancemethod(_snap.PNEANet_GetStrAttrIndDatE,None,PNEANet)
PNEANet.DelAttrDatN = new_instancemethod(_snap.PNEANet_DelAttrDatN,None,PNEANet)
PNEANet.DelAttrDatE = new_instancemethod(_snap.PNEANet_DelAttrDatE,None,PNEANet)
PNEANet.AddIntAttrN = new_instancemethod(_snap.PNEANet_AddIntAttrN,None,PNEANet)
PNEANet.AddStrAttrN = new_instancemethod(_snap.PNEANet_AddStrAttrN,None,PNEANet)
PNEANet.AddFltAttrN = new_instancemethod(_snap.PNEANet_AddFltAttrN,None,PNEANet)
PNEANet.AddIntAttrE = new_instancemethod(_snap.PNEANet_AddIntAttrE,None,PNEANet)
PNEANet.AddStrAttrE = new_instancemethod(_snap.PNEANet_AddStrAttrE,None,PNEANet)
PNEANet.AddFltAttrE = new_instancemethod(_snap.PNEANet_AddFltAttrE,None,PNEANet)
PNEANet.DelAttrN = new_instancemethod(_snap.PNEANet_DelAttrN,None,PNEANet)
PNEANet.DelAttrE = new_instancemethod(_snap.PNEANet_DelAttrE,None,PNEANet)
PNEANet.IsAttrDeletedN = new_instancemethod(_snap.PNEANet_IsAttrDeletedN,None,PNEANet)
PNEANet.IsIntAttrDeletedN = new_instancemethod(_snap.PNEANet_IsIntAttrDeletedN,None,PNEANet)
PNEANet.IsStrAttrDeletedN = new_instancemethod(_snap.PNEANet_IsStrAttrDeletedN,None,PNEANet)
PNEANet.IsFltAttrDeletedN = new_instancemethod(_snap.PNEANet_IsFltAttrDeletedN,None,PNEANet)
PNEANet.NodeAttrIsDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsDeleted,None,PNEANet)
PNEANet.NodeAttrIsIntDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsIntDeleted,None,PNEANet)
PNEANet.NodeAttrIsStrDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsStrDeleted,None,PNEANet)
PNEANet.NodeAttrIsFltDeleted = new_instancemethod(_snap.PNEANet_NodeAttrIsFltDeleted,None,PNEANet)
PNEANet.IsAttrDeletedE = new_instancemethod(_snap.PNEANet_IsAttrDeletedE,None,PNEANet)
PNEANet.IsIntAttrDeletedE = new_instancemethod(_snap.PNEANet_IsIntAttrDeletedE,None,PNEANet)
PNEANet.IsStrAttrDeletedE = new_instancemethod(_snap.PNEANet_IsStrAttrDeletedE,None,PNEANet)
PNEANet.IsFltAttrDeletedE = new_instancemethod(_snap.PNEANet_IsFltAttrDeletedE,None,PNEANet)
PNEANet.EdgeAttrIsDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsDeleted,None,PNEANet)
PNEANet.EdgeAttrIsIntDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsIntDeleted,None,PNEANet)
PNEANet.EdgeAttrIsStrDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsStrDeleted,None,PNEANet)
PNEANet.EdgeAttrIsFltDeleted = new_instancemethod(_snap.PNEANet_EdgeAttrIsFltDeleted,None,PNEANet)
PNEANet.GetNodeAttrValue = new_instancemethod(_snap.PNEANet_GetNodeAttrValue,None,PNEANet)
PNEANet.GetEdgeAttrValue = new_instancemethod(_snap.PNEANet_GetEdgeAttrValue,None,PNEANet)
PNEANet.GetWeightOutEdges = new_instancemethod(_snap.PNEANet_GetWeightOutEdges,None,PNEANet)
PNEANet.IsFltAttrE = new_instancemethod(_snap.PNEANet_IsFltAttrE,None,PNEANet)
PNEANet.IsIntAttrE = new_instancemethod(_snap.PNEANet_IsIntAttrE,None,PNEANet)
PNEANet.IsStrAttrE = new_instancemethod(_snap.PNEANet_IsStrAttrE,None,PNEANet)
PNEANet.GetFltAttrVecE = new_instancemethod(_snap.PNEANet_GetFltAttrVecE,None,PNEANet)
PNEANet.GetFltKeyIdE = new_instancemethod(_snap.PNEANet_GetFltKeyIdE,None,PNEANet)
PNEANet.GetWeightOutEdgesV = new_instancemethod(_snap.PNEANet_GetWeightOutEdgesV,None,PNEANet)
PNEANet.GetAttrNNames = new_instancemethod(_snap.PNEANet_GetAttrNNames,None,PNEANet)
PNEANet.GetAttrENames = new_instancemethod(_snap.PNEANet_GetAttrENames,None,PNEANet)
PNEANet.AddSAttrDatN = new_instancemethod(_snap.PNEANet_AddSAttrDatN,None,PNEANet)
PNEANet.GetSAttrDatN = new_instancemethod(_snap.PNEANet_GetSAttrDatN,None,PNEANet)
PNEANet.DelSAttrDatN = new_instancemethod(_snap.PNEANet_DelSAttrDatN,None,PNEANet)
PNEANet.GetSAttrVN = new_instancemethod(_snap.PNEANet_GetSAttrVN,None,PNEANet)
PNEANet.GetIdVSAttrN = new_instancemethod(_snap.PNEANet_GetIdVSAttrN,None,PNEANet)
PNEANet.AddSAttrN = new_instancemethod(_snap.PNEANet_AddSAttrN,None,PNEANet)
PNEANet.GetSAttrIdN = new_instancemethod(_snap.PNEANet_GetSAttrIdN,None,PNEANet)
PNEANet.GetSAttrNameN = new_instancemethod(_snap.PNEANet_GetSAttrNameN,None,PNEANet)
PNEANet.AddSAttrDatE = new_instancemethod(_snap.PNEANet_AddSAttrDatE,None,PNEANet)
PNEANet.GetSAttrDatE = new_instancemethod(_snap.PNEANet_GetSAttrDatE,None,PNEANet)
PNEANet.DelSAttrDatE = new_instancemethod(_snap.PNEANet_DelSAttrDatE,None,PNEANet)
PNEANet.GetSAttrVE = new_instancemethod(_snap.PNEANet_GetSAttrVE,None,PNEANet)
PNEANet.GetIdVSAttrE = new_instancemethod(_snap.PNEANet_GetIdVSAttrE,None,PNEANet)
PNEANet.AddSAttrE = new_instancemethod(_snap.PNEANet_AddSAttrE,None,PNEANet)
PNEANet.GetSAttrIdE = new_instancemethod(_snap.PNEANet_GetSAttrIdE,None,PNEANet)
PNEANet.GetSAttrNameE = new_instancemethod(_snap.PNEANet_GetSAttrNameE,None,PNEANet)
PNEANet_swigregister = _snap.PNEANet_swigregister
PNEANet_swigregister(PNEANet)

def PrintGraphStatTable_PNEANet(*args):
  """
    PrintGraphStatTable_PNEANet(PNEANet G, TStr OutFNm, TStr Desc = "")
    Parameters:
       G: TPt< TNEANet > const & value
       OutFNm: TStr value
       Desc: TStr value

       G: TPt< TNEANet > const & value
       OutFNm: TStr value
       Desc: TStr value

    PrintGraphStatTable_PNEANet(PNEANet G, TStr OutFNm)
    Parameters:
       G: TPt< TNEANet > const & value
       OutFNm: TStr value

       G: TPt< TNEANet > const & value
       OutFNm: TStr value

    """
  return _snap.PrintGraphStatTable_PNEANet(*args)

def PNEANet_New():
  """PNEANet_New() -> PNEANet"""
  return _snap.PNEANet_New()


def GetNodeWcc_PNEANet(*args):
  """
    GetNodeWcc_PNEANet(PNEANet Graph, int NId, TIntV CnCom)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value
       CnCom: TIntV & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value
       CnCom: TIntV & value

    """
  return _snap.GetNodeWcc_PNEANet(*args)

def IsConnected_PNEANet(*args):
  """
    IsConnected_PNEANet(PNEANet Graph) -> bool
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.IsConnected_PNEANet(*args)

def IsWeaklyConn_PNEANet(*args):
  """
    IsWeaklyConn_PNEANet(PNEANet Graph) -> bool
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.IsWeaklyConn_PNEANet(*args)

def GetWccSzCnt_PNEANet(*args):
  """
    GetWccSzCnt_PNEANet(PNEANet Graph, TIntPrV WccSzCnt)
    Parameters:
       Graph: TPt< TNEANet > const & value
       WccSzCnt: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       WccSzCnt: TIntPrV & value

    """
  return _snap.GetWccSzCnt_PNEANet(*args)

def GetWccs_PNEANet(*args):
  """
    GetWccs_PNEANet(PNEANet Graph, TCnComV CnComV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       CnComV: TCnComV & value

       Graph: TPt< TNEANet > const & value
       CnComV: TCnComV & value

    """
  return _snap.GetWccs_PNEANet(*args)

def GetSccSzCnt_PNEANet(*args):
  """
    GetSccSzCnt_PNEANet(PNEANet Graph, TIntPrV SccSzCnt)
    Parameters:
       Graph: TPt< TNEANet > const & value
       SccSzCnt: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       SccSzCnt: TIntPrV & value

    """
  return _snap.GetSccSzCnt_PNEANet(*args)

def GetSccs_PNEANet(*args):
  """
    GetSccs_PNEANet(PNEANet Graph, TCnComV CnComV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       CnComV: TCnComV & value

       Graph: TPt< TNEANet > const & value
       CnComV: TCnComV & value

    """
  return _snap.GetSccs_PNEANet(*args)

def GetMxWccSz_PNEANet(*args):
  """
    GetMxWccSz_PNEANet(PNEANet Graph) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxWccSz_PNEANet(*args)

def GetMxSccSz_PNEANet(*args):
  """
    GetMxSccSz_PNEANet(PNEANet Graph) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxSccSz_PNEANet(*args)

def GetMxWcc_PNEANet(*args):
  """
    GetMxWcc_PNEANet(PNEANet Graph) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxWcc_PNEANet(*args)

def GetMxScc_PNEANet(*args):
  """
    GetMxScc_PNEANet(PNEANet Graph) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxScc_PNEANet(*args)

def GetMxBiCon_PNEANet(*args):
  """
    GetMxBiCon_PNEANet(PNEANet Graph) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxBiCon_PNEANet(*args)

def CntInDegNodes_PNEANet(*args):
  """
    CntInDegNodes_PNEANet(PNEANet Graph, int NodeInDeg) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NodeInDeg: int const & value

       Graph: TPt< TNEANet > const & value
       NodeInDeg: int const & value

    """
  return _snap.CntInDegNodes_PNEANet(*args)

def CntOutDegNodes_PNEANet(*args):
  """
    CntOutDegNodes_PNEANet(PNEANet Graph, int NodeOutDeg) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NodeOutDeg: int const & value

       Graph: TPt< TNEANet > const & value
       NodeOutDeg: int const & value

    """
  return _snap.CntOutDegNodes_PNEANet(*args)

def CntDegNodes_PNEANet(*args):
  """
    CntDegNodes_PNEANet(PNEANet Graph, int NodeDeg) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NodeDeg: int const & value

       Graph: TPt< TNEANet > const & value
       NodeDeg: int const & value

    """
  return _snap.CntDegNodes_PNEANet(*args)

def CntNonZNodes_PNEANet(*args):
  """
    CntNonZNodes_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.CntNonZNodes_PNEANet(*args)

def CntEdgesToSet_PNEANet(*args):
  """
    CntEdgesToSet_PNEANet(PNEANet Graph, int NId, TIntSet NodeSet) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value
       NodeSet: TIntSet const & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value
       NodeSet: TIntSet const & value

    """
  return _snap.CntEdgesToSet_PNEANet(*args)

def GetMxDegNId_PNEANet(*args):
  """
    GetMxDegNId_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxDegNId_PNEANet(*args)

def GetMxInDegNId_PNEANet(*args):
  """
    GetMxInDegNId_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxInDegNId_PNEANet(*args)

def GetMxOutDegNId_PNEANet(*args):
  """
    GetMxOutDegNId_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetMxOutDegNId_PNEANet(*args)

def GetNodeInDegV_PNEANet(*args):
  """
    GetNodeInDegV_PNEANet(PNEANet Graph, TIntPrV NIdInDegV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdInDegV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       NIdInDegV: TIntPrV & value

    """
  return _snap.GetNodeInDegV_PNEANet(*args)

def GetNodeOutDegV_PNEANet(*args):
  """
    GetNodeOutDegV_PNEANet(PNEANet Graph, TIntPrV NIdOutDegV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdOutDegV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       NIdOutDegV: TIntPrV & value

    """
  return _snap.GetNodeOutDegV_PNEANet(*args)

def CntUniqUndirEdges_PNEANet(*args):
  """
    CntUniqUndirEdges_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.CntUniqUndirEdges_PNEANet(*args)

def CntUniqDirEdges_PNEANet(*args):
  """
    CntUniqDirEdges_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.CntUniqDirEdges_PNEANet(*args)

def CntUniqBiDirEdges_PNEANet(*args):
  """
    CntUniqBiDirEdges_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.CntUniqBiDirEdges_PNEANet(*args)

def CntSelfEdges_PNEANet(*args):
  """
    CntSelfEdges_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.CntSelfEdges_PNEANet(*args)

def GetUnDir_PNEANet(*args):
  """
    GetUnDir_PNEANet(PNEANet Graph) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetUnDir_PNEANet(*args)

def MakeUnDir_PNEANet(*args):
  """
    MakeUnDir_PNEANet(PNEANet Graph)
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.MakeUnDir_PNEANet(*args)

def AddSelfEdges_PNEANet(*args):
  """
    AddSelfEdges_PNEANet(PNEANet Graph)
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.AddSelfEdges_PNEANet(*args)

def DelSelfEdges_PNEANet(*args):
  """
    DelSelfEdges_PNEANet(PNEANet Graph)
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.DelSelfEdges_PNEANet(*args)

def DelNodes_PNEANet(*args):
  """
    DelNodes_PNEANet(PNEANet Graph, TIntV NIdV)
    Parameters:
       Graph: TPt< TNEANet > & value
       NIdV: TIntV const & value

       Graph: TPt< TNEANet > & value
       NIdV: TIntV const & value

    """
  return _snap.DelNodes_PNEANet(*args)

def DelZeroDegNodes_PNEANet(*args):
  """
    DelZeroDegNodes_PNEANet(PNEANet Graph)
    Parameters:
       Graph: TPt< TNEANet > & value

       Graph: TPt< TNEANet > & value

    """
  return _snap.DelZeroDegNodes_PNEANet(*args)

def DelDegKNodes_PNEANet(*args):
  """
    DelDegKNodes_PNEANet(PNEANet Graph, int OutDegK, int InDegK)
    Parameters:
       Graph: TPt< TNEANet > & value
       OutDegK: int const & value
       InDegK: int const & value

       Graph: TPt< TNEANet > & value
       OutDegK: int const & value
       InDegK: int const & value

    """
  return _snap.DelDegKNodes_PNEANet(*args)

def IsTree_PNEANet(*args):
  """
    IsTree_PNEANet(PNEANet Graph) -> bool
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.IsTree_PNEANet(*args)

def GetTreeRootNId_PNEANet(*args):
  """
    GetTreeRootNId_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetTreeRootNId_PNEANet(*args)

def GetBfsTree_PNEANet(*args):
  """
    GetBfsTree_PNEANet(PNEANet Graph, int StartNId, bool FollowOut, bool FollowIn) -> PNGraph
    Parameters:
       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

    """
  return _snap.GetBfsTree_PNEANet(*args)

def GetSubTreeSz_PNEANet(*args):
  """
    GetSubTreeSz_PNEANet(PNEANet Graph, int StartNId, bool FollowOut, bool FollowIn) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

    """
  return _snap.GetSubTreeSz_PNEANet(*args)

def GenFull_PNEANet(*args):
  """
    GenFull_PNEANet(int Nodes) -> PNEANet
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenFull_PNEANet(*args)

def LoadConnList_PNEANet(*args):
  """
    LoadConnList_PNEANet(TStr InFNm) -> PNEANet
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    """
  return _snap.LoadConnList_PNEANet(*args)

def LoadConnListStr_PNEANet(*args):
  """
    LoadConnListStr_PNEANet(TStr InFNm, TStrHash<(TInt)> StrToNIdH) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       StrToNIdH: TStrHash< TInt > & value

       InFNm: TStr const & value
       StrToNIdH: TStrHash< TInt > & value

    """
  return _snap.LoadConnListStr_PNEANet(*args)

def LoadPajek_PNEANet(*args):
  """
    LoadPajek_PNEANet(TStr InFNm) -> PNEANet
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    """
  return _snap.LoadPajek_PNEANet(*args)

def SaveMatlabSparseMtx_PNEANet(*args):
  """
    SaveMatlabSparseMtx_PNEANet(PNEANet Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

    """
  return _snap.SaveMatlabSparseMtx_PNEANet(*args)

def GetKCore_PNEANet(*args):
  """
    GetKCore_PNEANet(PNEANet Graph, int K) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value
       K: int const & value

       Graph: TPt< TNEANet > const & value
       K: int const & value

    """
  return _snap.GetKCore_PNEANet(*args)

def GetKCoreEdges_PNEANet(*args):
  """
    GetKCoreEdges_PNEANet(PNEANet Graph, TIntPrV CoreIdSzV) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       CoreIdSzV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       CoreIdSzV: TIntPrV & value

    """
  return _snap.GetKCoreEdges_PNEANet(*args)

def GetKCoreNodes_PNEANet(*args):
  """
    GetKCoreNodes_PNEANet(PNEANet Graph, TIntPrV CoreIdSzV) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       CoreIdSzV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       CoreIdSzV: TIntPrV & value

    """
  return _snap.GetKCoreNodes_PNEANet(*args)

def GetSubGraph_PNEANet(*args):
  """
    GetSubGraph_PNEANet(PNEANet Graph, TIntV NIdV) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

       Graph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

    """
  return _snap.GetSubGraph_PNEANet(*args)

def GetRndSubGraph_PNEANet(*args):
  """
    GetRndSubGraph_PNEANet(PNEANet Graph, int NNodes) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value
       NNodes: int const & value

       Graph: TPt< TNEANet > const & value
       NNodes: int const & value

    """
  return _snap.GetRndSubGraph_PNEANet(*args)

def GetRndESubGraph_PNEANet(*args):
  """
    GetRndESubGraph_PNEANet(PNEANet Graph, int NEdges) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value
       NEdges: int const & value

       Graph: TPt< TNEANet > const & value
       NEdges: int const & value

    """
  return _snap.GetRndESubGraph_PNEANet(*args)

def GetTriadParticip_PNEANet(*args):
  """
    GetTriadParticip_PNEANet(PNEANet Graph, TIntPrV TriadCntV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       TriadCntV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       TriadCntV: TIntPrV & value

    """
  return _snap.GetTriadParticip_PNEANet(*args)

def GetTriangleCnt_PNEANet(*args):
  """
    GetTriangleCnt_PNEANet(PNEANet Graph) -> int64
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetTriangleCnt_PNEANet(*args)

def GetEdgesInOut_PNEANet(*args):
  """
    GetEdgesInOut_PNEANet(PNEANet Graph, TIntV NIdV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

       Graph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

    """
  return _snap.GetEdgesInOut_PNEANet(*args)

def TestAnf_PNEANet():
  """TestAnf_PNEANet()"""
  return _snap.TestAnf_PNEANet()

def MxDegree_PNEANet(*args):
  """
    MxDegree_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.MxDegree_PNEANet(*args)

def PercentMxWcc_PNEANet(*args):
  """
    PercentMxWcc_PNEANet(PNEANet Graph) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.PercentMxWcc_PNEANet(*args)

def PercentMxScc_PNEANet(*args):
  """
    PercentMxScc_PNEANet(PNEANet Graph) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.PercentMxScc_PNEANet(*args)
# redefine TNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNGraphEdgeI.GetId = GetId

class PNGraph(object):
    """Proxy of C++ TPt<(TNGraph)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PNGraph"""
        return _snap.PNGraph_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PNGraph
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPt< TNGraph > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PNGraph_Save(self, *args)

    def __deref__(self):
        """
        __deref__(self) -> TNGraph
        Parameters:
           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph___deref__(self)

    def __ref__(self):
        """
        __ref__(self) -> TNGraph
        Parameters:
           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph___ref__(self)

    def __call__(self):
        """
        __call__(self) -> TNGraph
        Parameters:
           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph___call__(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TPt< TNGraph > * value




        """
        return _snap.PNGraph_Clr(self)

    def GetRefs(self):
        """
        GetRefs(self) -> int
        Parameters:
           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph_GetRefs(self)

    def Load(self, *args):
        """
        Load(self, TSIn SIn) -> PNGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

           self: TPt< TNGraph > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.PNGraph_Load(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNGraph const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

           self: TPt< TNGraph > const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.PNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNGraph const * value




           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           NodeId: TNGraph::TNodeI const & value

           NodeId: TNGraph::TNodeI const & value

           NodeId: TNGraph::TNodeI const & value

           NodeId: TNGraph::TNodeI const & value

        AddNode(self, int NId, TIntV InNIdV, TIntV OutNIdV) -> int
        Parameters:
           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int SrcVId, int DstVId) -> int
        Parameters:
           self: TNGraph * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           self: TPt< TNGraph > * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

        """
        return _snap.PNGraph_AddNode(self, *args)

    def AddNodeUnchecked(self, *args):
        """
        AddNodeUnchecked(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNodeUnchecked(self) -> int
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_AddNodeUnchecked(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TNGraph * value
           NodeI: TNGraph::TNode const & value

           NodeI: TNGraph::TNode const & value

           self: TPt< TNGraph > * value
           NodeI: TNGraph::TNode const & value

           NodeI: TNGraph::TNode const & value

        """
        return _snap.PNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNGraph const * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNGraph > const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNGraph_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNGraphNodeI
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNGraphNodeI
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNGraphNodeI
        Parameters:
           self: TNGraph * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNGraph > * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNGraph_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNGraph const * value




           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNGraph const * value




           self: TPt< TNGraph > const * value




        """
        return _snap.PNGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNGraph * value
           EdgeI: TNGraph::TEdgeI const & value

           EdgeI: TNGraph::TEdgeI const & value

           self: TPt< TNGraph > * value
           EdgeI: TNGraph::TEdgeI const & value

           EdgeI: TNGraph::TEdgeI const & value

        """
        return _snap.PNGraph_AddEdge(self, *args)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraph > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraph_AddEdgeUnchecked(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraph > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraph > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraph_IsEdge(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNGraphEdgeI
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNGraphEdgeI
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraph > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

           self: TPt< TNGraph > const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.PNGraph_GetNIdV(self, *args)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNGraph * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           self: TPt< TNGraph > * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.PNGraph_Reserve(self, *args)

    def ReserveNIdInDeg(self, *args):
        """
        ReserveNIdInDeg(self, int NId, int InDeg)
        Parameters:
           self: TNGraph * value
           NId: int const & value
           InDeg: int const & value

           NId: int const & value
           InDeg: int const & value

           self: TPt< TNGraph > * value
           NId: int const & value
           InDeg: int const & value

           NId: int const & value
           InDeg: int const & value

        """
        return _snap.PNGraph_ReserveNIdInDeg(self, *args)

    def ReserveNIdOutDeg(self, *args):
        """
        ReserveNIdOutDeg(self, int NId, int OutDeg)
        Parameters:
           self: TNGraph * value
           NId: int const & value
           OutDeg: int const & value

           NId: int const & value
           OutDeg: int const & value

           self: TPt< TNGraph > * value
           NId: int const & value
           OutDeg: int const & value

           NId: int const & value
           OutDeg: int const & value

        """
        return _snap.PNGraph_ReserveNIdOutDeg(self, *args)

    def SortNodeAdjV(self):
        """
        SortNodeAdjV(self)
        Parameters:
           self: TNGraph * value




           self: TPt< TNGraph > * value




        """
        return _snap.PNGraph_SortNodeAdjV(self)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNGraph * value


           self: TPt< TNGraph > * value


        """
        return _snap.PNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNGraph const * value


           self: TPt< TNGraph > const * value


        """
        return _snap.PNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNGraph const * value


           self: TPt< TNGraph > const * value


        """
        return _snap.PNGraph_Dump(self, *args)

    def GetSmallGraph(self):
        """
        GetSmallGraph(self) -> PNGraph
        Parameters:
           self: TPt< TNGraph > * value




        """
        return _snap.PNGraph_GetSmallGraph(self)

PNGraph.Save = new_instancemethod(_snap.PNGraph_Save,None,PNGraph)
PNGraph.__deref__ = new_instancemethod(_snap.PNGraph___deref__,None,PNGraph)
PNGraph.__ref__ = new_instancemethod(_snap.PNGraph___ref__,None,PNGraph)
PNGraph.__call__ = new_instancemethod(_snap.PNGraph___call__,None,PNGraph)
PNGraph.Empty = new_instancemethod(_snap.PNGraph_Empty,None,PNGraph)
PNGraph.Clr = new_instancemethod(_snap.PNGraph_Clr,None,PNGraph)
PNGraph.GetRefs = new_instancemethod(_snap.PNGraph_GetRefs,None,PNGraph)
PNGraph.Load = new_instancemethod(_snap.PNGraph_Load,None,PNGraph)
PNGraph.HasFlag = new_instancemethod(_snap.PNGraph_HasFlag,None,PNGraph)
PNGraph.GetNodes = new_instancemethod(_snap.PNGraph_GetNodes,None,PNGraph)
PNGraph.AddNode = new_instancemethod(_snap.PNGraph_AddNode,None,PNGraph)
PNGraph.AddNodeUnchecked = new_instancemethod(_snap.PNGraph_AddNodeUnchecked,None,PNGraph)
PNGraph.DelNode = new_instancemethod(_snap.PNGraph_DelNode,None,PNGraph)
PNGraph.IsNode = new_instancemethod(_snap.PNGraph_IsNode,None,PNGraph)
PNGraph.BegNI = new_instancemethod(_snap.PNGraph_BegNI,None,PNGraph)
PNGraph.EndNI = new_instancemethod(_snap.PNGraph_EndNI,None,PNGraph)
PNGraph.GetNI = new_instancemethod(_snap.PNGraph_GetNI,None,PNGraph)
PNGraph.GetMxNId = new_instancemethod(_snap.PNGraph_GetMxNId,None,PNGraph)
PNGraph.GetEdges = new_instancemethod(_snap.PNGraph_GetEdges,None,PNGraph)
PNGraph.AddEdge = new_instancemethod(_snap.PNGraph_AddEdge,None,PNGraph)
PNGraph.AddEdgeUnchecked = new_instancemethod(_snap.PNGraph_AddEdgeUnchecked,None,PNGraph)
PNGraph.DelEdge = new_instancemethod(_snap.PNGraph_DelEdge,None,PNGraph)
PNGraph.IsEdge = new_instancemethod(_snap.PNGraph_IsEdge,None,PNGraph)
PNGraph.BegEI = new_instancemethod(_snap.PNGraph_BegEI,None,PNGraph)
PNGraph.EndEI = new_instancemethod(_snap.PNGraph_EndEI,None,PNGraph)
PNGraph.GetEI = new_instancemethod(_snap.PNGraph_GetEI,None,PNGraph)
PNGraph.GetRndNId = new_instancemethod(_snap.PNGraph_GetRndNId,None,PNGraph)
PNGraph.GetRndNI = new_instancemethod(_snap.PNGraph_GetRndNI,None,PNGraph)
PNGraph.GetNIdV = new_instancemethod(_snap.PNGraph_GetNIdV,None,PNGraph)
PNGraph.Reserve = new_instancemethod(_snap.PNGraph_Reserve,None,PNGraph)
PNGraph.ReserveNIdInDeg = new_instancemethod(_snap.PNGraph_ReserveNIdInDeg,None,PNGraph)
PNGraph.ReserveNIdOutDeg = new_instancemethod(_snap.PNGraph_ReserveNIdOutDeg,None,PNGraph)
PNGraph.SortNodeAdjV = new_instancemethod(_snap.PNGraph_SortNodeAdjV,None,PNGraph)
PNGraph.Defrag = new_instancemethod(_snap.PNGraph_Defrag,None,PNGraph)
PNGraph.IsOk = new_instancemethod(_snap.PNGraph_IsOk,None,PNGraph)
PNGraph.Dump = new_instancemethod(_snap.PNGraph_Dump,None,PNGraph)
PNGraph.GetSmallGraph = new_instancemethod(_snap.PNGraph_GetSmallGraph,None,PNGraph)
PNGraph_swigregister = _snap.PNGraph_swigregister
PNGraph_swigregister(PNGraph)

def PrintInfo_PNEANet(*args):
  """
    PrintInfo_PNEANet(PNEANet Graph, TStr Desc = "", TStr OutFNm = "", bool Fast = True)
    Parameters:
       Graph: TPt< TNEANet > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value
       Fast: bool const & value

       Graph: TPt< TNEANet > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value
       Fast: bool const & value

    PrintInfo_PNEANet(PNEANet Graph, TStr Desc = "", TStr OutFNm = "")
    Parameters:
       Graph: TPt< TNEANet > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value

       Graph: TPt< TNEANet > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value

    PrintInfo_PNEANet(PNEANet Graph, TStr Desc = "")
    Parameters:
       Graph: TPt< TNEANet > const & value
       Desc: TStr const & value

       Graph: TPt< TNEANet > const & value
       Desc: TStr const & value

    PrintInfo_PNEANet(PNEANet Graph)
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.PrintInfo_PNEANet(*args)

def GetNodeEcc_PNEANet(*args):
  """
    GetNodeEcc_PNEANet(PNEANet Graph, int NId, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value
       IsDir: bool const & value

    GetNodeEcc_PNEANet(PNEANet Graph, int NId) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value

    """
  return _snap.GetNodeEcc_PNEANet(*args)

def GetPageRank_PNEANet(*args):
  """
    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRank_PNEANet(PNEANet Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRank_PNEANet(*args)

def GetPageRank_v1_PNEANet(*args):
  """
    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRank_v1_PNEANet(PNEANet Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRank_v1_PNEANet(*args)

def GetHits_PNEANet(*args):
  """
    GetHits_PNEANet(PNEANet Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, 
        int MaxIter = 20)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

    GetHits_PNEANet(PNEANet Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

    """
  return _snap.GetHits_PNEANet(*args)

def GetPageRankMP_PNEANet(*args):
  """
    GetPageRankMP_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRankMP_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRankMP_PNEANet(PNEANet Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRankMP_PNEANet(PNEANet Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TNEANet > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRankMP_PNEANet(*args)

def GetHitsMP_PNEANet(*args):
  """
    GetHitsMP_PNEANet(PNEANet Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, 
        int MaxIter = 20)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

    GetHitsMP_PNEANet(PNEANet Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

       Graph: TPt< TNEANet > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

    """
  return _snap.GetHitsMP_PNEANet(*args)

def GetInDegCnt_PNEANet(*args):
  """
    GetInDegCnt_PNEANet(PNEANet Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       DegToCntV: TIntPrV & value

    GetInDegCnt_PNEANet(PNEANet Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TNEANet > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetInDegCnt_PNEANet(*args)

def GetOutDegCnt_PNEANet(*args):
  """
    GetOutDegCnt_PNEANet(PNEANet Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       DegToCntV: TIntPrV & value

    GetOutDegCnt_PNEANet(PNEANet Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TNEANet > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetOutDegCnt_PNEANet(*args)

def GetDegCnt_PNEANet(*args):
  """
    GetDegCnt_PNEANet(PNEANet Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       DegToCntV: TIntPrV & value

    GetDegCnt_PNEANet(PNEANet Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TNEANet > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetDegCnt_PNEANet(*args)

def GetDegSeqV_PNEANet(*args):
  """
    GetDegSeqV_PNEANet(PNEANet Graph, TIntV DegV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegV: TIntV & value

       Graph: TPt< TNEANet > const & value
       DegV: TIntV & value

    GetDegSeqV_PNEANet(PNEANet Graph, TIntV InDegV, TIntV OutDegV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       InDegV: TIntV & value
       OutDegV: TIntV & value

       Graph: TPt< TNEANet > const & value
       InDegV: TIntV & value
       OutDegV: TIntV & value

    """
  return _snap.GetDegSeqV_PNEANet(*args)

def GetTreeSig_PNEANet(*args):
  """
    GetTreeSig_PNEANet(PNEANet Graph, int RootNId, TIntV Sig)
    Parameters:
       Graph: TPt< TNEANet > const & value
       RootNId: int const & value
       Sig: TIntV & value

       Graph: TPt< TNEANet > const & value
       RootNId: int const & value
       Sig: TIntV & value

    GetTreeSig_PNEANet(PNEANet Graph, int RootNId, TIntV Sig, TIntPrV NodeMap)
    Parameters:
       Graph: TPt< TNEANet > const & value
       RootNId: int const & value
       Sig: TIntV & value
       NodeMap: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       RootNId: int const & value
       Sig: TIntV & value
       NodeMap: TIntPrV & value

    """
  return _snap.GetTreeSig_PNEANet(*args)

def GetNodesAtHop_PNEANet(*args):
  """
    GetNodesAtHop_PNEANet(PNEANet Graph, int StartNId, int Hop, TIntV NIdV, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value
       IsDir: bool const & value

    GetNodesAtHop_PNEANet(PNEANet Graph, int StartNId, int Hop, TIntV NIdV) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value

       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value

    """
  return _snap.GetNodesAtHop_PNEANet(*args)

def GetNodesAtHops_PNEANet(*args):
  """
    GetNodesAtHops_PNEANet(PNEANet Graph, int StartNId, TIntPrV HopCntV, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value
       IsDir: bool const & value

    GetNodesAtHops_PNEANet(PNEANet Graph, int StartNId, TIntPrV HopCntV) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value

       Graph: TPt< TNEANet > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value

    """
  return _snap.GetNodesAtHops_PNEANet(*args)

def GetShortPath_PNEANet(*args):
  """
    GetShortPath_PNEANet(PNEANet Graph, int SrcNId, int DstNId, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DstNId: int const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DstNId: int const & value
       IsDir: bool const & value

    GetShortPath_PNEANet(PNEANet Graph, int SrcNId, int DstNId) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DstNId: int const & value

       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DstNId: int const & value

    GetShortPath_PNEANet(PNEANet Graph, int SrcNId, TIntH NIdToDistH, bool IsDir = False, 
        int MaxDist = Mx) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value
       MaxDist: int const & value

       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value
       MaxDist: int const & value

    GetShortPath_PNEANet(PNEANet Graph, int SrcNId, TIntH NIdToDistH, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value

    GetShortPath_PNEANet(PNEANet Graph, int SrcNId, TIntH NIdToDistH) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value

       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value

    """
  return _snap.GetShortPath_PNEANet(*args)

def GetBfsFullDiam_PNEANet(*args):
  """
    GetBfsFullDiam_PNEANet(PNEANet Graph, int NTestNodes, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsFullDiam_PNEANet(PNEANet Graph, int NTestNodes) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value

       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value

    """
  return _snap.GetBfsFullDiam_PNEANet(*args)

def GetBfsEffDiam_PNEANet(*args):
  """
    GetBfsEffDiam_PNEANet(PNEANet Graph, int NTestNodes, bool IsDir, double EffDiam, 
        int FullDiam) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value
       EffDiam: double & value
       FullDiam: int & value

       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value
       EffDiam: double & value
       FullDiam: int & value

    GetBfsEffDiam_PNEANet(PNEANet Graph, int NTestNodes, bool IsDir = False) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsEffDiam_PNEANet(PNEANet Graph, int NTestNodes) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value

       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value

    GetBfsEffDiam_PNEANet(PNEANet Graph, int NTestNodes, bool IsDir) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsEffDiam_PNEANet(PNEANet Graph, int NTestNodes, TIntV SubGraphNIdV, 
        bool IsDir) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       SubGraphNIdV: TIntV const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       NTestNodes: int const & value
       SubGraphNIdV: TIntV const & value
       IsDir: bool const & value

    """
  return _snap.GetBfsEffDiam_PNEANet(*args)

def DrawGViz_PNEANet(*args):
  """
    DrawGViz_PNEANet(PNEANet Graph,  Layout, TStr PltFNm, TStr Desc = TStr(), 
        bool NodeLabels = False, TIntStrH NIdColorH = TIntStrH())
    Parameters:
       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

    DrawGViz_PNEANet(PNEANet Graph,  Layout, TStr PltFNm, TStr Desc = TStr(), 
        bool NodeLabels = False)
    Parameters:
       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

    DrawGViz_PNEANet(PNEANet Graph,  Layout, TStr PltFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value

    DrawGViz_PNEANet(PNEANet Graph,  Layout, TStr PltFNm)
    Parameters:
       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value

       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value

    DrawGViz_PNEANet(PNEANet Graph,  Layout, TStr PltFNm, TStr Desc, TIntStrH NodeLabelH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabelH: TIntStrH const & value

       Graph: TPt< TNEANet > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabelH: TIntStrH const & value

    """
  return _snap.DrawGViz_PNEANet(*args)

def GenGrid_PNEANet(*args):
  """
    GenGrid_PNEANet(int Rows, int Cols, bool IsDir = True) -> PNEANet
    Parameters:
       Rows: int const & value
       Cols: int const & value
       IsDir: bool const & value

       Rows: int const & value
       Cols: int const & value
       IsDir: bool const & value

    GenGrid_PNEANet(int Rows, int Cols) -> PNEANet
    Parameters:
       Rows: int const & value
       Cols: int const & value

       Rows: int const & value
       Cols: int const & value

    """
  return _snap.GenGrid_PNEANet(*args)

def GenStar_PNEANet(*args):
  """
    GenStar_PNEANet(int Nodes, bool IsDir = True) -> PNEANet
    Parameters:
       Nodes: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       IsDir: bool const & value

    GenStar_PNEANet(int Nodes) -> PNEANet
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenStar_PNEANet(*args)

def GenCircle_PNEANet(*args):
  """
    GenCircle_PNEANet(int Nodes, int NodeOutDeg = 1, bool IsDir = True) -> PNEANet
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       NodeOutDeg: int const & value
       IsDir: bool const & value

    GenCircle_PNEANet(int Nodes, int NodeOutDeg = 1) -> PNEANet
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value

       Nodes: int const & value
       NodeOutDeg: int const & value

    GenCircle_PNEANet(int Nodes) -> PNEANet
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenCircle_PNEANet(*args)

def GenTree_PNEANet(*args):
  """
    GenTree_PNEANet(int Fanout, int Levels, bool IsDir = True, bool ChildPointsToParent = True) -> PNEANet
    Parameters:
       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value
       ChildPointsToParent: bool const & value

       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value
       ChildPointsToParent: bool const & value

    GenTree_PNEANet(int Fanout, int Levels, bool IsDir = True) -> PNEANet
    Parameters:
       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value

       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value

    GenTree_PNEANet(int Fanout, int Levels) -> PNEANet
    Parameters:
       Fanout: int const & value
       Levels: int const & value

       Fanout: int const & value
       Levels: int const & value

    """
  return _snap.GenTree_PNEANet(*args)

def GenBaraHierar_PNEANet(*args):
  """
    GenBaraHierar_PNEANet(int Levels, bool IsDir = True) -> PNEANet
    Parameters:
       Levels: int const & value
       IsDir: bool const & value

       Levels: int const & value
       IsDir: bool const & value

    GenBaraHierar_PNEANet(int Levels) -> PNEANet
    Parameters:
       Levels: int const & value

       Levels: int const & value

    """
  return _snap.GenBaraHierar_PNEANet(*args)

def GenRndGnm_PNEANet(*args):
  """
    GenRndGnm_PNEANet(int Nodes, int Edges, bool IsDir = True, TRnd Rnd = Rnd) -> PNEANet
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value
       Rnd: TRnd & value

       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value
       Rnd: TRnd & value

    GenRndGnm_PNEANet(int Nodes, int Edges, bool IsDir = True) -> PNEANet
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value

    GenRndGnm_PNEANet(int Nodes, int Edges) -> PNEANet
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.GenRndGnm_PNEANet(*args)

def LoadEdgeList_PNEANet(*args):
  """
    LoadEdgeList_PNEANet(TStr InFNm, int SrcColId = 0, int DstColId = 1) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

    LoadEdgeList_PNEANet(TStr InFNm, int SrcColId = 0) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value

    LoadEdgeList_PNEANet(TStr InFNm) -> PNEANet
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    LoadEdgeList_PNEANet(TStr InFNm, int SrcColId, int DstColId, char Separator) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       Separator: char const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       Separator: char const & value

    """
  return _snap.LoadEdgeList_PNEANet(*args)

def LoadEdgeListStr_PNEANet(*args):
  """
    LoadEdgeListStr_PNEANet(TStr InFNm, int SrcColId = 0, int DstColId = 1) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

    LoadEdgeListStr_PNEANet(TStr InFNm, int SrcColId = 0) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value

    LoadEdgeListStr_PNEANet(TStr InFNm) -> PNEANet
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    LoadEdgeListStr_PNEANet(TStr InFNm, int SrcColId, int DstColId, TStrHash<(TInt)> StrToNIdH) -> PNEANet
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       StrToNIdH: TStrHash< TInt > & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       StrToNIdH: TStrHash< TInt > & value

    """
  return _snap.LoadEdgeListStr_PNEANet(*args)

def SaveEdgeList_PNEANet(*args):
  """
    SaveEdgeList_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

    SaveEdgeList_PNEANet(PNEANet Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

    """
  return _snap.SaveEdgeList_PNEANet(*args)

def SavePajek_PNEANet(*args):
  """
    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStrH NIdColorH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value

    SavePajek_PNEANet(PNEANet Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH, 
        TIntStrH EIdColorH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value
       EIdColorH: TIntStrH const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value
       EIdColorH: TIntStrH const & value

    """
  return _snap.SavePajek_PNEANet(*args)

def SaveGViz_PNEANet(*args):
  """
    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc = TStr(), bool NodeLabels = False, 
        TIntStrH NIdColorH = TIntStrH())
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc = TStr(), bool NodeLabels = False)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value

    SaveGViz_PNEANet(PNEANet Graph, TStr OutFNm, TStr Desc, TIntStrH NIdLabelH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NIdLabelH: TIntStrH const & value

       Graph: TPt< TNEANet > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NIdLabelH: TIntStrH const & value

    """
  return _snap.SaveGViz_PNEANet(*args)

def ConvertGraph_PNEANet_PNEANet(*args):
  """
    ConvertGraph_PNEANet_PNEANet(PNEANet InGraph, bool RenumberNodes = False) -> PNEANet
    Parameters:
       InGraph: TPt< TNEANet > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PNEANet_PNEANet(PNEANet InGraph) -> PNEANet
    Parameters:
       InGraph: TPt< TNEANet > const & value

       InGraph: TPt< TNEANet > const & value

    """
  return _snap.ConvertGraph_PNEANet_PNEANet(*args)

def ConvertGraph_PNEANet_PNGraph(*args):
  """
    ConvertGraph_PNEANet_PNGraph(PNGraph InGraph, bool RenumberNodes = False) -> PNEANet
    Parameters:
       InGraph: TPt< TNGraph > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNGraph > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PNEANet_PNGraph(PNGraph InGraph) -> PNEANet
    Parameters:
       InGraph: TPt< TNGraph > const & value

       InGraph: TPt< TNGraph > const & value

    """
  return _snap.ConvertGraph_PNEANet_PNGraph(*args)

def ConvertGraph_PNEANet_PUNGraph(*args):
  """
    ConvertGraph_PNEANet_PUNGraph(PUNGraph InGraph, bool RenumberNodes = False) -> PNEANet
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TUNGraph > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PNEANet_PUNGraph(PUNGraph InGraph) -> PNEANet
    Parameters:
       InGraph: TPt< TUNGraph > const & value

       InGraph: TPt< TUNGraph > const & value

    """
  return _snap.ConvertGraph_PNEANet_PUNGraph(*args)

def ConvertSubGraph_PNEANet_PNEANet(*args):
  """
    ConvertSubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV NIdV, bool RenumberNodes = False) -> PNEANet
    Parameters:
       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV NIdV) -> PNEANet
    Parameters:
       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PNEANet_PNEANet(*args)

def ConvertSubGraph_PNEANet_PNGraph(*args):
  """
    ConvertSubGraph_PNEANet_PNGraph(PNGraph InGraph, TIntV NIdV, bool RenumberNodes = False) -> PNEANet
    Parameters:
       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PNEANet_PNGraph(PNGraph InGraph, TIntV NIdV) -> PNEANet
    Parameters:
       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PNEANet_PNGraph(*args)

def ConvertSubGraph_PNEANet_PUNGraph(*args):
  """
    ConvertSubGraph_PNEANet_PUNGraph(PUNGraph InGraph, TIntV NIdV, bool RenumberNodes = False) -> PNEANet
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PNEANet_PUNGraph(PUNGraph InGraph, TIntV NIdV) -> PNEANet
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PNEANet_PUNGraph(*args)

def ConvertESubGraph_PNEANet_PNEANet(*args):
  """
    ConvertESubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV EIdV, bool RenumberNodes = False) -> PNEANet
    Parameters:
       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertESubGraph_PNEANet_PNEANet(PNEANet InGraph, TIntV EIdV) -> PNEANet
    Parameters:
       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

    """
  return _snap.ConvertESubGraph_PNEANet_PNEANet(*args)

def GetESubGraph_PNEANet(*args):
  """
    GetESubGraph_PNEANet(PNEANet Graph, TIntV EIdV) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

       Graph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

    GetESubGraph_PNEANet(PNEANet Graph, TIntPrV EdgeV) -> PNEANet
    Parameters:
       Graph: TPt< TNEANet > const & value
       EdgeV: TIntPrV const & value

       Graph: TPt< TNEANet > const & value
       EdgeV: TIntPrV const & value

    """
  return _snap.GetESubGraph_PNEANet(*args)

def GetClustCf_PNEANet(*args):
  """
    GetClustCf_PNEANet(PNEANet Graph, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       SampleNodes: int value

       Graph: TPt< TNEANet > const & value
       SampleNodes: int value

    GetClustCf_PNEANet(PNEANet Graph) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value
       SampleNodes: int value

       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value
       SampleNodes: int value

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value

       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV, int64 ClosedTriadsX, 
        int64 OpenTriadsX, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value
       SampleNodes: int value

       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value
       SampleNodes: int value

    GetClustCf_PNEANet(PNEANet Graph, TFltPrV DegToCCfV, int64 ClosedTriadsX, 
        int64 OpenTriadsX) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value

       Graph: TPt< TNEANet > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value

    """
  return _snap.GetClustCf_PNEANet(*args)

def GetNodeClustCf_PNEANet(*args):
  """
    GetNodeClustCf_PNEANet(PNEANet Graph, int NId) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value

    GetNodeClustCf_PNEANet(PNEANet Graph, TIntFltH NIdCCfH)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdCCfH: TIntFltH & value

       Graph: TPt< TNEANet > const & value
       NIdCCfH: TIntFltH & value

    """
  return _snap.GetNodeClustCf_PNEANet(*args)

def GetTriads_PNEANet(*args):
  """
    GetTriads_PNEANet(PNEANet Graph, int64 ClosedTriads, int64 OpenTriads, 
        int SampleNodes = -1) -> int64
    Parameters:
       Graph: TPt< TNEANet > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value
       SampleNodes: int value

       Graph: TPt< TNEANet > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value
       SampleNodes: int value

    GetTriads_PNEANet(PNEANet Graph, int64 ClosedTriads, int64 OpenTriads) -> int64
    Parameters:
       Graph: TPt< TNEANet > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value

       Graph: TPt< TNEANet > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value

    GetTriads_PNEANet(PNEANet Graph, int SampleNodes = -1) -> int64
    Parameters:
       Graph: TPt< TNEANet > const & value
       SampleNodes: int value

       Graph: TPt< TNEANet > const & value
       SampleNodes: int value

    GetTriads_PNEANet(PNEANet Graph) -> int64
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    GetTriads_PNEANet(PNEANet Graph, TIntTrV NIdCOTriadV, int SampleNodes = -1)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdCOTriadV: TIntTrV & value
       SampleNodes: int value

       Graph: TPt< TNEANet > const & value
       NIdCOTriadV: TIntTrV & value
       SampleNodes: int value

    GetTriads_PNEANet(PNEANet Graph, TIntTrV NIdCOTriadV)
    Parameters:
       Graph: TPt< TNEANet > const & value
       NIdCOTriadV: TIntTrV & value

       Graph: TPt< TNEANet > const & value
       NIdCOTriadV: TIntTrV & value

    """
  return _snap.GetTriads_PNEANet(*args)

def GetTriadEdges_PNEANet(*args):
  """
    GetTriadEdges_PNEANet(PNEANet Graph, int SampleEdges = -1) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       SampleEdges: int value

       Graph: TPt< TNEANet > const & value
       SampleEdges: int value

    GetTriadEdges_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetTriadEdges_PNEANet(*args)

def GetNodeTriads_PNEANet(*args):
  """
    GetNodeTriads_PNEANet(PNEANet Graph, int NId) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value

    GetNodeTriads_PNEANet(PNEANet Graph, int NId) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value

    GetNodeTriads_PNEANet(PNEANet Graph, int NId, TIntSet GroupSet, int OutGroupEdgesX) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId: int const & value
       GroupSet: TIntSet const & value
       OutGroupEdgesX: int & value

       Graph: TPt< TNEANet > const & value
       NId: int const & value
       GroupSet: TIntSet const & value
       OutGroupEdgesX: int & value

    """
  return _snap.GetNodeTriads_PNEANet(*args)

def GetCmnNbrs_PNEANet(*args):
  """
    GetCmnNbrs_PNEANet(PNEANet Graph, int NId1, int NId2) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId1: int const & value
       NId2: int const & value

       Graph: TPt< TNEANet > const & value
       NId1: int const & value
       NId2: int const & value

    GetCmnNbrs_PNEANet(PNEANet Graph, int NId1, int NId2, TIntV NbrV) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       NId1: int const & value
       NId2: int const & value
       NbrV: TIntV & value

       Graph: TPt< TNEANet > const & value
       NId1: int const & value
       NId2: int const & value
       NbrV: TIntV & value

    """
  return _snap.GetCmnNbrs_PNEANet(*args)

def GetModularity_PNEANet(*args):
  """
    GetModularity_PNEANet(PNEANet G, TIntV NIdV, int GEdges = -1) -> double
    Parameters:
       G: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       GEdges: int value

       G: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       GEdges: int value

    GetModularity_PNEANet(PNEANet G, TIntV NIdV) -> double
    Parameters:
       G: TPt< TNEANet > const & value
       NIdV: TIntV const & value

       G: TPt< TNEANet > const & value
       NIdV: TIntV const & value

    GetModularity_PNEANet(PNEANet G, TCnComV CmtyV, int GEdges = -1) -> double
    Parameters:
       G: TPt< TNEANet > const & value
       CmtyV: TCnComV const & value
       GEdges: int value

       G: TPt< TNEANet > const & value
       CmtyV: TCnComV const & value
       GEdges: int value

    GetModularity_PNEANet(PNEANet G, TCnComV CmtyV) -> double
    Parameters:
       G: TPt< TNEANet > const & value
       CmtyV: TCnComV const & value

       G: TPt< TNEANet > const & value
       CmtyV: TCnComV const & value

    """
  return _snap.GetModularity_PNEANet(*args)

def GetAnf_PNEANet(*args):
  """
    GetAnf_PNEANet(PNEANet Graph, int SrcNId, TIntFltKdV DistNbrsV, int MxDist, 
        bool IsDir, int NApprox = 32)
    Parameters:
       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

    GetAnf_PNEANet(PNEANet Graph, int SrcNId, TIntFltKdV DistNbrsV, int MxDist, 
        bool IsDir)
    Parameters:
       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

    GetAnf_PNEANet(PNEANet Graph, TIntFltKdV DistNbrsV, int MxDist, bool IsDir, 
        int NApprox = 32)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TNEANet > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

    GetAnf_PNEANet(PNEANet Graph, TIntFltKdV DistNbrsV, int MxDist, bool IsDir)
    Parameters:
       Graph: TPt< TNEANet > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

    """
  return _snap.GetAnf_PNEANet(*args)

def GetAnfEffDiam_PNEANet(*args):
  """
    GetAnfEffDiam_PNEANet(PNEANet Graph, bool IsDir, double Percentile, int NApprox) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       IsDir: bool const & value
       Percentile: double const & value
       NApprox: int const & value

       Graph: TPt< TNEANet > const & value
       IsDir: bool const & value
       Percentile: double const & value
       NApprox: int const & value

    GetAnfEffDiam_PNEANet(PNEANet Graph, int NRuns = 1, int NApprox = -1) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NRuns: int const value
       NApprox: int value

       Graph: TPt< TNEANet > const & value
       NRuns: int const value
       NApprox: int value

    GetAnfEffDiam_PNEANet(PNEANet Graph, int NRuns = 1) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       NRuns: int const value

       Graph: TPt< TNEANet > const & value
       NRuns: int const value

    GetAnfEffDiam_PNEANet(PNEANet Graph) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.GetAnfEffDiam_PNEANet(*args)

def PlotKCoreEdges_PNEANet(*args):
  """
    PlotKCoreEdges_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotKCoreEdges_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotKCoreEdges_PNEANet(*args)

def PlotKCoreNodes_PNEANet(*args):
  """
    PlotKCoreNodes_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotKCoreNodes_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotKCoreNodes_PNEANet(*args)

def PlotShortPathDistr_PNEANet(*args):
  """
    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr(), 
        int TestNodes = Mx)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       TestNodes: int value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       TestNodes: int value

    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotShortPathDistr_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotShortPathDistr_PNEANet(*args)

def PlotHops_PNEANet(*args):
  """
    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool IsDir = False, int NApprox = 32)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value
       NApprox: int const & value

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool IsDir = False)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotHops_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotHops_PNEANet(*args)

def PlotClustCf_PNEANet(*args):
  """
    PlotClustCf_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotClustCf_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotClustCf_PNEANet(*args)

def PlotSccDistr_PNEANet(*args):
  """
    PlotSccDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotSccDistr_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotSccDistr_PNEANet(*args)

def PlotWccDistr_PNEANet(*args):
  """
    PlotWccDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotWccDistr_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotWccDistr_PNEANet(*args)

def PlotOutDegDistr_PNEANet(*args):
  """
    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False, bool PowerFit = False)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotOutDegDistr_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotOutDegDistr_PNEANet(*args)

def PlotInDegDistr_PNEANet(*args):
  """
    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False, bool PowerFit = False)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotInDegDistr_PNEANet(PNEANet Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNEANet > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotInDegDistr_PNEANet(*args)

def PercentDegree_PNEANet(*args):
  """
    PercentDegree_PNEANet(PNEANet Graph, int Threshold = 0) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value
       Threshold: int const value

       Graph: TPt< TNEANet > const & value
       Threshold: int const value

    PercentDegree_PNEANet(PNEANet Graph) -> double
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.PercentDegree_PNEANet(*args)

def NodesGTEDegree_PNEANet(*args):
  """
    NodesGTEDegree_PNEANet(PNEANet Graph, int Threshold = 0) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value
       Threshold: int const value

       Graph: TPt< TNEANet > const & value
       Threshold: int const value

    NodesGTEDegree_PNEANet(PNEANet Graph) -> int
    Parameters:
       Graph: TPt< TNEANet > const & value

       Graph: TPt< TNEANet > const & value

    """
  return _snap.NodesGTEDegree_PNEANet(*args)

def ToNetwork_PNEANet(*args):
  """
    ToNetwork_PNEANet(PTable Table, TStr SrcCol, TStr DstCol, TStrV SrcAttrs, 
        TStrV DstAttrs, TStrV EdgeAttrs, TAttrAggr AggrPolicy) -> PNEANet
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       SrcAttrs: TStrV & value
       DstAttrs: TStrV & value
       EdgeAttrs: TStrV & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       SrcAttrs: TStrV & value
       DstAttrs: TStrV & value
       EdgeAttrs: TStrV & value
       AggrPolicy: enum TAttrAggr value

    ToNetwork_PNEANet(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNEANet
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

    """
  return _snap.ToNetwork_PNEANet(*args)

def PrintGraphStatTable_PNGraph(*args):
  """
    PrintGraphStatTable_PNGraph(PNGraph G, TStr OutFNm, TStr Desc = "")
    Parameters:
       G: TPt< TNGraph > const & value
       OutFNm: TStr value
       Desc: TStr value

       G: TPt< TNGraph > const & value
       OutFNm: TStr value
       Desc: TStr value

    PrintGraphStatTable_PNGraph(PNGraph G, TStr OutFNm)
    Parameters:
       G: TPt< TNGraph > const & value
       OutFNm: TStr value

       G: TPt< TNGraph > const & value
       OutFNm: TStr value

    """
  return _snap.PrintGraphStatTable_PNGraph(*args)

def PNGraph_New():
  """PNGraph_New() -> PNGraph"""
  return _snap.PNGraph_New()


def GetNodeWcc_PNGraph(*args):
  """
    GetNodeWcc_PNGraph(PNGraph Graph, int NId, TIntV CnCom)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value
       CnCom: TIntV & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value
       CnCom: TIntV & value

    """
  return _snap.GetNodeWcc_PNGraph(*args)

def IsConnected_PNGraph(*args):
  """
    IsConnected_PNGraph(PNGraph Graph) -> bool
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.IsConnected_PNGraph(*args)

def IsWeaklyConn_PNGraph(*args):
  """
    IsWeaklyConn_PNGraph(PNGraph Graph) -> bool
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.IsWeaklyConn_PNGraph(*args)

def GetWccSzCnt_PNGraph(*args):
  """
    GetWccSzCnt_PNGraph(PNGraph Graph, TIntPrV WccSzCnt)
    Parameters:
       Graph: TPt< TNGraph > const & value
       WccSzCnt: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       WccSzCnt: TIntPrV & value

    """
  return _snap.GetWccSzCnt_PNGraph(*args)

def GetWccs_PNGraph(*args):
  """
    GetWccs_PNGraph(PNGraph Graph, TCnComV CnComV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       CnComV: TCnComV & value

       Graph: TPt< TNGraph > const & value
       CnComV: TCnComV & value

    """
  return _snap.GetWccs_PNGraph(*args)

def GetSccSzCnt_PNGraph(*args):
  """
    GetSccSzCnt_PNGraph(PNGraph Graph, TIntPrV SccSzCnt)
    Parameters:
       Graph: TPt< TNGraph > const & value
       SccSzCnt: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       SccSzCnt: TIntPrV & value

    """
  return _snap.GetSccSzCnt_PNGraph(*args)

def GetSccs_PNGraph(*args):
  """
    GetSccs_PNGraph(PNGraph Graph, TCnComV CnComV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       CnComV: TCnComV & value

       Graph: TPt< TNGraph > const & value
       CnComV: TCnComV & value

    """
  return _snap.GetSccs_PNGraph(*args)

def GetMxWccSz_PNGraph(*args):
  """
    GetMxWccSz_PNGraph(PNGraph Graph) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxWccSz_PNGraph(*args)

def GetMxSccSz_PNGraph(*args):
  """
    GetMxSccSz_PNGraph(PNGraph Graph) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxSccSz_PNGraph(*args)

def GetMxWcc_PNGraph(*args):
  """
    GetMxWcc_PNGraph(PNGraph Graph) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxWcc_PNGraph(*args)

def GetMxScc_PNGraph(*args):
  """
    GetMxScc_PNGraph(PNGraph Graph) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxScc_PNGraph(*args)

def GetMxBiCon_PNGraph(*args):
  """
    GetMxBiCon_PNGraph(PNGraph Graph) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxBiCon_PNGraph(*args)

def CntInDegNodes_PNGraph(*args):
  """
    CntInDegNodes_PNGraph(PNGraph Graph, int NodeInDeg) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NodeInDeg: int const & value

       Graph: TPt< TNGraph > const & value
       NodeInDeg: int const & value

    """
  return _snap.CntInDegNodes_PNGraph(*args)

def CntOutDegNodes_PNGraph(*args):
  """
    CntOutDegNodes_PNGraph(PNGraph Graph, int NodeOutDeg) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NodeOutDeg: int const & value

       Graph: TPt< TNGraph > const & value
       NodeOutDeg: int const & value

    """
  return _snap.CntOutDegNodes_PNGraph(*args)

def CntDegNodes_PNGraph(*args):
  """
    CntDegNodes_PNGraph(PNGraph Graph, int NodeDeg) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NodeDeg: int const & value

       Graph: TPt< TNGraph > const & value
       NodeDeg: int const & value

    """
  return _snap.CntDegNodes_PNGraph(*args)

def CntNonZNodes_PNGraph(*args):
  """
    CntNonZNodes_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.CntNonZNodes_PNGraph(*args)

def CntEdgesToSet_PNGraph(*args):
  """
    CntEdgesToSet_PNGraph(PNGraph Graph, int NId, TIntSet NodeSet) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value
       NodeSet: TIntSet const & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value
       NodeSet: TIntSet const & value

    """
  return _snap.CntEdgesToSet_PNGraph(*args)

def GetMxDegNId_PNGraph(*args):
  """
    GetMxDegNId_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxDegNId_PNGraph(*args)

def GetMxInDegNId_PNGraph(*args):
  """
    GetMxInDegNId_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxInDegNId_PNGraph(*args)

def GetMxOutDegNId_PNGraph(*args):
  """
    GetMxOutDegNId_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetMxOutDegNId_PNGraph(*args)

def GetNodeInDegV_PNGraph(*args):
  """
    GetNodeInDegV_PNGraph(PNGraph Graph, TIntPrV NIdInDegV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdInDegV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       NIdInDegV: TIntPrV & value

    """
  return _snap.GetNodeInDegV_PNGraph(*args)

def GetNodeOutDegV_PNGraph(*args):
  """
    GetNodeOutDegV_PNGraph(PNGraph Graph, TIntPrV NIdOutDegV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdOutDegV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       NIdOutDegV: TIntPrV & value

    """
  return _snap.GetNodeOutDegV_PNGraph(*args)

def CntUniqUndirEdges_PNGraph(*args):
  """
    CntUniqUndirEdges_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.CntUniqUndirEdges_PNGraph(*args)

def CntUniqDirEdges_PNGraph(*args):
  """
    CntUniqDirEdges_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.CntUniqDirEdges_PNGraph(*args)

def CntUniqBiDirEdges_PNGraph(*args):
  """
    CntUniqBiDirEdges_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.CntUniqBiDirEdges_PNGraph(*args)

def CntSelfEdges_PNGraph(*args):
  """
    CntSelfEdges_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.CntSelfEdges_PNGraph(*args)

def GetUnDir_PNGraph(*args):
  """
    GetUnDir_PNGraph(PNGraph Graph) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetUnDir_PNGraph(*args)

def MakeUnDir_PNGraph(*args):
  """
    MakeUnDir_PNGraph(PNGraph Graph)
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.MakeUnDir_PNGraph(*args)

def AddSelfEdges_PNGraph(*args):
  """
    AddSelfEdges_PNGraph(PNGraph Graph)
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.AddSelfEdges_PNGraph(*args)

def DelSelfEdges_PNGraph(*args):
  """
    DelSelfEdges_PNGraph(PNGraph Graph)
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.DelSelfEdges_PNGraph(*args)

def DelNodes_PNGraph(*args):
  """
    DelNodes_PNGraph(PNGraph Graph, TIntV NIdV)
    Parameters:
       Graph: TPt< TNGraph > & value
       NIdV: TIntV const & value

       Graph: TPt< TNGraph > & value
       NIdV: TIntV const & value

    """
  return _snap.DelNodes_PNGraph(*args)

def DelZeroDegNodes_PNGraph(*args):
  """
    DelZeroDegNodes_PNGraph(PNGraph Graph)
    Parameters:
       Graph: TPt< TNGraph > & value

       Graph: TPt< TNGraph > & value

    """
  return _snap.DelZeroDegNodes_PNGraph(*args)

def DelDegKNodes_PNGraph(*args):
  """
    DelDegKNodes_PNGraph(PNGraph Graph, int OutDegK, int InDegK)
    Parameters:
       Graph: TPt< TNGraph > & value
       OutDegK: int const & value
       InDegK: int const & value

       Graph: TPt< TNGraph > & value
       OutDegK: int const & value
       InDegK: int const & value

    """
  return _snap.DelDegKNodes_PNGraph(*args)

def IsTree_PNGraph(*args):
  """
    IsTree_PNGraph(PNGraph Graph) -> bool
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.IsTree_PNGraph(*args)

def GetTreeRootNId_PNGraph(*args):
  """
    GetTreeRootNId_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetTreeRootNId_PNGraph(*args)

def GetBfsTree_PNGraph(*args):
  """
    GetBfsTree_PNGraph(PNGraph Graph, int StartNId, bool FollowOut, bool FollowIn) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

    """
  return _snap.GetBfsTree_PNGraph(*args)

def GetSubTreeSz_PNGraph(*args):
  """
    GetSubTreeSz_PNGraph(PNGraph Graph, int StartNId, bool FollowOut, bool FollowIn) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

    """
  return _snap.GetSubTreeSz_PNGraph(*args)

def GenFull_PNGraph(*args):
  """
    GenFull_PNGraph(int Nodes) -> PNGraph
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenFull_PNGraph(*args)

def LoadConnList_PNGraph(*args):
  """
    LoadConnList_PNGraph(TStr InFNm) -> PNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    """
  return _snap.LoadConnList_PNGraph(*args)

def LoadConnListStr_PNGraph(*args):
  """
    LoadConnListStr_PNGraph(TStr InFNm, TStrHash<(TInt)> StrToNIdH) -> PNGraph
    Parameters:
       InFNm: TStr const & value
       StrToNIdH: TStrHash< TInt > & value

       InFNm: TStr const & value
       StrToNIdH: TStrHash< TInt > & value

    """
  return _snap.LoadConnListStr_PNGraph(*args)

def LoadPajek_PNGraph(*args):
  """
    LoadPajek_PNGraph(TStr InFNm) -> PNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    """
  return _snap.LoadPajek_PNGraph(*args)

def SaveMatlabSparseMtx_PNGraph(*args):
  """
    SaveMatlabSparseMtx_PNGraph(PNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

    """
  return _snap.SaveMatlabSparseMtx_PNGraph(*args)

def GetKCore_PNGraph(*args):
  """
    GetKCore_PNGraph(PNGraph Graph, int K) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value
       K: int const & value

       Graph: TPt< TNGraph > const & value
       K: int const & value

    """
  return _snap.GetKCore_PNGraph(*args)

def GetKCoreEdges_PNGraph(*args):
  """
    GetKCoreEdges_PNGraph(PNGraph Graph, TIntPrV CoreIdSzV) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       CoreIdSzV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       CoreIdSzV: TIntPrV & value

    """
  return _snap.GetKCoreEdges_PNGraph(*args)

def GetKCoreNodes_PNGraph(*args):
  """
    GetKCoreNodes_PNGraph(PNGraph Graph, TIntPrV CoreIdSzV) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       CoreIdSzV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       CoreIdSzV: TIntPrV & value

    """
  return _snap.GetKCoreNodes_PNGraph(*args)

def GetSubGraph_PNGraph(*args):
  """
    GetSubGraph_PNGraph(PNGraph Graph, TIntV NIdV) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

       Graph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.GetSubGraph_PNGraph(*args)

def GetRndSubGraph_PNGraph(*args):
  """
    GetRndSubGraph_PNGraph(PNGraph Graph, int NNodes) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value
       NNodes: int const & value

       Graph: TPt< TNGraph > const & value
       NNodes: int const & value

    """
  return _snap.GetRndSubGraph_PNGraph(*args)

def GetRndESubGraph_PNGraph(*args):
  """
    GetRndESubGraph_PNGraph(PNGraph Graph, int NEdges) -> PNGraph
    Parameters:
       Graph: TPt< TNGraph > const & value
       NEdges: int const & value

       Graph: TPt< TNGraph > const & value
       NEdges: int const & value

    """
  return _snap.GetRndESubGraph_PNGraph(*args)

def GetTriadParticip_PNGraph(*args):
  """
    GetTriadParticip_PNGraph(PNGraph Graph, TIntPrV TriadCntV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       TriadCntV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       TriadCntV: TIntPrV & value

    """
  return _snap.GetTriadParticip_PNGraph(*args)

def CountTriangles_PNGraph(*args):
  """
    CountTriangles_PNGraph(PNGraph Graph) -> int64
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.CountTriangles_PNGraph(*args)

def GetTriangleCnt_PNGraph(*args):
  """
    GetTriangleCnt_PNGraph(PNGraph Graph) -> int64
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetTriangleCnt_PNGraph(*args)

def GetEdgesInOut_PNGraph(*args):
  """
    GetEdgesInOut_PNGraph(PNGraph Graph, TIntV NIdV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

       Graph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.GetEdgesInOut_PNGraph(*args)

def TestAnf_PNGraph():
  """TestAnf_PNGraph()"""
  return _snap.TestAnf_PNGraph()

def MxDegree_PNGraph(*args):
  """
    MxDegree_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.MxDegree_PNGraph(*args)

def PercentMxWcc_PNGraph(*args):
  """
    PercentMxWcc_PNGraph(PNGraph Graph) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.PercentMxWcc_PNGraph(*args)

def PercentMxScc_PNGraph(*args):
  """
    PercentMxScc_PNGraph(PNGraph Graph) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.PercentMxScc_PNGraph(*args)

def ToGraph_PNGraph(*args):
  """
    ToGraph_PNGraph(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNGraph
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

    """
  return _snap.ToGraph_PNGraph(*args)
# redefine TUNGraphEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TUNGraphEdgeI.GetId = GetId

class PUNGraph(object):
    """Proxy of C++ TPt<(TUNGraph)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PUNGraph"""
        return _snap.PUNGraph_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PUNGraph
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPt< TUNGraph > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PUNGraph_Save(self, *args)

    def __deref__(self):
        """
        __deref__(self) -> TUNGraph
        Parameters:
           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph___deref__(self)

    def __ref__(self):
        """
        __ref__(self) -> TUNGraph
        Parameters:
           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph___ref__(self)

    def __call__(self):
        """
        __call__(self) -> TUNGraph
        Parameters:
           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph___call__(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TPt< TUNGraph > * value




        """
        return _snap.PUNGraph_Clr(self)

    def GetRefs(self):
        """
        GetRefs(self) -> int
        Parameters:
           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph_GetRefs(self)

    def Load(self, *args):
        """
        Load(self, TSIn SIn) -> PUNGraph
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

           self: TPt< TUNGraph > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.PUNGraph_Load(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TUNGraph const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

           self: TPt< TUNGraph > const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.PUNGraph_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TUNGraph const * value




           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph_GetNodes(self)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeI) -> int
        Parameters:
           NodeI: TUNGraph::TNodeI const & value

           NodeI: TUNGraph::TNodeI const & value

           NodeI: TUNGraph::TNodeI const & value

           NodeI: TUNGraph::TNodeI const & value

        AddNode(self, int NId, TIntV NbrNIdV) -> int
        Parameters:
           NId: int const & value
           NbrNIdV: TIntV const & value

           NId: int const & value
           NbrNIdV: TIntV const & value

           NId: int const & value
           NbrNIdV: TIntV const & value

           NId: int const & value
           NbrNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int NIdVId) -> int
        Parameters:
           self: TUNGraph * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

           self: TPt< TUNGraph > * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           NIdVId: int const & value

        """
        return _snap.PUNGraph_AddNode(self, *args)

    def AddNodeUnchecked(self, *args):
        """
        AddNodeUnchecked(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNodeUnchecked(self) -> int
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_AddNodeUnchecked(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TUNGraph * value
           NodeI: TUNGraph::TNode const & value

           NodeI: TUNGraph::TNode const & value

           self: TPt< TUNGraph > * value
           NodeI: TUNGraph::TNode const & value

           NodeI: TUNGraph::TNode const & value

        """
        return _snap.PUNGraph_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TUNGraph const * value
           NId: int const & value

           NId: int const & value

           self: TPt< TUNGraph > const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PUNGraph_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TUNGraphNodeI
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TUNGraphNodeI
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TUNGraphNodeI
        Parameters:
           self: TUNGraph * value
           NId: int const & value

           NId: int const & value

           self: TPt< TUNGraph > * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PUNGraph_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TUNGraph const * value




           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph_GetMxNId(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TUNGraph const * value




           self: TPt< TUNGraph > const * value




        """
        return _snap.PUNGraph_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TUNGraph * value
           EdgeI: TUNGraph::TEdgeI const & value

           EdgeI: TUNGraph::TEdgeI const & value

           self: TPt< TUNGraph > * value
           EdgeI: TUNGraph::TEdgeI const & value

           EdgeI: TUNGraph::TEdgeI const & value

        """
        return _snap.PUNGraph_AddEdge(self, *args)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TUNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TUNGraph > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PUNGraph_AddEdgeUnchecked(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TUNGraph * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TUNGraph > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PUNGraph_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TUNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TUNGraph > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PUNGraph_IsEdge(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TUNGraphEdgeI
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TUNGraphEdgeI
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TUNGraph const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TUNGraph > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PUNGraph_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TUNGraph const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

           self: TPt< TUNGraph > const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.PUNGraph_GetNIdV(self, *args)

    def SortNodeAdjV(self):
        """
        SortNodeAdjV(self)
        Parameters:
           self: TUNGraph * value




           self: TPt< TUNGraph > * value




        """
        return _snap.PUNGraph_SortNodeAdjV(self)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TUNGraph * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           self: TPt< TUNGraph > * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.PUNGraph_Reserve(self, *args)

    def ReserveNIdDeg(self, *args):
        """
        ReserveNIdDeg(self, int NId, int Deg)
        Parameters:
           self: TUNGraph * value
           NId: int const & value
           Deg: int const & value

           NId: int const & value
           Deg: int const & value

           self: TPt< TUNGraph > * value
           NId: int const & value
           Deg: int const & value

           NId: int const & value
           Deg: int const & value

        """
        return _snap.PUNGraph_ReserveNIdDeg(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TUNGraph * value


           self: TPt< TUNGraph > * value


        """
        return _snap.PUNGraph_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TUNGraph const * value


           self: TPt< TUNGraph > const * value


        """
        return _snap.PUNGraph_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TUNGraph const * value


           self: TPt< TUNGraph > const * value


        """
        return _snap.PUNGraph_Dump(self, *args)

    def GetSmallGraph(self):
        """
        GetSmallGraph(self) -> PUNGraph
        Parameters:
           self: TPt< TUNGraph > * value




        """
        return _snap.PUNGraph_GetSmallGraph(self)

PUNGraph.Save = new_instancemethod(_snap.PUNGraph_Save,None,PUNGraph)
PUNGraph.__deref__ = new_instancemethod(_snap.PUNGraph___deref__,None,PUNGraph)
PUNGraph.__ref__ = new_instancemethod(_snap.PUNGraph___ref__,None,PUNGraph)
PUNGraph.__call__ = new_instancemethod(_snap.PUNGraph___call__,None,PUNGraph)
PUNGraph.Empty = new_instancemethod(_snap.PUNGraph_Empty,None,PUNGraph)
PUNGraph.Clr = new_instancemethod(_snap.PUNGraph_Clr,None,PUNGraph)
PUNGraph.GetRefs = new_instancemethod(_snap.PUNGraph_GetRefs,None,PUNGraph)
PUNGraph.Load = new_instancemethod(_snap.PUNGraph_Load,None,PUNGraph)
PUNGraph.HasFlag = new_instancemethod(_snap.PUNGraph_HasFlag,None,PUNGraph)
PUNGraph.GetNodes = new_instancemethod(_snap.PUNGraph_GetNodes,None,PUNGraph)
PUNGraph.AddNode = new_instancemethod(_snap.PUNGraph_AddNode,None,PUNGraph)
PUNGraph.AddNodeUnchecked = new_instancemethod(_snap.PUNGraph_AddNodeUnchecked,None,PUNGraph)
PUNGraph.DelNode = new_instancemethod(_snap.PUNGraph_DelNode,None,PUNGraph)
PUNGraph.IsNode = new_instancemethod(_snap.PUNGraph_IsNode,None,PUNGraph)
PUNGraph.BegNI = new_instancemethod(_snap.PUNGraph_BegNI,None,PUNGraph)
PUNGraph.EndNI = new_instancemethod(_snap.PUNGraph_EndNI,None,PUNGraph)
PUNGraph.GetNI = new_instancemethod(_snap.PUNGraph_GetNI,None,PUNGraph)
PUNGraph.GetMxNId = new_instancemethod(_snap.PUNGraph_GetMxNId,None,PUNGraph)
PUNGraph.GetEdges = new_instancemethod(_snap.PUNGraph_GetEdges,None,PUNGraph)
PUNGraph.AddEdge = new_instancemethod(_snap.PUNGraph_AddEdge,None,PUNGraph)
PUNGraph.AddEdgeUnchecked = new_instancemethod(_snap.PUNGraph_AddEdgeUnchecked,None,PUNGraph)
PUNGraph.DelEdge = new_instancemethod(_snap.PUNGraph_DelEdge,None,PUNGraph)
PUNGraph.IsEdge = new_instancemethod(_snap.PUNGraph_IsEdge,None,PUNGraph)
PUNGraph.BegEI = new_instancemethod(_snap.PUNGraph_BegEI,None,PUNGraph)
PUNGraph.EndEI = new_instancemethod(_snap.PUNGraph_EndEI,None,PUNGraph)
PUNGraph.GetEI = new_instancemethod(_snap.PUNGraph_GetEI,None,PUNGraph)
PUNGraph.GetRndNId = new_instancemethod(_snap.PUNGraph_GetRndNId,None,PUNGraph)
PUNGraph.GetRndNI = new_instancemethod(_snap.PUNGraph_GetRndNI,None,PUNGraph)
PUNGraph.GetNIdV = new_instancemethod(_snap.PUNGraph_GetNIdV,None,PUNGraph)
PUNGraph.SortNodeAdjV = new_instancemethod(_snap.PUNGraph_SortNodeAdjV,None,PUNGraph)
PUNGraph.Reserve = new_instancemethod(_snap.PUNGraph_Reserve,None,PUNGraph)
PUNGraph.ReserveNIdDeg = new_instancemethod(_snap.PUNGraph_ReserveNIdDeg,None,PUNGraph)
PUNGraph.Defrag = new_instancemethod(_snap.PUNGraph_Defrag,None,PUNGraph)
PUNGraph.IsOk = new_instancemethod(_snap.PUNGraph_IsOk,None,PUNGraph)
PUNGraph.Dump = new_instancemethod(_snap.PUNGraph_Dump,None,PUNGraph)
PUNGraph.GetSmallGraph = new_instancemethod(_snap.PUNGraph_GetSmallGraph,None,PUNGraph)
PUNGraph_swigregister = _snap.PUNGraph_swigregister
PUNGraph_swigregister(PUNGraph)

def PrintInfo_PNGraph(*args):
  """
    PrintInfo_PNGraph(PNGraph Graph, TStr Desc = "", TStr OutFNm = "", bool Fast = True)
    Parameters:
       Graph: TPt< TNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value
       Fast: bool const & value

       Graph: TPt< TNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value
       Fast: bool const & value

    PrintInfo_PNGraph(PNGraph Graph, TStr Desc = "", TStr OutFNm = "")
    Parameters:
       Graph: TPt< TNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value

       Graph: TPt< TNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value

    PrintInfo_PNGraph(PNGraph Graph, TStr Desc = "")
    Parameters:
       Graph: TPt< TNGraph > const & value
       Desc: TStr const & value

       Graph: TPt< TNGraph > const & value
       Desc: TStr const & value

    PrintInfo_PNGraph(PNGraph Graph)
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.PrintInfo_PNGraph(*args)

def GetNodeEcc_PNGraph(*args):
  """
    GetNodeEcc_PNGraph(PNGraph Graph, int NId, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value
       IsDir: bool const & value

    GetNodeEcc_PNGraph(PNGraph Graph, int NId) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value

    """
  return _snap.GetNodeEcc_PNGraph(*args)

def GetPageRank_PNGraph(*args):
  """
    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRank_PNGraph(PNGraph Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRank_PNGraph(*args)

def GetPageRank_v1_PNGraph(*args):
  """
    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRank_v1_PNGraph(PNGraph Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRank_v1_PNGraph(*args)

def GetHits_PNGraph(*args):
  """
    GetHits_PNGraph(PNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, 
        int MaxIter = 20)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

    GetHits_PNGraph(PNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

    """
  return _snap.GetHits_PNGraph(*args)

def GetPageRankMP_PNGraph(*args):
  """
    GetPageRankMP_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRankMP_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRankMP_PNGraph(PNGraph Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRankMP_PNGraph(PNGraph Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TNGraph > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRankMP_PNGraph(*args)

def GetHitsMP_PNGraph(*args):
  """
    GetHitsMP_PNGraph(PNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, 
        int MaxIter = 20)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

    GetHitsMP_PNGraph(PNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

       Graph: TPt< TNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

    """
  return _snap.GetHitsMP_PNGraph(*args)

def GetInDegCnt_PNGraph(*args):
  """
    GetInDegCnt_PNGraph(PNGraph Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       DegToCntV: TIntPrV & value

    GetInDegCnt_PNGraph(PNGraph Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TNGraph > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetInDegCnt_PNGraph(*args)

def GetOutDegCnt_PNGraph(*args):
  """
    GetOutDegCnt_PNGraph(PNGraph Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       DegToCntV: TIntPrV & value

    GetOutDegCnt_PNGraph(PNGraph Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TNGraph > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetOutDegCnt_PNGraph(*args)

def GetDegCnt_PNGraph(*args):
  """
    GetDegCnt_PNGraph(PNGraph Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       DegToCntV: TIntPrV & value

    GetDegCnt_PNGraph(PNGraph Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TNGraph > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetDegCnt_PNGraph(*args)

def GetDegSeqV_PNGraph(*args):
  """
    GetDegSeqV_PNGraph(PNGraph Graph, TIntV DegV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegV: TIntV & value

       Graph: TPt< TNGraph > const & value
       DegV: TIntV & value

    GetDegSeqV_PNGraph(PNGraph Graph, TIntV InDegV, TIntV OutDegV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       InDegV: TIntV & value
       OutDegV: TIntV & value

       Graph: TPt< TNGraph > const & value
       InDegV: TIntV & value
       OutDegV: TIntV & value

    """
  return _snap.GetDegSeqV_PNGraph(*args)

def GetTreeSig_PNGraph(*args):
  """
    GetTreeSig_PNGraph(PNGraph Graph, int RootNId, TIntV Sig)
    Parameters:
       Graph: TPt< TNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value

       Graph: TPt< TNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value

    GetTreeSig_PNGraph(PNGraph Graph, int RootNId, TIntV Sig, TIntPrV NodeMap)
    Parameters:
       Graph: TPt< TNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value
       NodeMap: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value
       NodeMap: TIntPrV & value

    """
  return _snap.GetTreeSig_PNGraph(*args)

def GetNodesAtHop_PNGraph(*args):
  """
    GetNodesAtHop_PNGraph(PNGraph Graph, int StartNId, int Hop, TIntV NIdV, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value
       IsDir: bool const & value

    GetNodesAtHop_PNGraph(PNGraph Graph, int StartNId, int Hop, TIntV NIdV) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value

       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value

    """
  return _snap.GetNodesAtHop_PNGraph(*args)

def GetNodesAtHops_PNGraph(*args):
  """
    GetNodesAtHops_PNGraph(PNGraph Graph, int StartNId, TIntPrV HopCntV, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value
       IsDir: bool const & value

    GetNodesAtHops_PNGraph(PNGraph Graph, int StartNId, TIntPrV HopCntV) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value

       Graph: TPt< TNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value

    """
  return _snap.GetNodesAtHops_PNGraph(*args)

def GetShortPath_PNGraph(*args):
  """
    GetShortPath_PNGraph(PNGraph Graph, int SrcNId, int DstNId, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value
       IsDir: bool const & value

    GetShortPath_PNGraph(PNGraph Graph, int SrcNId, int DstNId) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value

       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value

    GetShortPath_PNGraph(PNGraph Graph, int SrcNId, TIntH NIdToDistH, bool IsDir = False, 
        int MaxDist = Mx) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value
       MaxDist: int const & value

       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value
       MaxDist: int const & value

    GetShortPath_PNGraph(PNGraph Graph, int SrcNId, TIntH NIdToDistH, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value

    GetShortPath_PNGraph(PNGraph Graph, int SrcNId, TIntH NIdToDistH) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value

       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value

    """
  return _snap.GetShortPath_PNGraph(*args)

def GetBfsFullDiam_PNGraph(*args):
  """
    GetBfsFullDiam_PNGraph(PNGraph Graph, int NTestNodes, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsFullDiam_PNGraph(PNGraph Graph, int NTestNodes) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value

       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value

    """
  return _snap.GetBfsFullDiam_PNGraph(*args)

def GetBfsEffDiam_PNGraph(*args):
  """
    GetBfsEffDiam_PNGraph(PNGraph Graph, int NTestNodes, bool IsDir, double EffDiam, 
        int FullDiam) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value
       EffDiam: double & value
       FullDiam: int & value

       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value
       EffDiam: double & value
       FullDiam: int & value

    GetBfsEffDiam_PNGraph(PNGraph Graph, int NTestNodes, bool IsDir = False) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsEffDiam_PNGraph(PNGraph Graph, int NTestNodes) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value

       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value

    GetBfsEffDiam_PNGraph(PNGraph Graph, int NTestNodes, bool IsDir) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsEffDiam_PNGraph(PNGraph Graph, int NTestNodes, TIntV SubGraphNIdV, 
        bool IsDir) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       SubGraphNIdV: TIntV const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       NTestNodes: int const & value
       SubGraphNIdV: TIntV const & value
       IsDir: bool const & value

    """
  return _snap.GetBfsEffDiam_PNGraph(*args)

def DrawGViz_PNGraph(*args):
  """
    DrawGViz_PNGraph(PNGraph Graph,  Layout, TStr PltFNm, TStr Desc = TStr(), 
        bool NodeLabels = False, TIntStrH NIdColorH = TIntStrH())
    Parameters:
       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

    DrawGViz_PNGraph(PNGraph Graph,  Layout, TStr PltFNm, TStr Desc = TStr(), 
        bool NodeLabels = False)
    Parameters:
       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

    DrawGViz_PNGraph(PNGraph Graph,  Layout, TStr PltFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value

    DrawGViz_PNGraph(PNGraph Graph,  Layout, TStr PltFNm)
    Parameters:
       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value

       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value

    DrawGViz_PNGraph(PNGraph Graph,  Layout, TStr PltFNm, TStr Desc, TIntStrH NodeLabelH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabelH: TIntStrH const & value

       Graph: TPt< TNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabelH: TIntStrH const & value

    """
  return _snap.DrawGViz_PNGraph(*args)

def GenGrid_PNGraph(*args):
  """
    GenGrid_PNGraph(int Rows, int Cols, bool IsDir = True) -> PNGraph
    Parameters:
       Rows: int const & value
       Cols: int const & value
       IsDir: bool const & value

       Rows: int const & value
       Cols: int const & value
       IsDir: bool const & value

    GenGrid_PNGraph(int Rows, int Cols) -> PNGraph
    Parameters:
       Rows: int const & value
       Cols: int const & value

       Rows: int const & value
       Cols: int const & value

    """
  return _snap.GenGrid_PNGraph(*args)

def GenStar_PNGraph(*args):
  """
    GenStar_PNGraph(int Nodes, bool IsDir = True) -> PNGraph
    Parameters:
       Nodes: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       IsDir: bool const & value

    GenStar_PNGraph(int Nodes) -> PNGraph
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenStar_PNGraph(*args)

def GenCircle_PNGraph(*args):
  """
    GenCircle_PNGraph(int Nodes, int NodeOutDeg = 1, bool IsDir = True) -> PNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       NodeOutDeg: int const & value
       IsDir: bool const & value

    GenCircle_PNGraph(int Nodes, int NodeOutDeg = 1) -> PNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value

       Nodes: int const & value
       NodeOutDeg: int const & value

    GenCircle_PNGraph(int Nodes) -> PNGraph
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenCircle_PNGraph(*args)

def GenTree_PNGraph(*args):
  """
    GenTree_PNGraph(int Fanout, int Levels, bool IsDir = True, bool ChildPointsToParent = True) -> PNGraph
    Parameters:
       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value
       ChildPointsToParent: bool const & value

       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value
       ChildPointsToParent: bool const & value

    GenTree_PNGraph(int Fanout, int Levels, bool IsDir = True) -> PNGraph
    Parameters:
       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value

       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value

    GenTree_PNGraph(int Fanout, int Levels) -> PNGraph
    Parameters:
       Fanout: int const & value
       Levels: int const & value

       Fanout: int const & value
       Levels: int const & value

    """
  return _snap.GenTree_PNGraph(*args)

def GenBaraHierar_PNGraph(*args):
  """
    GenBaraHierar_PNGraph(int Levels, bool IsDir = True) -> PNGraph
    Parameters:
       Levels: int const & value
       IsDir: bool const & value

       Levels: int const & value
       IsDir: bool const & value

    GenBaraHierar_PNGraph(int Levels) -> PNGraph
    Parameters:
       Levels: int const & value

       Levels: int const & value

    """
  return _snap.GenBaraHierar_PNGraph(*args)

def GenRndGnm_PNGraph(*args):
  """
    GenRndGnm_PNGraph(int Nodes, int Edges, bool IsDir = True, TRnd Rnd = Rnd) -> PNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value
       Rnd: TRnd & value

       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value
       Rnd: TRnd & value

    GenRndGnm_PNGraph(int Nodes, int Edges, bool IsDir = True) -> PNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value

    GenRndGnm_PNGraph(int Nodes, int Edges) -> PNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.GenRndGnm_PNGraph(*args)

def LoadEdgeList_PNGraph(*args):
  """
    LoadEdgeList_PNGraph(TStr InFNm, int SrcColId = 0, int DstColId = 1) -> PNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

    LoadEdgeList_PNGraph(TStr InFNm, int SrcColId = 0) -> PNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value

    LoadEdgeList_PNGraph(TStr InFNm) -> PNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    LoadEdgeList_PNGraph(TStr InFNm, int SrcColId, int DstColId, char Separator) -> PNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       Separator: char const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       Separator: char const & value

    """
  return _snap.LoadEdgeList_PNGraph(*args)

def LoadEdgeListStr_PNGraph(*args):
  """
    LoadEdgeListStr_PNGraph(TStr InFNm, int SrcColId = 0, int DstColId = 1) -> PNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

    LoadEdgeListStr_PNGraph(TStr InFNm, int SrcColId = 0) -> PNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value

    LoadEdgeListStr_PNGraph(TStr InFNm) -> PNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    LoadEdgeListStr_PNGraph(TStr InFNm, int SrcColId, int DstColId, TStrHash<(TInt)> StrToNIdH) -> PNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       StrToNIdH: TStrHash< TInt > & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       StrToNIdH: TStrHash< TInt > & value

    """
  return _snap.LoadEdgeListStr_PNGraph(*args)

def SaveEdgeList_PNGraph(*args):
  """
    SaveEdgeList_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

    SaveEdgeList_PNGraph(PNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

    """
  return _snap.SaveEdgeList_PNGraph(*args)

def SavePajek_PNGraph(*args):
  """
    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStrH NIdColorH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value

    SavePajek_PNGraph(PNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH, 
        TIntStrH EIdColorH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value
       EIdColorH: TIntStrH const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value
       EIdColorH: TIntStrH const & value

    """
  return _snap.SavePajek_PNGraph(*args)

def SaveGViz_PNGraph(*args):
  """
    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc = TStr(), bool NodeLabels = False, 
        TIntStrH NIdColorH = TIntStrH())
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc = TStr(), bool NodeLabels = False)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value

    SaveGViz_PNGraph(PNGraph Graph, TStr OutFNm, TStr Desc, TIntStrH NIdLabelH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NIdLabelH: TIntStrH const & value

       Graph: TPt< TNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NIdLabelH: TIntStrH const & value

    """
  return _snap.SaveGViz_PNGraph(*args)

def ConvertGraph_PNGraph_PUNGraph(*args):
  """
    ConvertGraph_PNGraph_PUNGraph(PUNGraph InGraph, bool RenumberNodes = False) -> PNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TUNGraph > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PNGraph_PUNGraph(PUNGraph InGraph) -> PNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value

       InGraph: TPt< TUNGraph > const & value

    """
  return _snap.ConvertGraph_PNGraph_PUNGraph(*args)

def ConvertGraph_PNGraph_PNGraph(*args):
  """
    ConvertGraph_PNGraph_PNGraph(PNGraph InGraph, bool RenumberNodes = False) -> PNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNGraph > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PNGraph_PNGraph(PNGraph InGraph) -> PNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value

       InGraph: TPt< TNGraph > const & value

    """
  return _snap.ConvertGraph_PNGraph_PNGraph(*args)

def ConvertGraph_PNGraph_PNEANet(*args):
  """
    ConvertGraph_PNGraph_PNEANet(PNEANet InGraph, bool RenumberNodes = False) -> PNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PNGraph_PNEANet(PNEANet InGraph) -> PNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value

       InGraph: TPt< TNEANet > const & value

    """
  return _snap.ConvertGraph_PNGraph_PNEANet(*args)

def ConvertSubGraph_PNGraph_PUNGraph(*args):
  """
    ConvertSubGraph_PNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV, bool RenumberNodes = False) -> PNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV) -> PNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PNGraph_PUNGraph(*args)

def ConvertSubGraph_PNGraph_PNGraph(*args):
  """
    ConvertSubGraph_PNGraph_PNGraph(PNGraph InGraph, TIntV NIdV, bool RenumberNodes = False) -> PNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PNGraph_PNGraph(PNGraph InGraph, TIntV NIdV) -> PNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PNGraph_PNGraph(*args)

def ConvertSubGraph_PNGraph_PNEANet(*args):
  """
    ConvertSubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV NIdV, bool RenumberNodes = False) -> PNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV NIdV) -> PNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PNGraph_PNEANet(*args)

def ConvertESubGraph_PNGraph_PNEANet(*args):
  """
    ConvertESubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV EIdV, bool RenumberNodes = False) -> PNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertESubGraph_PNGraph_PNEANet(PNEANet InGraph, TIntV EIdV) -> PNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

    """
  return _snap.ConvertESubGraph_PNGraph_PNEANet(*args)

def GetClustCf_PNGraph(*args):
  """
    GetClustCf_PNGraph(PNGraph Graph, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       SampleNodes: int value

       Graph: TPt< TNGraph > const & value
       SampleNodes: int value

    GetClustCf_PNGraph(PNGraph Graph) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value
       SampleNodes: int value

       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value
       SampleNodes: int value

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value

       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV, int64 ClosedTriadsX, 
        int64 OpenTriadsX, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value
       SampleNodes: int value

       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value
       SampleNodes: int value

    GetClustCf_PNGraph(PNGraph Graph, TFltPrV DegToCCfV, int64 ClosedTriadsX, 
        int64 OpenTriadsX) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value

       Graph: TPt< TNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value

    """
  return _snap.GetClustCf_PNGraph(*args)

def GetNodeClustCf_PNGraph(*args):
  """
    GetNodeClustCf_PNGraph(PNGraph Graph, int NId) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value

    GetNodeClustCf_PNGraph(PNGraph Graph, TIntFltH NIdCCfH)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdCCfH: TIntFltH & value

       Graph: TPt< TNGraph > const & value
       NIdCCfH: TIntFltH & value

    """
  return _snap.GetNodeClustCf_PNGraph(*args)

def GetTriads_PNGraph(*args):
  """
    GetTriads_PNGraph(PNGraph Graph, int64 ClosedTriads, int64 OpenTriads, 
        int SampleNodes = -1) -> int64
    Parameters:
       Graph: TPt< TNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value
       SampleNodes: int value

       Graph: TPt< TNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value
       SampleNodes: int value

    GetTriads_PNGraph(PNGraph Graph, int64 ClosedTriads, int64 OpenTriads) -> int64
    Parameters:
       Graph: TPt< TNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value

       Graph: TPt< TNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value

    GetTriads_PNGraph(PNGraph Graph, int SampleNodes = -1) -> int64
    Parameters:
       Graph: TPt< TNGraph > const & value
       SampleNodes: int value

       Graph: TPt< TNGraph > const & value
       SampleNodes: int value

    GetTriads_PNGraph(PNGraph Graph) -> int64
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    GetTriads_PNGraph(PNGraph Graph, TIntTrV NIdCOTriadV, int SampleNodes = -1)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdCOTriadV: TIntTrV & value
       SampleNodes: int value

       Graph: TPt< TNGraph > const & value
       NIdCOTriadV: TIntTrV & value
       SampleNodes: int value

    GetTriads_PNGraph(PNGraph Graph, TIntTrV NIdCOTriadV)
    Parameters:
       Graph: TPt< TNGraph > const & value
       NIdCOTriadV: TIntTrV & value

       Graph: TPt< TNGraph > const & value
       NIdCOTriadV: TIntTrV & value

    """
  return _snap.GetTriads_PNGraph(*args)

def GetTriadEdges_PNGraph(*args):
  """
    GetTriadEdges_PNGraph(PNGraph Graph, int SampleEdges = -1) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       SampleEdges: int value

       Graph: TPt< TNGraph > const & value
       SampleEdges: int value

    GetTriadEdges_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetTriadEdges_PNGraph(*args)

def GetNodeTriads_PNGraph(*args):
  """
    GetNodeTriads_PNGraph(PNGraph Graph, int NId) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value

    GetNodeTriads_PNGraph(PNGraph Graph, int NId) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value

    GetNodeTriads_PNGraph(PNGraph Graph, int NId, TIntSet GroupSet, int OutGroupEdgesX) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId: int const & value
       GroupSet: TIntSet const & value
       OutGroupEdgesX: int & value

       Graph: TPt< TNGraph > const & value
       NId: int const & value
       GroupSet: TIntSet const & value
       OutGroupEdgesX: int & value

    """
  return _snap.GetNodeTriads_PNGraph(*args)

def GetCmnNbrs_PNGraph(*args):
  """
    GetCmnNbrs_PNGraph(PNGraph Graph, int NId1, int NId2) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId1: int const & value
       NId2: int const & value

       Graph: TPt< TNGraph > const & value
       NId1: int const & value
       NId2: int const & value

    GetCmnNbrs_PNGraph(PNGraph Graph, int NId1, int NId2, TIntV NbrV) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       NId1: int const & value
       NId2: int const & value
       NbrV: TIntV & value

       Graph: TPt< TNGraph > const & value
       NId1: int const & value
       NId2: int const & value
       NbrV: TIntV & value

    """
  return _snap.GetCmnNbrs_PNGraph(*args)

def GetModularity_PNGraph(*args):
  """
    GetModularity_PNGraph(PNGraph G, TIntV NIdV, int GEdges = -1) -> double
    Parameters:
       G: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       GEdges: int value

       G: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       GEdges: int value

    GetModularity_PNGraph(PNGraph G, TIntV NIdV) -> double
    Parameters:
       G: TPt< TNGraph > const & value
       NIdV: TIntV const & value

       G: TPt< TNGraph > const & value
       NIdV: TIntV const & value

    GetModularity_PNGraph(PNGraph G, TCnComV CmtyV, int GEdges = -1) -> double
    Parameters:
       G: TPt< TNGraph > const & value
       CmtyV: TCnComV const & value
       GEdges: int value

       G: TPt< TNGraph > const & value
       CmtyV: TCnComV const & value
       GEdges: int value

    GetModularity_PNGraph(PNGraph G, TCnComV CmtyV) -> double
    Parameters:
       G: TPt< TNGraph > const & value
       CmtyV: TCnComV const & value

       G: TPt< TNGraph > const & value
       CmtyV: TCnComV const & value

    """
  return _snap.GetModularity_PNGraph(*args)

def GetAnf_PNGraph(*args):
  """
    GetAnf_PNGraph(PNGraph Graph, int SrcNId, TIntFltKdV DistNbrsV, int MxDist, 
        bool IsDir, int NApprox = 32)
    Parameters:
       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

    GetAnf_PNGraph(PNGraph Graph, int SrcNId, TIntFltKdV DistNbrsV, int MxDist, 
        bool IsDir)
    Parameters:
       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

    GetAnf_PNGraph(PNGraph Graph, TIntFltKdV DistNbrsV, int MxDist, bool IsDir, 
        int NApprox = 32)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

    GetAnf_PNGraph(PNGraph Graph, TIntFltKdV DistNbrsV, int MxDist, bool IsDir)
    Parameters:
       Graph: TPt< TNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

    """
  return _snap.GetAnf_PNGraph(*args)

def GetAnfEffDiam_PNGraph(*args):
  """
    GetAnfEffDiam_PNGraph(PNGraph Graph, bool IsDir, double Percentile, int NApprox) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       IsDir: bool const & value
       Percentile: double const & value
       NApprox: int const & value

       Graph: TPt< TNGraph > const & value
       IsDir: bool const & value
       Percentile: double const & value
       NApprox: int const & value

    GetAnfEffDiam_PNGraph(PNGraph Graph, int NRuns = 1, int NApprox = -1) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NRuns: int const value
       NApprox: int value

       Graph: TPt< TNGraph > const & value
       NRuns: int const value
       NApprox: int value

    GetAnfEffDiam_PNGraph(PNGraph Graph, int NRuns = 1) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       NRuns: int const value

       Graph: TPt< TNGraph > const & value
       NRuns: int const value

    GetAnfEffDiam_PNGraph(PNGraph Graph) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.GetAnfEffDiam_PNGraph(*args)

def PlotKCoreEdges_PNGraph(*args):
  """
    PlotKCoreEdges_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotKCoreEdges_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotKCoreEdges_PNGraph(*args)

def PlotKCoreNodes_PNGraph(*args):
  """
    PlotKCoreNodes_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotKCoreNodes_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotKCoreNodes_PNGraph(*args)

def PlotShortPathDistr_PNGraph(*args):
  """
    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        int TestNodes = Mx)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       TestNodes: int value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       TestNodes: int value

    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotShortPathDistr_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotShortPathDistr_PNGraph(*args)

def PlotHops_PNGraph(*args):
  """
    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool IsDir = False, int NApprox = 32)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value
       NApprox: int const & value

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool IsDir = False)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotHops_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotHops_PNGraph(*args)

def PlotClustCf_PNGraph(*args):
  """
    PlotClustCf_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotClustCf_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotClustCf_PNGraph(*args)

def PlotSccDistr_PNGraph(*args):
  """
    PlotSccDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotSccDistr_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotSccDistr_PNGraph(*args)

def PlotWccDistr_PNGraph(*args):
  """
    PlotWccDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotWccDistr_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotWccDistr_PNGraph(*args)

def PlotOutDegDistr_PNGraph(*args):
  """
    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False, bool PowerFit = False)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotOutDegDistr_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotOutDegDistr_PNGraph(*args)

def PlotInDegDistr_PNGraph(*args):
  """
    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False, bool PowerFit = False)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotInDegDistr_PNGraph(PNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotInDegDistr_PNGraph(*args)

def PercentDegree_PNGraph(*args):
  """
    PercentDegree_PNGraph(PNGraph Graph, int Threshold = 0) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value
       Threshold: int const value

       Graph: TPt< TNGraph > const & value
       Threshold: int const value

    PercentDegree_PNGraph(PNGraph Graph) -> double
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.PercentDegree_PNGraph(*args)

def NodesGTEDegree_PNGraph(*args):
  """
    NodesGTEDegree_PNGraph(PNGraph Graph, int Threshold = 0) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value
       Threshold: int const value

       Graph: TPt< TNGraph > const & value
       Threshold: int const value

    NodesGTEDegree_PNGraph(PNGraph Graph) -> int
    Parameters:
       Graph: TPt< TNGraph > const & value

       Graph: TPt< TNGraph > const & value

    """
  return _snap.NodesGTEDegree_PNGraph(*args)

def PrintGraphStatTable_PUNGraph(*args):
  """
    PrintGraphStatTable_PUNGraph(PUNGraph G, TStr OutFNm, TStr Desc = "")
    Parameters:
       G: TPt< TUNGraph > const & value
       OutFNm: TStr value
       Desc: TStr value

       G: TPt< TUNGraph > const & value
       OutFNm: TStr value
       Desc: TStr value

    PrintGraphStatTable_PUNGraph(PUNGraph G, TStr OutFNm)
    Parameters:
       G: TPt< TUNGraph > const & value
       OutFNm: TStr value

       G: TPt< TUNGraph > const & value
       OutFNm: TStr value

    """
  return _snap.PrintGraphStatTable_PUNGraph(*args)

def PUNGraph_New():
  """PUNGraph_New() -> PUNGraph"""
  return _snap.PUNGraph_New()


def GetNodeWcc_PUNGraph(*args):
  """
    GetNodeWcc_PUNGraph(PUNGraph Graph, int NId, TIntV CnCom)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       CnCom: TIntV & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       CnCom: TIntV & value

    """
  return _snap.GetNodeWcc_PUNGraph(*args)

def IsConnected_PUNGraph(*args):
  """
    IsConnected_PUNGraph(PUNGraph Graph) -> bool
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.IsConnected_PUNGraph(*args)

def IsWeaklyConn_PUNGraph(*args):
  """
    IsWeaklyConn_PUNGraph(PUNGraph Graph) -> bool
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.IsWeaklyConn_PUNGraph(*args)

def GetWccSzCnt_PUNGraph(*args):
  """
    GetWccSzCnt_PUNGraph(PUNGraph Graph, TIntPrV WccSzCnt)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       WccSzCnt: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       WccSzCnt: TIntPrV & value

    """
  return _snap.GetWccSzCnt_PUNGraph(*args)

def GetWccs_PUNGraph(*args):
  """
    GetWccs_PUNGraph(PUNGraph Graph, TCnComV CnComV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       CnComV: TCnComV & value

       Graph: TPt< TUNGraph > const & value
       CnComV: TCnComV & value

    """
  return _snap.GetWccs_PUNGraph(*args)

def GetSccSzCnt_PUNGraph(*args):
  """
    GetSccSzCnt_PUNGraph(PUNGraph Graph, TIntPrV SccSzCnt)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SccSzCnt: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       SccSzCnt: TIntPrV & value

    """
  return _snap.GetSccSzCnt_PUNGraph(*args)

def GetSccs_PUNGraph(*args):
  """
    GetSccs_PUNGraph(PUNGraph Graph, TCnComV CnComV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       CnComV: TCnComV & value

       Graph: TPt< TUNGraph > const & value
       CnComV: TCnComV & value

    """
  return _snap.GetSccs_PUNGraph(*args)

def GetMxWccSz_PUNGraph(*args):
  """
    GetMxWccSz_PUNGraph(PUNGraph Graph) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxWccSz_PUNGraph(*args)

def GetMxSccSz_PUNGraph(*args):
  """
    GetMxSccSz_PUNGraph(PUNGraph Graph) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxSccSz_PUNGraph(*args)

def GetMxWcc_PUNGraph(*args):
  """
    GetMxWcc_PUNGraph(PUNGraph Graph) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxWcc_PUNGraph(*args)

def GetMxScc_PUNGraph(*args):
  """
    GetMxScc_PUNGraph(PUNGraph Graph) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxScc_PUNGraph(*args)

def GetMxBiCon_PUNGraph(*args):
  """
    GetMxBiCon_PUNGraph(PUNGraph Graph) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxBiCon_PUNGraph(*args)

def CntInDegNodes_PUNGraph(*args):
  """
    CntInDegNodes_PUNGraph(PUNGraph Graph, int NodeInDeg) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NodeInDeg: int const & value

       Graph: TPt< TUNGraph > const & value
       NodeInDeg: int const & value

    """
  return _snap.CntInDegNodes_PUNGraph(*args)

def CntOutDegNodes_PUNGraph(*args):
  """
    CntOutDegNodes_PUNGraph(PUNGraph Graph, int NodeOutDeg) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NodeOutDeg: int const & value

       Graph: TPt< TUNGraph > const & value
       NodeOutDeg: int const & value

    """
  return _snap.CntOutDegNodes_PUNGraph(*args)

def CntDegNodes_PUNGraph(*args):
  """
    CntDegNodes_PUNGraph(PUNGraph Graph, int NodeDeg) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NodeDeg: int const & value

       Graph: TPt< TUNGraph > const & value
       NodeDeg: int const & value

    """
  return _snap.CntDegNodes_PUNGraph(*args)

def CntNonZNodes_PUNGraph(*args):
  """
    CntNonZNodes_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.CntNonZNodes_PUNGraph(*args)

def CntEdgesToSet_PUNGraph(*args):
  """
    CntEdgesToSet_PUNGraph(PUNGraph Graph, int NId, TIntSet NodeSet) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       NodeSet: TIntSet const & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       NodeSet: TIntSet const & value

    """
  return _snap.CntEdgesToSet_PUNGraph(*args)

def GetMxDegNId_PUNGraph(*args):
  """
    GetMxDegNId_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxDegNId_PUNGraph(*args)

def GetMxInDegNId_PUNGraph(*args):
  """
    GetMxInDegNId_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxInDegNId_PUNGraph(*args)

def GetMxOutDegNId_PUNGraph(*args):
  """
    GetMxOutDegNId_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetMxOutDegNId_PUNGraph(*args)

def GetNodeInDegV_PUNGraph(*args):
  """
    GetNodeInDegV_PUNGraph(PUNGraph Graph, TIntPrV NIdInDegV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdInDegV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       NIdInDegV: TIntPrV & value

    """
  return _snap.GetNodeInDegV_PUNGraph(*args)

def GetNodeOutDegV_PUNGraph(*args):
  """
    GetNodeOutDegV_PUNGraph(PUNGraph Graph, TIntPrV NIdOutDegV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdOutDegV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       NIdOutDegV: TIntPrV & value

    """
  return _snap.GetNodeOutDegV_PUNGraph(*args)

def CntUniqUndirEdges_PUNGraph(*args):
  """
    CntUniqUndirEdges_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.CntUniqUndirEdges_PUNGraph(*args)

def CntUniqDirEdges_PUNGraph(*args):
  """
    CntUniqDirEdges_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.CntUniqDirEdges_PUNGraph(*args)

def CntUniqBiDirEdges_PUNGraph(*args):
  """
    CntUniqBiDirEdges_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.CntUniqBiDirEdges_PUNGraph(*args)

def CntSelfEdges_PUNGraph(*args):
  """
    CntSelfEdges_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.CntSelfEdges_PUNGraph(*args)

def GetUnDir_PUNGraph(*args):
  """
    GetUnDir_PUNGraph(PUNGraph Graph) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetUnDir_PUNGraph(*args)

def MakeUnDir_PUNGraph(*args):
  """
    MakeUnDir_PUNGraph(PUNGraph Graph)
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.MakeUnDir_PUNGraph(*args)

def AddSelfEdges_PUNGraph(*args):
  """
    AddSelfEdges_PUNGraph(PUNGraph Graph)
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.AddSelfEdges_PUNGraph(*args)

def DelSelfEdges_PUNGraph(*args):
  """
    DelSelfEdges_PUNGraph(PUNGraph Graph)
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.DelSelfEdges_PUNGraph(*args)

def DelNodes_PUNGraph(*args):
  """
    DelNodes_PUNGraph(PUNGraph Graph, TIntV NIdV)
    Parameters:
       Graph: TPt< TUNGraph > & value
       NIdV: TIntV const & value

       Graph: TPt< TUNGraph > & value
       NIdV: TIntV const & value

    """
  return _snap.DelNodes_PUNGraph(*args)

def DelZeroDegNodes_PUNGraph(*args):
  """
    DelZeroDegNodes_PUNGraph(PUNGraph Graph)
    Parameters:
       Graph: TPt< TUNGraph > & value

       Graph: TPt< TUNGraph > & value

    """
  return _snap.DelZeroDegNodes_PUNGraph(*args)

def DelDegKNodes_PUNGraph(*args):
  """
    DelDegKNodes_PUNGraph(PUNGraph Graph, int OutDegK, int InDegK)
    Parameters:
       Graph: TPt< TUNGraph > & value
       OutDegK: int const & value
       InDegK: int const & value

       Graph: TPt< TUNGraph > & value
       OutDegK: int const & value
       InDegK: int const & value

    """
  return _snap.DelDegKNodes_PUNGraph(*args)

def IsTree_PUNGraph(*args):
  """
    IsTree_PUNGraph(PUNGraph Graph) -> bool
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.IsTree_PUNGraph(*args)

def GetTreeRootNId_PUNGraph(*args):
  """
    GetTreeRootNId_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetTreeRootNId_PUNGraph(*args)

def GetBfsTree_PUNGraph(*args):
  """
    GetBfsTree_PUNGraph(PUNGraph Graph, int StartNId, bool FollowOut, bool FollowIn) -> PNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

    """
  return _snap.GetBfsTree_PUNGraph(*args)

def GetSubTreeSz_PUNGraph(*args):
  """
    GetSubTreeSz_PUNGraph(PUNGraph Graph, int StartNId, bool FollowOut, bool FollowIn) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       FollowOut: bool const & value
       FollowIn: bool const & value

    """
  return _snap.GetSubTreeSz_PUNGraph(*args)

def GenFull_PUNGraph(*args):
  """
    GenFull_PUNGraph(int Nodes) -> PUNGraph
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenFull_PUNGraph(*args)

def LoadConnList_PUNGraph(*args):
  """
    LoadConnList_PUNGraph(TStr InFNm) -> PUNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    """
  return _snap.LoadConnList_PUNGraph(*args)

def LoadConnListStr_PUNGraph(*args):
  """
    LoadConnListStr_PUNGraph(TStr InFNm, TStrHash<(TInt)> StrToNIdH) -> PUNGraph
    Parameters:
       InFNm: TStr const & value
       StrToNIdH: TStrHash< TInt > & value

       InFNm: TStr const & value
       StrToNIdH: TStrHash< TInt > & value

    """
  return _snap.LoadConnListStr_PUNGraph(*args)

def LoadPajek_PUNGraph(*args):
  """
    LoadPajek_PUNGraph(TStr InFNm) -> PUNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    """
  return _snap.LoadPajek_PUNGraph(*args)

def SaveMatlabSparseMtx_PUNGraph(*args):
  """
    SaveMatlabSparseMtx_PUNGraph(PUNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

    """
  return _snap.SaveMatlabSparseMtx_PUNGraph(*args)

def GetKCore_PUNGraph(*args):
  """
    GetKCore_PUNGraph(PUNGraph Graph, int K) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value
       K: int const & value

       Graph: TPt< TUNGraph > const & value
       K: int const & value

    """
  return _snap.GetKCore_PUNGraph(*args)

def GetKCoreEdges_PUNGraph(*args):
  """
    GetKCoreEdges_PUNGraph(PUNGraph Graph, TIntPrV CoreIdSzV) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       CoreIdSzV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       CoreIdSzV: TIntPrV & value

    """
  return _snap.GetKCoreEdges_PUNGraph(*args)

def GetKCoreNodes_PUNGraph(*args):
  """
    GetKCoreNodes_PUNGraph(PUNGraph Graph, TIntPrV CoreIdSzV) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       CoreIdSzV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       CoreIdSzV: TIntPrV & value

    """
  return _snap.GetKCoreNodes_PUNGraph(*args)

def GetSubGraph_PUNGraph(*args):
  """
    GetSubGraph_PUNGraph(PUNGraph Graph, TIntV NIdV) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

       Graph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.GetSubGraph_PUNGraph(*args)

def GetRndSubGraph_PUNGraph(*args):
  """
    GetRndSubGraph_PUNGraph(PUNGraph Graph, int NNodes) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NNodes: int const & value

       Graph: TPt< TUNGraph > const & value
       NNodes: int const & value

    """
  return _snap.GetRndSubGraph_PUNGraph(*args)

def GetRndESubGraph_PUNGraph(*args):
  """
    GetRndESubGraph_PUNGraph(PUNGraph Graph, int NEdges) -> PUNGraph
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NEdges: int const & value

       Graph: TPt< TUNGraph > const & value
       NEdges: int const & value

    """
  return _snap.GetRndESubGraph_PUNGraph(*args)

def GetTriadParticip_PUNGraph(*args):
  """
    GetTriadParticip_PUNGraph(PUNGraph Graph, TIntPrV TriadCntV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       TriadCntV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       TriadCntV: TIntPrV & value

    """
  return _snap.GetTriadParticip_PUNGraph(*args)

def GetTriangleCnt_PUNGraph(*args):
  """
    GetTriangleCnt_PUNGraph(PUNGraph Graph) -> int64
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetTriangleCnt_PUNGraph(*args)

def GetEdgesInOut_PUNGraph(*args):
  """
    GetEdgesInOut_PUNGraph(PUNGraph Graph, TIntV NIdV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

       Graph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.GetEdgesInOut_PUNGraph(*args)

def TestAnf_PUNGraph():
  """TestAnf_PUNGraph()"""
  return _snap.TestAnf_PUNGraph()

def MxDegree_PUNGraph(*args):
  """
    MxDegree_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.MxDegree_PUNGraph(*args)

def PercentMxWcc_PUNGraph(*args):
  """
    PercentMxWcc_PUNGraph(PUNGraph Graph) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.PercentMxWcc_PUNGraph(*args)

def PercentMxScc_PUNGraph(*args):
  """
    PercentMxScc_PUNGraph(PUNGraph Graph) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.PercentMxScc_PUNGraph(*args)

def ToGraph_PUNGraph(*args):
  """
    ToGraph_PUNGraph(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PUNGraph
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

    """
  return _snap.ToGraph_PUNGraph(*args)
# redefine TNGraphMPEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNGraphMPEdgeI.GetId = GetId

def ToGraphMP3(tspec, *args):
    if tspec == PNGraphMP : return ToGraphMP3_PNGraphMP(*args)
    return None

def ToGraphMP(tspec, *args):
    if tspec == PNGraphMP : return ToGraphMP_PNGraphMP(*args)
    return None

class PNGraphMP(object):
    """Proxy of C++ TPt<(TNGraphMP)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PNGraphMP"""
        return _snap.PNGraphMP_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PNGraphMP
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPt< TNGraphMP > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PNGraphMP_Save(self, *args)

    def __deref__(self):
        """
        __deref__(self) -> TNGraphMP
        Parameters:
           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP___deref__(self)

    def __ref__(self):
        """
        __ref__(self) -> TNGraphMP
        Parameters:
           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP___ref__(self)

    def __call__(self):
        """
        __call__(self) -> TNGraphMP
        Parameters:
           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP___call__(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TPt< TNGraphMP > * value




        """
        return _snap.PNGraphMP_Clr(self)

    def GetRefs(self):
        """
        GetRefs(self) -> int
        Parameters:
           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP_GetRefs(self)

    def Load(self, *args):
        """
        Load(self, TSIn SIn) -> PNGraphMP
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

           self: TPt< TNGraphMP > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.PNGraphMP_Load(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNGraphMP const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

           self: TPt< TNGraphMP > const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.PNGraphMP_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNGraphMP const * value




           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP_GetNodes(self)

    def SetNodes(self, *args):
        """
        SetNodes(self, int Length)
        Parameters:
           self: TNGraphMP * value
           Length: int const & value

           Length: int const & value

           self: TPt< TNGraphMP > * value
           Length: int const & value

           Length: int const & value

        """
        return _snap.PNGraphMP_SetNodes(self, *args)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           NodeId: TNGraphMP::TNodeI const & value

           NodeId: TNGraphMP::TNodeI const & value

           NodeId: TNGraphMP::TNodeI const & value

           NodeId: TNGraphMP::TNodeI const & value

        AddNode(self, int NId, TIntV InNIdV, TIntV OutNIdV) -> int
        Parameters:
           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

           NId: int const & value
           InNIdV: TIntV const & value
           OutNIdV: TIntV const & value

        AddNode(self, int NId, TVecPool<(TInt)> Pool, int SrcVId, int DstVId) -> int
        Parameters:
           self: TNGraphMP * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           self: TPt< TNGraphMP > * value
           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

           NId: int const & value
           Pool: TVecPool< TInt > const & value
           SrcVId: int const & value
           DstVId: int const & value

        """
        return _snap.PNGraphMP_AddNode(self, *args)

    def AddNodeUnchecked(self, *args):
        """
        AddNodeUnchecked(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNodeUnchecked(self) -> int
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_AddNodeUnchecked(self, *args)

    def DelNode(self, *args):
        """
        DelNode(self, int NId)
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        DelNode(self, TNode NodeI)
        Parameters:
           self: TNGraphMP * value
           NodeI: TNGraphMP::TNode const & value

           NodeI: TNGraphMP::TNode const & value

           self: TPt< TNGraphMP > * value
           NodeI: TNGraphMP::TNode const & value

           NodeI: TNGraphMP::TNode const & value

        """
        return _snap.PNGraphMP_DelNode(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNGraphMP const * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNGraphMP > const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNGraphMP_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNGraphMPNodeI
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNGraphMPNodeI
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNGraphMPNodeI
        Parameters:
           self: TNGraphMP * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNGraphMP > * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNGraphMP_GetNI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNGraphMP const * value




           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP_GetMxNId(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TNGraphMP const * value




           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP_Reserved(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNGraphMP const * value




           self: TPt< TNGraphMP > const * value




        """
        return _snap.PNGraphMP_GetEdges(self)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNGraphMP * value
           EdgeI: TNGraphMP::TEdgeI const & value

           EdgeI: TNGraphMP::TEdgeI const & value

           self: TPt< TNGraphMP > * value
           EdgeI: TNGraphMP::TEdgeI const & value

           EdgeI: TNGraphMP::TEdgeI const & value

        """
        return _snap.PNGraphMP_AddEdge(self, *args)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_AddEdgeUnchecked(self, *args)

    def AddOutEdge1(self, *args):
        """
        AddOutEdge1(self, int SrcIdx, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraphMP * value
           SrcIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           SrcIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > * value
           SrcIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           SrcIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_AddOutEdge1(self, *args)

    def AddInEdge1(self, *args):
        """
        AddInEdge1(self, int DstIdx, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNGraphMP * value
           DstIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           DstIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > * value
           DstIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

           DstIdx: int & value
           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_AddInEdge1(self, *args)

    def AddOutEdge2(self, *args):
        """
        AddOutEdge2(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_AddOutEdge2(self, *args)

    def AddInEdge2(self, *args):
        """
        AddInEdge2(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_AddInEdge2(self, *args)

    def AddNodeWithEdges(self, *args):
        """
        AddNodeWithEdges(self, TInt NId, TIntV InNIdV, TIntV OutNIdV)
        Parameters:
           self: TNGraphMP * value
           NId: TInt const & value
           InNIdV: TIntV & value
           OutNIdV: TIntV & value

           NId: TInt const & value
           InNIdV: TIntV & value
           OutNIdV: TIntV & value

           self: TPt< TNGraphMP > * value
           NId: TInt const & value
           InNIdV: TIntV & value
           OutNIdV: TIntV & value

           NId: TInt const & value
           InNIdV: TIntV & value
           OutNIdV: TIntV & value

        """
        return _snap.PNGraphMP_AddNodeWithEdges(self, *args)

    def DelEdge(self, *args):
        """
        DelEdge(self, int SrcNId, int DstNId, bool IsDir = True)
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        DelEdge(self, int SrcNId, int DstNId)
        Parameters:
           self: TNGraphMP * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_DelEdge(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           self: TNGraphMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_IsEdge(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNGraphMPEdgeI
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNGraphMPEdgeI
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNGraphMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNGraphMP > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNGraphMP_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_GetRndNI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNGraphMP const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

           self: TPt< TNGraphMP > const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.PNGraphMP_GetNIdV(self, *args)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNGraphMP * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           self: TPt< TNGraphMP > * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.PNGraphMP_Reserve(self, *args)

    def ReserveNodeDegs(self, *args):
        """
        ReserveNodeDegs(self, int Idx, int InDeg, int OutDeg)
        Parameters:
           self: TNGraphMP * value
           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           self: TPt< TNGraphMP > * value
           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

        """
        return _snap.PNGraphMP_ReserveNodeDegs(self, *args)

    def ReserveNIdInDeg(self, *args):
        """
        ReserveNIdInDeg(self, int NId, int InDeg)
        Parameters:
           self: TNGraphMP * value
           NId: int const & value
           InDeg: int const & value

           NId: int const & value
           InDeg: int const & value

           self: TPt< TNGraphMP > * value
           NId: int const & value
           InDeg: int const & value

           NId: int const & value
           InDeg: int const & value

        """
        return _snap.PNGraphMP_ReserveNIdInDeg(self, *args)

    def ReserveNIdOutDeg(self, *args):
        """
        ReserveNIdOutDeg(self, int NId, int OutDeg)
        Parameters:
           self: TNGraphMP * value
           NId: int const & value
           OutDeg: int const & value

           NId: int const & value
           OutDeg: int const & value

           self: TPt< TNGraphMP > * value
           NId: int const & value
           OutDeg: int const & value

           NId: int const & value
           OutDeg: int const & value

        """
        return _snap.PNGraphMP_ReserveNIdOutDeg(self, *args)

    def SortEdges(self, *args):
        """
        SortEdges(self, int Idx, int InDeg, int OutDeg)
        Parameters:
           self: TNGraphMP * value
           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           self: TPt< TNGraphMP > * value
           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

           Idx: int const & value
           InDeg: int const & value
           OutDeg: int const & value

        """
        return _snap.PNGraphMP_SortEdges(self, *args)

    def SortNodeAdjV(self):
        """
        SortNodeAdjV(self)
        Parameters:
           self: TNGraphMP * value




           self: TPt< TNGraphMP > * value




        """
        return _snap.PNGraphMP_SortNodeAdjV(self)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNGraphMP * value


           self: TPt< TNGraphMP > * value


        """
        return _snap.PNGraphMP_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNGraphMP const * value


           self: TPt< TNGraphMP > const * value


        """
        return _snap.PNGraphMP_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNGraphMP const * value


           self: TPt< TNGraphMP > const * value


        """
        return _snap.PNGraphMP_Dump(self, *args)

    def GetSmallGraph(self):
        """
        GetSmallGraph(self) -> PNGraphMP
        Parameters:
           self: TPt< TNGraphMP > * value




        """
        return _snap.PNGraphMP_GetSmallGraph(self)

PNGraphMP.Save = new_instancemethod(_snap.PNGraphMP_Save,None,PNGraphMP)
PNGraphMP.__deref__ = new_instancemethod(_snap.PNGraphMP___deref__,None,PNGraphMP)
PNGraphMP.__ref__ = new_instancemethod(_snap.PNGraphMP___ref__,None,PNGraphMP)
PNGraphMP.__call__ = new_instancemethod(_snap.PNGraphMP___call__,None,PNGraphMP)
PNGraphMP.Empty = new_instancemethod(_snap.PNGraphMP_Empty,None,PNGraphMP)
PNGraphMP.Clr = new_instancemethod(_snap.PNGraphMP_Clr,None,PNGraphMP)
PNGraphMP.GetRefs = new_instancemethod(_snap.PNGraphMP_GetRefs,None,PNGraphMP)
PNGraphMP.Load = new_instancemethod(_snap.PNGraphMP_Load,None,PNGraphMP)
PNGraphMP.HasFlag = new_instancemethod(_snap.PNGraphMP_HasFlag,None,PNGraphMP)
PNGraphMP.GetNodes = new_instancemethod(_snap.PNGraphMP_GetNodes,None,PNGraphMP)
PNGraphMP.SetNodes = new_instancemethod(_snap.PNGraphMP_SetNodes,None,PNGraphMP)
PNGraphMP.AddNode = new_instancemethod(_snap.PNGraphMP_AddNode,None,PNGraphMP)
PNGraphMP.AddNodeUnchecked = new_instancemethod(_snap.PNGraphMP_AddNodeUnchecked,None,PNGraphMP)
PNGraphMP.DelNode = new_instancemethod(_snap.PNGraphMP_DelNode,None,PNGraphMP)
PNGraphMP.IsNode = new_instancemethod(_snap.PNGraphMP_IsNode,None,PNGraphMP)
PNGraphMP.BegNI = new_instancemethod(_snap.PNGraphMP_BegNI,None,PNGraphMP)
PNGraphMP.EndNI = new_instancemethod(_snap.PNGraphMP_EndNI,None,PNGraphMP)
PNGraphMP.GetNI = new_instancemethod(_snap.PNGraphMP_GetNI,None,PNGraphMP)
PNGraphMP.GetMxNId = new_instancemethod(_snap.PNGraphMP_GetMxNId,None,PNGraphMP)
PNGraphMP.Reserved = new_instancemethod(_snap.PNGraphMP_Reserved,None,PNGraphMP)
PNGraphMP.GetEdges = new_instancemethod(_snap.PNGraphMP_GetEdges,None,PNGraphMP)
PNGraphMP.AddEdge = new_instancemethod(_snap.PNGraphMP_AddEdge,None,PNGraphMP)
PNGraphMP.AddEdgeUnchecked = new_instancemethod(_snap.PNGraphMP_AddEdgeUnchecked,None,PNGraphMP)
PNGraphMP.AddOutEdge1 = new_instancemethod(_snap.PNGraphMP_AddOutEdge1,None,PNGraphMP)
PNGraphMP.AddInEdge1 = new_instancemethod(_snap.PNGraphMP_AddInEdge1,None,PNGraphMP)
PNGraphMP.AddOutEdge2 = new_instancemethod(_snap.PNGraphMP_AddOutEdge2,None,PNGraphMP)
PNGraphMP.AddInEdge2 = new_instancemethod(_snap.PNGraphMP_AddInEdge2,None,PNGraphMP)
PNGraphMP.AddNodeWithEdges = new_instancemethod(_snap.PNGraphMP_AddNodeWithEdges,None,PNGraphMP)
PNGraphMP.DelEdge = new_instancemethod(_snap.PNGraphMP_DelEdge,None,PNGraphMP)
PNGraphMP.IsEdge = new_instancemethod(_snap.PNGraphMP_IsEdge,None,PNGraphMP)
PNGraphMP.BegEI = new_instancemethod(_snap.PNGraphMP_BegEI,None,PNGraphMP)
PNGraphMP.EndEI = new_instancemethod(_snap.PNGraphMP_EndEI,None,PNGraphMP)
PNGraphMP.GetEI = new_instancemethod(_snap.PNGraphMP_GetEI,None,PNGraphMP)
PNGraphMP.GetRndNId = new_instancemethod(_snap.PNGraphMP_GetRndNId,None,PNGraphMP)
PNGraphMP.GetRndNI = new_instancemethod(_snap.PNGraphMP_GetRndNI,None,PNGraphMP)
PNGraphMP.GetNIdV = new_instancemethod(_snap.PNGraphMP_GetNIdV,None,PNGraphMP)
PNGraphMP.Reserve = new_instancemethod(_snap.PNGraphMP_Reserve,None,PNGraphMP)
PNGraphMP.ReserveNodeDegs = new_instancemethod(_snap.PNGraphMP_ReserveNodeDegs,None,PNGraphMP)
PNGraphMP.ReserveNIdInDeg = new_instancemethod(_snap.PNGraphMP_ReserveNIdInDeg,None,PNGraphMP)
PNGraphMP.ReserveNIdOutDeg = new_instancemethod(_snap.PNGraphMP_ReserveNIdOutDeg,None,PNGraphMP)
PNGraphMP.SortEdges = new_instancemethod(_snap.PNGraphMP_SortEdges,None,PNGraphMP)
PNGraphMP.SortNodeAdjV = new_instancemethod(_snap.PNGraphMP_SortNodeAdjV,None,PNGraphMP)
PNGraphMP.Defrag = new_instancemethod(_snap.PNGraphMP_Defrag,None,PNGraphMP)
PNGraphMP.IsOk = new_instancemethod(_snap.PNGraphMP_IsOk,None,PNGraphMP)
PNGraphMP.Dump = new_instancemethod(_snap.PNGraphMP_Dump,None,PNGraphMP)
PNGraphMP.GetSmallGraph = new_instancemethod(_snap.PNGraphMP_GetSmallGraph,None,PNGraphMP)
PNGraphMP_swigregister = _snap.PNGraphMP_swigregister
PNGraphMP_swigregister(PNGraphMP)

def PrintInfo_PUNGraph(*args):
  """
    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc = "", TStr OutFNm = "", bool Fast = True)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value
       Fast: bool const & value

       Graph: TPt< TUNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value
       Fast: bool const & value

    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc = "", TStr OutFNm = "")
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value

       Graph: TPt< TUNGraph > const & value
       Desc: TStr const & value
       OutFNm: TStr const & value

    PrintInfo_PUNGraph(PUNGraph Graph, TStr Desc = "")
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Desc: TStr const & value

       Graph: TPt< TUNGraph > const & value
       Desc: TStr const & value

    PrintInfo_PUNGraph(PUNGraph Graph)
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.PrintInfo_PUNGraph(*args)

def GetNodeEcc_PUNGraph(*args):
  """
    GetNodeEcc_PUNGraph(PUNGraph Graph, int NId, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       IsDir: bool const & value

    GetNodeEcc_PUNGraph(PUNGraph Graph, int NId) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value

    """
  return _snap.GetNodeEcc_PUNGraph(*args)

def GetPageRank_PUNGraph(*args):
  """
    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRank_PUNGraph(PUNGraph Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRank_PUNGraph(*args)

def GetPageRank_v1_PUNGraph(*args):
  """
    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRank_v1_PUNGraph(PUNGraph Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRank_v1_PUNGraph(*args)

def GetHits_PUNGraph(*args):
  """
    GetHits_PUNGraph(PUNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, 
        int MaxIter = 20)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

    GetHits_PUNGraph(PUNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

    """
  return _snap.GetHits_PUNGraph(*args)

def GetPageRankMP_PUNGraph(*args):
  """
    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4, 
        int MaxIter = 100)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value
       MaxIter: int const & value

    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85, double Eps = 1e-4)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value
       Eps: double const & value

    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFltH PRankH, double C = 0.85)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value
       C: double const & value

    GetPageRankMP_PUNGraph(PUNGraph Graph, TIntFltH PRankH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value

       Graph: TPt< TUNGraph > const & value
       PRankH: TIntFltH & value

    """
  return _snap.GetPageRankMP_PUNGraph(*args)

def GetHitsMP_PUNGraph(*args):
  """
    GetHitsMP_PUNGraph(PUNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH, 
        int MaxIter = 20)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value
       MaxIter: int const & value

    GetHitsMP_PUNGraph(PUNGraph Graph, TIntFltH NIdHubH, TIntFltH NIdAuthH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

       Graph: TPt< TUNGraph > const & value
       NIdHubH: TIntFltH & value
       NIdAuthH: TIntFltH & value

    """
  return _snap.GetHitsMP_PUNGraph(*args)

def GetInDegCnt_PUNGraph(*args):
  """
    GetInDegCnt_PUNGraph(PUNGraph Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       DegToCntV: TIntPrV & value

    GetInDegCnt_PUNGraph(PUNGraph Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TUNGraph > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetInDegCnt_PUNGraph(*args)

def GetOutDegCnt_PUNGraph(*args):
  """
    GetOutDegCnt_PUNGraph(PUNGraph Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       DegToCntV: TIntPrV & value

    GetOutDegCnt_PUNGraph(PUNGraph Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TUNGraph > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetOutDegCnt_PUNGraph(*args)

def GetDegCnt_PUNGraph(*args):
  """
    GetDegCnt_PUNGraph(PUNGraph Graph, TIntPrV DegToCntV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCntV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       DegToCntV: TIntPrV & value

    GetDegCnt_PUNGraph(PUNGraph Graph, TFltPrV DegToCntV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCntV: TFltPrV & value

       Graph: TPt< TUNGraph > const & value
       DegToCntV: TFltPrV & value

    """
  return _snap.GetDegCnt_PUNGraph(*args)

def GetDegSeqV_PUNGraph(*args):
  """
    GetDegSeqV_PUNGraph(PUNGraph Graph, TIntV DegV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegV: TIntV & value

       Graph: TPt< TUNGraph > const & value
       DegV: TIntV & value

    GetDegSeqV_PUNGraph(PUNGraph Graph, TIntV InDegV, TIntV OutDegV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       InDegV: TIntV & value
       OutDegV: TIntV & value

       Graph: TPt< TUNGraph > const & value
       InDegV: TIntV & value
       OutDegV: TIntV & value

    """
  return _snap.GetDegSeqV_PUNGraph(*args)

def GetTreeSig_PUNGraph(*args):
  """
    GetTreeSig_PUNGraph(PUNGraph Graph, int RootNId, TIntV Sig)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value

       Graph: TPt< TUNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value

    GetTreeSig_PUNGraph(PUNGraph Graph, int RootNId, TIntV Sig, TIntPrV NodeMap)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value
       NodeMap: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       RootNId: int const & value
       Sig: TIntV & value
       NodeMap: TIntPrV & value

    """
  return _snap.GetTreeSig_PUNGraph(*args)

def GetNodesAtHop_PUNGraph(*args):
  """
    GetNodesAtHop_PUNGraph(PUNGraph Graph, int StartNId, int Hop, TIntV NIdV, 
        bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value
       IsDir: bool const & value

    GetNodesAtHop_PUNGraph(PUNGraph Graph, int StartNId, int Hop, TIntV NIdV) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value

       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       Hop: int const & value
       NIdV: TIntV & value

    """
  return _snap.GetNodesAtHop_PUNGraph(*args)

def GetNodesAtHops_PUNGraph(*args):
  """
    GetNodesAtHops_PUNGraph(PUNGraph Graph, int StartNId, TIntPrV HopCntV, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value
       IsDir: bool const & value

    GetNodesAtHops_PUNGraph(PUNGraph Graph, int StartNId, TIntPrV HopCntV) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value

       Graph: TPt< TUNGraph > const & value
       StartNId: int const & value
       HopCntV: TIntPrV & value

    """
  return _snap.GetNodesAtHops_PUNGraph(*args)

def GetShortPath_PUNGraph(*args):
  """
    GetShortPath_PUNGraph(PUNGraph Graph, int SrcNId, int DstNId, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value
       IsDir: bool const & value

    GetShortPath_PUNGraph(PUNGraph Graph, int SrcNId, int DstNId) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value

       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DstNId: int const & value

    GetShortPath_PUNGraph(PUNGraph Graph, int SrcNId, TIntH NIdToDistH, bool IsDir = False, 
        int MaxDist = Mx) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value
       MaxDist: int const & value

       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value
       MaxDist: int const & value

    GetShortPath_PUNGraph(PUNGraph Graph, int SrcNId, TIntH NIdToDistH, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value
       IsDir: bool const & value

    GetShortPath_PUNGraph(PUNGraph Graph, int SrcNId, TIntH NIdToDistH) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value

       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       NIdToDistH: TIntH & value

    """
  return _snap.GetShortPath_PUNGraph(*args)

def GetBfsFullDiam_PUNGraph(*args):
  """
    GetBfsFullDiam_PUNGraph(PUNGraph Graph, int NTestNodes, bool IsDir = False) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsFullDiam_PUNGraph(PUNGraph Graph, int NTestNodes) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value

       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value

    """
  return _snap.GetBfsFullDiam_PUNGraph(*args)

def GetBfsEffDiam_PUNGraph(*args):
  """
    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int NTestNodes, bool IsDir, double EffDiam, 
        int FullDiam) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value
       EffDiam: double & value
       FullDiam: int & value

       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value
       EffDiam: double & value
       FullDiam: int & value

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int NTestNodes, bool IsDir = False) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int NTestNodes) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value

       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int NTestNodes, bool IsDir) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       IsDir: bool const & value

    GetBfsEffDiam_PUNGraph(PUNGraph Graph, int NTestNodes, TIntV SubGraphNIdV, 
        bool IsDir) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       SubGraphNIdV: TIntV const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       NTestNodes: int const & value
       SubGraphNIdV: TIntV const & value
       IsDir: bool const & value

    """
  return _snap.GetBfsEffDiam_PUNGraph(*args)

def DrawGViz_PUNGraph(*args):
  """
    DrawGViz_PUNGraph(PUNGraph Graph,  Layout, TStr PltFNm, TStr Desc = TStr(), 
        bool NodeLabels = False, TIntStrH NIdColorH = TIntStrH())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

    DrawGViz_PUNGraph(PUNGraph Graph,  Layout, TStr PltFNm, TStr Desc = TStr(), 
        bool NodeLabels = False)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

    DrawGViz_PUNGraph(PUNGraph Graph,  Layout, TStr PltFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value

    DrawGViz_PUNGraph(PUNGraph Graph,  Layout, TStr PltFNm)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value

       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value

    DrawGViz_PUNGraph(PUNGraph Graph,  Layout, TStr PltFNm, TStr Desc, TIntStrH NodeLabelH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabelH: TIntStrH const & value

       Graph: TPt< TUNGraph > const & value
       Layout: TGVizLayout const & value
       PltFNm: TStr const & value
       Desc: TStr const & value
       NodeLabelH: TIntStrH const & value

    """
  return _snap.DrawGViz_PUNGraph(*args)

def GenGrid_PUNGraph(*args):
  """
    GenGrid_PUNGraph(int Rows, int Cols, bool IsDir = True) -> PUNGraph
    Parameters:
       Rows: int const & value
       Cols: int const & value
       IsDir: bool const & value

       Rows: int const & value
       Cols: int const & value
       IsDir: bool const & value

    GenGrid_PUNGraph(int Rows, int Cols) -> PUNGraph
    Parameters:
       Rows: int const & value
       Cols: int const & value

       Rows: int const & value
       Cols: int const & value

    """
  return _snap.GenGrid_PUNGraph(*args)

def GenStar_PUNGraph(*args):
  """
    GenStar_PUNGraph(int Nodes, bool IsDir = True) -> PUNGraph
    Parameters:
       Nodes: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       IsDir: bool const & value

    GenStar_PUNGraph(int Nodes) -> PUNGraph
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenStar_PUNGraph(*args)

def GenCircle_PUNGraph(*args):
  """
    GenCircle_PUNGraph(int Nodes, int NodeOutDeg = 1, bool IsDir = True) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       NodeOutDeg: int const & value
       IsDir: bool const & value

    GenCircle_PUNGraph(int Nodes, int NodeOutDeg = 1) -> PUNGraph
    Parameters:
       Nodes: int const & value
       NodeOutDeg: int const & value

       Nodes: int const & value
       NodeOutDeg: int const & value

    GenCircle_PUNGraph(int Nodes) -> PUNGraph
    Parameters:
       Nodes: int const & value

       Nodes: int const & value

    """
  return _snap.GenCircle_PUNGraph(*args)

def GenTree_PUNGraph(*args):
  """
    GenTree_PUNGraph(int Fanout, int Levels, bool IsDir = True, bool ChildPointsToParent = True) -> PUNGraph
    Parameters:
       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value
       ChildPointsToParent: bool const & value

       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value
       ChildPointsToParent: bool const & value

    GenTree_PUNGraph(int Fanout, int Levels, bool IsDir = True) -> PUNGraph
    Parameters:
       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value

       Fanout: int const & value
       Levels: int const & value
       IsDir: bool const & value

    GenTree_PUNGraph(int Fanout, int Levels) -> PUNGraph
    Parameters:
       Fanout: int const & value
       Levels: int const & value

       Fanout: int const & value
       Levels: int const & value

    """
  return _snap.GenTree_PUNGraph(*args)

def GenBaraHierar_PUNGraph(*args):
  """
    GenBaraHierar_PUNGraph(int Levels, bool IsDir = True) -> PUNGraph
    Parameters:
       Levels: int const & value
       IsDir: bool const & value

       Levels: int const & value
       IsDir: bool const & value

    GenBaraHierar_PUNGraph(int Levels) -> PUNGraph
    Parameters:
       Levels: int const & value

       Levels: int const & value

    """
  return _snap.GenBaraHierar_PUNGraph(*args)

def GenRndGnm_PUNGraph(*args):
  """
    GenRndGnm_PUNGraph(int Nodes, int Edges, bool IsDir = True, TRnd Rnd = Rnd) -> PUNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value
       Rnd: TRnd & value

       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value
       Rnd: TRnd & value

    GenRndGnm_PUNGraph(int Nodes, int Edges, bool IsDir = True) -> PUNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value

       Nodes: int const & value
       Edges: int const & value
       IsDir: bool const & value

    GenRndGnm_PUNGraph(int Nodes, int Edges) -> PUNGraph
    Parameters:
       Nodes: int const & value
       Edges: int const & value

       Nodes: int const & value
       Edges: int const & value

    """
  return _snap.GenRndGnm_PUNGraph(*args)

def LoadEdgeList_PUNGraph(*args):
  """
    LoadEdgeList_PUNGraph(TStr InFNm, int SrcColId = 0, int DstColId = 1) -> PUNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

    LoadEdgeList_PUNGraph(TStr InFNm, int SrcColId = 0) -> PUNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value

    LoadEdgeList_PUNGraph(TStr InFNm) -> PUNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    LoadEdgeList_PUNGraph(TStr InFNm, int SrcColId, int DstColId, char Separator) -> PUNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       Separator: char const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       Separator: char const & value

    """
  return _snap.LoadEdgeList_PUNGraph(*args)

def LoadEdgeListStr_PUNGraph(*args):
  """
    LoadEdgeListStr_PUNGraph(TStr InFNm, int SrcColId = 0, int DstColId = 1) -> PUNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value

    LoadEdgeListStr_PUNGraph(TStr InFNm, int SrcColId = 0) -> PUNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value

       InFNm: TStr const & value
       SrcColId: int const & value

    LoadEdgeListStr_PUNGraph(TStr InFNm) -> PUNGraph
    Parameters:
       InFNm: TStr const & value

       InFNm: TStr const & value

    LoadEdgeListStr_PUNGraph(TStr InFNm, int SrcColId, int DstColId, TStrHash<(TInt)> StrToNIdH) -> PUNGraph
    Parameters:
       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       StrToNIdH: TStrHash< TInt > & value

       InFNm: TStr const & value
       SrcColId: int const & value
       DstColId: int const & value
       StrToNIdH: TStrHash< TInt > & value

    """
  return _snap.LoadEdgeListStr_PUNGraph(*args)

def SaveEdgeList_PUNGraph(*args):
  """
    SaveEdgeList_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

    SaveEdgeList_PUNGraph(PUNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

    """
  return _snap.SaveEdgeList_PUNGraph(*args)

def SavePajek_PUNGraph(*args):
  """
    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStrH NIdColorH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value

    SavePajek_PUNGraph(PUNGraph Graph, TStr OutFNm, TIntStrH NIdColorH, TIntStrH NIdLabelH, 
        TIntStrH EIdColorH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value
       EIdColorH: TIntStrH const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       NIdColorH: TIntStrH const & value
       NIdLabelH: TIntStrH const & value
       EIdColorH: TIntStrH const & value

    """
  return _snap.SavePajek_PUNGraph(*args)

def SaveGViz_PUNGraph(*args):
  """
    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc = TStr(), bool NodeLabels = False, 
        TIntStrH NIdColorH = TIntStrH())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value
       NIdColorH: TIntStrH const & value

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc = TStr(), bool NodeLabels = False)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NodeLabels: bool const & value

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value

    SaveGViz_PUNGraph(PUNGraph Graph, TStr OutFNm, TStr Desc, TIntStrH NIdLabelH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NIdLabelH: TIntStrH const & value

       Graph: TPt< TUNGraph > const & value
       OutFNm: TStr const & value
       Desc: TStr const & value
       NIdLabelH: TIntStrH const & value

    """
  return _snap.SaveGViz_PUNGraph(*args)

def ConvertGraph_PUNGraph_PUNGraph(*args):
  """
    ConvertGraph_PUNGraph_PUNGraph(PUNGraph InGraph, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TUNGraph > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PUNGraph_PUNGraph(PUNGraph InGraph) -> PUNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value

       InGraph: TPt< TUNGraph > const & value

    """
  return _snap.ConvertGraph_PUNGraph_PUNGraph(*args)

def ConvertGraph_PUNGraph_PNGraph(*args):
  """
    ConvertGraph_PUNGraph_PNGraph(PNGraph InGraph, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNGraph > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PUNGraph_PNGraph(PNGraph InGraph) -> PUNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value

       InGraph: TPt< TNGraph > const & value

    """
  return _snap.ConvertGraph_PUNGraph_PNGraph(*args)

def ConvertGraph_PUNGraph_PNEANet(*args):
  """
    ConvertGraph_PUNGraph_PNEANet(PNEANet InGraph, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       RenumberNodes: bool const & value

    ConvertGraph_PUNGraph_PNEANet(PNEANet InGraph) -> PUNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value

       InGraph: TPt< TNEANet > const & value

    """
  return _snap.ConvertGraph_PUNGraph_PNEANet(*args)

def ConvertSubGraph_PUNGraph_PUNGraph(*args):
  """
    ConvertSubGraph_PUNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PUNGraph_PUNGraph(PUNGraph InGraph, TIntV NIdV) -> PUNGraph
    Parameters:
       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PUNGraph_PUNGraph(*args)

def ConvertSubGraph_PUNGraph_PNGraph(*args):
  """
    ConvertSubGraph_PUNGraph_PNGraph(PNGraph InGraph, TIntV NIdV, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PUNGraph_PNGraph(PNGraph InGraph, TIntV NIdV) -> PUNGraph
    Parameters:
       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TNGraph > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PUNGraph_PNGraph(*args)

def ConvertSubGraph_PUNGraph_PNEANet(*args):
  """
    ConvertSubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV NIdV, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertSubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV NIdV) -> PUNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

       InGraph: TPt< TNEANet > const & value
       NIdV: TIntV const & value

    """
  return _snap.ConvertSubGraph_PUNGraph_PNEANet(*args)

def ConvertESubGraph_PUNGraph_PNEANet(*args):
  """
    ConvertESubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV EIdV, bool RenumberNodes = False) -> PUNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value
       RenumberNodes: bool const & value

       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value
       RenumberNodes: bool const & value

    ConvertESubGraph_PUNGraph_PNEANet(PNEANet InGraph, TIntV EIdV) -> PUNGraph
    Parameters:
       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

       InGraph: TPt< TNEANet > const & value
       EIdV: TIntV const & value

    """
  return _snap.ConvertESubGraph_PUNGraph_PNEANet(*args)

def GetClustCf_PUNGraph(*args):
  """
    GetClustCf_PUNGraph(PUNGraph Graph, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SampleNodes: int value

       Graph: TPt< TUNGraph > const & value
       SampleNodes: int value

    GetClustCf_PUNGraph(PUNGraph Graph) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value
       SampleNodes: int value

       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value
       SampleNodes: int value

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value

       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV, int64 ClosedTriadsX, 
        int64 OpenTriadsX, int SampleNodes = -1) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value
       SampleNodes: int value

       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value
       SampleNodes: int value

    GetClustCf_PUNGraph(PUNGraph Graph, TFltPrV DegToCCfV, int64 ClosedTriadsX, 
        int64 OpenTriadsX) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value

       Graph: TPt< TUNGraph > const & value
       DegToCCfV: TFltPrV & value
       ClosedTriadsX: int64 & value
       OpenTriadsX: int64 & value

    """
  return _snap.GetClustCf_PUNGraph(*args)

def GetNodeClustCf_PUNGraph(*args):
  """
    GetNodeClustCf_PUNGraph(PUNGraph Graph, int NId) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value

    GetNodeClustCf_PUNGraph(PUNGraph Graph, TIntFltH NIdCCfH)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdCCfH: TIntFltH & value

       Graph: TPt< TUNGraph > const & value
       NIdCCfH: TIntFltH & value

    """
  return _snap.GetNodeClustCf_PUNGraph(*args)

def GetTriads_PUNGraph(*args):
  """
    GetTriads_PUNGraph(PUNGraph Graph, int64 ClosedTriads, int64 OpenTriads, 
        int SampleNodes = -1) -> int64
    Parameters:
       Graph: TPt< TUNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value
       SampleNodes: int value

       Graph: TPt< TUNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value
       SampleNodes: int value

    GetTriads_PUNGraph(PUNGraph Graph, int64 ClosedTriads, int64 OpenTriads) -> int64
    Parameters:
       Graph: TPt< TUNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value

       Graph: TPt< TUNGraph > const & value
       ClosedTriads: int64 & value
       OpenTriads: int64 & value

    GetTriads_PUNGraph(PUNGraph Graph, int SampleNodes = -1) -> int64
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SampleNodes: int value

       Graph: TPt< TUNGraph > const & value
       SampleNodes: int value

    GetTriads_PUNGraph(PUNGraph Graph) -> int64
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    GetTriads_PUNGraph(PUNGraph Graph, TIntTrV NIdCOTriadV, int SampleNodes = -1)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdCOTriadV: TIntTrV & value
       SampleNodes: int value

       Graph: TPt< TUNGraph > const & value
       NIdCOTriadV: TIntTrV & value
       SampleNodes: int value

    GetTriads_PUNGraph(PUNGraph Graph, TIntTrV NIdCOTriadV)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NIdCOTriadV: TIntTrV & value

       Graph: TPt< TUNGraph > const & value
       NIdCOTriadV: TIntTrV & value

    """
  return _snap.GetTriads_PUNGraph(*args)

def GetTriadEdges_PUNGraph(*args):
  """
    GetTriadEdges_PUNGraph(PUNGraph Graph, int SampleEdges = -1) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SampleEdges: int value

       Graph: TPt< TUNGraph > const & value
       SampleEdges: int value

    GetTriadEdges_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetTriadEdges_PUNGraph(*args)

def GetNodeTriads_PUNGraph(*args):
  """
    GetNodeTriads_PUNGraph(PUNGraph Graph, int NId) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value

    GetNodeTriads_PUNGraph(PUNGraph Graph, int NId) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value

    GetNodeTriads_PUNGraph(PUNGraph Graph, int NId, TIntSet GroupSet, int OutGroupEdgesX) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       GroupSet: TIntSet const & value
       OutGroupEdgesX: int & value

       Graph: TPt< TUNGraph > const & value
       NId: int const & value
       GroupSet: TIntSet const & value
       OutGroupEdgesX: int & value

    """
  return _snap.GetNodeTriads_PUNGraph(*args)

def GetCmnNbrs_PUNGraph(*args):
  """
    GetCmnNbrs_PUNGraph(PUNGraph Graph, int NId1, int NId2) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId1: int const & value
       NId2: int const & value

       Graph: TPt< TUNGraph > const & value
       NId1: int const & value
       NId2: int const & value

    GetCmnNbrs_PUNGraph(PUNGraph Graph, int NId1, int NId2, TIntV NbrV) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NId1: int const & value
       NId2: int const & value
       NbrV: TIntV & value

       Graph: TPt< TUNGraph > const & value
       NId1: int const & value
       NId2: int const & value
       NbrV: TIntV & value

    """
  return _snap.GetCmnNbrs_PUNGraph(*args)

def GetModularity_PUNGraph(*args):
  """
    GetModularity_PUNGraph(PUNGraph G, TIntV NIdV, int GEdges = -1) -> double
    Parameters:
       G: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       GEdges: int value

       G: TPt< TUNGraph > const & value
       NIdV: TIntV const & value
       GEdges: int value

    GetModularity_PUNGraph(PUNGraph G, TIntV NIdV) -> double
    Parameters:
       G: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

       G: TPt< TUNGraph > const & value
       NIdV: TIntV const & value

    GetModularity_PUNGraph(PUNGraph G, TCnComV CmtyV, int GEdges = -1) -> double
    Parameters:
       G: TPt< TUNGraph > const & value
       CmtyV: TCnComV const & value
       GEdges: int value

       G: TPt< TUNGraph > const & value
       CmtyV: TCnComV const & value
       GEdges: int value

    GetModularity_PUNGraph(PUNGraph G, TCnComV CmtyV) -> double
    Parameters:
       G: TPt< TUNGraph > const & value
       CmtyV: TCnComV const & value

       G: TPt< TUNGraph > const & value
       CmtyV: TCnComV const & value

    """
  return _snap.GetModularity_PUNGraph(*args)

def GetAnf_PUNGraph(*args):
  """
    GetAnf_PUNGraph(PUNGraph Graph, int SrcNId, TIntFltKdV DistNbrsV, int MxDist, 
        bool IsDir, int NApprox = 32)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

    GetAnf_PUNGraph(PUNGraph Graph, int SrcNId, TIntFltKdV DistNbrsV, int MxDist, 
        bool IsDir)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       SrcNId: int const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

    GetAnf_PUNGraph(PUNGraph Graph, TIntFltKdV DistNbrsV, int MxDist, bool IsDir, 
        int NApprox = 32)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TUNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value
       NApprox: int const & value

    GetAnf_PUNGraph(PUNGraph Graph, TIntFltKdV DistNbrsV, int MxDist, bool IsDir)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       DistNbrsV: TIntFltKdV & value
       MxDist: int const & value
       IsDir: bool const & value

    """
  return _snap.GetAnf_PUNGraph(*args)

def GetAnfEffDiam_PUNGraph(*args):
  """
    GetAnfEffDiam_PUNGraph(PUNGraph Graph, bool IsDir, double Percentile, int NApprox) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       IsDir: bool const & value
       Percentile: double const & value
       NApprox: int const & value

       Graph: TPt< TUNGraph > const & value
       IsDir: bool const & value
       Percentile: double const & value
       NApprox: int const & value

    GetAnfEffDiam_PUNGraph(PUNGraph Graph, int NRuns = 1, int NApprox = -1) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NRuns: int const value
       NApprox: int value

       Graph: TPt< TUNGraph > const & value
       NRuns: int const value
       NApprox: int value

    GetAnfEffDiam_PUNGraph(PUNGraph Graph, int NRuns = 1) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       NRuns: int const value

       Graph: TPt< TUNGraph > const & value
       NRuns: int const value

    GetAnfEffDiam_PUNGraph(PUNGraph Graph) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.GetAnfEffDiam_PUNGraph(*args)

def PlotKCoreEdges_PUNGraph(*args):
  """
    PlotKCoreEdges_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotKCoreEdges_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotKCoreEdges_PUNGraph(*args)

def PlotKCoreNodes_PUNGraph(*args):
  """
    PlotKCoreNodes_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotKCoreNodes_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotKCoreNodes_PUNGraph(*args)

def PlotShortPathDistr_PUNGraph(*args):
  """
    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        int TestNodes = Mx)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       TestNodes: int value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       TestNodes: int value

    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotShortPathDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotShortPathDistr_PUNGraph(*args)

def PlotHops_PUNGraph(*args):
  """
    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool IsDir = False, int NApprox = 32)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value
       NApprox: int const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value
       NApprox: int const & value

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool IsDir = False)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       IsDir: bool const & value

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotHops_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotHops_PUNGraph(*args)

def PlotClustCf_PUNGraph(*args):
  """
    PlotClustCf_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotClustCf_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotClustCf_PUNGraph(*args)

def PlotSccDistr_PUNGraph(*args):
  """
    PlotSccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotSccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotSccDistr_PUNGraph(*args)

def PlotWccDistr_PUNGraph(*args):
  """
    PlotWccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotWccDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotWccDistr_PUNGraph(*args)

def PlotOutDegDistr_PUNGraph(*args):
  """
    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False, bool PowerFit = False)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotOutDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotOutDegDistr_PUNGraph(*args)

def PlotInDegDistr_PUNGraph(*args):
  """
    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False, bool PowerFit = False)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value
       PowerFit: bool const & value

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr(), 
        bool PlotCCdf = False)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value
       PlotCCdf: bool const & value

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref, TStr DescStr = TStr())
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value
       DescStr: TStr value

    PlotInDegDistr_PUNGraph(PUNGraph Graph, TStr FNmPref)
    Parameters:
       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

       Graph: TPt< TUNGraph > const & value
       FNmPref: TStr const & value

    """
  return _snap.PlotInDegDistr_PUNGraph(*args)

def PercentDegree_PUNGraph(*args):
  """
    PercentDegree_PUNGraph(PUNGraph Graph, int Threshold = 0) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Threshold: int const value

       Graph: TPt< TUNGraph > const & value
       Threshold: int const value

    PercentDegree_PUNGraph(PUNGraph Graph) -> double
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.PercentDegree_PUNGraph(*args)

def NodesGTEDegree_PUNGraph(*args):
  """
    NodesGTEDegree_PUNGraph(PUNGraph Graph, int Threshold = 0) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value
       Threshold: int const value

       Graph: TPt< TUNGraph > const & value
       Threshold: int const value

    NodesGTEDegree_PUNGraph(PUNGraph Graph) -> int
    Parameters:
       Graph: TPt< TUNGraph > const & value

       Graph: TPt< TUNGraph > const & value

    """
  return _snap.NodesGTEDegree_PUNGraph(*args)

def PrintGraphStatTable_PNGraphMP(*args):
  """
    PrintGraphStatTable_PNGraphMP(PNGraphMP G, TStr OutFNm, TStr Desc = "")
    Parameters:
       G: TPt< TNGraphMP > const & value
       OutFNm: TStr value
       Desc: TStr value

       G: TPt< TNGraphMP > const & value
       OutFNm: TStr value
       Desc: TStr value

    PrintGraphStatTable_PNGraphMP(PNGraphMP G, TStr OutFNm)
    Parameters:
       G: TPt< TNGraphMP > const & value
       OutFNm: TStr value

       G: TPt< TNGraphMP > const & value
       OutFNm: TStr value

    """
  return _snap.PrintGraphStatTable_PNGraphMP(*args)

def PNGraphMP_New():
  """PNGraphMP_New() -> PNGraphMP"""
  return _snap.PNGraphMP_New()


def ToGraphMP_PNGraphMP(*args):
  """
    ToGraphMP_PNGraphMP(PTable Table, TStr SrcCol, TStr DstCol) -> PNGraphMP
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value

    """
  return _snap.ToGraphMP_PNGraphMP(*args)

def ToGraphMP3_PNGraphMP(*args):
  """
    ToGraphMP3_PNGraphMP(PTable Table, TStr SrcCol, TStr DstCol) -> PNGraphMP
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value

    """
  return _snap.ToGraphMP3_PNGraphMP(*args)
# redefine TNEANetMPEdgeI.GetId to return a pair of nodes rather than -1
def GetId(self):
    return (self.GetSrcNId(), self.GetDstNId())

TNEANetMPEdgeI.GetId = GetId

def ToNetworkMP(tspec, *args):
    if tspec == PNEANetMP : return ToNetworkMP_PNEANetMP(*args)
    return None

def ToNetworkMP2(tspec, *args):
    if tspec == PNEANetMP : return ToNetworkMP2_PNEANetMP(*args)
    return None

class PNEANetMP(object):
    """Proxy of C++ TPt<(TNEANetMP)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PNEANetMP"""
        return _snap.PNEANetMP_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PNEANetMP
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPt< TNEANetMP > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PNEANetMP_Save(self, *args)

    def __deref__(self):
        """
        __deref__(self) -> TNEANetMP
        Parameters:
           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP___deref__(self)

    def __ref__(self):
        """
        __ref__(self) -> TNEANetMP
        Parameters:
           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP___ref__(self)

    def __call__(self):
        """
        __call__(self) -> TNEANetMP
        Parameters:
           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP___call__(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TPt< TNEANetMP > * value




        """
        return _snap.PNEANetMP_Clr(self)

    def GetRefs(self):
        """
        GetRefs(self) -> int
        Parameters:
           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_GetRefs(self)

    def Load(self, *args):
        """
        Load(self, TSIn SIn) -> PNEANetMP
        Parameters:
           SIn: TSIn & value

           SIn: TSIn & value

           SIn: TSIn & value

           self: TPt< TNEANetMP > * value
           SIn: TSIn & value

           SIn: TSIn & value

        """
        return _snap.PNEANetMP_Load(self, *args)

    def HasFlag(self, *args):
        """
        HasFlag(self,  Flag) -> bool
        Parameters:
           self: TNEANetMP const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

           self: TPt< TNEANetMP > const * value
           Flag: TGraphFlag const & value

           Flag: TGraphFlag const & value

        """
        return _snap.PNEANetMP_HasFlag(self, *args)

    def GetNodes(self):
        """
        GetNodes(self) -> int
        Parameters:
           self: TNEANetMP const * value




           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_GetNodes(self)

    def SetNodes(self, *args):
        """
        SetNodes(self, int Length)
        Parameters:
           self: TNEANetMP * value
           Length: int const & value

           Length: int const & value

           self: TPt< TNEANetMP > * value
           Length: int const & value

           Length: int const & value

        """
        return _snap.PNEANetMP_SetNodes(self, *args)

    def AddNode(self, *args):
        """
        AddNode(self, int NId = -1) -> int
        Parameters:
           NId: int value

           NId: int value

           NId: int value

           NId: int value

        AddNode(self) -> int
        AddNode(self, TNodeI NodeId) -> int
        Parameters:
           self: TNEANetMP * value
           NodeId: TNEANetMP::TNodeI const & value

           NodeId: TNEANetMP::TNodeI const & value

           self: TPt< TNEANetMP > * value
           NodeId: TNEANetMP::TNodeI const & value

           NodeId: TNEANetMP::TNodeI const & value

        """
        return _snap.PNEANetMP_AddNode(self, *args)

    def AddNodeWithEdges(self, *args):
        """
        AddNodeWithEdges(self, TInt NId, TIntV InEIdV, TIntV OutEIdV)
        Parameters:
           self: TNEANetMP * value
           NId: TInt const & value
           InEIdV: TIntV & value
           OutEIdV: TIntV & value

           NId: TInt const & value
           InEIdV: TIntV & value
           OutEIdV: TIntV & value

           self: TPt< TNEANetMP > * value
           NId: TInt const & value
           InEIdV: TIntV & value
           OutEIdV: TIntV & value

           NId: TInt const & value
           InEIdV: TIntV & value
           OutEIdV: TIntV & value

        """
        return _snap.PNEANetMP_AddNodeWithEdges(self, *args)

    def IsNode(self, *args):
        """
        IsNode(self, int NId) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNEANetMP > const * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNEANetMP_IsNode(self, *args)

    def BegNI(self, *args):
        """
        BegNI(self) -> TNodeI
        BegNI(self) -> TNEANetMPNodeI
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_BegNI(self, *args)

    def EndNI(self, *args):
        """
        EndNI(self) -> TNodeI
        EndNI(self) -> TNEANetMPNodeI
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_EndNI(self, *args)

    def GetNI(self, *args):
        """
        GetNI(self, int NId) -> TNodeI
        Parameters:
           NId: int const & value

           NId: int const & value

           NId: int const & value

           NId: int const & value

        GetNI(self, int NId) -> TNEANetMPNodeI
        Parameters:
           self: TNEANetMP * value
           NId: int const & value

           NId: int const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value

           NId: int const & value

        """
        return _snap.PNEANetMP_GetNI(self, *args)

    def BegNAIntI(self, *args):
        """
        BegNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_BegNAIntI(self, *args)

    def EndNAIntI(self, *args):
        """
        EndNAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_EndNAIntI(self, *args)

    def GetNAIntI(self, *args):
        """
        GetNAIntI(self, TStr attr, int NId) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.PNEANetMP_GetNAIntI(self, *args)

    def BegNAStrI(self, *args):
        """
        BegNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_BegNAStrI(self, *args)

    def EndNAStrI(self, *args):
        """
        EndNAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_EndNAStrI(self, *args)

    def GetNAStrI(self, *args):
        """
        GetNAStrI(self, TStr attr, int NId) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.PNEANetMP_GetNAStrI(self, *args)

    def BegNAFltI(self, *args):
        """
        BegNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_BegNAFltI(self, *args)

    def EndNAFltI(self, *args):
        """
        EndNAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_EndNAFltI(self, *args)

    def GetNAFltI(self, *args):
        """
        GetNAFltI(self, TStr attr, int NId) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value
           NId: int const & value

           attr: TStr const & value
           NId: int const & value

        """
        return _snap.PNEANetMP_GetNAFltI(self, *args)

    def AttrNameNI(self, *args):
        """
        AttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        AttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_AttrNameNI(self, *args)

    def AttrValueNI(self, *args):
        """
        AttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        AttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANetMP_AttrValueNI(self, *args)

    def IntAttrNameNI(self, *args):
        """
        IntAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        IntAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_IntAttrNameNI(self, *args)

    def IntAttrValueNI(self, *args):
        """
        IntAttrValueNI(self, TInt NId, TIntV Values)
        Parameters:
           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

           NId: TInt const & value
           Values: TIntV & value

        IntAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TIntV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.PNEANetMP_IntAttrValueNI(self, *args)

    def StrAttrNameNI(self, *args):
        """
        StrAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        StrAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_StrAttrNameNI(self, *args)

    def StrAttrValueNI(self, *args):
        """
        StrAttrValueNI(self, TInt NId, TStrV Values)
        Parameters:
           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

           NId: TInt const & value
           Values: TStrV & value

        StrAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANetMP_StrAttrValueNI(self, *args)

    def FltAttrNameNI(self, *args):
        """
        FltAttrNameNI(self, TInt NId, TStrV Names)
        Parameters:
           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

           NId: TInt const & value
           Names: TStrV & value

        FltAttrNameNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_FltAttrNameNI(self, *args)

    def FltAttrValueNI(self, *args):
        """
        FltAttrValueNI(self, TInt NId, TFltV Values)
        Parameters:
           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

           NId: TInt const & value
           Values: TFltV & value

        FltAttrValueNI(self, TInt NId, TStrIntPrH::TIter NodeHI, TFltV Values)
        Parameters:
           self: TNEANetMP const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           self: TPt< TNEANetMP > const * value
           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           NId: TInt const & value
           NodeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.PNEANetMP_FltAttrValueNI(self, *args)

    def AttrNameEI(self, *args):
        """
        AttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        AttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_AttrNameEI(self, *args)

    def AttrValueEI(self, *args):
        """
        AttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        AttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANetMP_AttrValueEI(self, *args)

    def IntAttrNameEI(self, *args):
        """
        IntAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        IntAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_IntAttrNameEI(self, *args)

    def IntAttrValueEI(self, *args):
        """
        IntAttrValueEI(self, TInt EId, TIntV Values)
        Parameters:
           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

           EId: TInt const & value
           Values: TIntV & value

        IntAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TIntV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TIntV & value

        """
        return _snap.PNEANetMP_IntAttrValueEI(self, *args)

    def StrAttrNameEI(self, *args):
        """
        StrAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        StrAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_StrAttrNameEI(self, *args)

    def StrAttrValueEI(self, *args):
        """
        StrAttrValueEI(self, TInt EId, TStrV Values)
        Parameters:
           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

           EId: TInt const & value
           Values: TStrV & value

        StrAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TStrV & value

        """
        return _snap.PNEANetMP_StrAttrValueEI(self, *args)

    def FltAttrNameEI(self, *args):
        """
        FltAttrNameEI(self, TInt EId, TStrV Names)
        Parameters:
           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

           EId: TInt const & value
           Names: TStrV & value

        FltAttrNameEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TStrV Names)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Names: TStrV & value

        """
        return _snap.PNEANetMP_FltAttrNameEI(self, *args)

    def FltAttrValueEI(self, *args):
        """
        FltAttrValueEI(self, TInt EId, TFltV Values)
        Parameters:
           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

           EId: TInt const & value
           Values: TFltV & value

        FltAttrValueEI(self, TInt EId, TStrIntPrH::TIter EdgeHI, TFltV Values)
        Parameters:
           self: TNEANetMP const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           self: TPt< TNEANetMP > const * value
           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

           EId: TInt const & value
           EdgeHI: TStrIntPrH::TIter value
           Values: TFltV & value

        """
        return _snap.PNEANetMP_FltAttrValueEI(self, *args)

    def BegEAIntI(self, *args):
        """
        BegEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_BegEAIntI(self, *args)

    def EndEAIntI(self, *args):
        """
        EndEAIntI(self, TStr attr) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_EndEAIntI(self, *args)

    def GetEAIntI(self, *args):
        """
        GetEAIntI(self, TStr attr, int EId) -> TAIntI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.PNEANetMP_GetEAIntI(self, *args)

    def BegEAStrI(self, *args):
        """
        BegEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_BegEAStrI(self, *args)

    def EndEAStrI(self, *args):
        """
        EndEAStrI(self, TStr attr) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_EndEAStrI(self, *args)

    def GetEAStrI(self, *args):
        """
        GetEAStrI(self, TStr attr, int EId) -> TAStrI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.PNEANetMP_GetEAStrI(self, *args)

    def BegEAFltI(self, *args):
        """
        BegEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_BegEAFltI(self, *args)

    def EndEAFltI(self, *args):
        """
        EndEAFltI(self, TStr attr) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_EndEAFltI(self, *args)

    def GetEAFltI(self, *args):
        """
        GetEAFltI(self, TStr attr, int EId) -> TAFltI
        Parameters:
           self: TNEANetMP const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

           self: TPt< TNEANetMP > const * value
           attr: TStr const & value
           EId: int const & value

           attr: TStr const & value
           EId: int const & value

        """
        return _snap.PNEANetMP_GetEAFltI(self, *args)

    def GetMxNId(self):
        """
        GetMxNId(self) -> int
        Parameters:
           self: TNEANetMP const * value




           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_GetMxNId(self)

    def GetMxEId(self):
        """
        GetMxEId(self) -> int
        Parameters:
           self: TNEANetMP const * value




           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_GetMxEId(self)

    def Reserved(self):
        """
        Reserved(self) -> int
        Parameters:
           self: TNEANetMP const * value




           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_Reserved(self)

    def ReservedE(self):
        """
        ReservedE(self) -> int
        Parameters:
           self: TNEANetMP const * value




           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_ReservedE(self)

    def GetEdges(self):
        """
        GetEdges(self) -> int
        Parameters:
           self: TNEANetMP const * value




           self: TPt< TNEANetMP > const * value




        """
        return _snap.PNEANetMP_GetEdges(self)

    def SetEdges(self, *args):
        """
        SetEdges(self, int Length)
        Parameters:
           self: TNEANetMP * value
           Length: int const & value

           Length: int const & value

           self: TPt< TNEANetMP > * value
           Length: int const & value

           Length: int const & value

        """
        return _snap.PNEANetMP_SetEdges(self, *args)

    def AddEdge(self, *args):
        """
        AddEdge(self, int SrcNId, int DstNId, int EId = -1) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int value

        AddEdge(self, int SrcNId, int DstNId) -> int
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        AddEdge(self, TEdgeI EdgeI) -> int
        Parameters:
           self: TNEANetMP * value
           EdgeI: TNEANetMP::TEdgeI const & value

           EdgeI: TNEANetMP::TEdgeI const & value

           self: TPt< TNEANetMP > * value
           EdgeI: TNEANetMP::TEdgeI const & value

           EdgeI: TNEANetMP::TEdgeI const & value

        """
        return _snap.PNEANetMP_AddEdge(self, *args)

    def AddEdgeUnchecked(self, *args):
        """
        AddEdgeUnchecked(self, TInt EId, int SrcNId, int DstNId)
        Parameters:
           self: TNEANetMP * value
           EId: TInt const & value
           SrcNId: int const value
           DstNId: int const value

           EId: TInt const & value
           SrcNId: int const value
           DstNId: int const value

           self: TPt< TNEANetMP > * value
           EId: TInt const & value
           SrcNId: int const value
           DstNId: int const value

           EId: TInt const & value
           SrcNId: int const value
           DstNId: int const value

        """
        return _snap.PNEANetMP_AddEdgeUnchecked(self, *args)

    def IsEdge(self, *args):
        """
        IsEdge(self, int EId) -> bool
        Parameters:
           EId: int const & value

           EId: int const & value

           EId: int const & value

           EId: int const & value

        IsEdge(self, int SrcNId, int DstNId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        IsEdge(self, int SrcNId, int DstNId, int EId, bool IsDir = True) -> bool
        Parameters:
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value
           IsDir: bool const & value

        IsEdge(self, int SrcNId, int DstNId, int EId) -> bool
        Parameters:
           self: TNEANetMP const * value
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           self: TPt< TNEANetMP > const * value
           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

           SrcNId: int const & value
           DstNId: int const & value
           EId: int & value

        """
        return _snap.PNEANetMP_IsEdge(self, *args)

    def GetEId(self, *args):
        """
        GetEId(self, int SrcNId, int DstNId) -> int
        Parameters:
           self: TNEANetMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNEANetMP > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNEANetMP_GetEId(self, *args)

    def BegEI(self, *args):
        """
        BegEI(self) -> TEdgeI
        BegEI(self) -> TNEANetMPEdgeI
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_BegEI(self, *args)

    def EndEI(self, *args):
        """
        EndEI(self) -> TEdgeI
        EndEI(self) -> TNEANetMPEdgeI
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_EndEI(self, *args)

    def GetEI(self, *args):
        """
        GetEI(self, int EId) -> TEdgeI
        Parameters:
           EId: int const & value

           EId: int const & value

           EId: int const & value

           EId: int const & value

        GetEI(self, int SrcNId, int DstNId) -> TEdgeI
        Parameters:
           self: TNEANetMP const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

           self: TPt< TNEANetMP > const * value
           SrcNId: int const & value
           DstNId: int const & value

           SrcNId: int const & value
           DstNId: int const & value

        """
        return _snap.PNEANetMP_GetEI(self, *args)

    def GetRndNId(self, *args):
        """
        GetRndNId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNId(self) -> int
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_GetRndNId(self, *args)

    def GetRndNI(self, *args):
        """
        GetRndNI(self, TRnd Rnd = Rnd) -> TNodeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndNI(self) -> TNodeI
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_GetRndNI(self, *args)

    def GetRndEId(self, *args):
        """
        GetRndEId(self, TRnd Rnd = Rnd) -> int
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEId(self) -> int
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_GetRndEId(self, *args)

    def GetRndEI(self, *args):
        """
        GetRndEI(self, TRnd Rnd = Rnd) -> TEdgeI
        Parameters:
           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

           Rnd: TRnd & value

        GetRndEI(self) -> TEdgeI
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_GetRndEI(self, *args)

    def GetNIdV(self, *args):
        """
        GetNIdV(self, TIntV NIdV)
        Parameters:
           self: TNEANetMP const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

           self: TPt< TNEANetMP > const * value
           NIdV: TIntV & value

           NIdV: TIntV & value

        """
        return _snap.PNEANetMP_GetNIdV(self, *args)

    def GetEIdV(self, *args):
        """
        GetEIdV(self, TIntV EIdV)
        Parameters:
           self: TNEANetMP const * value
           EIdV: TIntV & value

           EIdV: TIntV & value

           self: TPt< TNEANetMP > const * value
           EIdV: TIntV & value

           EIdV: TIntV & value

        """
        return _snap.PNEANetMP_GetEIdV(self, *args)

    def Reserve(self, *args):
        """
        Reserve(self, int Nodes, int Edges)
        Parameters:
           self: TNEANetMP * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

           self: TPt< TNEANetMP > * value
           Nodes: int const & value
           Edges: int const & value

           Nodes: int const & value
           Edges: int const & value

        """
        return _snap.PNEANetMP_Reserve(self, *args)

    def Defrag(self, OnlyNodeLinks = False):
        """
        Defrag(self, bool OnlyNodeLinks = False)
        Parameters:
           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

           OnlyNodeLinks: bool const & value

        Defrag(self)
        Parameters:
           self: TNEANetMP * value


           self: TPt< TNEANetMP > * value


        """
        return _snap.PNEANetMP_Defrag(self, OnlyNodeLinks)

    def IsOk(self, ThrowExcept = True):
        """
        IsOk(self, bool ThrowExcept = True) -> bool
        Parameters:
           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

           ThrowExcept: bool const & value

        IsOk(self) -> bool
        Parameters:
           self: TNEANetMP const * value


           self: TPt< TNEANetMP > const * value


        """
        return _snap.PNEANetMP_IsOk(self, ThrowExcept)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TNEANetMP const * value


           self: TPt< TNEANetMP > const * value


        """
        return _snap.PNEANetMP_Dump(self, *args)

    def AddIntAttrDatN(self, *args):
        """
        AddIntAttrDatN(self, TNodeI NodeId, TInt value, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatN(self, int NId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

           NId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddIntAttrDatN(self, *args)

    def AddStrAttrDatN(self, *args):
        """
        AddStrAttrDatN(self, TNodeI NodeId, TStr value, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatN(self, int NId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

           NId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddStrAttrDatN(self, *args)

    def AddFltAttrDatN(self, *args):
        """
        AddFltAttrDatN(self, TNodeI NodeId, TFlt value, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatN(self, int NId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           NId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddFltAttrDatN(self, *args)

    def AddIntAttrDatE(self, *args):
        """
        AddIntAttrDatE(self, TEdgeI EdgeId, TInt value, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TInt const & value
           attr: TStr const & value

        AddIntAttrDatE(self, int EId, TInt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

           EId: int const & value
           value: TInt const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddIntAttrDatE(self, *args)

    def AddStrAttrDatE(self, *args):
        """
        AddStrAttrDatE(self, TEdgeI EdgeId, TStr value, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TStr const & value
           attr: TStr const & value

        AddStrAttrDatE(self, int EId, TStr value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

           EId: int const & value
           value: TStr const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddStrAttrDatE(self, *args)

    def AddFltAttrDatE(self, *args):
        """
        AddFltAttrDatE(self, TEdgeI EdgeId, TFlt value, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           value: TFlt const & value
           attr: TStr const & value

        AddFltAttrDatE(self, int EId, TFlt value, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

           EId: int const & value
           value: TFlt const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddFltAttrDatE(self, *args)

    def GetIntAttrDatN(self, *args):
        """
        GetIntAttrDatN(self, TNodeI NodeId, TStr attr) -> TInt
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        GetIntAttrDatN(self, int NId, TStr attr) -> TInt
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetIntAttrDatN(self, *args)

    def GetStrAttrDatN(self, *args):
        """
        GetStrAttrDatN(self, TNodeI NodeId, TStr attr) -> TStr
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        GetStrAttrDatN(self, int NId, TStr attr) -> TStr
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetStrAttrDatN(self, *args)

    def GetFltAttrDatN(self, *args):
        """
        GetFltAttrDatN(self, TNodeI NodeId, TStr attr) -> TFlt
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        GetFltAttrDatN(self, int NId, TStr attr) -> TFlt
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetFltAttrDatN(self, *args)

    def GetIntAttrIndN(self, *args):
        """
        GetIntAttrIndN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetIntAttrIndN(self, *args)

    def GetIntAttrIndDatN(self, *args):
        """
        GetIntAttrIndDatN(self, TNodeI NodeId, int index) -> TInt
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           index: int const & value

           NodeId: TNEANetMP::TNodeI const & value
           index: int const & value

           NodeId: TNEANetMP::TNodeI const & value
           index: int const & value

           NodeId: TNEANetMP::TNodeI const & value
           index: int const & value

        GetIntAttrIndDatN(self, int NId, int index) -> TInt
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           index: int const & value

           NId: int const & value
           index: int const & value

        """
        return _snap.PNEANetMP_GetIntAttrIndDatN(self, *args)

    def GetIntAttrDatE(self, *args):
        """
        GetIntAttrDatE(self, TEdgeI EdgeId, TStr attr) -> TInt
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        GetIntAttrDatE(self, int EId, TStr attr) -> TInt
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetIntAttrDatE(self, *args)

    def GetStrAttrDatE(self, *args):
        """
        GetStrAttrDatE(self, TEdgeI EdgeId, TStr attr) -> TStr
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        GetStrAttrDatE(self, int EId, TStr attr) -> TStr
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetStrAttrDatE(self, *args)

    def GetFltAttrDatE(self, *args):
        """
        GetFltAttrDatE(self, TEdgeI EdgeId, TStr attr) -> TFlt
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        GetFltAttrDatE(self, int EId, TStr attr) -> TFlt
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetFltAttrDatE(self, *args)

    def GetIntAttrIndE(self, *args):
        """
        GetIntAttrIndE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetIntAttrIndE(self, *args)

    def GetIntAttrIndDatE(self, *args):
        """
        GetIntAttrIndDatE(self, TEdgeI EdgeId, int index) -> TInt
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           index: int const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           index: int const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           index: int const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           index: int const & value

        GetIntAttrIndDatE(self, int EId, int index) -> TInt
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           index: int const & value

           EId: int const & value
           index: int const & value

        """
        return _snap.PNEANetMP_GetIntAttrIndDatE(self, *args)

    def DelAttrDatN(self, *args):
        """
        DelAttrDatN(self, TNodeI NodeId, TStr attr) -> int
        Parameters:
           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NodeId: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        DelAttrDatN(self, int NId, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NId: int const & value
           attr: TStr const & value

           NId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_DelAttrDatN(self, *args)

    def DelAttrDatE(self, *args):
        """
        DelAttrDatE(self, TEdgeI EdgeId, TStr attr) -> int
        Parameters:
           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

           EdgeId: TNEANetMP::TEdgeI const & value
           attr: TStr const & value

        DelAttrDatE(self, int EId, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value
           attr: TStr const & value

           EId: int const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_DelAttrDatE(self, *args)

    def AddIntAttrN(self, *args):
        """
        AddIntAttrN(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddIntAttrN(self, *args)

    def AddStrAttrN(self, *args):
        """
        AddStrAttrN(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddStrAttrN(self, *args)

    def AddFltAttrN(self, *args):
        """
        AddFltAttrN(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrN(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddFltAttrN(self, *args)

    def AddIntAttrE(self, *args):
        """
        AddIntAttrE(self, TStr attr, TInt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

           attr: TStr const & value
           defaultValue: TInt value

        AddIntAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddIntAttrE(self, *args)

    def AddStrAttrE(self, *args):
        """
        AddStrAttrE(self, TStr attr, TStr defaultValue = TStr::GetNullStr()) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

           attr: TStr const & value
           defaultValue: TStr value

        AddStrAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddStrAttrE(self, *args)

    def AddFltAttrE(self, *args):
        """
        AddFltAttrE(self, TStr attr, TFlt defaultValue = Mn) -> int
        Parameters:
           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

           attr: TStr const & value
           defaultValue: TFlt value

        AddFltAttrE(self, TStr attr) -> int
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_AddFltAttrE(self, *args)

    def NodeAttrIsDeleted(self, *args):
        """
        NodeAttrIsDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_NodeAttrIsDeleted(self, *args)

    def NodeAttrIsIntDeleted(self, *args):
        """
        NodeAttrIsIntDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_NodeAttrIsIntDeleted(self, *args)

    def NodeAttrIsStrDeleted(self, *args):
        """
        NodeAttrIsStrDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_NodeAttrIsStrDeleted(self, *args)

    def NodeAttrIsFltDeleted(self, *args):
        """
        NodeAttrIsFltDeleted(self, int NId, TStrIntPrH::TIter NodeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_NodeAttrIsFltDeleted(self, *args)

    def EdgeAttrIsDeleted(self, *args):
        """
        EdgeAttrIsDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_EdgeAttrIsDeleted(self, *args)

    def EdgeAttrIsIntDeleted(self, *args):
        """
        EdgeAttrIsIntDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_EdgeAttrIsIntDeleted(self, *args)

    def EdgeAttrIsStrDeleted(self, *args):
        """
        EdgeAttrIsStrDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_EdgeAttrIsStrDeleted(self, *args)

    def EdgeAttrIsFltDeleted(self, *args):
        """
        EdgeAttrIsFltDeleted(self, int EId, TStrIntPrH::TIter EdgeHI) -> bool
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_EdgeAttrIsFltDeleted(self, *args)

    def GetNodeAttrValue(self, *args):
        """
        GetNodeAttrValue(self, int NId, TStrIntPrH::TIter NodeHI) -> TStr
        Parameters:
           self: TNEANetMP const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

           NId: int const & value
           NodeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_GetNodeAttrValue(self, *args)

    def GetEdgeAttrValue(self, *args):
        """
        GetEdgeAttrValue(self, int EId, TStrIntPrH::TIter EdgeHI) -> TStr
        Parameters:
           self: TNEANetMP const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           self: TPt< TNEANetMP > const * value
           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

           EId: int const & value
           EdgeHI: TStrIntPrH::TIter const & value

        """
        return _snap.PNEANetMP_GetEdgeAttrValue(self, *args)

    def GetWeightOutEdges(self, *args):
        """
        GetWeightOutEdges(self, TNodeI NI, TStr attr) -> TFlt
        Parameters:
           self: TNEANetMP * value
           NI: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NI: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           NI: TNEANetMP::TNodeI const & value
           attr: TStr const & value

           NI: TNEANetMP::TNodeI const & value
           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetWeightOutEdges(self, *args)

    def IsFltAttrE(self, *args):
        """
        IsFltAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_IsFltAttrE(self, *args)

    def IsIntAttrE(self, *args):
        """
        IsIntAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_IsIntAttrE(self, *args)

    def IsStrAttrE(self, *args):
        """
        IsStrAttrE(self, TStr attr) -> bool
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_IsStrAttrE(self, *args)

    def GetFltAttrVecE(self, *args):
        """
        GetFltAttrVecE(self, TStr attr) -> TFltV
        Parameters:
           self: TNEANetMP * value
           attr: TStr const & value

           attr: TStr const & value

           self: TPt< TNEANetMP > * value
           attr: TStr const & value

           attr: TStr const & value

        """
        return _snap.PNEANetMP_GetFltAttrVecE(self, *args)

    def GetFltKeyIdE(self, *args):
        """
        GetFltKeyIdE(self, int EId) -> int
        Parameters:
           self: TNEANetMP * value
           EId: int const & value

           EId: int const & value

           self: TPt< TNEANetMP > * value
           EId: int const & value

           EId: int const & value

        """
        return _snap.PNEANetMP_GetFltKeyIdE(self, *args)

    def GetWeightOutEdgesV(self, *args):
        """
        GetWeightOutEdgesV(self, TFltV OutWeights, TFltV AttrVal)
        Parameters:
           self: TNEANetMP * value
           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           self: TPt< TNEANetMP > * value
           OutWeights: TFltV & value
           AttrVal: TFltV const & value

           OutWeights: TFltV & value
           AttrVal: TFltV const & value

        """
        return _snap.PNEANetMP_GetWeightOutEdgesV(self, *args)

PNEANetMP.Save = new_instancemethod(_snap.PNEANetMP_Save,None,PNEANetMP)
PNEANetMP.__deref__ = new_instancemethod(_snap.PNEANetMP___deref__,None,PNEANetMP)
PNEANetMP.__ref__ = new_instancemethod(_snap.PNEANetMP___ref__,None,PNEANetMP)
PNEANetMP.__call__ = new_instancemethod(_snap.PNEANetMP___call__,None,PNEANetMP)
PNEANetMP.Empty = new_instancemethod(_snap.PNEANetMP_Empty,None,PNEANetMP)
PNEANetMP.Clr = new_instancemethod(_snap.PNEANetMP_Clr,None,PNEANetMP)
PNEANetMP.GetRefs = new_instancemethod(_snap.PNEANetMP_GetRefs,None,PNEANetMP)
PNEANetMP.Load = new_instancemethod(_snap.PNEANetMP_Load,None,PNEANetMP)
PNEANetMP.HasFlag = new_instancemethod(_snap.PNEANetMP_HasFlag,None,PNEANetMP)
PNEANetMP.GetNodes = new_instancemethod(_snap.PNEANetMP_GetNodes,None,PNEANetMP)
PNEANetMP.SetNodes = new_instancemethod(_snap.PNEANetMP_SetNodes,None,PNEANetMP)
PNEANetMP.AddNode = new_instancemethod(_snap.PNEANetMP_AddNode,None,PNEANetMP)
PNEANetMP.AddNodeWithEdges = new_instancemethod(_snap.PNEANetMP_AddNodeWithEdges,None,PNEANetMP)
PNEANetMP.IsNode = new_instancemethod(_snap.PNEANetMP_IsNode,None,PNEANetMP)
PNEANetMP.BegNI = new_instancemethod(_snap.PNEANetMP_BegNI,None,PNEANetMP)
PNEANetMP.EndNI = new_instancemethod(_snap.PNEANetMP_EndNI,None,PNEANetMP)
PNEANetMP.GetNI = new_instancemethod(_snap.PNEANetMP_GetNI,None,PNEANetMP)
PNEANetMP.BegNAIntI = new_instancemethod(_snap.PNEANetMP_BegNAIntI,None,PNEANetMP)
PNEANetMP.EndNAIntI = new_instancemethod(_snap.PNEANetMP_EndNAIntI,None,PNEANetMP)
PNEANetMP.GetNAIntI = new_instancemethod(_snap.PNEANetMP_GetNAIntI,None,PNEANetMP)
PNEANetMP.BegNAStrI = new_instancemethod(_snap.PNEANetMP_BegNAStrI,None,PNEANetMP)
PNEANetMP.EndNAStrI = new_instancemethod(_snap.PNEANetMP_EndNAStrI,None,PNEANetMP)
PNEANetMP.GetNAStrI = new_instancemethod(_snap.PNEANetMP_GetNAStrI,None,PNEANetMP)
PNEANetMP.BegNAFltI = new_instancemethod(_snap.PNEANetMP_BegNAFltI,None,PNEANetMP)
PNEANetMP.EndNAFltI = new_instancemethod(_snap.PNEANetMP_EndNAFltI,None,PNEANetMP)
PNEANetMP.GetNAFltI = new_instancemethod(_snap.PNEANetMP_GetNAFltI,None,PNEANetMP)
PNEANetMP.AttrNameNI = new_instancemethod(_snap.PNEANetMP_AttrNameNI,None,PNEANetMP)
PNEANetMP.AttrValueNI = new_instancemethod(_snap.PNEANetMP_AttrValueNI,None,PNEANetMP)
PNEANetMP.IntAttrNameNI = new_instancemethod(_snap.PNEANetMP_IntAttrNameNI,None,PNEANetMP)
PNEANetMP.IntAttrValueNI = new_instancemethod(_snap.PNEANetMP_IntAttrValueNI,None,PNEANetMP)
PNEANetMP.StrAttrNameNI = new_instancemethod(_snap.PNEANetMP_StrAttrNameNI,None,PNEANetMP)
PNEANetMP.StrAttrValueNI = new_instancemethod(_snap.PNEANetMP_StrAttrValueNI,None,PNEANetMP)
PNEANetMP.FltAttrNameNI = new_instancemethod(_snap.PNEANetMP_FltAttrNameNI,None,PNEANetMP)
PNEANetMP.FltAttrValueNI = new_instancemethod(_snap.PNEANetMP_FltAttrValueNI,None,PNEANetMP)
PNEANetMP.AttrNameEI = new_instancemethod(_snap.PNEANetMP_AttrNameEI,None,PNEANetMP)
PNEANetMP.AttrValueEI = new_instancemethod(_snap.PNEANetMP_AttrValueEI,None,PNEANetMP)
PNEANetMP.IntAttrNameEI = new_instancemethod(_snap.PNEANetMP_IntAttrNameEI,None,PNEANetMP)
PNEANetMP.IntAttrValueEI = new_instancemethod(_snap.PNEANetMP_IntAttrValueEI,None,PNEANetMP)
PNEANetMP.StrAttrNameEI = new_instancemethod(_snap.PNEANetMP_StrAttrNameEI,None,PNEANetMP)
PNEANetMP.StrAttrValueEI = new_instancemethod(_snap.PNEANetMP_StrAttrValueEI,None,PNEANetMP)
PNEANetMP.FltAttrNameEI = new_instancemethod(_snap.PNEANetMP_FltAttrNameEI,None,PNEANetMP)
PNEANetMP.FltAttrValueEI = new_instancemethod(_snap.PNEANetMP_FltAttrValueEI,None,PNEANetMP)
PNEANetMP.BegEAIntI = new_instancemethod(_snap.PNEANetMP_BegEAIntI,None,PNEANetMP)
PNEANetMP.EndEAIntI = new_instancemethod(_snap.PNEANetMP_EndEAIntI,None,PNEANetMP)
PNEANetMP.GetEAIntI = new_instancemethod(_snap.PNEANetMP_GetEAIntI,None,PNEANetMP)
PNEANetMP.BegEAStrI = new_instancemethod(_snap.PNEANetMP_BegEAStrI,None,PNEANetMP)
PNEANetMP.EndEAStrI = new_instancemethod(_snap.PNEANetMP_EndEAStrI,None,PNEANetMP)
PNEANetMP.GetEAStrI = new_instancemethod(_snap.PNEANetMP_GetEAStrI,None,PNEANetMP)
PNEANetMP.BegEAFltI = new_instancemethod(_snap.PNEANetMP_BegEAFltI,None,PNEANetMP)
PNEANetMP.EndEAFltI = new_instancemethod(_snap.PNEANetMP_EndEAFltI,None,PNEANetMP)
PNEANetMP.GetEAFltI = new_instancemethod(_snap.PNEANetMP_GetEAFltI,None,PNEANetMP)
PNEANetMP.GetMxNId = new_instancemethod(_snap.PNEANetMP_GetMxNId,None,PNEANetMP)
PNEANetMP.GetMxEId = new_instancemethod(_snap.PNEANetMP_GetMxEId,None,PNEANetMP)
PNEANetMP.Reserved = new_instancemethod(_snap.PNEANetMP_Reserved,None,PNEANetMP)
PNEANetMP.ReservedE = new_instancemethod(_snap.PNEANetMP_ReservedE,None,PNEANetMP)
PNEANetMP.GetEdges = new_instancemethod(_snap.PNEANetMP_GetEdges,None,PNEANetMP)
PNEANetMP.SetEdges = new_instancemethod(_snap.PNEANetMP_SetEdges,None,PNEANetMP)
PNEANetMP.AddEdge = new_instancemethod(_snap.PNEANetMP_AddEdge,None,PNEANetMP)
PNEANetMP.AddEdgeUnchecked = new_instancemethod(_snap.PNEANetMP_AddEdgeUnchecked,None,PNEANetMP)
PNEANetMP.IsEdge = new_instancemethod(_snap.PNEANetMP_IsEdge,None,PNEANetMP)
PNEANetMP.GetEId = new_instancemethod(_snap.PNEANetMP_GetEId,None,PNEANetMP)
PNEANetMP.BegEI = new_instancemethod(_snap.PNEANetMP_BegEI,None,PNEANetMP)
PNEANetMP.EndEI = new_instancemethod(_snap.PNEANetMP_EndEI,None,PNEANetMP)
PNEANetMP.GetEI = new_instancemethod(_snap.PNEANetMP_GetEI,None,PNEANetMP)
PNEANetMP.GetRndNId = new_instancemethod(_snap.PNEANetMP_GetRndNId,None,PNEANetMP)
PNEANetMP.GetRndNI = new_instancemethod(_snap.PNEANetMP_GetRndNI,None,PNEANetMP)
PNEANetMP.GetRndEId = new_instancemethod(_snap.PNEANetMP_GetRndEId,None,PNEANetMP)
PNEANetMP.GetRndEI = new_instancemethod(_snap.PNEANetMP_GetRndEI,None,PNEANetMP)
PNEANetMP.GetNIdV = new_instancemethod(_snap.PNEANetMP_GetNIdV,None,PNEANetMP)
PNEANetMP.GetEIdV = new_instancemethod(_snap.PNEANetMP_GetEIdV,None,PNEANetMP)
PNEANetMP.Reserve = new_instancemethod(_snap.PNEANetMP_Reserve,None,PNEANetMP)
PNEANetMP.Defrag = new_instancemethod(_snap.PNEANetMP_Defrag,None,PNEANetMP)
PNEANetMP.IsOk = new_instancemethod(_snap.PNEANetMP_IsOk,None,PNEANetMP)
PNEANetMP.Dump = new_instancemethod(_snap.PNEANetMP_Dump,None,PNEANetMP)
PNEANetMP.AddIntAttrDatN = new_instancemethod(_snap.PNEANetMP_AddIntAttrDatN,None,PNEANetMP)
PNEANetMP.AddStrAttrDatN = new_instancemethod(_snap.PNEANetMP_AddStrAttrDatN,None,PNEANetMP)
PNEANetMP.AddFltAttrDatN = new_instancemethod(_snap.PNEANetMP_AddFltAttrDatN,None,PNEANetMP)
PNEANetMP.AddIntAttrDatE = new_instancemethod(_snap.PNEANetMP_AddIntAttrDatE,None,PNEANetMP)
PNEANetMP.AddStrAttrDatE = new_instancemethod(_snap.PNEANetMP_AddStrAttrDatE,None,PNEANetMP)
PNEANetMP.AddFltAttrDatE = new_instancemethod(_snap.PNEANetMP_AddFltAttrDatE,None,PNEANetMP)
PNEANetMP.GetIntAttrDatN = new_instancemethod(_snap.PNEANetMP_GetIntAttrDatN,None,PNEANetMP)
PNEANetMP.GetStrAttrDatN = new_instancemethod(_snap.PNEANetMP_GetStrAttrDatN,None,PNEANetMP)
PNEANetMP.GetFltAttrDatN = new_instancemethod(_snap.PNEANetMP_GetFltAttrDatN,None,PNEANetMP)
PNEANetMP.GetIntAttrIndN = new_instancemethod(_snap.PNEANetMP_GetIntAttrIndN,None,PNEANetMP)
PNEANetMP.GetIntAttrIndDatN = new_instancemethod(_snap.PNEANetMP_GetIntAttrIndDatN,None,PNEANetMP)
PNEANetMP.GetIntAttrDatE = new_instancemethod(_snap.PNEANetMP_GetIntAttrDatE,None,PNEANetMP)
PNEANetMP.GetStrAttrDatE = new_instancemethod(_snap.PNEANetMP_GetStrAttrDatE,None,PNEANetMP)
PNEANetMP.GetFltAttrDatE = new_instancemethod(_snap.PNEANetMP_GetFltAttrDatE,None,PNEANetMP)
PNEANetMP.GetIntAttrIndE = new_instancemethod(_snap.PNEANetMP_GetIntAttrIndE,None,PNEANetMP)
PNEANetMP.GetIntAttrIndDatE = new_instancemethod(_snap.PNEANetMP_GetIntAttrIndDatE,None,PNEANetMP)
PNEANetMP.DelAttrDatN = new_instancemethod(_snap.PNEANetMP_DelAttrDatN,None,PNEANetMP)
PNEANetMP.DelAttrDatE = new_instancemethod(_snap.PNEANetMP_DelAttrDatE,None,PNEANetMP)
PNEANetMP.AddIntAttrN = new_instancemethod(_snap.PNEANetMP_AddIntAttrN,None,PNEANetMP)
PNEANetMP.AddStrAttrN = new_instancemethod(_snap.PNEANetMP_AddStrAttrN,None,PNEANetMP)
PNEANetMP.AddFltAttrN = new_instancemethod(_snap.PNEANetMP_AddFltAttrN,None,PNEANetMP)
PNEANetMP.AddIntAttrE = new_instancemethod(_snap.PNEANetMP_AddIntAttrE,None,PNEANetMP)
PNEANetMP.AddStrAttrE = new_instancemethod(_snap.PNEANetMP_AddStrAttrE,None,PNEANetMP)
PNEANetMP.AddFltAttrE = new_instancemethod(_snap.PNEANetMP_AddFltAttrE,None,PNEANetMP)
PNEANetMP.NodeAttrIsDeleted = new_instancemethod(_snap.PNEANetMP_NodeAttrIsDeleted,None,PNEANetMP)
PNEANetMP.NodeAttrIsIntDeleted = new_instancemethod(_snap.PNEANetMP_NodeAttrIsIntDeleted,None,PNEANetMP)
PNEANetMP.NodeAttrIsStrDeleted = new_instancemethod(_snap.PNEANetMP_NodeAttrIsStrDeleted,None,PNEANetMP)
PNEANetMP.NodeAttrIsFltDeleted = new_instancemethod(_snap.PNEANetMP_NodeAttrIsFltDeleted,None,PNEANetMP)
PNEANetMP.EdgeAttrIsDeleted = new_instancemethod(_snap.PNEANetMP_EdgeAttrIsDeleted,None,PNEANetMP)
PNEANetMP.EdgeAttrIsIntDeleted = new_instancemethod(_snap.PNEANetMP_EdgeAttrIsIntDeleted,None,PNEANetMP)
PNEANetMP.EdgeAttrIsStrDeleted = new_instancemethod(_snap.PNEANetMP_EdgeAttrIsStrDeleted,None,PNEANetMP)
PNEANetMP.EdgeAttrIsFltDeleted = new_instancemethod(_snap.PNEANetMP_EdgeAttrIsFltDeleted,None,PNEANetMP)
PNEANetMP.GetNodeAttrValue = new_instancemethod(_snap.PNEANetMP_GetNodeAttrValue,None,PNEANetMP)
PNEANetMP.GetEdgeAttrValue = new_instancemethod(_snap.PNEANetMP_GetEdgeAttrValue,None,PNEANetMP)
PNEANetMP.GetWeightOutEdges = new_instancemethod(_snap.PNEANetMP_GetWeightOutEdges,None,PNEANetMP)
PNEANetMP.IsFltAttrE = new_instancemethod(_snap.PNEANetMP_IsFltAttrE,None,PNEANetMP)
PNEANetMP.IsIntAttrE = new_instancemethod(_snap.PNEANetMP_IsIntAttrE,None,PNEANetMP)
PNEANetMP.IsStrAttrE = new_instancemethod(_snap.PNEANetMP_IsStrAttrE,None,PNEANetMP)
PNEANetMP.GetFltAttrVecE = new_instancemethod(_snap.PNEANetMP_GetFltAttrVecE,None,PNEANetMP)
PNEANetMP.GetFltKeyIdE = new_instancemethod(_snap.PNEANetMP_GetFltKeyIdE,None,PNEANetMP)
PNEANetMP.GetWeightOutEdgesV = new_instancemethod(_snap.PNEANetMP_GetWeightOutEdgesV,None,PNEANetMP)
PNEANetMP_swigregister = _snap.PNEANetMP_swigregister
PNEANetMP_swigregister(PNEANetMP)

def PrintGraphStatTable_PNEANetMP(*args):
  """
    PrintGraphStatTable_PNEANetMP(PNEANetMP G, TStr OutFNm, TStr Desc = "")
    Parameters:
       G: TPt< TNEANetMP > const & value
       OutFNm: TStr value
       Desc: TStr value

       G: TPt< TNEANetMP > const & value
       OutFNm: TStr value
       Desc: TStr value

    PrintGraphStatTable_PNEANetMP(PNEANetMP G, TStr OutFNm)
    Parameters:
       G: TPt< TNEANetMP > const & value
       OutFNm: TStr value

       G: TPt< TNEANetMP > const & value
       OutFNm: TStr value

    """
  return _snap.PrintGraphStatTable_PNEANetMP(*args)

def PNEANetMP_New():
  """PNEANetMP_New() -> PNEANetMP"""
  return _snap.PNEANetMP_New()

#
# BELOW INCLUDE out-*.txt
#

def LoadPajek(tspec, *args):
    if tspec == PUNGraph: return LoadPajek_PUNGraph(*args)
    if tspec == PNGraph : return LoadPajek_PNGraph(*args)
    if tspec == PNEANet : return LoadPajek_PNEANet(*args)
    if tspec == PNGraphMP: return LoadPajek_PNGraphMP(*args)
    if tspec == PNEANetMP: return LoadPajek_PNEANetMP(*args)
    return None
def SaveGViz(tspec, *args):
    if type(tspec) == PUNGraph: return SaveGViz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SaveGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveGViz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveGViz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveGViz_PNEANetMP(tspec, *args)
    return None
def TestAnf(tspec, *args):
    if type(tspec) == PUNGraph: return TestAnf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return TestAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return TestAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return TestAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return TestAnf_PNEANetMP(tspec, *args)
    return None
def GetNodeWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeWcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeWcc_PNEANetMP(tspec, *args)
    return None
def DelNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelNodes_PNEANetMP(tspec, *args)
    return None
def CntEdgesToSet(tspec, *args):
    if type(tspec) == PUNGraph: return CntEdgesToSet_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntEdgesToSet_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntEdgesToSet_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntEdgesToSet_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntEdgesToSet_PNEANetMP(tspec, *args)
    return None
def GetModularity(tspec, *args):
    if type(tspec) == PUNGraph: return GetModularity_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetModularity_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetModularity_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetModularity_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetModularity_PNEANetMP(tspec, *args)
    return None
def GetBfsEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsEffDiam_PNEANetMP(tspec, *args)
    return None
def PercentMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxWcc_PNEANetMP(tspec, *args)
    return None
def GetSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubGraph_PNEANetMP(tspec, *args)
    return None
def GetBfsTree(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsTree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsTree_PNEANetMP(tspec, *args)
    return None
def PrintGraphStatTable(tspec, *args):
    if type(tspec) == PUNGraph: return PrintGraphStatTable_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PrintGraphStatTable_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintGraphStatTable_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintGraphStatTable_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintGraphStatTable_PNEANetMP(tspec, *args)
    return None
def GetDegSeqV(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegSeqV_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetDegSeqV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegSeqV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegSeqV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegSeqV_PNEANetMP(tspec, *args)
    return None
def GenGrid(tspec, *args):
    if tspec == PUNGraph: return GenGrid_PUNGraph(*args)
    if tspec == PNGraph : return GenGrid_PNGraph(*args)
    if tspec == PNEANet : return GenGrid_PNEANet(*args)
    if tspec == PNGraphMP: return GenGrid_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenGrid_PNEANetMP(*args)
    return None
def LoadEdgeList(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeList_PUNGraph(*args)
    if tspec == PNGraph : return LoadEdgeList_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeList_PNEANetMP(*args)
    return None
def GetUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return GetUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetUnDir_PNEANetMP(tspec, *args)
    return None
def DrawGViz(tspec, *args):
    if type(tspec) == PUNGraph: return DrawGViz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DrawGViz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DrawGViz_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return DrawGViz_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return DrawGViz_PNGraphMP(tspec, *args)
    return None
def PlotKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreNodes_PNEANetMP(tspec, *args)
    return None
def PlotOutDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotOutDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotOutDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotOutDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotOutDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotOutDegDistr_PNEANetMP(tspec, *args)
    return None
def CntUniqBiDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqBiDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqBiDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqBiDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqBiDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqBiDirEdges_PNEANetMP(tspec, *args)
    return None
def GetKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreEdges_PNEANetMP(tspec, *args)
    return None
def GetMxDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxDegNId_PNEANetMP(tspec, *args)
    return None
def GetBfsFullDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetBfsFullDiam_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetBfsFullDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetBfsFullDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetBfsFullDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetBfsFullDiam_PNEANetMP(tspec, *args)
    return None
def LoadConnList(tspec, *args):
    if tspec == PUNGraph: return LoadConnList_PUNGraph(*args)
    if tspec == PNGraph : return LoadConnList_PNGraph(*args)
    if tspec == PNEANet : return LoadConnList_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnList_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnList_PNEANetMP(*args)
    return None
def GetHitsMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetHitsMP_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetHitsMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHitsMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHitsMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHitsMP_PNEANetMP(tspec, *args)
    return None
def GetPageRank(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_PNEANetMP(tspec, *args)
    return None
def GetPageRank_v1(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRank_v1_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRank_v1_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRank_v1_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRank_v1_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRank_v1_PNEANetMP(tspec, *args)
    return None
def CntInDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntInDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntInDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntInDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntInDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntInDegNodes_PNEANetMP(tspec, *args)
    return None
def GetMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxScc_PNEANetMP(tspec, *args)
    return None
def AddSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return AddSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return AddSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return AddSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return AddSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return AddSelfEdges_PNEANetMP(tspec, *args)
    return None
def DelDegKNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelDegKNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelDegKNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelDegKNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelDegKNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelDegKNodes_PNEANetMP(tspec, *args)
    return None
def PlotSccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotSccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotSccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotSccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotSccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotSccDistr_PNEANetMP(tspec, *args)
    return None
def CountTriangles(tspec, *args):
    #if type(tspec) == PUNGraph: return CountTriangles_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CountTriangles_PNGraph(tspec, *args)
    #if type(tspec) == PNEANet : return CountTriangles_PNEANet(tspec, *args)
    #if type(tspec) == PNEANetMP : return CountTriangles_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return CountTriangles_PNGraphMP(tspec, *args)
    return None
def IsWeaklyConn(tspec, *args):
    if type(tspec) == PUNGraph: return IsWeaklyConn_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return IsWeaklyConn_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsWeaklyConn_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsWeaklyConn_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsWeaklyConn_PNEANetMP(tspec, *args)
    return None
def GetMxInDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxInDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxInDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxInDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxInDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxInDegNId_PNEANetMP(tspec, *args)
    return None
def GetSccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccSzCnt_PNEANetMP(tspec, *args)
    return None
def MxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxWccSz_PNEANetMP(tspec, *args)
    return None
def GetCmnNbrs(tspec, *args):
    if type(tspec) == PUNGraph: return GetCmnNbrs_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetCmnNbrs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetCmnNbrs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetCmnNbrs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetCmnNbrs_PNEANetMP(tspec, *args)
    return None
def GetTriadEdges(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadEdges_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadEdges_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadEdges_PNGraphMP(tspec, *args)
    return None
def LoadConnListStr(tspec, *args):
    if tspec == PUNGraph: return LoadConnListStr_PUNGraph(*args)
    if tspec == PNGraph : return LoadConnListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadConnListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadConnListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadConnListStr_PNEANetMP(*args)
    return None
def GetMxWccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWccSz_PNEANetMP(tspec, *args)
    return None
def GetMxOutDegNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxOutDegNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxOutDegNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxOutDegNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxOutDegNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxOutDegNId_PNEANetMP(tspec, *args)
    return None
def GetLen2Paths(tspec, *args):
    if type(tspec) == PUNGraph: return GetLen2Paths_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetLen2Paths_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetLen2Paths_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetLen2Paths_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetLen2Paths_PNEANetMP(tspec, *args)
    return None
def GetPageRankMP(tspec, *args):
    if type(tspec) == PUNGraph: return GetPageRankMP_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetPageRankMP_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetPageRankMP_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetPageRankMP_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetPageRankMP_PNEANetMP(tspec, *args)
    return None
def PrintInfo(tspec, *args):
    if type(tspec) == PUNGraph: return PrintInfo_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PrintInfo_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PrintInfo_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PrintInfo_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PrintInfo_PNEANetMP(tspec, *args)
    return None
def GetWccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccs_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetWccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccs_PNEANetMP(tspec, *args)
    return None
def GetMxWcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxWcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxWcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxWcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxWcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxWcc_PNEANetMP(tspec, *args)
    return None
def GetMxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxSccSz_PNEANetMP(tspec, *args)
    return None
def CntSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntSelfEdges_PNEANetMP(tspec, *args)
    return None
def NodesGTEDegree(tspec, *args):
    if type(tspec) == PUNGraph: return NodesGTEDegree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return NodesGTEDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return NodesGTEDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return NodesGTEDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return NodesGTEDegree_PNEANetMP(tspec, *args)
    return None
def PlotShortPathDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotShortPathDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotShortPathDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotShortPathDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotShortPathDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotShortPathDistr_PNEANetMP(tspec, *args)
    return None
def GetNodesAtHop(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHop_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHop_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHop_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHop_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHop_PNEANetMP(tspec, *args)
    return None
def PlotInDegDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotInDegDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotInDegDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotInDegDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotInDegDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotInDegDistr_PNEANetMP(tspec, *args)
    return None
def GetHits(tspec, *args):
    if type(tspec) == PUNGraph: return GetHits_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetHits_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetHits_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetHits_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetHits_PNEANetMP(tspec, *args)
    return None
def GetMxBiCon(tspec, *args):
    if type(tspec) == PUNGraph: return GetMxBiCon_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetMxBiCon_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetMxBiCon_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetMxBiCon_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetMxBiCon_PNEANetMP(tspec, *args)
    return None
def DelZeroDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return DelZeroDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelZeroDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelZeroDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelZeroDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelZeroDegNodes_PNEANetMP(tspec, *args)
    return None
def GetRndESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetRndESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndESubGraph_PNEANetMP(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndESubGraph_PNGraphMP(tspec, *args)
    return None
def GetSccs(tspec, *args):
    if type(tspec) == PUNGraph: return GetSccs_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSccs_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSccs_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSccs_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSccs_PNEANetMP(tspec, *args)
    return None
def PercentDegree(tspec, *args):
    if type(tspec) == PUNGraph: return PercentDegree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PercentDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentDegree_PNEANetMP(tspec, *args)
    return None
def GetSubTreeSz(tspec, *args):
    if type(tspec) == PUNGraph: return GetSubTreeSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetSubTreeSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetSubTreeSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetSubTreeSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetSubTreeSz_PNEANetMP(tspec, *args)
    return None
def GenFull(tspec, *args):
    if tspec == PUNGraph: return GenFull_PUNGraph(*args)
    if tspec == PNGraph : return GenFull_PNGraph(*args)
    if tspec == PNEANet : return GenFull_PNEANet(*args)
    if tspec == PNGraphMP: return GenFull_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenFull_PNEANetMP(*args)
    return None
def IsConnected(tspec, *args):
    if type(tspec) == PUNGraph: return IsConnected_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return IsConnected_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsConnected_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsConnected_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsConnected_PNEANetMP(tspec, *args)
    return None
def GetNodeClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeClustCf_PNEANetMP(tspec, *args)
    return None
def MxDegree(tspec, *args):
    if type(tspec) == PUNGraph: return MxDegree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MxDegree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxDegree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxDegree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxDegree_PNEANetMP(tspec, *args)
    return None
def SavePajek(tspec, *args):
    if type(tspec) == PUNGraph: return SavePajek_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SavePajek_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SavePajek_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SavePajek_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SavePajek_PNEANetMP(tspec, *args)
    return None
def GetTreeRootNId(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeRootNId_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeRootNId_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeRootNId_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeRootNId_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeRootNId_PNEANetMP(tspec, *args)
    return None
def PlotHops(tspec, *args):
    if type(tspec) == PUNGraph: return PlotHops_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotHops_PNEANetMP(tspec, *args)
    return None
def DelSelfEdges(tspec, *args):
    if type(tspec) == PUNGraph: return DelSelfEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return DelSelfEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return DelSelfEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return DelSelfEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return DelSelfEdges_PNEANetMP(tspec, *args)
    return None
def GetClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return GetClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetClustCf_PNEANetMP(tspec, *args)
    return None
def GetNodesAtHops(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodesAtHops_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodesAtHops_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodesAtHops_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodesAtHops_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodesAtHops_PNEANetMP(tspec, *args)
    return None
def GetNodeOutDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeOutDegV_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeOutDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeOutDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeOutDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeOutDegV_PNEANetMP(tspec, *args)
    return None
def GetAnf(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetAnf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnf_PNEANetMP(tspec, *args)
    return None
def PlotClustCf(tspec, *args):
    if type(tspec) == PUNGraph: return PlotClustCf_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotClustCf_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotClustCf_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotClustCf_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotClustCf_PNEANetMP(tspec, *args)
    return None
def GenCircle(tspec, *args):
    if tspec == PUNGraph: return GenCircle_PUNGraph(*args)
    if tspec == PNGraph : return GenCircle_PNGraph(*args)
    if tspec == PNEANet : return GenCircle_PNEANet(*args)
    if tspec == PNGraphMP: return GenCircle_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenCircle_PNEANetMP(*args)
    return None
def MakeUnDir(tspec, *args):
    if type(tspec) == PUNGraph: return MakeUnDir_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MakeUnDir_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MakeUnDir_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MakeUnDir_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MakeUnDir_PNEANetMP(tspec, *args)
    return None
def GetESubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetESubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetESubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetESubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetESubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetESubGraph_PNEANetMP(tspec, *args)
    return None
def GetTriadParticip(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriadParticip_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTriadParticip_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriadParticip_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriadParticip_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriadParticip_PNEANetMP(tspec, *args)
    return None
def PercentMxScc(tspec, *args):
    if type(tspec) == PUNGraph: return PercentMxScc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PercentMxScc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PercentMxScc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PercentMxScc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PercentMxScc_PNEANetMP(tspec, *args)
    return None
def GetWccSzCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetWccSzCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetWccSzCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetWccSzCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetWccSzCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetWccSzCnt_PNEANetMP(tspec, *args)
    return None
def CntDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntDegNodes_PNEANetMP(tspec, *args)
    return None
def IsTree(tspec, *args):
    if type(tspec) == PUNGraph: return IsTree_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return IsTree_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return IsTree_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return IsTree_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return IsTree_PNEANetMP(tspec, *args)
    return None
def GenRndGnm(tspec, *args):
    if tspec == PUNGraph: return GenRndGnm_PUNGraph(*args)
    if tspec == PNGraph : return GenRndGnm_PNGraph(*args)
    if tspec == PNEANet : return GenRndGnm_PNEANet(*args)
    if tspec == PNGraphMP: return GenRndGnm_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenRndGnm_PNEANetMP(*args)
    return None
def GetDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetDegCnt_PNEANetMP(tspec, *args)
    return None
def SaveMatlabSparseMtx(tspec, *args):
    if type(tspec) == PUNGraph: return SaveMatlabSparseMtx_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SaveMatlabSparseMtx_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveMatlabSparseMtx_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveMatlabSparseMtx_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveMatlabSparseMtx_PNEANetMP(tspec, *args)
    return None
def MxSccSz(tspec, *args):
    if type(tspec) == PUNGraph: return MxSccSz_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return MxSccSz_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return MxSccSz_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return MxSccSz_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return MxSccSz_PNEANetMP(tspec, *args)
    return None
def GetAnfEffDiam(tspec, *args):
    if type(tspec) == PUNGraph: return GetAnfEffDiam_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetAnfEffDiam_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetAnfEffDiam_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetAnfEffDiam_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetAnfEffDiam_PNEANetMP(tspec, *args)
    return None
def GetTreeSig(tspec, *args):
    if type(tspec) == PUNGraph: return GetTreeSig_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTreeSig_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTreeSig_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTreeSig_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTreeSig_PNEANetMP(tspec, *args)
    return None
def CntOutDegNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntOutDegNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntOutDegNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntOutDegNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntOutDegNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntOutDegNodes_PNEANetMP(tspec, *args)
    return None
def GetTriangleCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriangleCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTriangleCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriangleCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriangleCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriangleCnt_PNEANetMP(tspec, *args)
    return None
def GetOutDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetOutDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetOutDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetOutDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetOutDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetOutDegCnt_PNEANetMP(tspec, *args)
    return None
def GenBaraHierar(tspec, *args):
    if tspec == PUNGraph: return GenBaraHierar_PUNGraph(*args)
    if tspec == PNGraph : return GenBaraHierar_PNGraph(*args)
    if tspec == PNEANet : return GenBaraHierar_PNEANet(*args)
    if tspec == PNGraphMP: return GenBaraHierar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenBaraHierar_PNEANetMP(*args)
    return None
def GenTree(tspec, *args):
    if tspec == PUNGraph: return GenTree_PUNGraph(*args)
    if tspec == PNGraph : return GenTree_PNGraph(*args)
    if tspec == PNEANet : return GenTree_PNEANet(*args)
    if tspec == PNGraphMP: return GenTree_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenTree_PNEANetMP(*args)
    return None
def GetShortPath(tspec, *args):
    if type(tspec) == PUNGraph: return GetShortPath_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetShortPath_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetShortPath_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetShortPath_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetShortPath_PNEANetMP(tspec, *args)
    return None
def GetKCoreNodes(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCoreNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetKCoreNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCoreNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCoreNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCoreNodes_PNEANetMP(tspec, *args)
    return None
def GetInDegCnt(tspec, *args):
    if type(tspec) == PUNGraph: return GetInDegCnt_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetInDegCnt_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetInDegCnt_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetInDegCnt_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetInDegCnt_PNEANetMP(tspec, *args)
    return None
def CntUniqDirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqDirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqDirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqDirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqDirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqDirEdges_PNEANetMP(tspec, *args)
    return None
def GetNodeInDegV(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeInDegV_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeInDegV_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeInDegV_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeInDegV_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeInDegV_PNEANetMP(tspec, *args)
    return None
def GetRndSubGraph(tspec, *args):
    if type(tspec) == PUNGraph: return GetRndSubGraph_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetRndSubGraph_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetRndSubGraph_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetRndSubGraph_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetRndSubGraph_PNEANetMP(tspec, *args)
    return None
def PlotWccDistr(tspec, *args):
    if type(tspec) == PUNGraph: return PlotWccDistr_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotWccDistr_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotWccDistr_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotWccDistr_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotWccDistr_PNEANetMP(tspec, *args)
    return None
def GetEdgesInOut(tspec, *args):
    if type(tspec) == PUNGraph: return GetEdgesInOut_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetEdgesInOut_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetEdgesInOut_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetEdgesInOut_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetEdgesInOut_PNEANetMP(tspec, *args)
    return None
def GetKCore(tspec, *args):
    if type(tspec) == PUNGraph: return GetKCore_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetKCore_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetKCore_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetKCore_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetKCore_PNEANetMP(tspec, *args)
    return None
def CntNonZNodes(tspec, *args):
    if type(tspec) == PUNGraph: return CntNonZNodes_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntNonZNodes_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntNonZNodes_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntNonZNodes_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntNonZNodes_PNEANetMP(tspec, *args)
    return None
def GenStar(tspec, *args):
    if tspec == PUNGraph: return GenStar_PUNGraph(*args)
    if tspec == PNGraph : return GenStar_PNGraph(*args)
    if tspec == PNEANet : return GenStar_PNEANet(*args)
    if tspec == PNGraphMP: return GenStar_PNGraphMP(*args)
    if tspec == PNEANetMP : return GenStar_PNEANetMP(*args)
    return None
def PlotKCoreEdges(tspec, *args):
    if type(tspec) == PUNGraph: return PlotKCoreEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return PlotKCoreEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return PlotKCoreEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return PlotKCoreEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return PlotKCoreEdges_PNEANetMP(tspec, *args)
    return None
def SaveEdgeList(tspec, *args):
    if type(tspec) == PUNGraph: return SaveEdgeList_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return SaveEdgeList_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return SaveEdgeList_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return SaveEdgeList_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return SaveEdgeList_PNEANetMP(tspec, *args)
    return None
def GetNodeTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeTriads_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeTriads_PNEANetMP(tspec, *args)
    return None
def GetNodeEcc(tspec, *args):
    if type(tspec) == PUNGraph: return GetNodeEcc_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetNodeEcc_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetNodeEcc_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetNodeEcc_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetNodeEcc_PNEANetMP(tspec, *args)
    return None
def LoadEdgeListStr(tspec, *args):
    if tspec == PUNGraph: return LoadEdgeListStr_PUNGraph(*args)
    if tspec == PNGraph : return LoadEdgeListStr_PNGraph(*args)
    if tspec == PNEANet : return LoadEdgeListStr_PNEANet(*args)
    if tspec == PNGraphMP: return LoadEdgeListStr_PNGraphMP(*args)
    if tspec == PNEANetMP : return LoadEdgeListStr_PNEANetMP(*args)
    return None
def CntUniqUndirEdges(tspec, *args):
    if type(tspec) == PUNGraph: return CntUniqUndirEdges_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return CntUniqUndirEdges_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return CntUniqUndirEdges_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return CntUniqUndirEdges_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return CntUniqUndirEdges_PNEANetMP(tspec, *args)
    return None
def GetTriads(tspec, *args):
    if type(tspec) == PUNGraph: return GetTriads_PUNGraph(tspec, *args)
    if type(tspec) == PNGraph : return GetTriads_PNGraph(tspec, *args)
    if type(tspec) == PNEANet : return GetTriads_PNEANet(tspec, *args)
    if type(tspec) == PNGraphMP: return GetTriads_PNGraphMP(tspec, *args)
    if type(tspec) == PNEANetMP : return GetTriads_PNEANetMP(tspec, *args)
    return None

#
# BELOW INCLUDE disp-custom.py
#

def ConvertGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    return None
def ConvertSubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertSubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertSubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertSubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertSubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertSubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    return None
def ConvertESubGraph(toutspec, tinspec, *args):
    if toutspec == PUNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PUNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PUNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PUNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PUNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PUNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNGraph:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraph_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraph_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraph_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraph_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraph_PNEANetMP(tinspec, *args)
    if toutspec == PNEANet:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANet_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANet_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANet_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANet_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANet_PNEANetMP(tinspec, *args)
    if toutspec == PNGraphMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNGraphMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNGraphMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNGraphMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNGraphMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNGraphMP_PNEANetMP(tinspec, *args)
    if toutspec == PNEANetMP:
        if type(tinspec) == PUNGraph:
            return ConvertESubGraph_PNEANetMP_PUNGraph(tinspec, *args)
        if type(tinspec) == PNGraph:
            return ConvertESubGraph_PNEANetMP_PNGraph(tinspec, *args)
        if type(tinspec) == PNEANet:
            return ConvertESubGraph_PNEANetMP_PNEANet(tinspec, *args)
        if type(tinspec) == PNGraphMP:
            return ConvertESubGraph_PNEANetMP_PNGraphMP(tinspec, *args)
        if type(tinspec) == PNEANetMP:
            return ConvertESubGraph_PNEANetMP_PNEANetMP(tinspec, *args)
    return None
def ToNetwork(tspec, *args):
    if tspec == PNEANet : return ToNetwork_PNEANet(*args)
    return None
def ToGraph(tspec, *args):
    if tspec == PUNGraph: return ToGraph_PUNGraph(*args)
    if tspec == PNGraph : return ToGraph_PNGraph(*args)
    return None

#
# generators for nodes and edges
#

# iterate through all the nodes
def Nodes(self):
    NI = self.BegNI()
    while NI < self.EndNI():
        yield NI
        NI.Next()

# iterate through all the edges
def Edges(self):
    EI = self.BegEI()
    while EI < self.EndEI():
        yield EI
        EI.Next()

# iterate through out edges of a node
def GetOutEdges(self):
    for e in range(0, self.GetOutDeg()):
        yield self.GetOutNId(e)

# iterate through in edges of a node
def GetInEdges(self):
    for e in range(0, self.GetInDeg()):
        yield self.GetInNId(e)

#
# redefine some methods to use T... class not P... class
#

def Clr(self):
    self().Clr()

def Empty(self):
    return self().Empty()

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PNEANet.Nodes = Nodes
PNEANet.Edges = Edges
PNEANet.Clr = Clr
PNEANet.Empty = Empty
PNEANet.Save = Save

PUNGraph.Nodes = Nodes
PUNGraph.Edges = Edges
PUNGraph.Clr = Clr
PUNGraph.Empty = Empty
PUNGraph.Save = Save

PNGraph.Nodes = Nodes
PNGraph.Edges = Edges
PNGraph.Clr = Clr
PNGraph.Empty = Empty
PNGraph.Save = Save

PNGraphMP.Nodes = Nodes
PNGraphMP.Edges = Edges
PNGraphMP.Clr = Clr
PNGraphMP.Empty = Empty
PNGraphMP.Save = Save

PNEANetMP.Nodes = Nodes
PNEANetMP.Edges = Edges
PNEANetMP.Clr = Clr
PNEANetMP.Empty = Empty
PNEANetMP.Save = Save

TNGraphNodeI.GetOutEdges = GetOutEdges
TNGraphNodeI.GetInEdges = GetInEdges

TUNGraphNodeI.GetOutEdges = GetOutEdges
TUNGraphNodeI.GetInEdges = GetInEdges

TNEANetNodeI.GetOutEdges = GetOutEdges
TNEANetNodeI.GetInEdges = GetInEdges

TNGraphMPNodeI.GetOutEdges = GetOutEdges
TNGraphMPNodeI.GetInEdges = GetInEdges

TNEANetMPNodeI.GetOutEdges = GetOutEdges
TNEANetMPNodeI.GetInEdges = GetInEdges


class PTable(object):
    """Proxy of C++ TPt<(TTable)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def New():
        """New() -> PTable"""
        return _snap.PTable_New()

    New = staticmethod(New)
    __swig_destroy__ = _snap.delete_PTable
    def Save(self, *args):
        """
        Save(self, TSOut SOut)
        Parameters:
           self: TPt< TTable > const * value
           SOut: TSOut & value

           SOut: TSOut & value

        """
        return _snap.PTable_Save(self, *args)

    def __deref__(self):
        """
        __deref__(self) -> TTable
        Parameters:
           self: TPt< TTable > const * value




        """
        return _snap.PTable___deref__(self)

    def __ref__(self):
        """
        __ref__(self) -> TTable
        Parameters:
           self: TPt< TTable > const * value




        """
        return _snap.PTable___ref__(self)

    def __call__(self):
        """
        __call__(self) -> TTable
        Parameters:
           self: TPt< TTable > const * value




        """
        return _snap.PTable___call__(self)

    def Empty(self):
        """
        Empty(self) -> bool
        Parameters:
           self: TPt< TTable > const * value




        """
        return _snap.PTable_Empty(self)

    def Clr(self):
        """
        Clr(self)
        Parameters:
           self: TPt< TTable > * value




        """
        return _snap.PTable_Clr(self)

    def GetRefs(self):
        """
        GetRefs(self) -> int
        Parameters:
           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetRefs(self)

    def SetMP(self, *args):
        """
        SetMP(self, TInt Value)
        Parameters:
           Value: TInt value

           Value: TInt value

           Value: TInt value

           self: TPt< TTable > * value
           Value: TInt value

           Value: TInt value

        """
        return _snap.PTable_SetMP(self, *args)

    def GetMP(self):
        """
        GetMP(self) -> TInt
        Parameters:
           self: TPt< TTable > * value




        """
        return _snap.PTable_GetMP(self)

    def NormalizeColName(self, *args):
        """
        NormalizeColName(self, TStr ColName) -> TStr
        Parameters:
           ColName: TStr const & value

           ColName: TStr const & value

           ColName: TStr const & value

           self: TPt< TTable > * value
           ColName: TStr const & value

           ColName: TStr const & value

        """
        return _snap.PTable_NormalizeColName(self, *args)

    def NormalizeColNameV(self, *args):
        """
        NormalizeColNameV(self, TStrV Cols) -> TStrV
        Parameters:
           Cols: TStrV const & value

           Cols: TStrV const & value

           Cols: TStrV const & value

           self: TPt< TTable > * value
           Cols: TStrV const & value

           Cols: TStrV const & value

        """
        return _snap.PTable_NormalizeColNameV(self, *args)

    def GroupByIntColMP(self, *args):
        """
        GroupByIntColMP(self, TStr GroupBy, THashMP<(TInt,TIntV)> Grouping, TBool UsePhysicalIds = True)
        Parameters:
           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value
           UsePhysicalIds: TBool value

           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value
           UsePhysicalIds: TBool value

           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value
           UsePhysicalIds: TBool value

           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value
           UsePhysicalIds: TBool value

        GroupByIntColMP(self, TStr GroupBy, THashMP<(TInt,TIntV)> Grouping)
        Parameters:
           self: TTable const * value
           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value

           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value

           self: TPt< TTable > const * value
           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value

           GroupBy: TStr const & value
           Grouping: THashMP< TInt,TIntV > & value

        """
        return _snap.PTable_GroupByIntColMP(self, *args)

    def LoadSS(self, *args):
        """
        LoadSS(self, Schema S, TStr InFNm, TTableContext Context, char Separator = '\t', 
            TBool HasTitleLine = False) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value
           HasTitleLine: TBool value

        LoadSS(self, Schema S, TStr InFNm, TTableContext Context, char Separator = '\t') -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           Separator: char const & value

        LoadSS(self, Schema S, TStr InFNm, TTableContext Context) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value

        LoadSS(self, Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols, 
            char Separator = '\t', TBool HasTitleLine = False) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value
           HasTitleLine: TBool value

        LoadSS(self, Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols, 
            char Separator = '\t') -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value
           Separator: char const & value

        LoadSS(self, Schema S, TStr InFNm, TTableContext Context, TIntV RelevantCols) -> PTable
        Parameters:
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

           self: TPt< TTable > * value
           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

           S: Schema const & value
           InFNm: TStr const & value
           Context: TTableContext * value
           RelevantCols: TIntV const & value

        """
        return _snap.PTable_LoadSS(self, *args)

    def SaveSS(self, *args):
        """
        SaveSS(self, TStr OutFNm)
        Parameters:
           self: TTable * value
           OutFNm: TStr const & value

           OutFNm: TStr const & value

           self: TPt< TTable > * value
           OutFNm: TStr const & value

           OutFNm: TStr const & value

        """
        return _snap.PTable_SaveSS(self, *args)

    def SaveBin(self, *args):
        """
        SaveBin(self, TStr OutFNm)
        Parameters:
           self: TTable * value
           OutFNm: TStr const & value

           OutFNm: TStr const & value

           self: TPt< TTable > * value
           OutFNm: TStr const & value

           OutFNm: TStr const & value

        """
        return _snap.PTable_SaveBin(self, *args)

    def Load(self, *args):
        """
        Load(self, TSIn SIn, TTableContext Context) -> PTable
        Parameters:
           SIn: TSIn & value
           Context: TTableContext * value

           SIn: TSIn & value
           Context: TTableContext * value

           SIn: TSIn & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           SIn: TSIn & value
           Context: TTableContext * value

           SIn: TSIn & value
           Context: TTableContext * value

        """
        return _snap.PTable_Load(self, *args)

    def Dump(self, *args):
        """
        Dump(self, FILE OutF = stdout)
        Parameters:
           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

           OutF: FILE * value

        Dump(self)
        Parameters:
           self: TTable const * value


           self: TPt< TTable > const * value


        """
        return _snap.PTable_Dump(self, *args)

    def TableFromHashMap(self, *args):
        """
        TableFromHashMap(self, TIntH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> PTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        TableFromHashMap(self, TIntH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
        Parameters:
           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TInt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        TableFromHashMap(self, TIntFltH H, TStr Col1, TStr Col2, TTableContext Context, 
            TBool IsStrKeys = False) -> PTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value
           IsStrKeys: TBool const value

        TableFromHashMap(self, TIntFltH H, TStr Col1, TStr Col2, TTableContext Context) -> PTable
        Parameters:
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

           H: THash< TInt,TFlt > const & value
           Col1: TStr const & value
           Col2: TStr const & value
           Context: TTableContext * value

        """
        return _snap.PTable_TableFromHashMap(self, *args)

    def GetContext(self):
        """
        GetContext(self) -> TTableContext
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_GetContext(self)

    def ChangeContext(self, *args):
        """
        ChangeContext(self, TTableContext Context) -> TTableContext
        Parameters:
           self: TTable * value
           Context: TTableContext * value

           Context: TTableContext * value

           self: TPt< TTable > * value
           Context: TTableContext * value

           Context: TTableContext * value

        """
        return _snap.PTable_ChangeContext(self, *args)

    def GetColIdx(self, *args):
        """
        GetColIdx(self, TStr ColName) -> TInt
        Parameters:
           self: TTable const * value
           ColName: TStr const & value

           ColName: TStr const & value

           self: TPt< TTable > const * value
           ColName: TStr const & value

           ColName: TStr const & value

        """
        return _snap.PTable_GetColIdx(self, *args)

    def GetIntVal(self, *args):
        """
        GetIntVal(self, TStr ColName, TInt RowIdx) -> TInt
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           RowIdx: TInt const & value

           ColName: TStr const & value
           RowIdx: TInt const & value

           self: TPt< TTable > * value
           ColName: TStr const & value
           RowIdx: TInt const & value

           ColName: TStr const & value
           RowIdx: TInt const & value

        """
        return _snap.PTable_GetIntVal(self, *args)

    def GetFltVal(self, *args):
        """
        GetFltVal(self, TStr ColName, TInt RowIdx) -> TFlt
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           RowIdx: TInt const & value

           ColName: TStr const & value
           RowIdx: TInt const & value

           self: TPt< TTable > * value
           ColName: TStr const & value
           RowIdx: TInt const & value

           ColName: TStr const & value
           RowIdx: TInt const & value

        """
        return _snap.PTable_GetFltVal(self, *args)

    def GetStr(self, *args):
        """
        GetStr(self, TInt KeyId) -> TStr
        Parameters:
           self: TTable const * value
           KeyId: TInt const & value

           KeyId: TInt const & value

           self: TPt< TTable > const * value
           KeyId: TInt const & value

           KeyId: TInt const & value

        """
        return _snap.PTable_GetStr(self, *args)

    def GetIntValAtRowIdx(self, *args):
        """
        GetIntValAtRowIdx(self, TInt ColIdx, TInt RowIdx) -> TInt
        Parameters:
           self: TTable * value
           ColIdx: TInt const & value
           RowIdx: TInt const & value

           ColIdx: TInt const & value
           RowIdx: TInt const & value

           self: TPt< TTable > * value
           ColIdx: TInt const & value
           RowIdx: TInt const & value

           ColIdx: TInt const & value
           RowIdx: TInt const & value

        """
        return _snap.PTable_GetIntValAtRowIdx(self, *args)

    def GetFltValAtRowIdx(self, *args):
        """
        GetFltValAtRowIdx(self, TInt ColIdx, TInt RowIdx) -> TFlt
        Parameters:
           self: TTable * value
           ColIdx: TInt const & value
           RowIdx: TInt const & value

           ColIdx: TInt const & value
           RowIdx: TInt const & value

           self: TPt< TTable > * value
           ColIdx: TInt const & value
           RowIdx: TInt const & value

           ColIdx: TInt const & value
           RowIdx: TInt const & value

        """
        return _snap.PTable_GetFltValAtRowIdx(self, *args)

    def GetSchema(self):
        """
        GetSchema(self) -> Schema
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_GetSchema(self)

    def ToGraphSequence(self, *args):
        """
        ToGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn, TInt EndVal = Mx) -> PNEANetV
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

        ToGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn) -> PNEANetV
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

        ToGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize) -> PNEANetV
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           self: TPt< TTable > * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

        """
        return _snap.PTable_ToGraphSequence(self, *args)

    def ToVarGraphSequence(self, *args):
        """
        ToVarGraphSequence(self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPrV SplitIntervals) -> PNEANetV
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           self: TPt< TTable > * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

        """
        return _snap.PTable_ToVarGraphSequence(self, *args)

    def ToGraphPerGroup(self, *args):
        """
        ToGraphPerGroup(self, TStr GroupAttr, TAttrAggr AggrPolicy) -> PNEANetV
        Parameters:
           self: TTable * value
           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           self: TPt< TTable > * value
           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

        """
        return _snap.PTable_ToGraphPerGroup(self, *args)

    def ToGraphSequenceIterator(self, *args):
        """
        ToGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn, TInt EndVal = Mx) -> PNEANet
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value
           EndVal: TInt value

        ToGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize, TInt StartVal = Mn) -> PNEANet
        Parameters:
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value
           StartVal: TInt value

        ToGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TInt WindowSize, 
            TInt JumpSize) -> PNEANet
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           self: TPt< TTable > * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           WindowSize: TInt value
           JumpSize: TInt value

        """
        return _snap.PTable_ToGraphSequenceIterator(self, *args)

    def ToVarGraphSequenceIterator(self, *args):
        """
        ToVarGraphSequenceIterator(self, TStr SplitAttr, TAttrAggr AggrPolicy, TIntPrV SplitIntervals) -> PNEANet
        Parameters:
           self: TTable * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           self: TPt< TTable > * value
           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

           SplitAttr: TStr value
           AggrPolicy: enum TAttrAggr value
           SplitIntervals: TIntPrV value

        """
        return _snap.PTable_ToVarGraphSequenceIterator(self, *args)

    def ToGraphPerGroupIterator(self, *args):
        """
        ToGraphPerGroupIterator(self, TStr GroupAttr, TAttrAggr AggrPolicy) -> PNEANet
        Parameters:
           self: TTable * value
           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           self: TPt< TTable > * value
           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

           GroupAttr: TStr value
           AggrPolicy: enum TAttrAggr value

        """
        return _snap.PTable_ToGraphPerGroupIterator(self, *args)

    def NextGraphIterator(self):
        """
        NextGraphIterator(self) -> PNEANet
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_NextGraphIterator(self)

    def IsLastGraphOfSequence(self):
        """
        IsLastGraphOfSequence(self) -> TBool
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_IsLastGraphOfSequence(self)

    def GetSrcCol(self):
        """
        GetSrcCol(self) -> TStr
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetSrcCol(self)

    def SetSrcCol(self, *args):
        """
        SetSrcCol(self, TStr Src)
        Parameters:
           self: TTable * value
           Src: TStr const & value

           Src: TStr const & value

           self: TPt< TTable > * value
           Src: TStr const & value

           Src: TStr const & value

        """
        return _snap.PTable_SetSrcCol(self, *args)

    def GetDstCol(self):
        """
        GetDstCol(self) -> TStr
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetDstCol(self)

    def SetDstCol(self, *args):
        """
        SetDstCol(self, TStr Dst)
        Parameters:
           self: TTable * value
           Dst: TStr const & value

           Dst: TStr const & value

           self: TPt< TTable > * value
           Dst: TStr const & value

           Dst: TStr const & value

        """
        return _snap.PTable_SetDstCol(self, *args)

    def AddEdgeAttr(self, *args):
        """
        AddEdgeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

        AddEdgeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

           self: TPt< TTable > * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.PTable_AddEdgeAttr(self, *args)

    def AddSrcNodeAttr(self, *args):
        """
        AddSrcNodeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

        AddSrcNodeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

           self: TPt< TTable > * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.PTable_AddSrcNodeAttr(self, *args)

    def AddDstNodeAttr(self, *args):
        """
        AddDstNodeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

        AddDstNodeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

           self: TPt< TTable > * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.PTable_AddDstNodeAttr(self, *args)

    def AddNodeAttr(self, *args):
        """
        AddNodeAttr(self, TStr Attr)
        Parameters:
           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

           Attr: TStr const & value

        AddNodeAttr(self, TStrV Attrs)
        Parameters:
           self: TTable * value
           Attrs: TStrV & value

           Attrs: TStrV & value

           self: TPt< TTable > * value
           Attrs: TStrV & value

           Attrs: TStrV & value

        """
        return _snap.PTable_AddNodeAttr(self, *args)

    def SetCommonNodeAttrs(self, *args):
        """
        SetCommonNodeAttrs(self, TStr SrcAttr, TStr DstAttr, TStr CommonAttrName)
        Parameters:
           self: TTable * value
           SrcAttr: TStr const & value
           DstAttr: TStr const & value
           CommonAttrName: TStr const & value

           SrcAttr: TStr const & value
           DstAttr: TStr const & value
           CommonAttrName: TStr const & value

           self: TPt< TTable > * value
           SrcAttr: TStr const & value
           DstAttr: TStr const & value
           CommonAttrName: TStr const & value

           SrcAttr: TStr const & value
           DstAttr: TStr const & value
           CommonAttrName: TStr const & value

        """
        return _snap.PTable_SetCommonNodeAttrs(self, *args)

    def GetSrcNodeIntAttrV(self):
        """
        GetSrcNodeIntAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetSrcNodeIntAttrV(self)

    def GetDstNodeIntAttrV(self):
        """
        GetDstNodeIntAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetDstNodeIntAttrV(self)

    def GetEdgeIntAttrV(self):
        """
        GetEdgeIntAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetEdgeIntAttrV(self)

    def GetSrcNodeFltAttrV(self):
        """
        GetSrcNodeFltAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetSrcNodeFltAttrV(self)

    def GetDstNodeFltAttrV(self):
        """
        GetDstNodeFltAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetDstNodeFltAttrV(self)

    def GetEdgeFltAttrV(self):
        """
        GetEdgeFltAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetEdgeFltAttrV(self)

    def GetSrcNodeStrAttrV(self):
        """
        GetSrcNodeStrAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetSrcNodeStrAttrV(self)

    def GetDstNodeStrAttrV(self):
        """
        GetDstNodeStrAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetDstNodeStrAttrV(self)

    def GetEdgeStrAttrV(self):
        """
        GetEdgeStrAttrV(self) -> TStrV
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetEdgeStrAttrV(self)

    def GetNodeTable(self, *args):
        """
        GetNodeTable(self, PNEANet Network, TTableContext Context) -> PTable
        Parameters:
           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

        """
        return _snap.PTable_GetNodeTable(self, *args)

    def GetEdgeTable(self, *args):
        """
        GetEdgeTable(self, PNEANet Network, TTableContext Context) -> PTable
        Parameters:
           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           Network: PNEANet const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Context: TTableContext * value

        """
        return _snap.PTable_GetEdgeTable(self, *args)

    def GetEdgeTablePN(self, *args):
        """
        GetEdgeTablePN(self, PNGraphMP Network, TTableContext Context) -> PTable
        Parameters:
           Network: PNGraphMP const & value
           Context: TTableContext * value

           Network: PNGraphMP const & value
           Context: TTableContext * value

           Network: PNGraphMP const & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           Network: PNGraphMP const & value
           Context: TTableContext * value

           Network: PNGraphMP const & value
           Context: TTableContext * value

        """
        return _snap.PTable_GetEdgeTablePN(self, *args)

    def GetFltNodePropertyTable(self, *args):
        """
        GetFltNodePropertyTable(self, PNEANet Network, TIntFltH Property, TStr NodeAttrName, 
             NodeAttrType, TStr PropertyAttrName, TTableContext Context) -> PTable
        Parameters:
           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

           Network: PNEANet const & value
           Property: TIntFltH const & value
           NodeAttrName: TStr const & value
           NodeAttrType: TAttrType const & value
           PropertyAttrName: TStr const & value
           Context: TTableContext * value

        """
        return _snap.PTable_GetFltNodePropertyTable(self, *args)

    def GetColType(self, *args):
        """
        GetColType(self, TStr ColName)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value

           ColName: TStr const & value

           self: TPt< TTable > const * value
           ColName: TStr const & value

           ColName: TStr const & value

        """
        return _snap.PTable_GetColType(self, *args)

    def GetNumRows(self):
        """
        GetNumRows(self) -> TInt
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetNumRows(self)

    def GetNumValidRows(self):
        """
        GetNumValidRows(self) -> TInt
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetNumValidRows(self)

    def GetRowIdMap(self):
        """
        GetRowIdMap(self) -> TIntH
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_GetRowIdMap(self)

    def BegRI(self):
        """
        BegRI(self) -> TRowIterator
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_BegRI(self)

    def EndRI(self):
        """
        EndRI(self) -> TRowIterator
        Parameters:
           self: TTable const * value




           self: TPt< TTable > const * value




        """
        return _snap.PTable_EndRI(self)

    def BegRIWR(self):
        """
        BegRIWR(self) -> TRowIteratorWithRemove
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_BegRIWR(self)

    def EndRIWR(self):
        """
        EndRIWR(self) -> TRowIteratorWithRemove
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_EndRIWR(self)

    def GetPartitionRanges(self, *args):
        """
        GetPartitionRanges(self, TIntPrV Partitions, TInt NumPartitions)
        Parameters:
           self: TTable const * value
           Partitions: TIntPrV & value
           NumPartitions: TInt value

           Partitions: TIntPrV & value
           NumPartitions: TInt value

           self: TPt< TTable > const * value
           Partitions: TIntPrV & value
           NumPartitions: TInt value

           Partitions: TIntPrV & value
           NumPartitions: TInt value

        """
        return _snap.PTable_GetPartitionRanges(self, *args)

    def Rename(self, *args):
        """
        Rename(self, TStr Column, TStr NewLabel)
        Parameters:
           self: TTable * value
           Column: TStr const & value
           NewLabel: TStr const & value

           Column: TStr const & value
           NewLabel: TStr const & value

           self: TPt< TTable > * value
           Column: TStr const & value
           NewLabel: TStr const & value

           Column: TStr const & value
           NewLabel: TStr const & value

        """
        return _snap.PTable_Rename(self, *args)

    def Unique(self, *args):
        """
        Unique(self, TStr Col)
        Parameters:
           Col: TStr const & value

           Col: TStr const & value

           Col: TStr const & value

           Col: TStr const & value

        Unique(self, TStrV Cols, TBool Ordered = True)
        Parameters:
           Cols: TStrV const & value
           Ordered: TBool value

           Cols: TStrV const & value
           Ordered: TBool value

           Cols: TStrV const & value
           Ordered: TBool value

           Cols: TStrV const & value
           Ordered: TBool value

        Unique(self, TStrV Cols)
        Parameters:
           self: TTable * value
           Cols: TStrV const & value

           Cols: TStrV const & value

           self: TPt< TTable > * value
           Cols: TStrV const & value

           Cols: TStrV const & value

        """
        return _snap.PTable_Unique(self, *args)

    def Select(self, *args):
        """
        Select(self, TPredicate Predicate, TIntV SelectedRows, TBool Remove = True)
        Parameters:
           Predicate: TPredicate & value
           SelectedRows: TIntV & value
           Remove: TBool value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value
           Remove: TBool value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value
           Remove: TBool value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value
           Remove: TBool value

        Select(self, TPredicate Predicate, TIntV SelectedRows)
        Parameters:
           Predicate: TPredicate & value
           SelectedRows: TIntV & value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value

           Predicate: TPredicate & value
           SelectedRows: TIntV & value

        Select(self, TPredicate Predicate)
        Parameters:
           self: TTable * value
           Predicate: TPredicate & value

           Predicate: TPredicate & value

           self: TPt< TTable > * value
           Predicate: TPredicate & value

           Predicate: TPredicate & value

        """
        return _snap.PTable_Select(self, *args)

    def Classify(self, *args):
        """
        Classify(self, TPredicate Predicate, TStr LabelName, TInt PositiveLabel = 1, 
            TInt NegativeLabel = 0)
        Parameters:
           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

        Classify(self, TPredicate Predicate, TStr LabelName, TInt PositiveLabel = 1)
        Parameters:
           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

        Classify(self, TPredicate Predicate, TStr LabelName)
        Parameters:
           self: TTable * value
           Predicate: TPredicate & value
           LabelName: TStr const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value

           self: TPt< TTable > * value
           Predicate: TPredicate & value
           LabelName: TStr const & value

           Predicate: TPredicate & value
           LabelName: TStr const & value

        """
        return _snap.PTable_Classify(self, *args)

    def SelectAtomic(self, *args):
        """
        SelectAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TIntV SelectedRows, 
            TBool Remove = True)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           Remove: TBool value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           Remove: TBool value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           Remove: TBool value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           Remove: TBool value

        SelectAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TIntV SelectedRows)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value

        SelectAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp)
        Parameters:
           self: TTable * value
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value

           self: TPt< TTable > * value
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value

        """
        return _snap.PTable_SelectAtomic(self, *args)

    def ClassifyAtomic(self, *args):
        """
        ClassifyAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, 
            TInt PositiveLabel = 1, TInt NegativeLabel = 0)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value
           NegativeLabel: TInt const & value

        ClassifyAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName, 
            TInt PositiveLabel = 1)
        Parameters:
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value
           PositiveLabel: TInt const & value

        ClassifyAtomic(self, TStr Col1, TStr Col2, TPredComp Cmp, TStr LabelName)
        Parameters:
           self: TTable * value
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value

           self: TPt< TTable > * value
           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value

           Col1: TStr const & value
           Col2: TStr const & value
           Cmp: enum TPredComp value
           LabelName: TStr const & value

        """
        return _snap.PTable_ClassifyAtomic(self, *args)

    def SelectAtomicConst(self, *args):
        """
        SelectAtomicConst(self, TStr Col, TPrimitive Val, TPredComp Cmp, TIntV SelectedRows, 
            PTable SelectedTable, TBool Remove = True, 
            TBool Table = True)
        Parameters:
           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value
           Table: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value
           Table: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value
           Table: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value
           Table: TBool value

        SelectAtomicConst(self, TStr Col, TPrimitive Val, TPredComp Cmp, TIntV SelectedRows, 
            PTable SelectedTable, TBool Remove = True)
        Parameters:
           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value
           Remove: TBool value

        SelectAtomicConst(self, TStr Col, TPrimitive Val, TPredComp Cmp, TIntV SelectedRows, 
            PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value

           self: TPt< TTable > * value
           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TPrimitive const & value
           Cmp: enum TPredComp value
           SelectedRows: TIntV & value
           SelectedTable: PTable & value

        """
        return _snap.PTable_SelectAtomicConst(self, *args)

    def SelectAtomicIntConst(self, *args):
        """
        SelectAtomicIntConst(self, TStr Col, TInt Val, TPredComp Cmp)
        Parameters:
           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value

        SelectAtomicIntConst(self, TStr Col, TInt Val, TPredComp Cmp, PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           self: TPt< TTable > * value
           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TInt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

        """
        return _snap.PTable_SelectAtomicIntConst(self, *args)

    def SelectAtomicStrConst(self, *args):
        """
        SelectAtomicStrConst(self, TStr Col, TStr Val, TPredComp Cmp)
        Parameters:
           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value

        SelectAtomicStrConst(self, TStr Col, TStr Val, TPredComp Cmp, PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           self: TPt< TTable > * value
           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TStr const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

        """
        return _snap.PTable_SelectAtomicStrConst(self, *args)

    def SelectAtomicFltConst(self, *args):
        """
        SelectAtomicFltConst(self, TStr Col, TFlt Val, TPredComp Cmp)
        Parameters:
           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value

           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value

        SelectAtomicFltConst(self, TStr Col, TFlt Val, TPredComp Cmp, PTable SelectedTable)
        Parameters:
           self: TTable * value
           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           self: TPt< TTable > * value
           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

           Col: TStr const & value
           Val: TFlt const & value
           Cmp: enum TPredComp value
           SelectedTable: PTable & value

        """
        return _snap.PTable_SelectAtomicFltConst(self, *args)

    def Group(self, *args):
        """
        Group(self, TStrV GroupBy, TStr GroupColName, TBool Ordered = True, 
            TBool UsePhysicalIds = True)
        Parameters:
           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value
           UsePhysicalIds: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value
           UsePhysicalIds: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value
           UsePhysicalIds: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value
           UsePhysicalIds: TBool value

        Group(self, TStrV GroupBy, TStr GroupColName, TBool Ordered = True)
        Parameters:
           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value
           Ordered: TBool value

        Group(self, TStrV GroupBy, TStr GroupColName)
        Parameters:
           self: TTable * value
           GroupBy: TStrV const & value
           GroupColName: TStr const & value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value

           self: TPt< TTable > * value
           GroupBy: TStrV const & value
           GroupColName: TStr const & value

           GroupBy: TStrV const & value
           GroupColName: TStr const & value

        """
        return _snap.PTable_Group(self, *args)

    def Count(self, *args):
        """
        Count(self, TStr CountColName, TStr Col)
        Parameters:
           self: TTable * value
           CountColName: TStr const & value
           Col: TStr const & value

           CountColName: TStr const & value
           Col: TStr const & value

           self: TPt< TTable > * value
           CountColName: TStr const & value
           Col: TStr const & value

           CountColName: TStr const & value
           Col: TStr const & value

        """
        return _snap.PTable_Count(self, *args)

    def Order(self, *args):
        """
        Order(self, TStrV OrderBy, TStr OrderColName = "", TBool ResetRankByMSC = False, 
            TBool Asc = True)
        Parameters:
           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value
           Asc: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value
           Asc: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value
           Asc: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value
           Asc: TBool value

        Order(self, TStrV OrderBy, TStr OrderColName = "", TBool ResetRankByMSC = False)
        Parameters:
           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value

           OrderBy: TStrV const & value
           OrderColName: TStr value
           ResetRankByMSC: TBool value

        Order(self, TStrV OrderBy, TStr OrderColName = "")
        Parameters:
           OrderBy: TStrV const & value
           OrderColName: TStr value

           OrderBy: TStrV const & value
           OrderColName: TStr value

           OrderBy: TStrV const & value
           OrderColName: TStr value

           OrderBy: TStrV const & value
           OrderColName: TStr value

        Order(self, TStrV OrderBy)
        Parameters:
           self: TTable * value
           OrderBy: TStrV const & value

           OrderBy: TStrV const & value

           self: TPt< TTable > * value
           OrderBy: TStrV const & value

           OrderBy: TStrV const & value

        """
        return _snap.PTable_Order(self, *args)

    def Aggregate(self, *args):
        """
        Aggregate(self, TStrV GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, 
            TStr ResAttr, TBool Ordered = True)
        Parameters:
           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value
           Ordered: TBool value

        Aggregate(self, TStrV GroupByAttrs, TAttrAggr AggOp, TStr ValAttr, 
            TStr ResAttr)
        Parameters:
           self: TTable * value
           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value

           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value

           self: TPt< TTable > * value
           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value

           GroupByAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ValAttr: TStr const & value
           ResAttr: TStr const & value

        """
        return _snap.PTable_Aggregate(self, *args)

    def AggregateCols(self, *args):
        """
        AggregateCols(self, TStrV AggrAttrs, TAttrAggr AggOp, TStr ResAttr)
        Parameters:
           self: TTable * value
           AggrAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ResAttr: TStr const & value

           AggrAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ResAttr: TStr const & value

           self: TPt< TTable > * value
           AggrAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ResAttr: TStr const & value

           AggrAttrs: TStrV const & value
           AggOp: enum TAttrAggr value
           ResAttr: TStr const & value

        """
        return _snap.PTable_AggregateCols(self, *args)

    def SpliceByGroup(self, *args):
        """
        SpliceByGroup(self, TStrV GroupByAttrs, TBool Ordered = True) -> TVec<(PTable)>
        Parameters:
           GroupByAttrs: TStrV const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           Ordered: TBool value

           GroupByAttrs: TStrV const & value
           Ordered: TBool value

        SpliceByGroup(self, TStrV GroupByAttrs) -> TVec<(PTable)>
        Parameters:
           self: TTable * value
           GroupByAttrs: TStrV const & value

           GroupByAttrs: TStrV const & value

           self: TPt< TTable > * value
           GroupByAttrs: TStrV const & value

           GroupByAttrs: TStrV const & value

        """
        return _snap.PTable_SpliceByGroup(self, *args)

    def Join(self, *args):
        """
        Join(self, TStr Col1, TTable Table, TStr Col2) -> PTable
        Parameters:
           Col1: TStr const & value
           Table: TTable const & value
           Col2: TStr const & value

           Col1: TStr const & value
           Table: TTable const & value
           Col2: TStr const & value

           Col1: TStr const & value
           Table: TTable const & value
           Col2: TStr const & value

           Col1: TStr const & value
           Table: TTable const & value
           Col2: TStr const & value

        Join(self, TStr Col1, PTable Table, TStr Col2) -> PTable
        Parameters:
           self: TTable * value
           Col1: TStr const & value
           Table: PTable const & value
           Col2: TStr const & value

           Col1: TStr const & value
           Table: PTable const & value
           Col2: TStr const & value

           self: TPt< TTable > * value
           Col1: TStr const & value
           Table: PTable const & value
           Col2: TStr const & value

           Col1: TStr const & value
           Table: PTable const & value
           Col2: TStr const & value

        """
        return _snap.PTable_Join(self, *args)

    def ThresholdJoin(self, *args):
        """
        ThresholdJoin(self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, 
            TStr JoinCol2, TInt Threshold, TBool PerJoinKey = False) -> PTable
        Parameters:
           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value
           PerJoinKey: TBool value

           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value
           PerJoinKey: TBool value

           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value
           PerJoinKey: TBool value

           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value
           PerJoinKey: TBool value

        ThresholdJoin(self, TStr KeyCol1, TStr JoinCol1, TTable Table, TStr KeyCol2, 
            TStr JoinCol2, TInt Threshold) -> PTable
        Parameters:
           self: TTable * value
           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value

           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value

           self: TPt< TTable > * value
           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value

           KeyCol1: TStr const & value
           JoinCol1: TStr const & value
           Table: TTable const & value
           KeyCol2: TStr const & value
           JoinCol2: TStr const & value
           Threshold: TInt value

        """
        return _snap.PTable_ThresholdJoin(self, *args)

    def SelfJoin(self, *args):
        """
        SelfJoin(self, TStr Col) -> PTable
        Parameters:
           self: TTable * value
           Col: TStr const & value

           Col: TStr const & value

           self: TPt< TTable > * value
           Col: TStr const & value

           Col: TStr const & value

        """
        return _snap.PTable_SelfJoin(self, *args)

    def SelfSimJoin(self, *args):
        """
        SelfSimJoin(self, TStrV Cols, TStr DistanceColName, TSimType SimType, 
            TFlt Threshold) -> PTable
        Parameters:
           self: TTable * value
           Cols: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           Cols: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           self: TPt< TTable > * value
           Cols: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           Cols: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        """
        return _snap.PTable_SelfSimJoin(self, *args)

    def SelfSimJoinPerGroup(self, *args):
        """
        SelfSimJoinPerGroup(self, TStr GroupAttr, TStr SimCol, TStr DistanceColName, 
            TSimType SimType, TFlt Threshold) -> PTable
        Parameters:
           GroupAttr: TStr const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           GroupAttr: TStr const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           GroupAttr: TStr const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           GroupAttr: TStr const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        SelfSimJoinPerGroup(self, TStrV GroupBy, TStr SimCol, TStr DistanceColName, TSimType SimType, 
            TFlt Threshold) -> PTable
        Parameters:
           self: TTable * value
           GroupBy: TStrV const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           GroupBy: TStrV const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           self: TPt< TTable > * value
           GroupBy: TStrV const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           GroupBy: TStrV const & value
           SimCol: TStr const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        """
        return _snap.PTable_SelfSimJoinPerGroup(self, *args)

    def SimJoin(self, *args):
        """
        SimJoin(self, TStrV Cols1, TTable Table, TStrV Cols2, TStr DistanceColName, 
            TSimType SimType, TFlt Threshold) -> PTable
        Parameters:
           self: TTable * value
           Cols1: TStrV const & value
           Table: TTable const & value
           Cols2: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           Cols1: TStrV const & value
           Table: TTable const & value
           Cols2: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           self: TPt< TTable > * value
           Cols1: TStrV const & value
           Table: TTable const & value
           Cols2: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

           Cols1: TStrV const & value
           Table: TTable const & value
           Cols2: TStrV const & value
           DistanceColName: TStr const & value
           SimType: TSimType const & value
           Threshold: TFlt const & value

        """
        return _snap.PTable_SimJoin(self, *args)

    def SelectFirstNRows(self, *args):
        """
        SelectFirstNRows(self, TInt N)
        Parameters:
           self: TTable * value
           N: TInt const & value

           N: TInt const & value

           self: TPt< TTable > * value
           N: TInt const & value

           N: TInt const & value

        """
        return _snap.PTable_SelectFirstNRows(self, *args)

    def Defrag(self):
        """
        Defrag(self)
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_Defrag(self)

    def StoreIntCol(self, *args):
        """
        StoreIntCol(self, TStr ColName, TIntV ColVals)
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           ColVals: TIntV const & value

           ColName: TStr const & value
           ColVals: TIntV const & value

           self: TPt< TTable > * value
           ColName: TStr const & value
           ColVals: TIntV const & value

           ColName: TStr const & value
           ColVals: TIntV const & value

        """
        return _snap.PTable_StoreIntCol(self, *args)

    def StoreFltCol(self, *args):
        """
        StoreFltCol(self, TStr ColName, TFltV ColVals)
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           ColVals: TFltV const & value

           ColName: TStr const & value
           ColVals: TFltV const & value

           self: TPt< TTable > * value
           ColName: TStr const & value
           ColVals: TFltV const & value

           ColName: TStr const & value
           ColVals: TFltV const & value

        """
        return _snap.PTable_StoreFltCol(self, *args)

    def StoreStrCol(self, *args):
        """
        StoreStrCol(self, TStr ColName, TStrV ColVals)
        Parameters:
           self: TTable * value
           ColName: TStr const & value
           ColVals: TStrV const & value

           ColName: TStr const & value
           ColVals: TStrV const & value

           self: TPt< TTable > * value
           ColName: TStr const & value
           ColVals: TStrV const & value

           ColName: TStr const & value
           ColVals: TStrV const & value

        """
        return _snap.PTable_StoreStrCol(self, *args)

    def UpdateFltFromTable(self, *args):
        """
        UpdateFltFromTable(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr, TFlt DefaultFltVal = 0.0)
        Parameters:
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

        UpdateFltFromTable(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr)
        Parameters:
           self: TTable * value
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           self: TPt< TTable > * value
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

        """
        return _snap.PTable_UpdateFltFromTable(self, *args)

    def UpdateFltFromTableMP(self, *args):
        """
        UpdateFltFromTableMP(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr, TFlt DefaultFltVal = 0.0)
        Parameters:
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value
           DefaultFltVal: TFlt value

        UpdateFltFromTableMP(self, TStr KeyAttr, TStr UpdateAttr, TTable Table, TStr FKeyAttr, 
            TStr ReadAttr)
        Parameters:
           self: TTable * value
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           self: TPt< TTable > * value
           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

           KeyAttr: TStr const & value
           UpdateAttr: TStr const & value
           Table: TTable const & value
           FKeyAttr: TStr const & value
           ReadAttr: TStr const & value

        """
        return _snap.PTable_UpdateFltFromTableMP(self, *args)

    def SetFltColToConstMP(self, *args):
        """
        SetFltColToConstMP(self, TInt UpdateColIdx, TFlt DefaultFltVal)
        Parameters:
           self: TTable * value
           UpdateColIdx: TInt value
           DefaultFltVal: TFlt value

           UpdateColIdx: TInt value
           DefaultFltVal: TFlt value

           self: TPt< TTable > * value
           UpdateColIdx: TInt value
           DefaultFltVal: TFlt value

           UpdateColIdx: TInt value
           DefaultFltVal: TFlt value

        """
        return _snap.PTable_SetFltColToConstMP(self, *args)

    def Union(self, *args):
        """
        Union(self, TTable Table) -> PTable
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

        Union(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

           self: TPt< TTable > * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.PTable_Union(self, *args)

    def UnionAll(self, *args):
        """
        UnionAll(self, TTable Table) -> PTable
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

        UnionAll(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

           self: TPt< TTable > * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.PTable_UnionAll(self, *args)

    def UnionAllInPlace(self, *args):
        """
        UnionAllInPlace(self, TTable Table)
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

        UnionAllInPlace(self, PTable Table)
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

           self: TPt< TTable > * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.PTable_UnionAllInPlace(self, *args)

    def Intersection(self, *args):
        """
        Intersection(self, TTable Table) -> PTable
        Parameters:
           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

           Table: TTable const & value

        Intersection(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

           self: TPt< TTable > * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.PTable_Intersection(self, *args)

    def Minus(self, *args):
        """
        Minus(self, TTable Table) -> PTable
        Parameters:
           Table: TTable & value

           Table: TTable & value

           Table: TTable & value

           Table: TTable & value

        Minus(self, PTable Table) -> PTable
        Parameters:
           self: TTable * value
           Table: PTable const & value

           Table: PTable const & value

           self: TPt< TTable > * value
           Table: PTable const & value

           Table: PTable const & value

        """
        return _snap.PTable_Minus(self, *args)

    def Project(self, *args):
        """
        Project(self, TStrV ProjectCols) -> PTable
        Parameters:
           self: TTable * value
           ProjectCols: TStrV const & value

           ProjectCols: TStrV const & value

           self: TPt< TTable > * value
           ProjectCols: TStrV const & value

           ProjectCols: TStrV const & value

        """
        return _snap.PTable_Project(self, *args)

    def ProjectInPlace(self, *args):
        """
        ProjectInPlace(self, TStrV ProjectCols)
        Parameters:
           self: TTable * value
           ProjectCols: TStrV const & value

           ProjectCols: TStrV const & value

           self: TPt< TTable > * value
           ProjectCols: TStrV const & value

           ProjectCols: TStrV const & value

        """
        return _snap.PTable_ProjectInPlace(self, *args)

    def ColGenericOp(self, *args):
        """
        ColGenericOp(self, TStr Attr1, TStr Attr2, TStr ResAttr, TArithOp op)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value

        ColGenericOp(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr, 
            TArithOp op, TBool AddToFirstTable)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           AddToFirstTable: TBool value

        ColGenericOp(self, TStr Attr1, TFlt Num, TStr ResAttr, TArithOp op, TBool floatCast)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           floatCast: TBool const value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Num: TFlt const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResAttr: TStr const & value
           op: enum TArithOp value
           floatCast: TBool const value

        """
        return _snap.PTable_ColGenericOp(self, *args)

    def ColGenericOpMP(self, *args):
        """
        ColGenericOpMP(self, TInt ArgColIdx1, TInt ArgColIdx2,  ArgType1,  ArgType2, 
            TInt ResColIdx, TArithOp op)
        Parameters:
           ArgColIdx1: TInt value
           ArgColIdx2: TInt value
           ArgType1: enum TAttrType value
           ArgType2: enum TAttrType value
           ResColIdx: TInt value
           op: enum TArithOp value

           ArgColIdx1: TInt value
           ArgColIdx2: TInt value
           ArgType1: enum TAttrType value
           ArgType2: enum TAttrType value
           ResColIdx: TInt value
           op: enum TArithOp value

           ArgColIdx1: TInt value
           ArgColIdx2: TInt value
           ArgType1: enum TAttrType value
           ArgType2: enum TAttrType value
           ResColIdx: TInt value
           op: enum TArithOp value

           ArgColIdx1: TInt value
           ArgColIdx2: TInt value
           ArgType1: enum TAttrType value
           ArgType2: enum TAttrType value
           ResColIdx: TInt value
           op: enum TArithOp value

        ColGenericOpMP(self, TInt ColIdx1, TInt ColIdx2,  ArgType, TFlt Num, TArithOp op, 
            TBool ShouldCast)
        Parameters:
           self: TTable * value
           ColIdx1: TInt const & value
           ColIdx2: TInt const & value
           ArgType: enum TAttrType value
           Num: TFlt const & value
           op: enum TArithOp value
           ShouldCast: TBool value

           ColIdx1: TInt const & value
           ColIdx2: TInt const & value
           ArgType: enum TAttrType value
           Num: TFlt const & value
           op: enum TArithOp value
           ShouldCast: TBool value

           self: TPt< TTable > * value
           ColIdx1: TInt const & value
           ColIdx2: TInt const & value
           ArgType: enum TAttrType value
           Num: TFlt const & value
           op: enum TArithOp value
           ShouldCast: TBool value

           ColIdx1: TInt const & value
           ColIdx2: TInt const & value
           ArgType: enum TAttrType value
           Num: TFlt const & value
           op: enum TArithOp value
           ShouldCast: TBool value

        """
        return _snap.PTable_ColGenericOpMP(self, *args)

    def ColAdd(self, *args):
        """
        ColAdd(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColAdd(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColAdd(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColAdd(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColAdd(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColAdd(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColAdd(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColAdd(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.PTable_ColAdd(self, *args)

    def ColSub(self, *args):
        """
        ColSub(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColSub(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColSub(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColSub(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColSub(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColSub(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColSub(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColSub(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.PTable_ColSub(self, *args)

    def ColMul(self, *args):
        """
        ColMul(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMul(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColMul(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColMul(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColMul(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColMul(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColMul(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColMul(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.PTable_ColMul(self, *args)

    def ColDiv(self, *args):
        """
        ColDiv(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColDiv(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColDiv(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColDiv(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColDiv(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColDiv(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColDiv(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColDiv(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.PTable_ColDiv(self, *args)

    def ColMod(self, *args):
        """
        ColMod(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMod(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColMod(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "", 
            TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColMod(self, TStr Attr1, TTable Table, TStr Attr2, TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           ResAttr: TStr const & value

        ColMod(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        ColMod(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "", TBool floatCast = False)
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value
           floatCast: TBool const value

        ColMod(self, TStr Attr1, TFlt Num, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Num: TFlt const & value
           ResultAttrName: TStr const & value

        ColMod(self, TStr Attr1, TFlt Num)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Num: TFlt const & value

           Attr1: TStr const & value
           Num: TFlt const & value

        """
        return _snap.PTable_ColMod(self, *args)

    def ColMin(self, *args):
        """
        ColMin(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMin(self, TStr Attr1, TStr Attr2)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        """
        return _snap.PTable_ColMin(self, *args)

    def ColMax(self, *args):
        """
        ColMax(self, TStr Attr1, TStr Attr2, TStr ResultAttrName = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           ResultAttrName: TStr const & value

        ColMax(self, TStr Attr1, TStr Attr2)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        """
        return _snap.PTable_ColMax(self, *args)

    def ColConcat(self, *args):
        """
        ColConcat(self, TStr Attr1, TStr Attr2, TStr Sep = "", TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

        ColConcat(self, TStr Attr1, TStr Attr2, TStr Sep = "")
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value
           Sep: TStr const & value

        ColConcat(self, TStr Attr1, TStr Attr2)
        Parameters:
           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Attr2: TStr const & value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep = "", 
            TStr ResAttr = "", TBool AddToFirstTable = True)
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value
           AddToFirstTable: TBool value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep = "", 
            TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2, TStr Sep = "")
        Parameters:
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value
           Sep: TStr const & value

        ColConcat(self, TStr Attr1, TTable Table, TStr Attr2)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

           Attr1: TStr const & value
           Table: TTable & value
           Attr2: TStr const & value

        """
        return _snap.PTable_ColConcat(self, *args)

    def ColConcatConst(self, *args):
        """
        ColConcatConst(self, TStr Attr1, TStr Val, TStr Sep = "", TStr ResAttr = "")
        Parameters:
           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value
           ResAttr: TStr const & value

        ColConcatConst(self, TStr Attr1, TStr Val, TStr Sep = "")
        Parameters:
           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value
           Sep: TStr const & value

        ColConcatConst(self, TStr Attr1, TStr Val)
        Parameters:
           self: TTable * value
           Attr1: TStr const & value
           Val: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value

           self: TPt< TTable > * value
           Attr1: TStr const & value
           Val: TStr const & value

           Attr1: TStr const & value
           Val: TStr const & value

        """
        return _snap.PTable_ColConcatConst(self, *args)

    def ReadIntCol(self, *args):
        """
        ReadIntCol(self, TStr ColName, TIntV Result)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value
           Result: TIntV & value

           ColName: TStr const & value
           Result: TIntV & value

           self: TPt< TTable > const * value
           ColName: TStr const & value
           Result: TIntV & value

           ColName: TStr const & value
           Result: TIntV & value

        """
        return _snap.PTable_ReadIntCol(self, *args)

    def ReadFltCol(self, *args):
        """
        ReadFltCol(self, TStr ColName, TFltV Result)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value
           Result: TFltV & value

           ColName: TStr const & value
           Result: TFltV & value

           self: TPt< TTable > const * value
           ColName: TStr const & value
           Result: TFltV & value

           ColName: TStr const & value
           Result: TFltV & value

        """
        return _snap.PTable_ReadFltCol(self, *args)

    def ReadStrCol(self, *args):
        """
        ReadStrCol(self, TStr ColName, TStrV Result)
        Parameters:
           self: TTable const * value
           ColName: TStr const & value
           Result: TStrV & value

           ColName: TStr const & value
           Result: TStrV & value

           self: TPt< TTable > const * value
           ColName: TStr const & value
           Result: TStrV & value

           ColName: TStr const & value
           Result: TStrV & value

        """
        return _snap.PTable_ReadStrCol(self, *args)

    def InitIds(self):
        """
        InitIds(self)
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_InitIds(self)

    def IsNextK(self, *args):
        """
        IsNextK(self, TStr OrderCol, TInt K, TStr GroupBy, TStr RankColName = "") -> PTable
        Parameters:
           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value
           RankColName: TStr const & value

           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value
           RankColName: TStr const & value

           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value
           RankColName: TStr const & value

           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value
           RankColName: TStr const & value

        IsNextK(self, TStr OrderCol, TInt K, TStr GroupBy) -> PTable
        Parameters:
           self: TTable * value
           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value

           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value

           self: TPt< TTable > * value
           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value

           OrderCol: TStr const & value
           K: TInt value
           GroupBy: TStr const & value

        """
        return _snap.PTable_IsNextK(self, *args)

    def GetMapPageRank(self, *args):
        """
        GetMapPageRank(self, PNEANetV GraphSeq, TTableContext Context, double C = 0.85, 
            double Eps = 1e-4, int MaxIter = 100) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value
           MaxIter: int const & value

        GetMapPageRank(self, PNEANetV GraphSeq, TTableContext Context, double C = 0.85, 
            double Eps = 1e-4) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value
           Eps: double const & value

        GetMapPageRank(self, PNEANetV GraphSeq, TTableContext Context, double C = 0.85) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           C: double const & value

        GetMapPageRank(self, PNEANetV GraphSeq, TTableContext Context) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

        """
        return _snap.PTable_GetMapPageRank(self, *args)

    def GetMapHitsIterator(self, *args):
        """
        GetMapHitsIterator(self, PNEANetV GraphSeq, TTableContext Context, int MaxIter = 20) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value
           MaxIter: int const & value

        GetMapHitsIterator(self, PNEANetV GraphSeq, TTableContext Context) -> TTableIterator
        Parameters:
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           self: TPt< TTable > * value
           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

           GraphSeq: TVec< PNEANet > const & value
           Context: TTableContext * value

        """
        return _snap.PTable_GetMapHitsIterator(self, *args)

    def PrintSize(self):
        """
        PrintSize(self)
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_PrintSize(self)

    def PrintContextSize(self):
        """
        PrintContextSize(self)
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_PrintContextSize(self)

    def GetMemUsedKB(self):
        """
        GetMemUsedKB(self) -> TSize
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_GetMemUsedKB(self)

    def GetContextMemUsedKB(self):
        """
        GetContextMemUsedKB(self) -> TSize
        Parameters:
           self: TTable * value




           self: TPt< TTable > * value




        """
        return _snap.PTable_GetContextMemUsedKB(self)

PTable.Save = new_instancemethod(_snap.PTable_Save,None,PTable)
PTable.__deref__ = new_instancemethod(_snap.PTable___deref__,None,PTable)
PTable.__ref__ = new_instancemethod(_snap.PTable___ref__,None,PTable)
PTable.__call__ = new_instancemethod(_snap.PTable___call__,None,PTable)
PTable.Empty = new_instancemethod(_snap.PTable_Empty,None,PTable)
PTable.Clr = new_instancemethod(_snap.PTable_Clr,None,PTable)
PTable.GetRefs = new_instancemethod(_snap.PTable_GetRefs,None,PTable)
PTable.SetMP = new_instancemethod(_snap.PTable_SetMP,None,PTable)
PTable.GetMP = new_instancemethod(_snap.PTable_GetMP,None,PTable)
PTable.NormalizeColName = new_instancemethod(_snap.PTable_NormalizeColName,None,PTable)
PTable.NormalizeColNameV = new_instancemethod(_snap.PTable_NormalizeColNameV,None,PTable)
PTable.GroupByIntColMP = new_instancemethod(_snap.PTable_GroupByIntColMP,None,PTable)
PTable.LoadSS = new_instancemethod(_snap.PTable_LoadSS,None,PTable)
PTable.SaveSS = new_instancemethod(_snap.PTable_SaveSS,None,PTable)
PTable.SaveBin = new_instancemethod(_snap.PTable_SaveBin,None,PTable)
PTable.Load = new_instancemethod(_snap.PTable_Load,None,PTable)
PTable.Dump = new_instancemethod(_snap.PTable_Dump,None,PTable)
PTable.TableFromHashMap = new_instancemethod(_snap.PTable_TableFromHashMap,None,PTable)
PTable.GetContext = new_instancemethod(_snap.PTable_GetContext,None,PTable)
PTable.ChangeContext = new_instancemethod(_snap.PTable_ChangeContext,None,PTable)
PTable.GetColIdx = new_instancemethod(_snap.PTable_GetColIdx,None,PTable)
PTable.GetIntVal = new_instancemethod(_snap.PTable_GetIntVal,None,PTable)
PTable.GetFltVal = new_instancemethod(_snap.PTable_GetFltVal,None,PTable)
PTable.GetStr = new_instancemethod(_snap.PTable_GetStr,None,PTable)
PTable.GetIntValAtRowIdx = new_instancemethod(_snap.PTable_GetIntValAtRowIdx,None,PTable)
PTable.GetFltValAtRowIdx = new_instancemethod(_snap.PTable_GetFltValAtRowIdx,None,PTable)
PTable.GetSchema = new_instancemethod(_snap.PTable_GetSchema,None,PTable)
PTable.ToGraphSequence = new_instancemethod(_snap.PTable_ToGraphSequence,None,PTable)
PTable.ToVarGraphSequence = new_instancemethod(_snap.PTable_ToVarGraphSequence,None,PTable)
PTable.ToGraphPerGroup = new_instancemethod(_snap.PTable_ToGraphPerGroup,None,PTable)
PTable.ToGraphSequenceIterator = new_instancemethod(_snap.PTable_ToGraphSequenceIterator,None,PTable)
PTable.ToVarGraphSequenceIterator = new_instancemethod(_snap.PTable_ToVarGraphSequenceIterator,None,PTable)
PTable.ToGraphPerGroupIterator = new_instancemethod(_snap.PTable_ToGraphPerGroupIterator,None,PTable)
PTable.NextGraphIterator = new_instancemethod(_snap.PTable_NextGraphIterator,None,PTable)
PTable.IsLastGraphOfSequence = new_instancemethod(_snap.PTable_IsLastGraphOfSequence,None,PTable)
PTable.GetSrcCol = new_instancemethod(_snap.PTable_GetSrcCol,None,PTable)
PTable.SetSrcCol = new_instancemethod(_snap.PTable_SetSrcCol,None,PTable)
PTable.GetDstCol = new_instancemethod(_snap.PTable_GetDstCol,None,PTable)
PTable.SetDstCol = new_instancemethod(_snap.PTable_SetDstCol,None,PTable)
PTable.AddEdgeAttr = new_instancemethod(_snap.PTable_AddEdgeAttr,None,PTable)
PTable.AddSrcNodeAttr = new_instancemethod(_snap.PTable_AddSrcNodeAttr,None,PTable)
PTable.AddDstNodeAttr = new_instancemethod(_snap.PTable_AddDstNodeAttr,None,PTable)
PTable.AddNodeAttr = new_instancemethod(_snap.PTable_AddNodeAttr,None,PTable)
PTable.SetCommonNodeAttrs = new_instancemethod(_snap.PTable_SetCommonNodeAttrs,None,PTable)
PTable.GetSrcNodeIntAttrV = new_instancemethod(_snap.PTable_GetSrcNodeIntAttrV,None,PTable)
PTable.GetDstNodeIntAttrV = new_instancemethod(_snap.PTable_GetDstNodeIntAttrV,None,PTable)
PTable.GetEdgeIntAttrV = new_instancemethod(_snap.PTable_GetEdgeIntAttrV,None,PTable)
PTable.GetSrcNodeFltAttrV = new_instancemethod(_snap.PTable_GetSrcNodeFltAttrV,None,PTable)
PTable.GetDstNodeFltAttrV = new_instancemethod(_snap.PTable_GetDstNodeFltAttrV,None,PTable)
PTable.GetEdgeFltAttrV = new_instancemethod(_snap.PTable_GetEdgeFltAttrV,None,PTable)
PTable.GetSrcNodeStrAttrV = new_instancemethod(_snap.PTable_GetSrcNodeStrAttrV,None,PTable)
PTable.GetDstNodeStrAttrV = new_instancemethod(_snap.PTable_GetDstNodeStrAttrV,None,PTable)
PTable.GetEdgeStrAttrV = new_instancemethod(_snap.PTable_GetEdgeStrAttrV,None,PTable)
PTable.GetNodeTable = new_instancemethod(_snap.PTable_GetNodeTable,None,PTable)
PTable.GetEdgeTable = new_instancemethod(_snap.PTable_GetEdgeTable,None,PTable)
PTable.GetEdgeTablePN = new_instancemethod(_snap.PTable_GetEdgeTablePN,None,PTable)
PTable.GetFltNodePropertyTable = new_instancemethod(_snap.PTable_GetFltNodePropertyTable,None,PTable)
PTable.GetColType = new_instancemethod(_snap.PTable_GetColType,None,PTable)
PTable.GetNumRows = new_instancemethod(_snap.PTable_GetNumRows,None,PTable)
PTable.GetNumValidRows = new_instancemethod(_snap.PTable_GetNumValidRows,None,PTable)
PTable.GetRowIdMap = new_instancemethod(_snap.PTable_GetRowIdMap,None,PTable)
PTable.BegRI = new_instancemethod(_snap.PTable_BegRI,None,PTable)
PTable.EndRI = new_instancemethod(_snap.PTable_EndRI,None,PTable)
PTable.BegRIWR = new_instancemethod(_snap.PTable_BegRIWR,None,PTable)
PTable.EndRIWR = new_instancemethod(_snap.PTable_EndRIWR,None,PTable)
PTable.GetPartitionRanges = new_instancemethod(_snap.PTable_GetPartitionRanges,None,PTable)
PTable.Rename = new_instancemethod(_snap.PTable_Rename,None,PTable)
PTable.Unique = new_instancemethod(_snap.PTable_Unique,None,PTable)
PTable.Select = new_instancemethod(_snap.PTable_Select,None,PTable)
PTable.Classify = new_instancemethod(_snap.PTable_Classify,None,PTable)
PTable.SelectAtomic = new_instancemethod(_snap.PTable_SelectAtomic,None,PTable)
PTable.ClassifyAtomic = new_instancemethod(_snap.PTable_ClassifyAtomic,None,PTable)
PTable.SelectAtomicConst = new_instancemethod(_snap.PTable_SelectAtomicConst,None,PTable)
PTable.SelectAtomicIntConst = new_instancemethod(_snap.PTable_SelectAtomicIntConst,None,PTable)
PTable.SelectAtomicStrConst = new_instancemethod(_snap.PTable_SelectAtomicStrConst,None,PTable)
PTable.SelectAtomicFltConst = new_instancemethod(_snap.PTable_SelectAtomicFltConst,None,PTable)
PTable.Group = new_instancemethod(_snap.PTable_Group,None,PTable)
PTable.Count = new_instancemethod(_snap.PTable_Count,None,PTable)
PTable.Order = new_instancemethod(_snap.PTable_Order,None,PTable)
PTable.Aggregate = new_instancemethod(_snap.PTable_Aggregate,None,PTable)
PTable.AggregateCols = new_instancemethod(_snap.PTable_AggregateCols,None,PTable)
PTable.SpliceByGroup = new_instancemethod(_snap.PTable_SpliceByGroup,None,PTable)
PTable.Join = new_instancemethod(_snap.PTable_Join,None,PTable)
PTable.ThresholdJoin = new_instancemethod(_snap.PTable_ThresholdJoin,None,PTable)
PTable.SelfJoin = new_instancemethod(_snap.PTable_SelfJoin,None,PTable)
PTable.SelfSimJoin = new_instancemethod(_snap.PTable_SelfSimJoin,None,PTable)
PTable.SelfSimJoinPerGroup = new_instancemethod(_snap.PTable_SelfSimJoinPerGroup,None,PTable)
PTable.SimJoin = new_instancemethod(_snap.PTable_SimJoin,None,PTable)
PTable.SelectFirstNRows = new_instancemethod(_snap.PTable_SelectFirstNRows,None,PTable)
PTable.Defrag = new_instancemethod(_snap.PTable_Defrag,None,PTable)
PTable.StoreIntCol = new_instancemethod(_snap.PTable_StoreIntCol,None,PTable)
PTable.StoreFltCol = new_instancemethod(_snap.PTable_StoreFltCol,None,PTable)
PTable.StoreStrCol = new_instancemethod(_snap.PTable_StoreStrCol,None,PTable)
PTable.UpdateFltFromTable = new_instancemethod(_snap.PTable_UpdateFltFromTable,None,PTable)
PTable.UpdateFltFromTableMP = new_instancemethod(_snap.PTable_UpdateFltFromTableMP,None,PTable)
PTable.SetFltColToConstMP = new_instancemethod(_snap.PTable_SetFltColToConstMP,None,PTable)
PTable.Union = new_instancemethod(_snap.PTable_Union,None,PTable)
PTable.UnionAll = new_instancemethod(_snap.PTable_UnionAll,None,PTable)
PTable.UnionAllInPlace = new_instancemethod(_snap.PTable_UnionAllInPlace,None,PTable)
PTable.Intersection = new_instancemethod(_snap.PTable_Intersection,None,PTable)
PTable.Minus = new_instancemethod(_snap.PTable_Minus,None,PTable)
PTable.Project = new_instancemethod(_snap.PTable_Project,None,PTable)
PTable.ProjectInPlace = new_instancemethod(_snap.PTable_ProjectInPlace,None,PTable)
PTable.ColGenericOp = new_instancemethod(_snap.PTable_ColGenericOp,None,PTable)
PTable.ColGenericOpMP = new_instancemethod(_snap.PTable_ColGenericOpMP,None,PTable)
PTable.ColAdd = new_instancemethod(_snap.PTable_ColAdd,None,PTable)
PTable.ColSub = new_instancemethod(_snap.PTable_ColSub,None,PTable)
PTable.ColMul = new_instancemethod(_snap.PTable_ColMul,None,PTable)
PTable.ColDiv = new_instancemethod(_snap.PTable_ColDiv,None,PTable)
PTable.ColMod = new_instancemethod(_snap.PTable_ColMod,None,PTable)
PTable.ColMin = new_instancemethod(_snap.PTable_ColMin,None,PTable)
PTable.ColMax = new_instancemethod(_snap.PTable_ColMax,None,PTable)
PTable.ColConcat = new_instancemethod(_snap.PTable_ColConcat,None,PTable)
PTable.ColConcatConst = new_instancemethod(_snap.PTable_ColConcatConst,None,PTable)
PTable.ReadIntCol = new_instancemethod(_snap.PTable_ReadIntCol,None,PTable)
PTable.ReadFltCol = new_instancemethod(_snap.PTable_ReadFltCol,None,PTable)
PTable.ReadStrCol = new_instancemethod(_snap.PTable_ReadStrCol,None,PTable)
PTable.InitIds = new_instancemethod(_snap.PTable_InitIds,None,PTable)
PTable.IsNextK = new_instancemethod(_snap.PTable_IsNextK,None,PTable)
PTable.GetMapPageRank = new_instancemethod(_snap.PTable_GetMapPageRank,None,PTable)
PTable.GetMapHitsIterator = new_instancemethod(_snap.PTable_GetMapHitsIterator,None,PTable)
PTable.PrintSize = new_instancemethod(_snap.PTable_PrintSize,None,PTable)
PTable.PrintContextSize = new_instancemethod(_snap.PTable_PrintContextSize,None,PTable)
PTable.GetMemUsedKB = new_instancemethod(_snap.PTable_GetMemUsedKB,None,PTable)
PTable.GetContextMemUsedKB = new_instancemethod(_snap.PTable_GetContextMemUsedKB,None,PTable)
PTable_swigregister = _snap.PTable_swigregister
PTable_swigregister(PTable)

def ToNetworkMP_PNEANetMP(*args):
  """
    ToNetworkMP_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TStrV SrcAttrs, 
        TStrV DstAttrs, TStrV EdgeAttrs, TAttrAggr AggrPolicy) -> PNEANetMP
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       SrcAttrs: TStrV & value
       DstAttrs: TStrV & value
       EdgeAttrs: TStrV & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       SrcAttrs: TStrV & value
       DstAttrs: TStrV & value
       EdgeAttrs: TStrV & value
       AggrPolicy: enum TAttrAggr value

    ToNetworkMP_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNEANetMP
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

    """
  return _snap.ToNetworkMP_PNEANetMP(*args)

def ToNetworkMP2_PNEANetMP(*args):
  """
    ToNetworkMP2_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TStrV SrcAttrs, 
        TStrV DstAttrs, TStrV EdgeAttrs, TAttrAggr AggrPolicy) -> PNEANetMP
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       SrcAttrs: TStrV & value
       DstAttrs: TStrV & value
       EdgeAttrs: TStrV & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       SrcAttrs: TStrV & value
       DstAttrs: TStrV & value
       EdgeAttrs: TStrV & value
       AggrPolicy: enum TAttrAggr value

    ToNetworkMP2_PNEANetMP(PTable Table, TStr SrcCol, TStr DstCol, TAttrAggr AggrPolicy) -> PNEANetMP
    Parameters:
       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

       Table: PTable value
       SrcCol: TStr const & value
       DstCol: TStr const & value
       AggrPolicy: enum TAttrAggr value

    """
  return _snap.ToNetworkMP2_PNEANetMP(*args)

def PTable_New():
  """PTable_New() -> PTable"""
  return _snap.PTable_New()

#
# redefine some methods to use T... class not P... class
#

def Save(self,*args):
    self().Save(*args)

#
# define generator and redirection methods
#

PTable.Save = Save




